// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"kratos-admin/app/admin/service/internal/data/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *UserUpdate) SetCreatedBy(v uint32) *UserUpdate {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *UserUpdate) SetNillableCreatedBy(v *uint32) *UserUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *UserUpdate) AddCreatedBy(v int32) *UserUpdate {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *UserUpdate) ClearCreatedBy() *UserUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *UserUpdate) SetUpdatedBy(v uint32) *UserUpdate {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *UserUpdate) SetNillableUpdatedBy(v *uint32) *UserUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *UserUpdate) AddUpdatedBy(v int32) *UserUpdate {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *UserUpdate) ClearUpdatedBy() *UserUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *UserUpdate) SetDeletedBy(v uint32) *UserUpdate {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDeletedBy(v *uint32) *UserUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *UserUpdate) AddDeletedBy(v int32) *UserUpdate {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *UserUpdate) ClearDeletedBy() *UserUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableUpdatedAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *UserUpdate) ClearUpdatedAt() *UserUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *UserUpdate) SetDeletedAt(v time.Time) *UserUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDeletedAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *UserUpdate) ClearDeletedAt() *UserUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *UserUpdate) SetRemark(v string) *UserUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *UserUpdate) SetNillableRemark(v *string) *UserUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *UserUpdate) ClearRemark() *UserUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetNickname sets the "nickname" field.
func (_u *UserUpdate) SetNickname(v string) *UserUpdate {
	_u.mutation.SetNickname(v)
	return _u
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_u *UserUpdate) SetNillableNickname(v *string) *UserUpdate {
	if v != nil {
		_u.SetNickname(*v)
	}
	return _u
}

// ClearNickname clears the value of the "nickname" field.
func (_u *UserUpdate) ClearNickname() *UserUpdate {
	_u.mutation.ClearNickname()
	return _u
}

// SetRealname sets the "realname" field.
func (_u *UserUpdate) SetRealname(v string) *UserUpdate {
	_u.mutation.SetRealname(v)
	return _u
}

// SetNillableRealname sets the "realname" field if the given value is not nil.
func (_u *UserUpdate) SetNillableRealname(v *string) *UserUpdate {
	if v != nil {
		_u.SetRealname(*v)
	}
	return _u
}

// ClearRealname clears the value of the "realname" field.
func (_u *UserUpdate) ClearRealname() *UserUpdate {
	_u.mutation.ClearRealname()
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *UserUpdate) ClearEmail() *UserUpdate {
	_u.mutation.ClearEmail()
	return _u
}

// SetMobile sets the "mobile" field.
func (_u *UserUpdate) SetMobile(v string) *UserUpdate {
	_u.mutation.SetMobile(v)
	return _u
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (_u *UserUpdate) SetNillableMobile(v *string) *UserUpdate {
	if v != nil {
		_u.SetMobile(*v)
	}
	return _u
}

// ClearMobile clears the value of the "mobile" field.
func (_u *UserUpdate) ClearMobile() *UserUpdate {
	_u.mutation.ClearMobile()
	return _u
}

// SetTelephone sets the "telephone" field.
func (_u *UserUpdate) SetTelephone(v string) *UserUpdate {
	_u.mutation.SetTelephone(v)
	return _u
}

// SetNillableTelephone sets the "telephone" field if the given value is not nil.
func (_u *UserUpdate) SetNillableTelephone(v *string) *UserUpdate {
	if v != nil {
		_u.SetTelephone(*v)
	}
	return _u
}

// ClearTelephone clears the value of the "telephone" field.
func (_u *UserUpdate) ClearTelephone() *UserUpdate {
	_u.mutation.ClearTelephone()
	return _u
}

// SetAvatar sets the "avatar" field.
func (_u *UserUpdate) SetAvatar(v string) *UserUpdate {
	_u.mutation.SetAvatar(v)
	return _u
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAvatar(v *string) *UserUpdate {
	if v != nil {
		_u.SetAvatar(*v)
	}
	return _u
}

// ClearAvatar clears the value of the "avatar" field.
func (_u *UserUpdate) ClearAvatar() *UserUpdate {
	_u.mutation.ClearAvatar()
	return _u
}

// SetAddress sets the "address" field.
func (_u *UserUpdate) SetAddress(v string) *UserUpdate {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAddress(v *string) *UserUpdate {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// ClearAddress clears the value of the "address" field.
func (_u *UserUpdate) ClearAddress() *UserUpdate {
	_u.mutation.ClearAddress()
	return _u
}

// SetRegion sets the "region" field.
func (_u *UserUpdate) SetRegion(v string) *UserUpdate {
	_u.mutation.SetRegion(v)
	return _u
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (_u *UserUpdate) SetNillableRegion(v *string) *UserUpdate {
	if v != nil {
		_u.SetRegion(*v)
	}
	return _u
}

// ClearRegion clears the value of the "region" field.
func (_u *UserUpdate) ClearRegion() *UserUpdate {
	_u.mutation.ClearRegion()
	return _u
}

// SetDescription sets the "description" field.
func (_u *UserUpdate) SetDescription(v string) *UserUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDescription(v *string) *UserUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *UserUpdate) ClearDescription() *UserUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetGender sets the "gender" field.
func (_u *UserUpdate) SetGender(v user.Gender) *UserUpdate {
	_u.mutation.SetGender(v)
	return _u
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_u *UserUpdate) SetNillableGender(v *user.Gender) *UserUpdate {
	if v != nil {
		_u.SetGender(*v)
	}
	return _u
}

// ClearGender clears the value of the "gender" field.
func (_u *UserUpdate) ClearGender() *UserUpdate {
	_u.mutation.ClearGender()
	return _u
}

// SetStatus sets the "status" field.
func (_u *UserUpdate) SetStatus(v user.Status) *UserUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *UserUpdate) SetNillableStatus(v *user.Status) *UserUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *UserUpdate) ClearStatus() *UserUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetLastLoginTime sets the "last_login_time" field.
func (_u *UserUpdate) SetLastLoginTime(v time.Time) *UserUpdate {
	_u.mutation.SetLastLoginTime(v)
	return _u
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastLoginTime(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetLastLoginTime(*v)
	}
	return _u
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (_u *UserUpdate) ClearLastLoginTime() *UserUpdate {
	_u.mutation.ClearLastLoginTime()
	return _u
}

// SetLastLoginIP sets the "last_login_ip" field.
func (_u *UserUpdate) SetLastLoginIP(v string) *UserUpdate {
	_u.mutation.SetLastLoginIP(v)
	return _u
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastLoginIP(v *string) *UserUpdate {
	if v != nil {
		_u.SetLastLoginIP(*v)
	}
	return _u
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (_u *UserUpdate) ClearLastLoginIP() *UserUpdate {
	_u.mutation.ClearLastLoginIP()
	return _u
}

// SetOrgID sets the "org_id" field.
func (_u *UserUpdate) SetOrgID(v uint32) *UserUpdate {
	_u.mutation.ResetOrgID()
	_u.mutation.SetOrgID(v)
	return _u
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (_u *UserUpdate) SetNillableOrgID(v *uint32) *UserUpdate {
	if v != nil {
		_u.SetOrgID(*v)
	}
	return _u
}

// AddOrgID adds value to the "org_id" field.
func (_u *UserUpdate) AddOrgID(v int32) *UserUpdate {
	_u.mutation.AddOrgID(v)
	return _u
}

// ClearOrgID clears the value of the "org_id" field.
func (_u *UserUpdate) ClearOrgID() *UserUpdate {
	_u.mutation.ClearOrgID()
	return _u
}

// SetDepartmentID sets the "department_id" field.
func (_u *UserUpdate) SetDepartmentID(v uint32) *UserUpdate {
	_u.mutation.ResetDepartmentID()
	_u.mutation.SetDepartmentID(v)
	return _u
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDepartmentID(v *uint32) *UserUpdate {
	if v != nil {
		_u.SetDepartmentID(*v)
	}
	return _u
}

// AddDepartmentID adds value to the "department_id" field.
func (_u *UserUpdate) AddDepartmentID(v int32) *UserUpdate {
	_u.mutation.AddDepartmentID(v)
	return _u
}

// ClearDepartmentID clears the value of the "department_id" field.
func (_u *UserUpdate) ClearDepartmentID() *UserUpdate {
	_u.mutation.ClearDepartmentID()
	return _u
}

// SetPositionID sets the "position_id" field.
func (_u *UserUpdate) SetPositionID(v uint32) *UserUpdate {
	_u.mutation.ResetPositionID()
	_u.mutation.SetPositionID(v)
	return _u
}

// SetNillablePositionID sets the "position_id" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePositionID(v *uint32) *UserUpdate {
	if v != nil {
		_u.SetPositionID(*v)
	}
	return _u
}

// AddPositionID adds value to the "position_id" field.
func (_u *UserUpdate) AddPositionID(v int32) *UserUpdate {
	_u.mutation.AddPositionID(v)
	return _u
}

// ClearPositionID clears the value of the "position_id" field.
func (_u *UserUpdate) ClearPositionID() *UserUpdate {
	_u.mutation.ClearPositionID()
	return _u
}

// SetWorkID sets the "work_id" field.
func (_u *UserUpdate) SetWorkID(v uint32) *UserUpdate {
	_u.mutation.ResetWorkID()
	_u.mutation.SetWorkID(v)
	return _u
}

// SetNillableWorkID sets the "work_id" field if the given value is not nil.
func (_u *UserUpdate) SetNillableWorkID(v *uint32) *UserUpdate {
	if v != nil {
		_u.SetWorkID(*v)
	}
	return _u
}

// AddWorkID adds value to the "work_id" field.
func (_u *UserUpdate) AddWorkID(v int32) *UserUpdate {
	_u.mutation.AddWorkID(v)
	return _u
}

// ClearWorkID clears the value of the "work_id" field.
func (_u *UserUpdate) ClearWorkID() *UserUpdate {
	_u.mutation.ClearWorkID()
	return _u
}

// SetRoleIds sets the "role_ids" field.
func (_u *UserUpdate) SetRoleIds(v []int) *UserUpdate {
	_u.mutation.SetRoleIds(v)
	return _u
}

// AppendRoleIds appends value to the "role_ids" field.
func (_u *UserUpdate) AppendRoleIds(v []int) *UserUpdate {
	_u.mutation.AppendRoleIds(v)
	return _u
}

// ClearRoleIds clears the value of the "role_ids" field.
func (_u *UserUpdate) ClearRoleIds() *UserUpdate {
	_u.mutation.ClearRoleIds()
	return _u
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if v, ok := _u.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Mobile(); ok {
		if err := user.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "User.mobile": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Telephone(); ok {
		if err := user.TelephoneValidator(v); err != nil {
			return &ValidationError{Name: "telephone", err: fmt.Errorf(`ent: validator failed for field "User.telephone": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := user.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "User.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "User.gender": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(user.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(user.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(user.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(user.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(user.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(user.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(user.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(user.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(user.FieldDeletedBy, field.TypeUint32)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(user.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(user.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(user.FieldTenantID, field.TypeUint32)
	}
	if _u.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := _u.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if _u.mutation.NicknameCleared() {
		_spec.ClearField(user.FieldNickname, field.TypeString)
	}
	if value, ok := _u.mutation.Realname(); ok {
		_spec.SetField(user.FieldRealname, field.TypeString, value)
	}
	if _u.mutation.RealnameCleared() {
		_spec.ClearField(user.FieldRealname, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
	}
	if _u.mutation.MobileCleared() {
		_spec.ClearField(user.FieldMobile, field.TypeString)
	}
	if value, ok := _u.mutation.Telephone(); ok {
		_spec.SetField(user.FieldTelephone, field.TypeString, value)
	}
	if _u.mutation.TelephoneCleared() {
		_spec.ClearField(user.FieldTelephone, field.TypeString)
	}
	if value, ok := _u.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if _u.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if _u.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := _u.mutation.Region(); ok {
		_spec.SetField(user.FieldRegion, field.TypeString, value)
	}
	if _u.mutation.RegionCleared() {
		_spec.ClearField(user.FieldRegion, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(user.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
	}
	if _u.mutation.GenderCleared() {
		_spec.ClearField(user.FieldGender, field.TypeEnum)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(user.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.LastLoginTime(); ok {
		_spec.SetField(user.FieldLastLoginTime, field.TypeTime, value)
	}
	if _u.mutation.LastLoginTimeCleared() {
		_spec.ClearField(user.FieldLastLoginTime, field.TypeTime)
	}
	if value, ok := _u.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
	}
	if _u.mutation.LastLoginIPCleared() {
		_spec.ClearField(user.FieldLastLoginIP, field.TypeString)
	}
	if value, ok := _u.mutation.OrgID(); ok {
		_spec.SetField(user.FieldOrgID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedOrgID(); ok {
		_spec.AddField(user.FieldOrgID, field.TypeUint32, value)
	}
	if _u.mutation.OrgIDCleared() {
		_spec.ClearField(user.FieldOrgID, field.TypeUint32)
	}
	if value, ok := _u.mutation.DepartmentID(); ok {
		_spec.SetField(user.FieldDepartmentID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDepartmentID(); ok {
		_spec.AddField(user.FieldDepartmentID, field.TypeUint32, value)
	}
	if _u.mutation.DepartmentIDCleared() {
		_spec.ClearField(user.FieldDepartmentID, field.TypeUint32)
	}
	if value, ok := _u.mutation.PositionID(); ok {
		_spec.SetField(user.FieldPositionID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedPositionID(); ok {
		_spec.AddField(user.FieldPositionID, field.TypeUint32, value)
	}
	if _u.mutation.PositionIDCleared() {
		_spec.ClearField(user.FieldPositionID, field.TypeUint32)
	}
	if value, ok := _u.mutation.WorkID(); ok {
		_spec.SetField(user.FieldWorkID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedWorkID(); ok {
		_spec.AddField(user.FieldWorkID, field.TypeUint32, value)
	}
	if _u.mutation.WorkIDCleared() {
		_spec.ClearField(user.FieldWorkID, field.TypeUint32)
	}
	if value, ok := _u.mutation.RoleIds(); ok {
		_spec.SetField(user.FieldRoleIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRoleIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldRoleIds, value)
		})
	}
	if _u.mutation.RoleIdsCleared() {
		_spec.ClearField(user.FieldRoleIds, field.TypeJSON)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (_u *UserUpdateOne) SetCreatedBy(v uint32) *UserUpdateOne {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableCreatedBy(v *uint32) *UserUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *UserUpdateOne) AddCreatedBy(v int32) *UserUpdateOne {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *UserUpdateOne) ClearCreatedBy() *UserUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *UserUpdateOne) SetUpdatedBy(v uint32) *UserUpdateOne {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableUpdatedBy(v *uint32) *UserUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *UserUpdateOne) AddUpdatedBy(v int32) *UserUpdateOne {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *UserUpdateOne) ClearUpdatedBy() *UserUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *UserUpdateOne) SetDeletedBy(v uint32) *UserUpdateOne {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDeletedBy(v *uint32) *UserUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *UserUpdateOne) AddDeletedBy(v int32) *UserUpdateOne {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *UserUpdateOne) ClearDeletedBy() *UserUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableUpdatedAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *UserUpdateOne) SetDeletedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDeletedAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *UserUpdateOne) SetRemark(v string) *UserUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableRemark(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *UserUpdateOne) ClearRemark() *UserUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetNickname sets the "nickname" field.
func (_u *UserUpdateOne) SetNickname(v string) *UserUpdateOne {
	_u.mutation.SetNickname(v)
	return _u
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableNickname(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetNickname(*v)
	}
	return _u
}

// ClearNickname clears the value of the "nickname" field.
func (_u *UserUpdateOne) ClearNickname() *UserUpdateOne {
	_u.mutation.ClearNickname()
	return _u
}

// SetRealname sets the "realname" field.
func (_u *UserUpdateOne) SetRealname(v string) *UserUpdateOne {
	_u.mutation.SetRealname(v)
	return _u
}

// SetNillableRealname sets the "realname" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableRealname(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetRealname(*v)
	}
	return _u
}

// ClearRealname clears the value of the "realname" field.
func (_u *UserUpdateOne) ClearRealname() *UserUpdateOne {
	_u.mutation.ClearRealname()
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *UserUpdateOne) ClearEmail() *UserUpdateOne {
	_u.mutation.ClearEmail()
	return _u
}

// SetMobile sets the "mobile" field.
func (_u *UserUpdateOne) SetMobile(v string) *UserUpdateOne {
	_u.mutation.SetMobile(v)
	return _u
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableMobile(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetMobile(*v)
	}
	return _u
}

// ClearMobile clears the value of the "mobile" field.
func (_u *UserUpdateOne) ClearMobile() *UserUpdateOne {
	_u.mutation.ClearMobile()
	return _u
}

// SetTelephone sets the "telephone" field.
func (_u *UserUpdateOne) SetTelephone(v string) *UserUpdateOne {
	_u.mutation.SetTelephone(v)
	return _u
}

// SetNillableTelephone sets the "telephone" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableTelephone(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetTelephone(*v)
	}
	return _u
}

// ClearTelephone clears the value of the "telephone" field.
func (_u *UserUpdateOne) ClearTelephone() *UserUpdateOne {
	_u.mutation.ClearTelephone()
	return _u
}

// SetAvatar sets the "avatar" field.
func (_u *UserUpdateOne) SetAvatar(v string) *UserUpdateOne {
	_u.mutation.SetAvatar(v)
	return _u
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAvatar(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAvatar(*v)
	}
	return _u
}

// ClearAvatar clears the value of the "avatar" field.
func (_u *UserUpdateOne) ClearAvatar() *UserUpdateOne {
	_u.mutation.ClearAvatar()
	return _u
}

// SetAddress sets the "address" field.
func (_u *UserUpdateOne) SetAddress(v string) *UserUpdateOne {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAddress(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// ClearAddress clears the value of the "address" field.
func (_u *UserUpdateOne) ClearAddress() *UserUpdateOne {
	_u.mutation.ClearAddress()
	return _u
}

// SetRegion sets the "region" field.
func (_u *UserUpdateOne) SetRegion(v string) *UserUpdateOne {
	_u.mutation.SetRegion(v)
	return _u
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableRegion(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetRegion(*v)
	}
	return _u
}

// ClearRegion clears the value of the "region" field.
func (_u *UserUpdateOne) ClearRegion() *UserUpdateOne {
	_u.mutation.ClearRegion()
	return _u
}

// SetDescription sets the "description" field.
func (_u *UserUpdateOne) SetDescription(v string) *UserUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDescription(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *UserUpdateOne) ClearDescription() *UserUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetGender sets the "gender" field.
func (_u *UserUpdateOne) SetGender(v user.Gender) *UserUpdateOne {
	_u.mutation.SetGender(v)
	return _u
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableGender(v *user.Gender) *UserUpdateOne {
	if v != nil {
		_u.SetGender(*v)
	}
	return _u
}

// ClearGender clears the value of the "gender" field.
func (_u *UserUpdateOne) ClearGender() *UserUpdateOne {
	_u.mutation.ClearGender()
	return _u
}

// SetStatus sets the "status" field.
func (_u *UserUpdateOne) SetStatus(v user.Status) *UserUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableStatus(v *user.Status) *UserUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *UserUpdateOne) ClearStatus() *UserUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetLastLoginTime sets the "last_login_time" field.
func (_u *UserUpdateOne) SetLastLoginTime(v time.Time) *UserUpdateOne {
	_u.mutation.SetLastLoginTime(v)
	return _u
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastLoginTime(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetLastLoginTime(*v)
	}
	return _u
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (_u *UserUpdateOne) ClearLastLoginTime() *UserUpdateOne {
	_u.mutation.ClearLastLoginTime()
	return _u
}

// SetLastLoginIP sets the "last_login_ip" field.
func (_u *UserUpdateOne) SetLastLoginIP(v string) *UserUpdateOne {
	_u.mutation.SetLastLoginIP(v)
	return _u
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastLoginIP(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetLastLoginIP(*v)
	}
	return _u
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (_u *UserUpdateOne) ClearLastLoginIP() *UserUpdateOne {
	_u.mutation.ClearLastLoginIP()
	return _u
}

// SetOrgID sets the "org_id" field.
func (_u *UserUpdateOne) SetOrgID(v uint32) *UserUpdateOne {
	_u.mutation.ResetOrgID()
	_u.mutation.SetOrgID(v)
	return _u
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableOrgID(v *uint32) *UserUpdateOne {
	if v != nil {
		_u.SetOrgID(*v)
	}
	return _u
}

// AddOrgID adds value to the "org_id" field.
func (_u *UserUpdateOne) AddOrgID(v int32) *UserUpdateOne {
	_u.mutation.AddOrgID(v)
	return _u
}

// ClearOrgID clears the value of the "org_id" field.
func (_u *UserUpdateOne) ClearOrgID() *UserUpdateOne {
	_u.mutation.ClearOrgID()
	return _u
}

// SetDepartmentID sets the "department_id" field.
func (_u *UserUpdateOne) SetDepartmentID(v uint32) *UserUpdateOne {
	_u.mutation.ResetDepartmentID()
	_u.mutation.SetDepartmentID(v)
	return _u
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDepartmentID(v *uint32) *UserUpdateOne {
	if v != nil {
		_u.SetDepartmentID(*v)
	}
	return _u
}

// AddDepartmentID adds value to the "department_id" field.
func (_u *UserUpdateOne) AddDepartmentID(v int32) *UserUpdateOne {
	_u.mutation.AddDepartmentID(v)
	return _u
}

// ClearDepartmentID clears the value of the "department_id" field.
func (_u *UserUpdateOne) ClearDepartmentID() *UserUpdateOne {
	_u.mutation.ClearDepartmentID()
	return _u
}

// SetPositionID sets the "position_id" field.
func (_u *UserUpdateOne) SetPositionID(v uint32) *UserUpdateOne {
	_u.mutation.ResetPositionID()
	_u.mutation.SetPositionID(v)
	return _u
}

// SetNillablePositionID sets the "position_id" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePositionID(v *uint32) *UserUpdateOne {
	if v != nil {
		_u.SetPositionID(*v)
	}
	return _u
}

// AddPositionID adds value to the "position_id" field.
func (_u *UserUpdateOne) AddPositionID(v int32) *UserUpdateOne {
	_u.mutation.AddPositionID(v)
	return _u
}

// ClearPositionID clears the value of the "position_id" field.
func (_u *UserUpdateOne) ClearPositionID() *UserUpdateOne {
	_u.mutation.ClearPositionID()
	return _u
}

// SetWorkID sets the "work_id" field.
func (_u *UserUpdateOne) SetWorkID(v uint32) *UserUpdateOne {
	_u.mutation.ResetWorkID()
	_u.mutation.SetWorkID(v)
	return _u
}

// SetNillableWorkID sets the "work_id" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableWorkID(v *uint32) *UserUpdateOne {
	if v != nil {
		_u.SetWorkID(*v)
	}
	return _u
}

// AddWorkID adds value to the "work_id" field.
func (_u *UserUpdateOne) AddWorkID(v int32) *UserUpdateOne {
	_u.mutation.AddWorkID(v)
	return _u
}

// ClearWorkID clears the value of the "work_id" field.
func (_u *UserUpdateOne) ClearWorkID() *UserUpdateOne {
	_u.mutation.ClearWorkID()
	return _u
}

// SetRoleIds sets the "role_ids" field.
func (_u *UserUpdateOne) SetRoleIds(v []int) *UserUpdateOne {
	_u.mutation.SetRoleIds(v)
	return _u
}

// AppendRoleIds appends value to the "role_ids" field.
func (_u *UserUpdateOne) AppendRoleIds(v []int) *UserUpdateOne {
	_u.mutation.AppendRoleIds(v)
	return _u
}

// ClearRoleIds clears the value of the "role_ids" field.
func (_u *UserUpdateOne) ClearRoleIds() *UserUpdateOne {
	_u.mutation.ClearRoleIds()
	return _u
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if v, ok := _u.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Mobile(); ok {
		if err := user.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "User.mobile": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Telephone(); ok {
		if err := user.TelephoneValidator(v); err != nil {
			return &ValidationError{Name: "telephone", err: fmt.Errorf(`ent: validator failed for field "User.telephone": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := user.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "User.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "User.gender": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(user.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(user.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(user.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(user.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(user.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(user.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(user.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(user.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(user.FieldDeletedBy, field.TypeUint32)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(user.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(user.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(user.FieldTenantID, field.TypeUint32)
	}
	if _u.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := _u.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if _u.mutation.NicknameCleared() {
		_spec.ClearField(user.FieldNickname, field.TypeString)
	}
	if value, ok := _u.mutation.Realname(); ok {
		_spec.SetField(user.FieldRealname, field.TypeString, value)
	}
	if _u.mutation.RealnameCleared() {
		_spec.ClearField(user.FieldRealname, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
	}
	if _u.mutation.MobileCleared() {
		_spec.ClearField(user.FieldMobile, field.TypeString)
	}
	if value, ok := _u.mutation.Telephone(); ok {
		_spec.SetField(user.FieldTelephone, field.TypeString, value)
	}
	if _u.mutation.TelephoneCleared() {
		_spec.ClearField(user.FieldTelephone, field.TypeString)
	}
	if value, ok := _u.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if _u.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if _u.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := _u.mutation.Region(); ok {
		_spec.SetField(user.FieldRegion, field.TypeString, value)
	}
	if _u.mutation.RegionCleared() {
		_spec.ClearField(user.FieldRegion, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(user.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
	}
	if _u.mutation.GenderCleared() {
		_spec.ClearField(user.FieldGender, field.TypeEnum)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(user.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.LastLoginTime(); ok {
		_spec.SetField(user.FieldLastLoginTime, field.TypeTime, value)
	}
	if _u.mutation.LastLoginTimeCleared() {
		_spec.ClearField(user.FieldLastLoginTime, field.TypeTime)
	}
	if value, ok := _u.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
	}
	if _u.mutation.LastLoginIPCleared() {
		_spec.ClearField(user.FieldLastLoginIP, field.TypeString)
	}
	if value, ok := _u.mutation.OrgID(); ok {
		_spec.SetField(user.FieldOrgID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedOrgID(); ok {
		_spec.AddField(user.FieldOrgID, field.TypeUint32, value)
	}
	if _u.mutation.OrgIDCleared() {
		_spec.ClearField(user.FieldOrgID, field.TypeUint32)
	}
	if value, ok := _u.mutation.DepartmentID(); ok {
		_spec.SetField(user.FieldDepartmentID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDepartmentID(); ok {
		_spec.AddField(user.FieldDepartmentID, field.TypeUint32, value)
	}
	if _u.mutation.DepartmentIDCleared() {
		_spec.ClearField(user.FieldDepartmentID, field.TypeUint32)
	}
	if value, ok := _u.mutation.PositionID(); ok {
		_spec.SetField(user.FieldPositionID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedPositionID(); ok {
		_spec.AddField(user.FieldPositionID, field.TypeUint32, value)
	}
	if _u.mutation.PositionIDCleared() {
		_spec.ClearField(user.FieldPositionID, field.TypeUint32)
	}
	if value, ok := _u.mutation.WorkID(); ok {
		_spec.SetField(user.FieldWorkID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedWorkID(); ok {
		_spec.AddField(user.FieldWorkID, field.TypeUint32, value)
	}
	if _u.mutation.WorkIDCleared() {
		_spec.ClearField(user.FieldWorkID, field.TypeUint32)
	}
	if value, ok := _u.mutation.RoleIds(); ok {
		_spec.SetField(user.FieldRoleIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRoleIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldRoleIds, value)
		})
	}
	if _u.mutation.RoleIdsCleared() {
		_spec.ClearField(user.FieldRoleIds, field.TypeJSON)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

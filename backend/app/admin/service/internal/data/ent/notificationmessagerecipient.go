// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/notificationmessagerecipient"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 站内信通知消息接收者表
type NotificationMessageRecipient struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint32 `json:"id,omitempty"`
	// 创建时间
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 租户ID
	TenantID uint32 `json:"tenant_id,omitempty"`
	// 群发消息ID
	MessageID *uint32 `json:"message_id,omitempty"`
	// 接收者用户ID
	RecipientID *uint32 `json:"recipient_id,omitempty"`
	// 消息状态
	Status       *notificationmessagerecipient.Status `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotificationMessageRecipient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notificationmessagerecipient.FieldID, notificationmessagerecipient.FieldTenantID, notificationmessagerecipient.FieldMessageID, notificationmessagerecipient.FieldRecipientID:
			values[i] = new(sql.NullInt64)
		case notificationmessagerecipient.FieldStatus:
			values[i] = new(sql.NullString)
		case notificationmessagerecipient.FieldCreatedAt, notificationmessagerecipient.FieldUpdatedAt, notificationmessagerecipient.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotificationMessageRecipient fields.
func (_m *NotificationMessageRecipient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notificationmessagerecipient.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint32(value.Int64)
		case notificationmessagerecipient.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = new(time.Time)
				*_m.CreatedAt = value.Time
			}
		case notificationmessagerecipient.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = new(time.Time)
				*_m.UpdatedAt = value.Time
			}
		case notificationmessagerecipient.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case notificationmessagerecipient.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = uint32(value.Int64)
			}
		case notificationmessagerecipient.FieldMessageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field message_id", values[i])
			} else if value.Valid {
				_m.MessageID = new(uint32)
				*_m.MessageID = uint32(value.Int64)
			}
		case notificationmessagerecipient.FieldRecipientID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field recipient_id", values[i])
			} else if value.Valid {
				_m.RecipientID = new(uint32)
				*_m.RecipientID = uint32(value.Int64)
			}
		case notificationmessagerecipient.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = new(notificationmessagerecipient.Status)
				*_m.Status = notificationmessagerecipient.Status(value.String)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NotificationMessageRecipient.
// This includes values selected through modifiers, order, etc.
func (_m *NotificationMessageRecipient) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this NotificationMessageRecipient.
// Note that you need to call NotificationMessageRecipient.Unwrap() before calling this method if this NotificationMessageRecipient
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *NotificationMessageRecipient) Update() *NotificationMessageRecipientUpdateOne {
	return NewNotificationMessageRecipientClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the NotificationMessageRecipient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *NotificationMessageRecipient) Unwrap() *NotificationMessageRecipient {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: NotificationMessageRecipient is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *NotificationMessageRecipient) String() string {
	var builder strings.Builder
	builder.WriteString("NotificationMessageRecipient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	if v := _m.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.TenantID))
	builder.WriteString(", ")
	if v := _m.MessageID; v != nil {
		builder.WriteString("message_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.RecipientID; v != nil {
		builder.WriteString("recipient_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Status; v != nil {
		builder.WriteString("status=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NotificationMessageRecipients is a parsable slice of NotificationMessageRecipient.
type NotificationMessageRecipients []*NotificationMessageRecipient

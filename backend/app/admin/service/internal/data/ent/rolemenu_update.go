// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"kratos-admin/app/admin/service/internal/data/ent/rolemenu"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleMenuUpdate is the builder for updating RoleMenu entities.
type RoleMenuUpdate struct {
	config
	hooks     []Hook
	mutation  *RoleMenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RoleMenuUpdate builder.
func (_u *RoleMenuUpdate) Where(ps ...predicate.RoleMenu) *RoleMenuUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RoleMenuUpdate) SetUpdatedAt(v time.Time) *RoleMenuUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *RoleMenuUpdate) SetNillableUpdatedAt(v *time.Time) *RoleMenuUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *RoleMenuUpdate) ClearUpdatedAt() *RoleMenuUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *RoleMenuUpdate) SetDeletedAt(v time.Time) *RoleMenuUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *RoleMenuUpdate) SetNillableDeletedAt(v *time.Time) *RoleMenuUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *RoleMenuUpdate) ClearDeletedAt() *RoleMenuUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *RoleMenuUpdate) SetCreatedBy(v uint32) *RoleMenuUpdate {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *RoleMenuUpdate) SetNillableCreatedBy(v *uint32) *RoleMenuUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *RoleMenuUpdate) AddCreatedBy(v int32) *RoleMenuUpdate {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *RoleMenuUpdate) ClearCreatedBy() *RoleMenuUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *RoleMenuUpdate) SetUpdatedBy(v uint32) *RoleMenuUpdate {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *RoleMenuUpdate) SetNillableUpdatedBy(v *uint32) *RoleMenuUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *RoleMenuUpdate) AddUpdatedBy(v int32) *RoleMenuUpdate {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *RoleMenuUpdate) ClearUpdatedBy() *RoleMenuUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *RoleMenuUpdate) SetDeletedBy(v uint32) *RoleMenuUpdate {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *RoleMenuUpdate) SetNillableDeletedBy(v *uint32) *RoleMenuUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *RoleMenuUpdate) AddDeletedBy(v int32) *RoleMenuUpdate {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *RoleMenuUpdate) ClearDeletedBy() *RoleMenuUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetRoleID sets the "role_id" field.
func (_u *RoleMenuUpdate) SetRoleID(v uint32) *RoleMenuUpdate {
	_u.mutation.ResetRoleID()
	_u.mutation.SetRoleID(v)
	return _u
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (_u *RoleMenuUpdate) SetNillableRoleID(v *uint32) *RoleMenuUpdate {
	if v != nil {
		_u.SetRoleID(*v)
	}
	return _u
}

// AddRoleID adds value to the "role_id" field.
func (_u *RoleMenuUpdate) AddRoleID(v int32) *RoleMenuUpdate {
	_u.mutation.AddRoleID(v)
	return _u
}

// SetMenuID sets the "menu_id" field.
func (_u *RoleMenuUpdate) SetMenuID(v uint32) *RoleMenuUpdate {
	_u.mutation.ResetMenuID()
	_u.mutation.SetMenuID(v)
	return _u
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (_u *RoleMenuUpdate) SetNillableMenuID(v *uint32) *RoleMenuUpdate {
	if v != nil {
		_u.SetMenuID(*v)
	}
	return _u
}

// AddMenuID adds value to the "menu_id" field.
func (_u *RoleMenuUpdate) AddMenuID(v int32) *RoleMenuUpdate {
	_u.mutation.AddMenuID(v)
	return _u
}

// Mutation returns the RoleMenuMutation object of the builder.
func (_u *RoleMenuUpdate) Mutation() *RoleMenuMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RoleMenuUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RoleMenuUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleMenuUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RoleMenuUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleMenuUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RoleMenuUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rolemenu.Table, rolemenu.Columns, sqlgraph.NewFieldSpec(rolemenu.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(rolemenu.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(rolemenu.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(rolemenu.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(rolemenu.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(rolemenu.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(rolemenu.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(rolemenu.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(rolemenu.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(rolemenu.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(rolemenu.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(rolemenu.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(rolemenu.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(rolemenu.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(rolemenu.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.RoleID(); ok {
		_spec.SetField(rolemenu.FieldRoleID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedRoleID(); ok {
		_spec.AddField(rolemenu.FieldRoleID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.MenuID(); ok {
		_spec.SetField(rolemenu.FieldMenuID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedMenuID(); ok {
		_spec.AddField(rolemenu.FieldMenuID, field.TypeUint32, value)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolemenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RoleMenuUpdateOne is the builder for updating a single RoleMenu entity.
type RoleMenuUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RoleMenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RoleMenuUpdateOne) SetUpdatedAt(v time.Time) *RoleMenuUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *RoleMenuUpdateOne) SetNillableUpdatedAt(v *time.Time) *RoleMenuUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *RoleMenuUpdateOne) ClearUpdatedAt() *RoleMenuUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *RoleMenuUpdateOne) SetDeletedAt(v time.Time) *RoleMenuUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *RoleMenuUpdateOne) SetNillableDeletedAt(v *time.Time) *RoleMenuUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *RoleMenuUpdateOne) ClearDeletedAt() *RoleMenuUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *RoleMenuUpdateOne) SetCreatedBy(v uint32) *RoleMenuUpdateOne {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *RoleMenuUpdateOne) SetNillableCreatedBy(v *uint32) *RoleMenuUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *RoleMenuUpdateOne) AddCreatedBy(v int32) *RoleMenuUpdateOne {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *RoleMenuUpdateOne) ClearCreatedBy() *RoleMenuUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *RoleMenuUpdateOne) SetUpdatedBy(v uint32) *RoleMenuUpdateOne {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *RoleMenuUpdateOne) SetNillableUpdatedBy(v *uint32) *RoleMenuUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *RoleMenuUpdateOne) AddUpdatedBy(v int32) *RoleMenuUpdateOne {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *RoleMenuUpdateOne) ClearUpdatedBy() *RoleMenuUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *RoleMenuUpdateOne) SetDeletedBy(v uint32) *RoleMenuUpdateOne {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *RoleMenuUpdateOne) SetNillableDeletedBy(v *uint32) *RoleMenuUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *RoleMenuUpdateOne) AddDeletedBy(v int32) *RoleMenuUpdateOne {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *RoleMenuUpdateOne) ClearDeletedBy() *RoleMenuUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetRoleID sets the "role_id" field.
func (_u *RoleMenuUpdateOne) SetRoleID(v uint32) *RoleMenuUpdateOne {
	_u.mutation.ResetRoleID()
	_u.mutation.SetRoleID(v)
	return _u
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (_u *RoleMenuUpdateOne) SetNillableRoleID(v *uint32) *RoleMenuUpdateOne {
	if v != nil {
		_u.SetRoleID(*v)
	}
	return _u
}

// AddRoleID adds value to the "role_id" field.
func (_u *RoleMenuUpdateOne) AddRoleID(v int32) *RoleMenuUpdateOne {
	_u.mutation.AddRoleID(v)
	return _u
}

// SetMenuID sets the "menu_id" field.
func (_u *RoleMenuUpdateOne) SetMenuID(v uint32) *RoleMenuUpdateOne {
	_u.mutation.ResetMenuID()
	_u.mutation.SetMenuID(v)
	return _u
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (_u *RoleMenuUpdateOne) SetNillableMenuID(v *uint32) *RoleMenuUpdateOne {
	if v != nil {
		_u.SetMenuID(*v)
	}
	return _u
}

// AddMenuID adds value to the "menu_id" field.
func (_u *RoleMenuUpdateOne) AddMenuID(v int32) *RoleMenuUpdateOne {
	_u.mutation.AddMenuID(v)
	return _u
}

// Mutation returns the RoleMenuMutation object of the builder.
func (_u *RoleMenuUpdateOne) Mutation() *RoleMenuMutation {
	return _u.mutation
}

// Where appends a list predicates to the RoleMenuUpdate builder.
func (_u *RoleMenuUpdateOne) Where(ps ...predicate.RoleMenu) *RoleMenuUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RoleMenuUpdateOne) Select(field string, fields ...string) *RoleMenuUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated RoleMenu entity.
func (_u *RoleMenuUpdateOne) Save(ctx context.Context) (*RoleMenu, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleMenuUpdateOne) SaveX(ctx context.Context) *RoleMenu {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RoleMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleMenuUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RoleMenuUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleMenuUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RoleMenuUpdateOne) sqlSave(ctx context.Context) (_node *RoleMenu, err error) {
	_spec := sqlgraph.NewUpdateSpec(rolemenu.Table, rolemenu.Columns, sqlgraph.NewFieldSpec(rolemenu.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoleMenu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolemenu.FieldID)
		for _, f := range fields {
			if !rolemenu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rolemenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(rolemenu.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(rolemenu.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(rolemenu.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(rolemenu.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(rolemenu.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(rolemenu.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(rolemenu.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(rolemenu.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(rolemenu.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(rolemenu.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(rolemenu.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(rolemenu.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(rolemenu.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(rolemenu.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.RoleID(); ok {
		_spec.SetField(rolemenu.FieldRoleID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedRoleID(); ok {
		_spec.AddField(rolemenu.FieldRoleID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.MenuID(); ok {
		_spec.SetField(rolemenu.FieldMenuID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedMenuID(); ok {
		_spec.AddField(rolemenu.FieldMenuID, field.TypeUint32, value)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &RoleMenu{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolemenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

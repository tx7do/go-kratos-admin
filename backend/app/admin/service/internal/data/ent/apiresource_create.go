// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/apiresource"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApiResourceCreate is the builder for creating a ApiResource entity.
type ApiResourceCreate struct {
	config
	mutation *ApiResourceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *ApiResourceCreate) SetCreatedAt(v time.Time) *ApiResourceCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ApiResourceCreate) SetNillableCreatedAt(v *time.Time) *ApiResourceCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ApiResourceCreate) SetUpdatedAt(v time.Time) *ApiResourceCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ApiResourceCreate) SetNillableUpdatedAt(v *time.Time) *ApiResourceCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *ApiResourceCreate) SetDeletedAt(v time.Time) *ApiResourceCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *ApiResourceCreate) SetNillableDeletedAt(v *time.Time) *ApiResourceCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *ApiResourceCreate) SetCreatedBy(v uint32) *ApiResourceCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *ApiResourceCreate) SetNillableCreatedBy(v *uint32) *ApiResourceCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *ApiResourceCreate) SetUpdatedBy(v uint32) *ApiResourceCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *ApiResourceCreate) SetNillableUpdatedBy(v *uint32) *ApiResourceCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *ApiResourceCreate) SetDeletedBy(v uint32) *ApiResourceCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *ApiResourceCreate) SetNillableDeletedBy(v *uint32) *ApiResourceCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *ApiResourceCreate) SetDescription(v string) *ApiResourceCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *ApiResourceCreate) SetNillableDescription(v *string) *ApiResourceCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetModule sets the "module" field.
func (_c *ApiResourceCreate) SetModule(v string) *ApiResourceCreate {
	_c.mutation.SetModule(v)
	return _c
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (_c *ApiResourceCreate) SetNillableModule(v *string) *ApiResourceCreate {
	if v != nil {
		_c.SetModule(*v)
	}
	return _c
}

// SetModuleDescription sets the "module_description" field.
func (_c *ApiResourceCreate) SetModuleDescription(v string) *ApiResourceCreate {
	_c.mutation.SetModuleDescription(v)
	return _c
}

// SetNillableModuleDescription sets the "module_description" field if the given value is not nil.
func (_c *ApiResourceCreate) SetNillableModuleDescription(v *string) *ApiResourceCreate {
	if v != nil {
		_c.SetModuleDescription(*v)
	}
	return _c
}

// SetOperation sets the "operation" field.
func (_c *ApiResourceCreate) SetOperation(v string) *ApiResourceCreate {
	_c.mutation.SetOperation(v)
	return _c
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (_c *ApiResourceCreate) SetNillableOperation(v *string) *ApiResourceCreate {
	if v != nil {
		_c.SetOperation(*v)
	}
	return _c
}

// SetPath sets the "path" field.
func (_c *ApiResourceCreate) SetPath(v string) *ApiResourceCreate {
	_c.mutation.SetPath(v)
	return _c
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_c *ApiResourceCreate) SetNillablePath(v *string) *ApiResourceCreate {
	if v != nil {
		_c.SetPath(*v)
	}
	return _c
}

// SetMethod sets the "method" field.
func (_c *ApiResourceCreate) SetMethod(v string) *ApiResourceCreate {
	_c.mutation.SetMethod(v)
	return _c
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_c *ApiResourceCreate) SetNillableMethod(v *string) *ApiResourceCreate {
	if v != nil {
		_c.SetMethod(*v)
	}
	return _c
}

// SetScope sets the "scope" field.
func (_c *ApiResourceCreate) SetScope(v apiresource.Scope) *ApiResourceCreate {
	_c.mutation.SetScope(v)
	return _c
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (_c *ApiResourceCreate) SetNillableScope(v *apiresource.Scope) *ApiResourceCreate {
	if v != nil {
		_c.SetScope(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ApiResourceCreate) SetID(v uint32) *ApiResourceCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the ApiResourceMutation object of the builder.
func (_c *ApiResourceCreate) Mutation() *ApiResourceMutation {
	return _c.mutation
}

// Save creates the ApiResource in the database.
func (_c *ApiResourceCreate) Save(ctx context.Context) (*ApiResource, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ApiResourceCreate) SaveX(ctx context.Context) *ApiResource {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ApiResourceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ApiResourceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ApiResourceCreate) defaults() {
	if _, ok := _c.mutation.Scope(); !ok {
		v := apiresource.DefaultScope
		_c.mutation.SetScope(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ApiResourceCreate) check() error {
	if v, ok := _c.mutation.Scope(); ok {
		if err := apiresource.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "ApiResource.scope": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := apiresource.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ApiResource.id": %w`, err)}
		}
	}
	return nil
}

func (_c *ApiResourceCreate) sqlSave(ctx context.Context) (*ApiResource, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ApiResourceCreate) createSpec() (*ApiResource, *sqlgraph.CreateSpec) {
	var (
		_node = &ApiResource{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(apiresource.Table, sqlgraph.NewFieldSpec(apiresource.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(apiresource.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(apiresource.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(apiresource.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(apiresource.FieldCreatedBy, field.TypeUint32, value)
		_node.CreatedBy = &value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(apiresource.FieldUpdatedBy, field.TypeUint32, value)
		_node.UpdatedBy = &value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(apiresource.FieldDeletedBy, field.TypeUint32, value)
		_node.DeletedBy = &value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(apiresource.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.Module(); ok {
		_spec.SetField(apiresource.FieldModule, field.TypeString, value)
		_node.Module = &value
	}
	if value, ok := _c.mutation.ModuleDescription(); ok {
		_spec.SetField(apiresource.FieldModuleDescription, field.TypeString, value)
		_node.ModuleDescription = &value
	}
	if value, ok := _c.mutation.Operation(); ok {
		_spec.SetField(apiresource.FieldOperation, field.TypeString, value)
		_node.Operation = &value
	}
	if value, ok := _c.mutation.Path(); ok {
		_spec.SetField(apiresource.FieldPath, field.TypeString, value)
		_node.Path = &value
	}
	if value, ok := _c.mutation.Method(); ok {
		_spec.SetField(apiresource.FieldMethod, field.TypeString, value)
		_node.Method = &value
	}
	if value, ok := _c.mutation.Scope(); ok {
		_spec.SetField(apiresource.FieldScope, field.TypeEnum, value)
		_node.Scope = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApiResource.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApiResourceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *ApiResourceCreate) OnConflict(opts ...sql.ConflictOption) *ApiResourceUpsertOne {
	_c.conflict = opts
	return &ApiResourceUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApiResource.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ApiResourceCreate) OnConflictColumns(columns ...string) *ApiResourceUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ApiResourceUpsertOne{
		create: _c,
	}
}

type (
	// ApiResourceUpsertOne is the builder for "upsert"-ing
	//  one ApiResource node.
	ApiResourceUpsertOne struct {
		create *ApiResourceCreate
	}

	// ApiResourceUpsert is the "OnConflict" setter.
	ApiResourceUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ApiResourceUpsert) SetUpdatedAt(v time.Time) *ApiResourceUpsert {
	u.Set(apiresource.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ApiResourceUpsert) UpdateUpdatedAt() *ApiResourceUpsert {
	u.SetExcluded(apiresource.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *ApiResourceUpsert) ClearUpdatedAt() *ApiResourceUpsert {
	u.SetNull(apiresource.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ApiResourceUpsert) SetDeletedAt(v time.Time) *ApiResourceUpsert {
	u.Set(apiresource.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ApiResourceUpsert) UpdateDeletedAt() *ApiResourceUpsert {
	u.SetExcluded(apiresource.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ApiResourceUpsert) ClearDeletedAt() *ApiResourceUpsert {
	u.SetNull(apiresource.FieldDeletedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ApiResourceUpsert) SetCreatedBy(v uint32) *ApiResourceUpsert {
	u.Set(apiresource.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ApiResourceUpsert) UpdateCreatedBy() *ApiResourceUpsert {
	u.SetExcluded(apiresource.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ApiResourceUpsert) AddCreatedBy(v uint32) *ApiResourceUpsert {
	u.Add(apiresource.FieldCreatedBy, v)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *ApiResourceUpsert) ClearCreatedBy() *ApiResourceUpsert {
	u.SetNull(apiresource.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ApiResourceUpsert) SetUpdatedBy(v uint32) *ApiResourceUpsert {
	u.Set(apiresource.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ApiResourceUpsert) UpdateUpdatedBy() *ApiResourceUpsert {
	u.SetExcluded(apiresource.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ApiResourceUpsert) AddUpdatedBy(v uint32) *ApiResourceUpsert {
	u.Add(apiresource.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *ApiResourceUpsert) ClearUpdatedBy() *ApiResourceUpsert {
	u.SetNull(apiresource.FieldUpdatedBy)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *ApiResourceUpsert) SetDeletedBy(v uint32) *ApiResourceUpsert {
	u.Set(apiresource.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *ApiResourceUpsert) UpdateDeletedBy() *ApiResourceUpsert {
	u.SetExcluded(apiresource.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *ApiResourceUpsert) AddDeletedBy(v uint32) *ApiResourceUpsert {
	u.Add(apiresource.FieldDeletedBy, v)
	return u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *ApiResourceUpsert) ClearDeletedBy() *ApiResourceUpsert {
	u.SetNull(apiresource.FieldDeletedBy)
	return u
}

// SetDescription sets the "description" field.
func (u *ApiResourceUpsert) SetDescription(v string) *ApiResourceUpsert {
	u.Set(apiresource.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ApiResourceUpsert) UpdateDescription() *ApiResourceUpsert {
	u.SetExcluded(apiresource.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ApiResourceUpsert) ClearDescription() *ApiResourceUpsert {
	u.SetNull(apiresource.FieldDescription)
	return u
}

// SetModule sets the "module" field.
func (u *ApiResourceUpsert) SetModule(v string) *ApiResourceUpsert {
	u.Set(apiresource.FieldModule, v)
	return u
}

// UpdateModule sets the "module" field to the value that was provided on create.
func (u *ApiResourceUpsert) UpdateModule() *ApiResourceUpsert {
	u.SetExcluded(apiresource.FieldModule)
	return u
}

// ClearModule clears the value of the "module" field.
func (u *ApiResourceUpsert) ClearModule() *ApiResourceUpsert {
	u.SetNull(apiresource.FieldModule)
	return u
}

// SetModuleDescription sets the "module_description" field.
func (u *ApiResourceUpsert) SetModuleDescription(v string) *ApiResourceUpsert {
	u.Set(apiresource.FieldModuleDescription, v)
	return u
}

// UpdateModuleDescription sets the "module_description" field to the value that was provided on create.
func (u *ApiResourceUpsert) UpdateModuleDescription() *ApiResourceUpsert {
	u.SetExcluded(apiresource.FieldModuleDescription)
	return u
}

// ClearModuleDescription clears the value of the "module_description" field.
func (u *ApiResourceUpsert) ClearModuleDescription() *ApiResourceUpsert {
	u.SetNull(apiresource.FieldModuleDescription)
	return u
}

// SetOperation sets the "operation" field.
func (u *ApiResourceUpsert) SetOperation(v string) *ApiResourceUpsert {
	u.Set(apiresource.FieldOperation, v)
	return u
}

// UpdateOperation sets the "operation" field to the value that was provided on create.
func (u *ApiResourceUpsert) UpdateOperation() *ApiResourceUpsert {
	u.SetExcluded(apiresource.FieldOperation)
	return u
}

// ClearOperation clears the value of the "operation" field.
func (u *ApiResourceUpsert) ClearOperation() *ApiResourceUpsert {
	u.SetNull(apiresource.FieldOperation)
	return u
}

// SetPath sets the "path" field.
func (u *ApiResourceUpsert) SetPath(v string) *ApiResourceUpsert {
	u.Set(apiresource.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *ApiResourceUpsert) UpdatePath() *ApiResourceUpsert {
	u.SetExcluded(apiresource.FieldPath)
	return u
}

// ClearPath clears the value of the "path" field.
func (u *ApiResourceUpsert) ClearPath() *ApiResourceUpsert {
	u.SetNull(apiresource.FieldPath)
	return u
}

// SetMethod sets the "method" field.
func (u *ApiResourceUpsert) SetMethod(v string) *ApiResourceUpsert {
	u.Set(apiresource.FieldMethod, v)
	return u
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *ApiResourceUpsert) UpdateMethod() *ApiResourceUpsert {
	u.SetExcluded(apiresource.FieldMethod)
	return u
}

// ClearMethod clears the value of the "method" field.
func (u *ApiResourceUpsert) ClearMethod() *ApiResourceUpsert {
	u.SetNull(apiresource.FieldMethod)
	return u
}

// SetScope sets the "scope" field.
func (u *ApiResourceUpsert) SetScope(v apiresource.Scope) *ApiResourceUpsert {
	u.Set(apiresource.FieldScope, v)
	return u
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *ApiResourceUpsert) UpdateScope() *ApiResourceUpsert {
	u.SetExcluded(apiresource.FieldScope)
	return u
}

// ClearScope clears the value of the "scope" field.
func (u *ApiResourceUpsert) ClearScope() *ApiResourceUpsert {
	u.SetNull(apiresource.FieldScope)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ApiResource.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apiresource.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApiResourceUpsertOne) UpdateNewValues() *ApiResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(apiresource.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(apiresource.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApiResource.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ApiResourceUpsertOne) Ignore() *ApiResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApiResourceUpsertOne) DoNothing() *ApiResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApiResourceCreate.OnConflict
// documentation for more info.
func (u *ApiResourceUpsertOne) Update(set func(*ApiResourceUpsert)) *ApiResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApiResourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ApiResourceUpsertOne) SetUpdatedAt(v time.Time) *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ApiResourceUpsertOne) UpdateUpdatedAt() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *ApiResourceUpsertOne) ClearUpdatedAt() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ApiResourceUpsertOne) SetDeletedAt(v time.Time) *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ApiResourceUpsertOne) UpdateDeletedAt() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ApiResourceUpsertOne) ClearDeletedAt() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *ApiResourceUpsertOne) SetCreatedBy(v uint32) *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ApiResourceUpsertOne) AddCreatedBy(v uint32) *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ApiResourceUpsertOne) UpdateCreatedBy() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *ApiResourceUpsertOne) ClearCreatedBy() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ApiResourceUpsertOne) SetUpdatedBy(v uint32) *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ApiResourceUpsertOne) AddUpdatedBy(v uint32) *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ApiResourceUpsertOne) UpdateUpdatedBy() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *ApiResourceUpsertOne) ClearUpdatedBy() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *ApiResourceUpsertOne) SetDeletedBy(v uint32) *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *ApiResourceUpsertOne) AddDeletedBy(v uint32) *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *ApiResourceUpsertOne) UpdateDeletedBy() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *ApiResourceUpsertOne) ClearDeletedBy() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearDeletedBy()
	})
}

// SetDescription sets the "description" field.
func (u *ApiResourceUpsertOne) SetDescription(v string) *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ApiResourceUpsertOne) UpdateDescription() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ApiResourceUpsertOne) ClearDescription() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearDescription()
	})
}

// SetModule sets the "module" field.
func (u *ApiResourceUpsertOne) SetModule(v string) *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetModule(v)
	})
}

// UpdateModule sets the "module" field to the value that was provided on create.
func (u *ApiResourceUpsertOne) UpdateModule() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateModule()
	})
}

// ClearModule clears the value of the "module" field.
func (u *ApiResourceUpsertOne) ClearModule() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearModule()
	})
}

// SetModuleDescription sets the "module_description" field.
func (u *ApiResourceUpsertOne) SetModuleDescription(v string) *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetModuleDescription(v)
	})
}

// UpdateModuleDescription sets the "module_description" field to the value that was provided on create.
func (u *ApiResourceUpsertOne) UpdateModuleDescription() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateModuleDescription()
	})
}

// ClearModuleDescription clears the value of the "module_description" field.
func (u *ApiResourceUpsertOne) ClearModuleDescription() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearModuleDescription()
	})
}

// SetOperation sets the "operation" field.
func (u *ApiResourceUpsertOne) SetOperation(v string) *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetOperation(v)
	})
}

// UpdateOperation sets the "operation" field to the value that was provided on create.
func (u *ApiResourceUpsertOne) UpdateOperation() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateOperation()
	})
}

// ClearOperation clears the value of the "operation" field.
func (u *ApiResourceUpsertOne) ClearOperation() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearOperation()
	})
}

// SetPath sets the "path" field.
func (u *ApiResourceUpsertOne) SetPath(v string) *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *ApiResourceUpsertOne) UpdatePath() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *ApiResourceUpsertOne) ClearPath() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearPath()
	})
}

// SetMethod sets the "method" field.
func (u *ApiResourceUpsertOne) SetMethod(v string) *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *ApiResourceUpsertOne) UpdateMethod() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateMethod()
	})
}

// ClearMethod clears the value of the "method" field.
func (u *ApiResourceUpsertOne) ClearMethod() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearMethod()
	})
}

// SetScope sets the "scope" field.
func (u *ApiResourceUpsertOne) SetScope(v apiresource.Scope) *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *ApiResourceUpsertOne) UpdateScope() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateScope()
	})
}

// ClearScope clears the value of the "scope" field.
func (u *ApiResourceUpsertOne) ClearScope() *ApiResourceUpsertOne {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearScope()
	})
}

// Exec executes the query.
func (u *ApiResourceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ApiResourceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApiResourceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ApiResourceUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ApiResourceUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ApiResourceCreateBulk is the builder for creating many ApiResource entities in bulk.
type ApiResourceCreateBulk struct {
	config
	err      error
	builders []*ApiResourceCreate
	conflict []sql.ConflictOption
}

// Save creates the ApiResource entities in the database.
func (_c *ApiResourceCreateBulk) Save(ctx context.Context) ([]*ApiResource, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ApiResource, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApiResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ApiResourceCreateBulk) SaveX(ctx context.Context) []*ApiResource {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ApiResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ApiResourceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApiResource.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApiResourceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *ApiResourceCreateBulk) OnConflict(opts ...sql.ConflictOption) *ApiResourceUpsertBulk {
	_c.conflict = opts
	return &ApiResourceUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApiResource.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ApiResourceCreateBulk) OnConflictColumns(columns ...string) *ApiResourceUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ApiResourceUpsertBulk{
		create: _c,
	}
}

// ApiResourceUpsertBulk is the builder for "upsert"-ing
// a bulk of ApiResource nodes.
type ApiResourceUpsertBulk struct {
	create *ApiResourceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ApiResource.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apiresource.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApiResourceUpsertBulk) UpdateNewValues() *ApiResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(apiresource.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(apiresource.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApiResource.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ApiResourceUpsertBulk) Ignore() *ApiResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApiResourceUpsertBulk) DoNothing() *ApiResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApiResourceCreateBulk.OnConflict
// documentation for more info.
func (u *ApiResourceUpsertBulk) Update(set func(*ApiResourceUpsert)) *ApiResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApiResourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ApiResourceUpsertBulk) SetUpdatedAt(v time.Time) *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ApiResourceUpsertBulk) UpdateUpdatedAt() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *ApiResourceUpsertBulk) ClearUpdatedAt() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ApiResourceUpsertBulk) SetDeletedAt(v time.Time) *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ApiResourceUpsertBulk) UpdateDeletedAt() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ApiResourceUpsertBulk) ClearDeletedAt() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *ApiResourceUpsertBulk) SetCreatedBy(v uint32) *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ApiResourceUpsertBulk) AddCreatedBy(v uint32) *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ApiResourceUpsertBulk) UpdateCreatedBy() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *ApiResourceUpsertBulk) ClearCreatedBy() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ApiResourceUpsertBulk) SetUpdatedBy(v uint32) *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ApiResourceUpsertBulk) AddUpdatedBy(v uint32) *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ApiResourceUpsertBulk) UpdateUpdatedBy() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *ApiResourceUpsertBulk) ClearUpdatedBy() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *ApiResourceUpsertBulk) SetDeletedBy(v uint32) *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *ApiResourceUpsertBulk) AddDeletedBy(v uint32) *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *ApiResourceUpsertBulk) UpdateDeletedBy() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *ApiResourceUpsertBulk) ClearDeletedBy() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearDeletedBy()
	})
}

// SetDescription sets the "description" field.
func (u *ApiResourceUpsertBulk) SetDescription(v string) *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ApiResourceUpsertBulk) UpdateDescription() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ApiResourceUpsertBulk) ClearDescription() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearDescription()
	})
}

// SetModule sets the "module" field.
func (u *ApiResourceUpsertBulk) SetModule(v string) *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetModule(v)
	})
}

// UpdateModule sets the "module" field to the value that was provided on create.
func (u *ApiResourceUpsertBulk) UpdateModule() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateModule()
	})
}

// ClearModule clears the value of the "module" field.
func (u *ApiResourceUpsertBulk) ClearModule() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearModule()
	})
}

// SetModuleDescription sets the "module_description" field.
func (u *ApiResourceUpsertBulk) SetModuleDescription(v string) *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetModuleDescription(v)
	})
}

// UpdateModuleDescription sets the "module_description" field to the value that was provided on create.
func (u *ApiResourceUpsertBulk) UpdateModuleDescription() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateModuleDescription()
	})
}

// ClearModuleDescription clears the value of the "module_description" field.
func (u *ApiResourceUpsertBulk) ClearModuleDescription() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearModuleDescription()
	})
}

// SetOperation sets the "operation" field.
func (u *ApiResourceUpsertBulk) SetOperation(v string) *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetOperation(v)
	})
}

// UpdateOperation sets the "operation" field to the value that was provided on create.
func (u *ApiResourceUpsertBulk) UpdateOperation() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateOperation()
	})
}

// ClearOperation clears the value of the "operation" field.
func (u *ApiResourceUpsertBulk) ClearOperation() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearOperation()
	})
}

// SetPath sets the "path" field.
func (u *ApiResourceUpsertBulk) SetPath(v string) *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *ApiResourceUpsertBulk) UpdatePath() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *ApiResourceUpsertBulk) ClearPath() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearPath()
	})
}

// SetMethod sets the "method" field.
func (u *ApiResourceUpsertBulk) SetMethod(v string) *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *ApiResourceUpsertBulk) UpdateMethod() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateMethod()
	})
}

// ClearMethod clears the value of the "method" field.
func (u *ApiResourceUpsertBulk) ClearMethod() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearMethod()
	})
}

// SetScope sets the "scope" field.
func (u *ApiResourceUpsertBulk) SetScope(v apiresource.Scope) *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *ApiResourceUpsertBulk) UpdateScope() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.UpdateScope()
	})
}

// ClearScope clears the value of the "scope" field.
func (u *ApiResourceUpsertBulk) ClearScope() *ApiResourceUpsertBulk {
	return u.Update(func(s *ApiResourceUpsert) {
		s.ClearScope()
	})
}

// Exec executes the query.
func (u *ApiResourceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ApiResourceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ApiResourceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApiResourceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

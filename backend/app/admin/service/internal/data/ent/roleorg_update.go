// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"kratos-admin/app/admin/service/internal/data/ent/roleorg"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleOrgUpdate is the builder for updating RoleOrg entities.
type RoleOrgUpdate struct {
	config
	hooks     []Hook
	mutation  *RoleOrgMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RoleOrgUpdate builder.
func (_u *RoleOrgUpdate) Where(ps ...predicate.RoleOrg) *RoleOrgUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RoleOrgUpdate) SetUpdatedAt(v time.Time) *RoleOrgUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *RoleOrgUpdate) SetNillableUpdatedAt(v *time.Time) *RoleOrgUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *RoleOrgUpdate) ClearUpdatedAt() *RoleOrgUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *RoleOrgUpdate) SetDeletedAt(v time.Time) *RoleOrgUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *RoleOrgUpdate) SetNillableDeletedAt(v *time.Time) *RoleOrgUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *RoleOrgUpdate) ClearDeletedAt() *RoleOrgUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *RoleOrgUpdate) SetCreatedBy(v uint32) *RoleOrgUpdate {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *RoleOrgUpdate) SetNillableCreatedBy(v *uint32) *RoleOrgUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *RoleOrgUpdate) AddCreatedBy(v int32) *RoleOrgUpdate {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *RoleOrgUpdate) ClearCreatedBy() *RoleOrgUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *RoleOrgUpdate) SetUpdatedBy(v uint32) *RoleOrgUpdate {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *RoleOrgUpdate) SetNillableUpdatedBy(v *uint32) *RoleOrgUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *RoleOrgUpdate) AddUpdatedBy(v int32) *RoleOrgUpdate {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *RoleOrgUpdate) ClearUpdatedBy() *RoleOrgUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *RoleOrgUpdate) SetDeletedBy(v uint32) *RoleOrgUpdate {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *RoleOrgUpdate) SetNillableDeletedBy(v *uint32) *RoleOrgUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *RoleOrgUpdate) AddDeletedBy(v int32) *RoleOrgUpdate {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *RoleOrgUpdate) ClearDeletedBy() *RoleOrgUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetRoleID sets the "role_id" field.
func (_u *RoleOrgUpdate) SetRoleID(v uint32) *RoleOrgUpdate {
	_u.mutation.ResetRoleID()
	_u.mutation.SetRoleID(v)
	return _u
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (_u *RoleOrgUpdate) SetNillableRoleID(v *uint32) *RoleOrgUpdate {
	if v != nil {
		_u.SetRoleID(*v)
	}
	return _u
}

// AddRoleID adds value to the "role_id" field.
func (_u *RoleOrgUpdate) AddRoleID(v int32) *RoleOrgUpdate {
	_u.mutation.AddRoleID(v)
	return _u
}

// SetOrgID sets the "org_id" field.
func (_u *RoleOrgUpdate) SetOrgID(v uint32) *RoleOrgUpdate {
	_u.mutation.ResetOrgID()
	_u.mutation.SetOrgID(v)
	return _u
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (_u *RoleOrgUpdate) SetNillableOrgID(v *uint32) *RoleOrgUpdate {
	if v != nil {
		_u.SetOrgID(*v)
	}
	return _u
}

// AddOrgID adds value to the "org_id" field.
func (_u *RoleOrgUpdate) AddOrgID(v int32) *RoleOrgUpdate {
	_u.mutation.AddOrgID(v)
	return _u
}

// Mutation returns the RoleOrgMutation object of the builder.
func (_u *RoleOrgUpdate) Mutation() *RoleOrgMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RoleOrgUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleOrgUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RoleOrgUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleOrgUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RoleOrgUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleOrgUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RoleOrgUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(roleorg.Table, roleorg.Columns, sqlgraph.NewFieldSpec(roleorg.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(roleorg.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(roleorg.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(roleorg.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(roleorg.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(roleorg.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(roleorg.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(roleorg.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(roleorg.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(roleorg.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(roleorg.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(roleorg.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(roleorg.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(roleorg.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(roleorg.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.RoleID(); ok {
		_spec.SetField(roleorg.FieldRoleID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedRoleID(); ok {
		_spec.AddField(roleorg.FieldRoleID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.OrgID(); ok {
		_spec.SetField(roleorg.FieldOrgID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedOrgID(); ok {
		_spec.AddField(roleorg.FieldOrgID, field.TypeUint32, value)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roleorg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RoleOrgUpdateOne is the builder for updating a single RoleOrg entity.
type RoleOrgUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RoleOrgMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RoleOrgUpdateOne) SetUpdatedAt(v time.Time) *RoleOrgUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *RoleOrgUpdateOne) SetNillableUpdatedAt(v *time.Time) *RoleOrgUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *RoleOrgUpdateOne) ClearUpdatedAt() *RoleOrgUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *RoleOrgUpdateOne) SetDeletedAt(v time.Time) *RoleOrgUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *RoleOrgUpdateOne) SetNillableDeletedAt(v *time.Time) *RoleOrgUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *RoleOrgUpdateOne) ClearDeletedAt() *RoleOrgUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *RoleOrgUpdateOne) SetCreatedBy(v uint32) *RoleOrgUpdateOne {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *RoleOrgUpdateOne) SetNillableCreatedBy(v *uint32) *RoleOrgUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *RoleOrgUpdateOne) AddCreatedBy(v int32) *RoleOrgUpdateOne {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *RoleOrgUpdateOne) ClearCreatedBy() *RoleOrgUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *RoleOrgUpdateOne) SetUpdatedBy(v uint32) *RoleOrgUpdateOne {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *RoleOrgUpdateOne) SetNillableUpdatedBy(v *uint32) *RoleOrgUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *RoleOrgUpdateOne) AddUpdatedBy(v int32) *RoleOrgUpdateOne {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *RoleOrgUpdateOne) ClearUpdatedBy() *RoleOrgUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *RoleOrgUpdateOne) SetDeletedBy(v uint32) *RoleOrgUpdateOne {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *RoleOrgUpdateOne) SetNillableDeletedBy(v *uint32) *RoleOrgUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *RoleOrgUpdateOne) AddDeletedBy(v int32) *RoleOrgUpdateOne {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *RoleOrgUpdateOne) ClearDeletedBy() *RoleOrgUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetRoleID sets the "role_id" field.
func (_u *RoleOrgUpdateOne) SetRoleID(v uint32) *RoleOrgUpdateOne {
	_u.mutation.ResetRoleID()
	_u.mutation.SetRoleID(v)
	return _u
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (_u *RoleOrgUpdateOne) SetNillableRoleID(v *uint32) *RoleOrgUpdateOne {
	if v != nil {
		_u.SetRoleID(*v)
	}
	return _u
}

// AddRoleID adds value to the "role_id" field.
func (_u *RoleOrgUpdateOne) AddRoleID(v int32) *RoleOrgUpdateOne {
	_u.mutation.AddRoleID(v)
	return _u
}

// SetOrgID sets the "org_id" field.
func (_u *RoleOrgUpdateOne) SetOrgID(v uint32) *RoleOrgUpdateOne {
	_u.mutation.ResetOrgID()
	_u.mutation.SetOrgID(v)
	return _u
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (_u *RoleOrgUpdateOne) SetNillableOrgID(v *uint32) *RoleOrgUpdateOne {
	if v != nil {
		_u.SetOrgID(*v)
	}
	return _u
}

// AddOrgID adds value to the "org_id" field.
func (_u *RoleOrgUpdateOne) AddOrgID(v int32) *RoleOrgUpdateOne {
	_u.mutation.AddOrgID(v)
	return _u
}

// Mutation returns the RoleOrgMutation object of the builder.
func (_u *RoleOrgUpdateOne) Mutation() *RoleOrgMutation {
	return _u.mutation
}

// Where appends a list predicates to the RoleOrgUpdate builder.
func (_u *RoleOrgUpdateOne) Where(ps ...predicate.RoleOrg) *RoleOrgUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RoleOrgUpdateOne) Select(field string, fields ...string) *RoleOrgUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated RoleOrg entity.
func (_u *RoleOrgUpdateOne) Save(ctx context.Context) (*RoleOrg, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleOrgUpdateOne) SaveX(ctx context.Context) *RoleOrg {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RoleOrgUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleOrgUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RoleOrgUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleOrgUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RoleOrgUpdateOne) sqlSave(ctx context.Context) (_node *RoleOrg, err error) {
	_spec := sqlgraph.NewUpdateSpec(roleorg.Table, roleorg.Columns, sqlgraph.NewFieldSpec(roleorg.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoleOrg.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roleorg.FieldID)
		for _, f := range fields {
			if !roleorg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != roleorg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(roleorg.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(roleorg.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(roleorg.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(roleorg.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(roleorg.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(roleorg.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(roleorg.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(roleorg.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(roleorg.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(roleorg.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(roleorg.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(roleorg.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(roleorg.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(roleorg.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.RoleID(); ok {
		_spec.SetField(roleorg.FieldRoleID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedRoleID(); ok {
		_spec.AddField(roleorg.FieldRoleID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.OrgID(); ok {
		_spec.SetField(roleorg.FieldOrgID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedOrgID(); ok {
		_spec.AddField(roleorg.FieldOrgID, field.TypeUint32, value)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &RoleOrg{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roleorg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

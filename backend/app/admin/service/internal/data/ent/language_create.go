// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/language"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LanguageCreate is the builder for creating a Language entity.
type LanguageCreate struct {
	config
	mutation *LanguageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *LanguageCreate) SetCreatedAt(v time.Time) *LanguageCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *LanguageCreate) SetNillableCreatedAt(v *time.Time) *LanguageCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *LanguageCreate) SetUpdatedAt(v time.Time) *LanguageCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *LanguageCreate) SetNillableUpdatedAt(v *time.Time) *LanguageCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *LanguageCreate) SetDeletedAt(v time.Time) *LanguageCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *LanguageCreate) SetNillableDeletedAt(v *time.Time) *LanguageCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *LanguageCreate) SetCreatedBy(v uint32) *LanguageCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *LanguageCreate) SetNillableCreatedBy(v *uint32) *LanguageCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *LanguageCreate) SetUpdatedBy(v uint32) *LanguageCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *LanguageCreate) SetNillableUpdatedBy(v *uint32) *LanguageCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *LanguageCreate) SetDeletedBy(v uint32) *LanguageCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *LanguageCreate) SetNillableDeletedBy(v *uint32) *LanguageCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetSortOrder sets the "sort_order" field.
func (_c *LanguageCreate) SetSortOrder(v int32) *LanguageCreate {
	_c.mutation.SetSortOrder(v)
	return _c
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_c *LanguageCreate) SetNillableSortOrder(v *int32) *LanguageCreate {
	if v != nil {
		_c.SetSortOrder(*v)
	}
	return _c
}

// SetIsEnabled sets the "is_enabled" field.
func (_c *LanguageCreate) SetIsEnabled(v bool) *LanguageCreate {
	_c.mutation.SetIsEnabled(v)
	return _c
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_c *LanguageCreate) SetNillableIsEnabled(v *bool) *LanguageCreate {
	if v != nil {
		_c.SetIsEnabled(*v)
	}
	return _c
}

// SetLanguageCode sets the "language_code" field.
func (_c *LanguageCreate) SetLanguageCode(v string) *LanguageCreate {
	_c.mutation.SetLanguageCode(v)
	return _c
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (_c *LanguageCreate) SetNillableLanguageCode(v *string) *LanguageCreate {
	if v != nil {
		_c.SetLanguageCode(*v)
	}
	return _c
}

// SetLanguageName sets the "language_name" field.
func (_c *LanguageCreate) SetLanguageName(v string) *LanguageCreate {
	_c.mutation.SetLanguageName(v)
	return _c
}

// SetNillableLanguageName sets the "language_name" field if the given value is not nil.
func (_c *LanguageCreate) SetNillableLanguageName(v *string) *LanguageCreate {
	if v != nil {
		_c.SetLanguageName(*v)
	}
	return _c
}

// SetNativeName sets the "native_name" field.
func (_c *LanguageCreate) SetNativeName(v string) *LanguageCreate {
	_c.mutation.SetNativeName(v)
	return _c
}

// SetNillableNativeName sets the "native_name" field if the given value is not nil.
func (_c *LanguageCreate) SetNillableNativeName(v *string) *LanguageCreate {
	if v != nil {
		_c.SetNativeName(*v)
	}
	return _c
}

// SetIsDefault sets the "is_default" field.
func (_c *LanguageCreate) SetIsDefault(v bool) *LanguageCreate {
	_c.mutation.SetIsDefault(v)
	return _c
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (_c *LanguageCreate) SetNillableIsDefault(v *bool) *LanguageCreate {
	if v != nil {
		_c.SetIsDefault(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *LanguageCreate) SetID(v uint32) *LanguageCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the LanguageMutation object of the builder.
func (_c *LanguageCreate) Mutation() *LanguageMutation {
	return _c.mutation
}

// Save creates the Language in the database.
func (_c *LanguageCreate) Save(ctx context.Context) (*Language, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *LanguageCreate) SaveX(ctx context.Context) *Language {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *LanguageCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *LanguageCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *LanguageCreate) defaults() {
	if _, ok := _c.mutation.SortOrder(); !ok {
		v := language.DefaultSortOrder
		_c.mutation.SetSortOrder(v)
	}
	if _, ok := _c.mutation.IsEnabled(); !ok {
		v := language.DefaultIsEnabled
		_c.mutation.SetIsEnabled(v)
	}
	if _, ok := _c.mutation.IsDefault(); !ok {
		v := language.DefaultIsDefault
		_c.mutation.SetIsDefault(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *LanguageCreate) check() error {
	if v, ok := _c.mutation.LanguageCode(); ok {
		if err := language.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "Language.language_code": %w`, err)}
		}
	}
	if v, ok := _c.mutation.LanguageName(); ok {
		if err := language.LanguageNameValidator(v); err != nil {
			return &ValidationError{Name: "language_name", err: fmt.Errorf(`ent: validator failed for field "Language.language_name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.NativeName(); ok {
		if err := language.NativeNameValidator(v); err != nil {
			return &ValidationError{Name: "native_name", err: fmt.Errorf(`ent: validator failed for field "Language.native_name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := language.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Language.id": %w`, err)}
		}
	}
	return nil
}

func (_c *LanguageCreate) sqlSave(ctx context.Context) (*Language, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *LanguageCreate) createSpec() (*Language, *sqlgraph.CreateSpec) {
	var (
		_node = &Language{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(language.Table, sqlgraph.NewFieldSpec(language.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(language.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(language.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(language.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(language.FieldCreatedBy, field.TypeUint32, value)
		_node.CreatedBy = &value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(language.FieldUpdatedBy, field.TypeUint32, value)
		_node.UpdatedBy = &value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(language.FieldDeletedBy, field.TypeUint32, value)
		_node.DeletedBy = &value
	}
	if value, ok := _c.mutation.SortOrder(); ok {
		_spec.SetField(language.FieldSortOrder, field.TypeInt32, value)
		_node.SortOrder = &value
	}
	if value, ok := _c.mutation.IsEnabled(); ok {
		_spec.SetField(language.FieldIsEnabled, field.TypeBool, value)
		_node.IsEnabled = &value
	}
	if value, ok := _c.mutation.LanguageCode(); ok {
		_spec.SetField(language.FieldLanguageCode, field.TypeString, value)
		_node.LanguageCode = &value
	}
	if value, ok := _c.mutation.LanguageName(); ok {
		_spec.SetField(language.FieldLanguageName, field.TypeString, value)
		_node.LanguageName = &value
	}
	if value, ok := _c.mutation.NativeName(); ok {
		_spec.SetField(language.FieldNativeName, field.TypeString, value)
		_node.NativeName = &value
	}
	if value, ok := _c.mutation.IsDefault(); ok {
		_spec.SetField(language.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Language.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LanguageUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *LanguageCreate) OnConflict(opts ...sql.ConflictOption) *LanguageUpsertOne {
	_c.conflict = opts
	return &LanguageUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Language.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *LanguageCreate) OnConflictColumns(columns ...string) *LanguageUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &LanguageUpsertOne{
		create: _c,
	}
}

type (
	// LanguageUpsertOne is the builder for "upsert"-ing
	//  one Language node.
	LanguageUpsertOne struct {
		create *LanguageCreate
	}

	// LanguageUpsert is the "OnConflict" setter.
	LanguageUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *LanguageUpsert) SetUpdatedAt(v time.Time) *LanguageUpsert {
	u.Set(language.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LanguageUpsert) UpdateUpdatedAt() *LanguageUpsert {
	u.SetExcluded(language.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *LanguageUpsert) ClearUpdatedAt() *LanguageUpsert {
	u.SetNull(language.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LanguageUpsert) SetDeletedAt(v time.Time) *LanguageUpsert {
	u.Set(language.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LanguageUpsert) UpdateDeletedAt() *LanguageUpsert {
	u.SetExcluded(language.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *LanguageUpsert) ClearDeletedAt() *LanguageUpsert {
	u.SetNull(language.FieldDeletedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *LanguageUpsert) SetCreatedBy(v uint32) *LanguageUpsert {
	u.Set(language.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LanguageUpsert) UpdateCreatedBy() *LanguageUpsert {
	u.SetExcluded(language.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LanguageUpsert) AddCreatedBy(v uint32) *LanguageUpsert {
	u.Add(language.FieldCreatedBy, v)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *LanguageUpsert) ClearCreatedBy() *LanguageUpsert {
	u.SetNull(language.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LanguageUpsert) SetUpdatedBy(v uint32) *LanguageUpsert {
	u.Set(language.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LanguageUpsert) UpdateUpdatedBy() *LanguageUpsert {
	u.SetExcluded(language.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LanguageUpsert) AddUpdatedBy(v uint32) *LanguageUpsert {
	u.Add(language.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *LanguageUpsert) ClearUpdatedBy() *LanguageUpsert {
	u.SetNull(language.FieldUpdatedBy)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *LanguageUpsert) SetDeletedBy(v uint32) *LanguageUpsert {
	u.Set(language.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *LanguageUpsert) UpdateDeletedBy() *LanguageUpsert {
	u.SetExcluded(language.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *LanguageUpsert) AddDeletedBy(v uint32) *LanguageUpsert {
	u.Add(language.FieldDeletedBy, v)
	return u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *LanguageUpsert) ClearDeletedBy() *LanguageUpsert {
	u.SetNull(language.FieldDeletedBy)
	return u
}

// SetSortOrder sets the "sort_order" field.
func (u *LanguageUpsert) SetSortOrder(v int32) *LanguageUpsert {
	u.Set(language.FieldSortOrder, v)
	return u
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *LanguageUpsert) UpdateSortOrder() *LanguageUpsert {
	u.SetExcluded(language.FieldSortOrder)
	return u
}

// AddSortOrder adds v to the "sort_order" field.
func (u *LanguageUpsert) AddSortOrder(v int32) *LanguageUpsert {
	u.Add(language.FieldSortOrder, v)
	return u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (u *LanguageUpsert) ClearSortOrder() *LanguageUpsert {
	u.SetNull(language.FieldSortOrder)
	return u
}

// SetIsEnabled sets the "is_enabled" field.
func (u *LanguageUpsert) SetIsEnabled(v bool) *LanguageUpsert {
	u.Set(language.FieldIsEnabled, v)
	return u
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *LanguageUpsert) UpdateIsEnabled() *LanguageUpsert {
	u.SetExcluded(language.FieldIsEnabled)
	return u
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (u *LanguageUpsert) ClearIsEnabled() *LanguageUpsert {
	u.SetNull(language.FieldIsEnabled)
	return u
}

// SetLanguageCode sets the "language_code" field.
func (u *LanguageUpsert) SetLanguageCode(v string) *LanguageUpsert {
	u.Set(language.FieldLanguageCode, v)
	return u
}

// UpdateLanguageCode sets the "language_code" field to the value that was provided on create.
func (u *LanguageUpsert) UpdateLanguageCode() *LanguageUpsert {
	u.SetExcluded(language.FieldLanguageCode)
	return u
}

// ClearLanguageCode clears the value of the "language_code" field.
func (u *LanguageUpsert) ClearLanguageCode() *LanguageUpsert {
	u.SetNull(language.FieldLanguageCode)
	return u
}

// SetLanguageName sets the "language_name" field.
func (u *LanguageUpsert) SetLanguageName(v string) *LanguageUpsert {
	u.Set(language.FieldLanguageName, v)
	return u
}

// UpdateLanguageName sets the "language_name" field to the value that was provided on create.
func (u *LanguageUpsert) UpdateLanguageName() *LanguageUpsert {
	u.SetExcluded(language.FieldLanguageName)
	return u
}

// ClearLanguageName clears the value of the "language_name" field.
func (u *LanguageUpsert) ClearLanguageName() *LanguageUpsert {
	u.SetNull(language.FieldLanguageName)
	return u
}

// SetNativeName sets the "native_name" field.
func (u *LanguageUpsert) SetNativeName(v string) *LanguageUpsert {
	u.Set(language.FieldNativeName, v)
	return u
}

// UpdateNativeName sets the "native_name" field to the value that was provided on create.
func (u *LanguageUpsert) UpdateNativeName() *LanguageUpsert {
	u.SetExcluded(language.FieldNativeName)
	return u
}

// ClearNativeName clears the value of the "native_name" field.
func (u *LanguageUpsert) ClearNativeName() *LanguageUpsert {
	u.SetNull(language.FieldNativeName)
	return u
}

// SetIsDefault sets the "is_default" field.
func (u *LanguageUpsert) SetIsDefault(v bool) *LanguageUpsert {
	u.Set(language.FieldIsDefault, v)
	return u
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *LanguageUpsert) UpdateIsDefault() *LanguageUpsert {
	u.SetExcluded(language.FieldIsDefault)
	return u
}

// ClearIsDefault clears the value of the "is_default" field.
func (u *LanguageUpsert) ClearIsDefault() *LanguageUpsert {
	u.SetNull(language.FieldIsDefault)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Language.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(language.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LanguageUpsertOne) UpdateNewValues() *LanguageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(language.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(language.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Language.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LanguageUpsertOne) Ignore() *LanguageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LanguageUpsertOne) DoNothing() *LanguageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LanguageCreate.OnConflict
// documentation for more info.
func (u *LanguageUpsertOne) Update(set func(*LanguageUpsert)) *LanguageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LanguageUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LanguageUpsertOne) SetUpdatedAt(v time.Time) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LanguageUpsertOne) UpdateUpdatedAt() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *LanguageUpsertOne) ClearUpdatedAt() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LanguageUpsertOne) SetDeletedAt(v time.Time) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LanguageUpsertOne) UpdateDeletedAt() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *LanguageUpsertOne) ClearDeletedAt() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *LanguageUpsertOne) SetCreatedBy(v uint32) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LanguageUpsertOne) AddCreatedBy(v uint32) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LanguageUpsertOne) UpdateCreatedBy() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *LanguageUpsertOne) ClearCreatedBy() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LanguageUpsertOne) SetUpdatedBy(v uint32) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LanguageUpsertOne) AddUpdatedBy(v uint32) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LanguageUpsertOne) UpdateUpdatedBy() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *LanguageUpsertOne) ClearUpdatedBy() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *LanguageUpsertOne) SetDeletedBy(v uint32) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *LanguageUpsertOne) AddDeletedBy(v uint32) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *LanguageUpsertOne) UpdateDeletedBy() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *LanguageUpsertOne) ClearDeletedBy() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearDeletedBy()
	})
}

// SetSortOrder sets the "sort_order" field.
func (u *LanguageUpsertOne) SetSortOrder(v int32) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.SetSortOrder(v)
	})
}

// AddSortOrder adds v to the "sort_order" field.
func (u *LanguageUpsertOne) AddSortOrder(v int32) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.AddSortOrder(v)
	})
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *LanguageUpsertOne) UpdateSortOrder() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateSortOrder()
	})
}

// ClearSortOrder clears the value of the "sort_order" field.
func (u *LanguageUpsertOne) ClearSortOrder() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearSortOrder()
	})
}

// SetIsEnabled sets the "is_enabled" field.
func (u *LanguageUpsertOne) SetIsEnabled(v bool) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.SetIsEnabled(v)
	})
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *LanguageUpsertOne) UpdateIsEnabled() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateIsEnabled()
	})
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (u *LanguageUpsertOne) ClearIsEnabled() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearIsEnabled()
	})
}

// SetLanguageCode sets the "language_code" field.
func (u *LanguageUpsertOne) SetLanguageCode(v string) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.SetLanguageCode(v)
	})
}

// UpdateLanguageCode sets the "language_code" field to the value that was provided on create.
func (u *LanguageUpsertOne) UpdateLanguageCode() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateLanguageCode()
	})
}

// ClearLanguageCode clears the value of the "language_code" field.
func (u *LanguageUpsertOne) ClearLanguageCode() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearLanguageCode()
	})
}

// SetLanguageName sets the "language_name" field.
func (u *LanguageUpsertOne) SetLanguageName(v string) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.SetLanguageName(v)
	})
}

// UpdateLanguageName sets the "language_name" field to the value that was provided on create.
func (u *LanguageUpsertOne) UpdateLanguageName() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateLanguageName()
	})
}

// ClearLanguageName clears the value of the "language_name" field.
func (u *LanguageUpsertOne) ClearLanguageName() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearLanguageName()
	})
}

// SetNativeName sets the "native_name" field.
func (u *LanguageUpsertOne) SetNativeName(v string) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.SetNativeName(v)
	})
}

// UpdateNativeName sets the "native_name" field to the value that was provided on create.
func (u *LanguageUpsertOne) UpdateNativeName() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateNativeName()
	})
}

// ClearNativeName clears the value of the "native_name" field.
func (u *LanguageUpsertOne) ClearNativeName() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearNativeName()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *LanguageUpsertOne) SetIsDefault(v bool) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *LanguageUpsertOne) UpdateIsDefault() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateIsDefault()
	})
}

// ClearIsDefault clears the value of the "is_default" field.
func (u *LanguageUpsertOne) ClearIsDefault() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearIsDefault()
	})
}

// Exec executes the query.
func (u *LanguageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LanguageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LanguageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LanguageUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LanguageUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LanguageCreateBulk is the builder for creating many Language entities in bulk.
type LanguageCreateBulk struct {
	config
	err      error
	builders []*LanguageCreate
	conflict []sql.ConflictOption
}

// Save creates the Language entities in the database.
func (_c *LanguageCreateBulk) Save(ctx context.Context) ([]*Language, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Language, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LanguageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *LanguageCreateBulk) SaveX(ctx context.Context) []*Language {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *LanguageCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *LanguageCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Language.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LanguageUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *LanguageCreateBulk) OnConflict(opts ...sql.ConflictOption) *LanguageUpsertBulk {
	_c.conflict = opts
	return &LanguageUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Language.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *LanguageCreateBulk) OnConflictColumns(columns ...string) *LanguageUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &LanguageUpsertBulk{
		create: _c,
	}
}

// LanguageUpsertBulk is the builder for "upsert"-ing
// a bulk of Language nodes.
type LanguageUpsertBulk struct {
	create *LanguageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Language.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(language.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LanguageUpsertBulk) UpdateNewValues() *LanguageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(language.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(language.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Language.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LanguageUpsertBulk) Ignore() *LanguageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LanguageUpsertBulk) DoNothing() *LanguageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LanguageCreateBulk.OnConflict
// documentation for more info.
func (u *LanguageUpsertBulk) Update(set func(*LanguageUpsert)) *LanguageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LanguageUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LanguageUpsertBulk) SetUpdatedAt(v time.Time) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LanguageUpsertBulk) UpdateUpdatedAt() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *LanguageUpsertBulk) ClearUpdatedAt() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LanguageUpsertBulk) SetDeletedAt(v time.Time) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LanguageUpsertBulk) UpdateDeletedAt() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *LanguageUpsertBulk) ClearDeletedAt() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *LanguageUpsertBulk) SetCreatedBy(v uint32) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *LanguageUpsertBulk) AddCreatedBy(v uint32) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *LanguageUpsertBulk) UpdateCreatedBy() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *LanguageUpsertBulk) ClearCreatedBy() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *LanguageUpsertBulk) SetUpdatedBy(v uint32) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *LanguageUpsertBulk) AddUpdatedBy(v uint32) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *LanguageUpsertBulk) UpdateUpdatedBy() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *LanguageUpsertBulk) ClearUpdatedBy() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *LanguageUpsertBulk) SetDeletedBy(v uint32) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *LanguageUpsertBulk) AddDeletedBy(v uint32) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *LanguageUpsertBulk) UpdateDeletedBy() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *LanguageUpsertBulk) ClearDeletedBy() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearDeletedBy()
	})
}

// SetSortOrder sets the "sort_order" field.
func (u *LanguageUpsertBulk) SetSortOrder(v int32) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.SetSortOrder(v)
	})
}

// AddSortOrder adds v to the "sort_order" field.
func (u *LanguageUpsertBulk) AddSortOrder(v int32) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.AddSortOrder(v)
	})
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *LanguageUpsertBulk) UpdateSortOrder() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateSortOrder()
	})
}

// ClearSortOrder clears the value of the "sort_order" field.
func (u *LanguageUpsertBulk) ClearSortOrder() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearSortOrder()
	})
}

// SetIsEnabled sets the "is_enabled" field.
func (u *LanguageUpsertBulk) SetIsEnabled(v bool) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.SetIsEnabled(v)
	})
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *LanguageUpsertBulk) UpdateIsEnabled() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateIsEnabled()
	})
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (u *LanguageUpsertBulk) ClearIsEnabled() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearIsEnabled()
	})
}

// SetLanguageCode sets the "language_code" field.
func (u *LanguageUpsertBulk) SetLanguageCode(v string) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.SetLanguageCode(v)
	})
}

// UpdateLanguageCode sets the "language_code" field to the value that was provided on create.
func (u *LanguageUpsertBulk) UpdateLanguageCode() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateLanguageCode()
	})
}

// ClearLanguageCode clears the value of the "language_code" field.
func (u *LanguageUpsertBulk) ClearLanguageCode() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearLanguageCode()
	})
}

// SetLanguageName sets the "language_name" field.
func (u *LanguageUpsertBulk) SetLanguageName(v string) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.SetLanguageName(v)
	})
}

// UpdateLanguageName sets the "language_name" field to the value that was provided on create.
func (u *LanguageUpsertBulk) UpdateLanguageName() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateLanguageName()
	})
}

// ClearLanguageName clears the value of the "language_name" field.
func (u *LanguageUpsertBulk) ClearLanguageName() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearLanguageName()
	})
}

// SetNativeName sets the "native_name" field.
func (u *LanguageUpsertBulk) SetNativeName(v string) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.SetNativeName(v)
	})
}

// UpdateNativeName sets the "native_name" field to the value that was provided on create.
func (u *LanguageUpsertBulk) UpdateNativeName() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateNativeName()
	})
}

// ClearNativeName clears the value of the "native_name" field.
func (u *LanguageUpsertBulk) ClearNativeName() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearNativeName()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *LanguageUpsertBulk) SetIsDefault(v bool) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *LanguageUpsertBulk) UpdateIsDefault() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateIsDefault()
	})
}

// ClearIsDefault clears the value of the "is_default" field.
func (u *LanguageUpsertBulk) ClearIsDefault() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearIsDefault()
	})
}

// Exec executes the query.
func (u *LanguageUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LanguageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LanguageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LanguageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/dictentry"
	"kratos-admin/app/admin/service/internal/data/ent/dicttype"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictTypeCreate is the builder for creating a DictType entity.
type DictTypeCreate struct {
	config
	mutation *DictTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *DictTypeCreate) SetCreatedAt(v time.Time) *DictTypeCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *DictTypeCreate) SetNillableCreatedAt(v *time.Time) *DictTypeCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *DictTypeCreate) SetUpdatedAt(v time.Time) *DictTypeCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *DictTypeCreate) SetNillableUpdatedAt(v *time.Time) *DictTypeCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *DictTypeCreate) SetDeletedAt(v time.Time) *DictTypeCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *DictTypeCreate) SetNillableDeletedAt(v *time.Time) *DictTypeCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *DictTypeCreate) SetCreatedBy(v uint32) *DictTypeCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *DictTypeCreate) SetNillableCreatedBy(v *uint32) *DictTypeCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *DictTypeCreate) SetUpdatedBy(v uint32) *DictTypeCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *DictTypeCreate) SetNillableUpdatedBy(v *uint32) *DictTypeCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *DictTypeCreate) SetDeletedBy(v uint32) *DictTypeCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *DictTypeCreate) SetNillableDeletedBy(v *uint32) *DictTypeCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetIsEnabled sets the "is_enabled" field.
func (_c *DictTypeCreate) SetIsEnabled(v bool) *DictTypeCreate {
	_c.mutation.SetIsEnabled(v)
	return _c
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_c *DictTypeCreate) SetNillableIsEnabled(v *bool) *DictTypeCreate {
	if v != nil {
		_c.SetIsEnabled(*v)
	}
	return _c
}

// SetSortOrder sets the "sort_order" field.
func (_c *DictTypeCreate) SetSortOrder(v int32) *DictTypeCreate {
	_c.mutation.SetSortOrder(v)
	return _c
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_c *DictTypeCreate) SetNillableSortOrder(v *int32) *DictTypeCreate {
	if v != nil {
		_c.SetSortOrder(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *DictTypeCreate) SetDescription(v string) *DictTypeCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *DictTypeCreate) SetNillableDescription(v *string) *DictTypeCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *DictTypeCreate) SetTenantID(v uint32) *DictTypeCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_c *DictTypeCreate) SetNillableTenantID(v *uint32) *DictTypeCreate {
	if v != nil {
		_c.SetTenantID(*v)
	}
	return _c
}

// SetTypeCode sets the "type_code" field.
func (_c *DictTypeCreate) SetTypeCode(v string) *DictTypeCreate {
	_c.mutation.SetTypeCode(v)
	return _c
}

// SetNillableTypeCode sets the "type_code" field if the given value is not nil.
func (_c *DictTypeCreate) SetNillableTypeCode(v *string) *DictTypeCreate {
	if v != nil {
		_c.SetTypeCode(*v)
	}
	return _c
}

// SetTypeName sets the "type_name" field.
func (_c *DictTypeCreate) SetTypeName(v string) *DictTypeCreate {
	_c.mutation.SetTypeName(v)
	return _c
}

// SetNillableTypeName sets the "type_name" field if the given value is not nil.
func (_c *DictTypeCreate) SetNillableTypeName(v *string) *DictTypeCreate {
	if v != nil {
		_c.SetTypeName(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *DictTypeCreate) SetID(v uint32) *DictTypeCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddEntryIDs adds the "entries" edge to the DictEntry entity by IDs.
func (_c *DictTypeCreate) AddEntryIDs(ids ...uint32) *DictTypeCreate {
	_c.mutation.AddEntryIDs(ids...)
	return _c
}

// AddEntries adds the "entries" edges to the DictEntry entity.
func (_c *DictTypeCreate) AddEntries(v ...*DictEntry) *DictTypeCreate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEntryIDs(ids...)
}

// Mutation returns the DictTypeMutation object of the builder.
func (_c *DictTypeCreate) Mutation() *DictTypeMutation {
	return _c.mutation
}

// Save creates the DictType in the database.
func (_c *DictTypeCreate) Save(ctx context.Context) (*DictType, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DictTypeCreate) SaveX(ctx context.Context) *DictType {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DictTypeCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DictTypeCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DictTypeCreate) defaults() {
	if _, ok := _c.mutation.IsEnabled(); !ok {
		v := dicttype.DefaultIsEnabled
		_c.mutation.SetIsEnabled(v)
	}
	if _, ok := _c.mutation.SortOrder(); !ok {
		v := dicttype.DefaultSortOrder
		_c.mutation.SetSortOrder(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DictTypeCreate) check() error {
	if v, ok := _c.mutation.TypeCode(); ok {
		if err := dicttype.TypeCodeValidator(v); err != nil {
			return &ValidationError{Name: "type_code", err: fmt.Errorf(`ent: validator failed for field "DictType.type_code": %w`, err)}
		}
	}
	if v, ok := _c.mutation.TypeName(); ok {
		if err := dicttype.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "type_name", err: fmt.Errorf(`ent: validator failed for field "DictType.type_name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := dicttype.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "DictType.id": %w`, err)}
		}
	}
	return nil
}

func (_c *DictTypeCreate) sqlSave(ctx context.Context) (*DictType, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DictTypeCreate) createSpec() (*DictType, *sqlgraph.CreateSpec) {
	var (
		_node = &DictType{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(dicttype.Table, sqlgraph.NewFieldSpec(dicttype.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(dicttype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(dicttype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(dicttype.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(dicttype.FieldCreatedBy, field.TypeUint32, value)
		_node.CreatedBy = &value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(dicttype.FieldUpdatedBy, field.TypeUint32, value)
		_node.UpdatedBy = &value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(dicttype.FieldDeletedBy, field.TypeUint32, value)
		_node.DeletedBy = &value
	}
	if value, ok := _c.mutation.IsEnabled(); ok {
		_spec.SetField(dicttype.FieldIsEnabled, field.TypeBool, value)
		_node.IsEnabled = &value
	}
	if value, ok := _c.mutation.SortOrder(); ok {
		_spec.SetField(dicttype.FieldSortOrder, field.TypeInt32, value)
		_node.SortOrder = &value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(dicttype.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(dicttype.FieldTenantID, field.TypeUint32, value)
		_node.TenantID = &value
	}
	if value, ok := _c.mutation.TypeCode(); ok {
		_spec.SetField(dicttype.FieldTypeCode, field.TypeString, value)
		_node.TypeCode = &value
	}
	if value, ok := _c.mutation.TypeName(); ok {
		_spec.SetField(dicttype.FieldTypeName, field.TypeString, value)
		_node.TypeName = &value
	}
	if nodes := _c.mutation.EntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dicttype.EntriesTable,
			Columns: []string{dicttype.EntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictentry.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DictType.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictTypeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *DictTypeCreate) OnConflict(opts ...sql.ConflictOption) *DictTypeUpsertOne {
	_c.conflict = opts
	return &DictTypeUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DictType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DictTypeCreate) OnConflictColumns(columns ...string) *DictTypeUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DictTypeUpsertOne{
		create: _c,
	}
}

type (
	// DictTypeUpsertOne is the builder for "upsert"-ing
	//  one DictType node.
	DictTypeUpsertOne struct {
		create *DictTypeCreate
	}

	// DictTypeUpsert is the "OnConflict" setter.
	DictTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *DictTypeUpsert) SetUpdatedAt(v time.Time) *DictTypeUpsert {
	u.Set(dicttype.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateUpdatedAt() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *DictTypeUpsert) ClearUpdatedAt() *DictTypeUpsert {
	u.SetNull(dicttype.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DictTypeUpsert) SetDeletedAt(v time.Time) *DictTypeUpsert {
	u.Set(dicttype.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateDeletedAt() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DictTypeUpsert) ClearDeletedAt() *DictTypeUpsert {
	u.SetNull(dicttype.FieldDeletedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *DictTypeUpsert) SetCreatedBy(v uint32) *DictTypeUpsert {
	u.Set(dicttype.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateCreatedBy() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *DictTypeUpsert) AddCreatedBy(v uint32) *DictTypeUpsert {
	u.Add(dicttype.FieldCreatedBy, v)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *DictTypeUpsert) ClearCreatedBy() *DictTypeUpsert {
	u.SetNull(dicttype.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DictTypeUpsert) SetUpdatedBy(v uint32) *DictTypeUpsert {
	u.Set(dicttype.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateUpdatedBy() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DictTypeUpsert) AddUpdatedBy(v uint32) *DictTypeUpsert {
	u.Add(dicttype.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DictTypeUpsert) ClearUpdatedBy() *DictTypeUpsert {
	u.SetNull(dicttype.FieldUpdatedBy)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *DictTypeUpsert) SetDeletedBy(v uint32) *DictTypeUpsert {
	u.Set(dicttype.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateDeletedBy() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *DictTypeUpsert) AddDeletedBy(v uint32) *DictTypeUpsert {
	u.Add(dicttype.FieldDeletedBy, v)
	return u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *DictTypeUpsert) ClearDeletedBy() *DictTypeUpsert {
	u.SetNull(dicttype.FieldDeletedBy)
	return u
}

// SetIsEnabled sets the "is_enabled" field.
func (u *DictTypeUpsert) SetIsEnabled(v bool) *DictTypeUpsert {
	u.Set(dicttype.FieldIsEnabled, v)
	return u
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateIsEnabled() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldIsEnabled)
	return u
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (u *DictTypeUpsert) ClearIsEnabled() *DictTypeUpsert {
	u.SetNull(dicttype.FieldIsEnabled)
	return u
}

// SetSortOrder sets the "sort_order" field.
func (u *DictTypeUpsert) SetSortOrder(v int32) *DictTypeUpsert {
	u.Set(dicttype.FieldSortOrder, v)
	return u
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateSortOrder() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldSortOrder)
	return u
}

// AddSortOrder adds v to the "sort_order" field.
func (u *DictTypeUpsert) AddSortOrder(v int32) *DictTypeUpsert {
	u.Add(dicttype.FieldSortOrder, v)
	return u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (u *DictTypeUpsert) ClearSortOrder() *DictTypeUpsert {
	u.SetNull(dicttype.FieldSortOrder)
	return u
}

// SetDescription sets the "description" field.
func (u *DictTypeUpsert) SetDescription(v string) *DictTypeUpsert {
	u.Set(dicttype.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateDescription() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *DictTypeUpsert) ClearDescription() *DictTypeUpsert {
	u.SetNull(dicttype.FieldDescription)
	return u
}

// SetTypeCode sets the "type_code" field.
func (u *DictTypeUpsert) SetTypeCode(v string) *DictTypeUpsert {
	u.Set(dicttype.FieldTypeCode, v)
	return u
}

// UpdateTypeCode sets the "type_code" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateTypeCode() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldTypeCode)
	return u
}

// ClearTypeCode clears the value of the "type_code" field.
func (u *DictTypeUpsert) ClearTypeCode() *DictTypeUpsert {
	u.SetNull(dicttype.FieldTypeCode)
	return u
}

// SetTypeName sets the "type_name" field.
func (u *DictTypeUpsert) SetTypeName(v string) *DictTypeUpsert {
	u.Set(dicttype.FieldTypeName, v)
	return u
}

// UpdateTypeName sets the "type_name" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateTypeName() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldTypeName)
	return u
}

// ClearTypeName clears the value of the "type_name" field.
func (u *DictTypeUpsert) ClearTypeName() *DictTypeUpsert {
	u.SetNull(dicttype.FieldTypeName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DictType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dicttype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DictTypeUpsertOne) UpdateNewValues() *DictTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(dicttype.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(dicttype.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(dicttype.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DictType.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DictTypeUpsertOne) Ignore() *DictTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictTypeUpsertOne) DoNothing() *DictTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictTypeCreate.OnConflict
// documentation for more info.
func (u *DictTypeUpsertOne) Update(set func(*DictTypeUpsert)) *DictTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DictTypeUpsertOne) SetUpdatedAt(v time.Time) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateUpdatedAt() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *DictTypeUpsertOne) ClearUpdatedAt() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DictTypeUpsertOne) SetDeletedAt(v time.Time) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateDeletedAt() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DictTypeUpsertOne) ClearDeletedAt() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *DictTypeUpsertOne) SetCreatedBy(v uint32) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *DictTypeUpsertOne) AddCreatedBy(v uint32) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateCreatedBy() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *DictTypeUpsertOne) ClearCreatedBy() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DictTypeUpsertOne) SetUpdatedBy(v uint32) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DictTypeUpsertOne) AddUpdatedBy(v uint32) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateUpdatedBy() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DictTypeUpsertOne) ClearUpdatedBy() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *DictTypeUpsertOne) SetDeletedBy(v uint32) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *DictTypeUpsertOne) AddDeletedBy(v uint32) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateDeletedBy() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *DictTypeUpsertOne) ClearDeletedBy() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearDeletedBy()
	})
}

// SetIsEnabled sets the "is_enabled" field.
func (u *DictTypeUpsertOne) SetIsEnabled(v bool) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetIsEnabled(v)
	})
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateIsEnabled() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateIsEnabled()
	})
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (u *DictTypeUpsertOne) ClearIsEnabled() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearIsEnabled()
	})
}

// SetSortOrder sets the "sort_order" field.
func (u *DictTypeUpsertOne) SetSortOrder(v int32) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetSortOrder(v)
	})
}

// AddSortOrder adds v to the "sort_order" field.
func (u *DictTypeUpsertOne) AddSortOrder(v int32) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.AddSortOrder(v)
	})
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateSortOrder() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateSortOrder()
	})
}

// ClearSortOrder clears the value of the "sort_order" field.
func (u *DictTypeUpsertOne) ClearSortOrder() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearSortOrder()
	})
}

// SetDescription sets the "description" field.
func (u *DictTypeUpsertOne) SetDescription(v string) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateDescription() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DictTypeUpsertOne) ClearDescription() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearDescription()
	})
}

// SetTypeCode sets the "type_code" field.
func (u *DictTypeUpsertOne) SetTypeCode(v string) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetTypeCode(v)
	})
}

// UpdateTypeCode sets the "type_code" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateTypeCode() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateTypeCode()
	})
}

// ClearTypeCode clears the value of the "type_code" field.
func (u *DictTypeUpsertOne) ClearTypeCode() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearTypeCode()
	})
}

// SetTypeName sets the "type_name" field.
func (u *DictTypeUpsertOne) SetTypeName(v string) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetTypeName(v)
	})
}

// UpdateTypeName sets the "type_name" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateTypeName() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateTypeName()
	})
}

// ClearTypeName clears the value of the "type_name" field.
func (u *DictTypeUpsertOne) ClearTypeName() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearTypeName()
	})
}

// Exec executes the query.
func (u *DictTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DictTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DictTypeUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DictTypeUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DictTypeCreateBulk is the builder for creating many DictType entities in bulk.
type DictTypeCreateBulk struct {
	config
	err      error
	builders []*DictTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the DictType entities in the database.
func (_c *DictTypeCreateBulk) Save(ctx context.Context) ([]*DictType, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*DictType, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DictTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DictTypeCreateBulk) SaveX(ctx context.Context) []*DictType {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DictTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DictTypeCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DictType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictTypeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *DictTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *DictTypeUpsertBulk {
	_c.conflict = opts
	return &DictTypeUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DictType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DictTypeCreateBulk) OnConflictColumns(columns ...string) *DictTypeUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DictTypeUpsertBulk{
		create: _c,
	}
}

// DictTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of DictType nodes.
type DictTypeUpsertBulk struct {
	create *DictTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DictType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dicttype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DictTypeUpsertBulk) UpdateNewValues() *DictTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(dicttype.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(dicttype.FieldCreatedAt)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(dicttype.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DictType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DictTypeUpsertBulk) Ignore() *DictTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictTypeUpsertBulk) DoNothing() *DictTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictTypeCreateBulk.OnConflict
// documentation for more info.
func (u *DictTypeUpsertBulk) Update(set func(*DictTypeUpsert)) *DictTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DictTypeUpsertBulk) SetUpdatedAt(v time.Time) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateUpdatedAt() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *DictTypeUpsertBulk) ClearUpdatedAt() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DictTypeUpsertBulk) SetDeletedAt(v time.Time) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateDeletedAt() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DictTypeUpsertBulk) ClearDeletedAt() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *DictTypeUpsertBulk) SetCreatedBy(v uint32) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *DictTypeUpsertBulk) AddCreatedBy(v uint32) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateCreatedBy() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *DictTypeUpsertBulk) ClearCreatedBy() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DictTypeUpsertBulk) SetUpdatedBy(v uint32) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DictTypeUpsertBulk) AddUpdatedBy(v uint32) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateUpdatedBy() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DictTypeUpsertBulk) ClearUpdatedBy() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *DictTypeUpsertBulk) SetDeletedBy(v uint32) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *DictTypeUpsertBulk) AddDeletedBy(v uint32) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateDeletedBy() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *DictTypeUpsertBulk) ClearDeletedBy() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearDeletedBy()
	})
}

// SetIsEnabled sets the "is_enabled" field.
func (u *DictTypeUpsertBulk) SetIsEnabled(v bool) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetIsEnabled(v)
	})
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateIsEnabled() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateIsEnabled()
	})
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (u *DictTypeUpsertBulk) ClearIsEnabled() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearIsEnabled()
	})
}

// SetSortOrder sets the "sort_order" field.
func (u *DictTypeUpsertBulk) SetSortOrder(v int32) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetSortOrder(v)
	})
}

// AddSortOrder adds v to the "sort_order" field.
func (u *DictTypeUpsertBulk) AddSortOrder(v int32) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.AddSortOrder(v)
	})
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateSortOrder() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateSortOrder()
	})
}

// ClearSortOrder clears the value of the "sort_order" field.
func (u *DictTypeUpsertBulk) ClearSortOrder() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearSortOrder()
	})
}

// SetDescription sets the "description" field.
func (u *DictTypeUpsertBulk) SetDescription(v string) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateDescription() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DictTypeUpsertBulk) ClearDescription() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearDescription()
	})
}

// SetTypeCode sets the "type_code" field.
func (u *DictTypeUpsertBulk) SetTypeCode(v string) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetTypeCode(v)
	})
}

// UpdateTypeCode sets the "type_code" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateTypeCode() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateTypeCode()
	})
}

// ClearTypeCode clears the value of the "type_code" field.
func (u *DictTypeUpsertBulk) ClearTypeCode() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearTypeCode()
	})
}

// SetTypeName sets the "type_name" field.
func (u *DictTypeUpsertBulk) SetTypeName(v string) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetTypeName(v)
	})
}

// UpdateTypeName sets the "type_name" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateTypeName() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateTypeName()
	})
}

// ClearTypeName clears the value of the "type_name" field.
func (u *DictTypeUpsertBulk) ClearTypeName() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearTypeName()
	})
}

// Exec executes the query.
func (u *DictTypeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DictTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DictTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/adminloginlog"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminLoginLogUpdate is the builder for updating AdminLoginLog entities.
type AdminLoginLogUpdate struct {
	config
	hooks     []Hook
	mutation  *AdminLoginLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AdminLoginLogUpdate builder.
func (_u *AdminLoginLogUpdate) Where(ps ...predicate.AdminLoginLog) *AdminLoginLogUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetLoginIP sets the "login_ip" field.
func (_u *AdminLoginLogUpdate) SetLoginIP(v string) *AdminLoginLogUpdate {
	_u.mutation.SetLoginIP(v)
	return _u
}

// SetNillableLoginIP sets the "login_ip" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableLoginIP(v *string) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetLoginIP(*v)
	}
	return _u
}

// ClearLoginIP clears the value of the "login_ip" field.
func (_u *AdminLoginLogUpdate) ClearLoginIP() *AdminLoginLogUpdate {
	_u.mutation.ClearLoginIP()
	return _u
}

// SetLoginMAC sets the "login_mac" field.
func (_u *AdminLoginLogUpdate) SetLoginMAC(v string) *AdminLoginLogUpdate {
	_u.mutation.SetLoginMAC(v)
	return _u
}

// SetNillableLoginMAC sets the "login_mac" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableLoginMAC(v *string) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetLoginMAC(*v)
	}
	return _u
}

// ClearLoginMAC clears the value of the "login_mac" field.
func (_u *AdminLoginLogUpdate) ClearLoginMAC() *AdminLoginLogUpdate {
	_u.mutation.ClearLoginMAC()
	return _u
}

// SetLoginTime sets the "login_time" field.
func (_u *AdminLoginLogUpdate) SetLoginTime(v time.Time) *AdminLoginLogUpdate {
	_u.mutation.SetLoginTime(v)
	return _u
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableLoginTime(v *time.Time) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetLoginTime(*v)
	}
	return _u
}

// ClearLoginTime clears the value of the "login_time" field.
func (_u *AdminLoginLogUpdate) ClearLoginTime() *AdminLoginLogUpdate {
	_u.mutation.ClearLoginTime()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *AdminLoginLogUpdate) SetUserAgent(v string) *AdminLoginLogUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableUserAgent(v *string) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *AdminLoginLogUpdate) ClearUserAgent() *AdminLoginLogUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetBrowserName sets the "browser_name" field.
func (_u *AdminLoginLogUpdate) SetBrowserName(v string) *AdminLoginLogUpdate {
	_u.mutation.SetBrowserName(v)
	return _u
}

// SetNillableBrowserName sets the "browser_name" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableBrowserName(v *string) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetBrowserName(*v)
	}
	return _u
}

// ClearBrowserName clears the value of the "browser_name" field.
func (_u *AdminLoginLogUpdate) ClearBrowserName() *AdminLoginLogUpdate {
	_u.mutation.ClearBrowserName()
	return _u
}

// SetBrowserVersion sets the "browser_version" field.
func (_u *AdminLoginLogUpdate) SetBrowserVersion(v string) *AdminLoginLogUpdate {
	_u.mutation.SetBrowserVersion(v)
	return _u
}

// SetNillableBrowserVersion sets the "browser_version" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableBrowserVersion(v *string) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetBrowserVersion(*v)
	}
	return _u
}

// ClearBrowserVersion clears the value of the "browser_version" field.
func (_u *AdminLoginLogUpdate) ClearBrowserVersion() *AdminLoginLogUpdate {
	_u.mutation.ClearBrowserVersion()
	return _u
}

// SetClientID sets the "client_id" field.
func (_u *AdminLoginLogUpdate) SetClientID(v string) *AdminLoginLogUpdate {
	_u.mutation.SetClientID(v)
	return _u
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableClientID(v *string) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetClientID(*v)
	}
	return _u
}

// ClearClientID clears the value of the "client_id" field.
func (_u *AdminLoginLogUpdate) ClearClientID() *AdminLoginLogUpdate {
	_u.mutation.ClearClientID()
	return _u
}

// SetClientName sets the "client_name" field.
func (_u *AdminLoginLogUpdate) SetClientName(v string) *AdminLoginLogUpdate {
	_u.mutation.SetClientName(v)
	return _u
}

// SetNillableClientName sets the "client_name" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableClientName(v *string) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetClientName(*v)
	}
	return _u
}

// ClearClientName clears the value of the "client_name" field.
func (_u *AdminLoginLogUpdate) ClearClientName() *AdminLoginLogUpdate {
	_u.mutation.ClearClientName()
	return _u
}

// SetOsName sets the "os_name" field.
func (_u *AdminLoginLogUpdate) SetOsName(v string) *AdminLoginLogUpdate {
	_u.mutation.SetOsName(v)
	return _u
}

// SetNillableOsName sets the "os_name" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableOsName(v *string) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetOsName(*v)
	}
	return _u
}

// ClearOsName clears the value of the "os_name" field.
func (_u *AdminLoginLogUpdate) ClearOsName() *AdminLoginLogUpdate {
	_u.mutation.ClearOsName()
	return _u
}

// SetOsVersion sets the "os_version" field.
func (_u *AdminLoginLogUpdate) SetOsVersion(v string) *AdminLoginLogUpdate {
	_u.mutation.SetOsVersion(v)
	return _u
}

// SetNillableOsVersion sets the "os_version" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableOsVersion(v *string) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetOsVersion(*v)
	}
	return _u
}

// ClearOsVersion clears the value of the "os_version" field.
func (_u *AdminLoginLogUpdate) ClearOsVersion() *AdminLoginLogUpdate {
	_u.mutation.ClearOsVersion()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *AdminLoginLogUpdate) SetUserID(v uint32) *AdminLoginLogUpdate {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableUserID(v *uint32) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *AdminLoginLogUpdate) AddUserID(v int32) *AdminLoginLogUpdate {
	_u.mutation.AddUserID(v)
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *AdminLoginLogUpdate) ClearUserID() *AdminLoginLogUpdate {
	_u.mutation.ClearUserID()
	return _u
}

// SetUsername sets the "username" field.
func (_u *AdminLoginLogUpdate) SetUsername(v string) *AdminLoginLogUpdate {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableUsername(v *string) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// ClearUsername clears the value of the "username" field.
func (_u *AdminLoginLogUpdate) ClearUsername() *AdminLoginLogUpdate {
	_u.mutation.ClearUsername()
	return _u
}

// SetStatusCode sets the "status_code" field.
func (_u *AdminLoginLogUpdate) SetStatusCode(v int32) *AdminLoginLogUpdate {
	_u.mutation.ResetStatusCode()
	_u.mutation.SetStatusCode(v)
	return _u
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableStatusCode(v *int32) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetStatusCode(*v)
	}
	return _u
}

// AddStatusCode adds value to the "status_code" field.
func (_u *AdminLoginLogUpdate) AddStatusCode(v int32) *AdminLoginLogUpdate {
	_u.mutation.AddStatusCode(v)
	return _u
}

// ClearStatusCode clears the value of the "status_code" field.
func (_u *AdminLoginLogUpdate) ClearStatusCode() *AdminLoginLogUpdate {
	_u.mutation.ClearStatusCode()
	return _u
}

// SetSuccess sets the "success" field.
func (_u *AdminLoginLogUpdate) SetSuccess(v bool) *AdminLoginLogUpdate {
	_u.mutation.SetSuccess(v)
	return _u
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableSuccess(v *bool) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetSuccess(*v)
	}
	return _u
}

// ClearSuccess clears the value of the "success" field.
func (_u *AdminLoginLogUpdate) ClearSuccess() *AdminLoginLogUpdate {
	_u.mutation.ClearSuccess()
	return _u
}

// SetReason sets the "reason" field.
func (_u *AdminLoginLogUpdate) SetReason(v string) *AdminLoginLogUpdate {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableReason(v *string) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// ClearReason clears the value of the "reason" field.
func (_u *AdminLoginLogUpdate) ClearReason() *AdminLoginLogUpdate {
	_u.mutation.ClearReason()
	return _u
}

// SetLocation sets the "location" field.
func (_u *AdminLoginLogUpdate) SetLocation(v string) *AdminLoginLogUpdate {
	_u.mutation.SetLocation(v)
	return _u
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (_u *AdminLoginLogUpdate) SetNillableLocation(v *string) *AdminLoginLogUpdate {
	if v != nil {
		_u.SetLocation(*v)
	}
	return _u
}

// ClearLocation clears the value of the "location" field.
func (_u *AdminLoginLogUpdate) ClearLocation() *AdminLoginLogUpdate {
	_u.mutation.ClearLocation()
	return _u
}

// Mutation returns the AdminLoginLogMutation object of the builder.
func (_u *AdminLoginLogUpdate) Mutation() *AdminLoginLogMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AdminLoginLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AdminLoginLogUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AdminLoginLogUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AdminLoginLogUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AdminLoginLogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdminLoginLogUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AdminLoginLogUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminloginlog.Table, adminloginlog.Columns, sqlgraph.NewFieldSpec(adminloginlog.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(adminloginlog.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LoginIP(); ok {
		_spec.SetField(adminloginlog.FieldLoginIP, field.TypeString, value)
	}
	if _u.mutation.LoginIPCleared() {
		_spec.ClearField(adminloginlog.FieldLoginIP, field.TypeString)
	}
	if value, ok := _u.mutation.LoginMAC(); ok {
		_spec.SetField(adminloginlog.FieldLoginMAC, field.TypeString, value)
	}
	if _u.mutation.LoginMACCleared() {
		_spec.ClearField(adminloginlog.FieldLoginMAC, field.TypeString)
	}
	if value, ok := _u.mutation.LoginTime(); ok {
		_spec.SetField(adminloginlog.FieldLoginTime, field.TypeTime, value)
	}
	if _u.mutation.LoginTimeCleared() {
		_spec.ClearField(adminloginlog.FieldLoginTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(adminloginlog.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(adminloginlog.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.BrowserName(); ok {
		_spec.SetField(adminloginlog.FieldBrowserName, field.TypeString, value)
	}
	if _u.mutation.BrowserNameCleared() {
		_spec.ClearField(adminloginlog.FieldBrowserName, field.TypeString)
	}
	if value, ok := _u.mutation.BrowserVersion(); ok {
		_spec.SetField(adminloginlog.FieldBrowserVersion, field.TypeString, value)
	}
	if _u.mutation.BrowserVersionCleared() {
		_spec.ClearField(adminloginlog.FieldBrowserVersion, field.TypeString)
	}
	if value, ok := _u.mutation.ClientID(); ok {
		_spec.SetField(adminloginlog.FieldClientID, field.TypeString, value)
	}
	if _u.mutation.ClientIDCleared() {
		_spec.ClearField(adminloginlog.FieldClientID, field.TypeString)
	}
	if value, ok := _u.mutation.ClientName(); ok {
		_spec.SetField(adminloginlog.FieldClientName, field.TypeString, value)
	}
	if _u.mutation.ClientNameCleared() {
		_spec.ClearField(adminloginlog.FieldClientName, field.TypeString)
	}
	if value, ok := _u.mutation.OsName(); ok {
		_spec.SetField(adminloginlog.FieldOsName, field.TypeString, value)
	}
	if _u.mutation.OsNameCleared() {
		_spec.ClearField(adminloginlog.FieldOsName, field.TypeString)
	}
	if value, ok := _u.mutation.OsVersion(); ok {
		_spec.SetField(adminloginlog.FieldOsVersion, field.TypeString, value)
	}
	if _u.mutation.OsVersionCleared() {
		_spec.ClearField(adminloginlog.FieldOsVersion, field.TypeString)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(adminloginlog.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(adminloginlog.FieldUserID, field.TypeUint32, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(adminloginlog.FieldUserID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(adminloginlog.FieldUsername, field.TypeString, value)
	}
	if _u.mutation.UsernameCleared() {
		_spec.ClearField(adminloginlog.FieldUsername, field.TypeString)
	}
	if value, ok := _u.mutation.StatusCode(); ok {
		_spec.SetField(adminloginlog.FieldStatusCode, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatusCode(); ok {
		_spec.AddField(adminloginlog.FieldStatusCode, field.TypeInt32, value)
	}
	if _u.mutation.StatusCodeCleared() {
		_spec.ClearField(adminloginlog.FieldStatusCode, field.TypeInt32)
	}
	if value, ok := _u.mutation.Success(); ok {
		_spec.SetField(adminloginlog.FieldSuccess, field.TypeBool, value)
	}
	if _u.mutation.SuccessCleared() {
		_spec.ClearField(adminloginlog.FieldSuccess, field.TypeBool)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(adminloginlog.FieldReason, field.TypeString, value)
	}
	if _u.mutation.ReasonCleared() {
		_spec.ClearField(adminloginlog.FieldReason, field.TypeString)
	}
	if value, ok := _u.mutation.Location(); ok {
		_spec.SetField(adminloginlog.FieldLocation, field.TypeString, value)
	}
	if _u.mutation.LocationCleared() {
		_spec.ClearField(adminloginlog.FieldLocation, field.TypeString)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminloginlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AdminLoginLogUpdateOne is the builder for updating a single AdminLoginLog entity.
type AdminLoginLogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AdminLoginLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetLoginIP sets the "login_ip" field.
func (_u *AdminLoginLogUpdateOne) SetLoginIP(v string) *AdminLoginLogUpdateOne {
	_u.mutation.SetLoginIP(v)
	return _u
}

// SetNillableLoginIP sets the "login_ip" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableLoginIP(v *string) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetLoginIP(*v)
	}
	return _u
}

// ClearLoginIP clears the value of the "login_ip" field.
func (_u *AdminLoginLogUpdateOne) ClearLoginIP() *AdminLoginLogUpdateOne {
	_u.mutation.ClearLoginIP()
	return _u
}

// SetLoginMAC sets the "login_mac" field.
func (_u *AdminLoginLogUpdateOne) SetLoginMAC(v string) *AdminLoginLogUpdateOne {
	_u.mutation.SetLoginMAC(v)
	return _u
}

// SetNillableLoginMAC sets the "login_mac" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableLoginMAC(v *string) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetLoginMAC(*v)
	}
	return _u
}

// ClearLoginMAC clears the value of the "login_mac" field.
func (_u *AdminLoginLogUpdateOne) ClearLoginMAC() *AdminLoginLogUpdateOne {
	_u.mutation.ClearLoginMAC()
	return _u
}

// SetLoginTime sets the "login_time" field.
func (_u *AdminLoginLogUpdateOne) SetLoginTime(v time.Time) *AdminLoginLogUpdateOne {
	_u.mutation.SetLoginTime(v)
	return _u
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableLoginTime(v *time.Time) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetLoginTime(*v)
	}
	return _u
}

// ClearLoginTime clears the value of the "login_time" field.
func (_u *AdminLoginLogUpdateOne) ClearLoginTime() *AdminLoginLogUpdateOne {
	_u.mutation.ClearLoginTime()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *AdminLoginLogUpdateOne) SetUserAgent(v string) *AdminLoginLogUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableUserAgent(v *string) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *AdminLoginLogUpdateOne) ClearUserAgent() *AdminLoginLogUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetBrowserName sets the "browser_name" field.
func (_u *AdminLoginLogUpdateOne) SetBrowserName(v string) *AdminLoginLogUpdateOne {
	_u.mutation.SetBrowserName(v)
	return _u
}

// SetNillableBrowserName sets the "browser_name" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableBrowserName(v *string) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetBrowserName(*v)
	}
	return _u
}

// ClearBrowserName clears the value of the "browser_name" field.
func (_u *AdminLoginLogUpdateOne) ClearBrowserName() *AdminLoginLogUpdateOne {
	_u.mutation.ClearBrowserName()
	return _u
}

// SetBrowserVersion sets the "browser_version" field.
func (_u *AdminLoginLogUpdateOne) SetBrowserVersion(v string) *AdminLoginLogUpdateOne {
	_u.mutation.SetBrowserVersion(v)
	return _u
}

// SetNillableBrowserVersion sets the "browser_version" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableBrowserVersion(v *string) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetBrowserVersion(*v)
	}
	return _u
}

// ClearBrowserVersion clears the value of the "browser_version" field.
func (_u *AdminLoginLogUpdateOne) ClearBrowserVersion() *AdminLoginLogUpdateOne {
	_u.mutation.ClearBrowserVersion()
	return _u
}

// SetClientID sets the "client_id" field.
func (_u *AdminLoginLogUpdateOne) SetClientID(v string) *AdminLoginLogUpdateOne {
	_u.mutation.SetClientID(v)
	return _u
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableClientID(v *string) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetClientID(*v)
	}
	return _u
}

// ClearClientID clears the value of the "client_id" field.
func (_u *AdminLoginLogUpdateOne) ClearClientID() *AdminLoginLogUpdateOne {
	_u.mutation.ClearClientID()
	return _u
}

// SetClientName sets the "client_name" field.
func (_u *AdminLoginLogUpdateOne) SetClientName(v string) *AdminLoginLogUpdateOne {
	_u.mutation.SetClientName(v)
	return _u
}

// SetNillableClientName sets the "client_name" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableClientName(v *string) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetClientName(*v)
	}
	return _u
}

// ClearClientName clears the value of the "client_name" field.
func (_u *AdminLoginLogUpdateOne) ClearClientName() *AdminLoginLogUpdateOne {
	_u.mutation.ClearClientName()
	return _u
}

// SetOsName sets the "os_name" field.
func (_u *AdminLoginLogUpdateOne) SetOsName(v string) *AdminLoginLogUpdateOne {
	_u.mutation.SetOsName(v)
	return _u
}

// SetNillableOsName sets the "os_name" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableOsName(v *string) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetOsName(*v)
	}
	return _u
}

// ClearOsName clears the value of the "os_name" field.
func (_u *AdminLoginLogUpdateOne) ClearOsName() *AdminLoginLogUpdateOne {
	_u.mutation.ClearOsName()
	return _u
}

// SetOsVersion sets the "os_version" field.
func (_u *AdminLoginLogUpdateOne) SetOsVersion(v string) *AdminLoginLogUpdateOne {
	_u.mutation.SetOsVersion(v)
	return _u
}

// SetNillableOsVersion sets the "os_version" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableOsVersion(v *string) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetOsVersion(*v)
	}
	return _u
}

// ClearOsVersion clears the value of the "os_version" field.
func (_u *AdminLoginLogUpdateOne) ClearOsVersion() *AdminLoginLogUpdateOne {
	_u.mutation.ClearOsVersion()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *AdminLoginLogUpdateOne) SetUserID(v uint32) *AdminLoginLogUpdateOne {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableUserID(v *uint32) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *AdminLoginLogUpdateOne) AddUserID(v int32) *AdminLoginLogUpdateOne {
	_u.mutation.AddUserID(v)
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *AdminLoginLogUpdateOne) ClearUserID() *AdminLoginLogUpdateOne {
	_u.mutation.ClearUserID()
	return _u
}

// SetUsername sets the "username" field.
func (_u *AdminLoginLogUpdateOne) SetUsername(v string) *AdminLoginLogUpdateOne {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableUsername(v *string) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// ClearUsername clears the value of the "username" field.
func (_u *AdminLoginLogUpdateOne) ClearUsername() *AdminLoginLogUpdateOne {
	_u.mutation.ClearUsername()
	return _u
}

// SetStatusCode sets the "status_code" field.
func (_u *AdminLoginLogUpdateOne) SetStatusCode(v int32) *AdminLoginLogUpdateOne {
	_u.mutation.ResetStatusCode()
	_u.mutation.SetStatusCode(v)
	return _u
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableStatusCode(v *int32) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetStatusCode(*v)
	}
	return _u
}

// AddStatusCode adds value to the "status_code" field.
func (_u *AdminLoginLogUpdateOne) AddStatusCode(v int32) *AdminLoginLogUpdateOne {
	_u.mutation.AddStatusCode(v)
	return _u
}

// ClearStatusCode clears the value of the "status_code" field.
func (_u *AdminLoginLogUpdateOne) ClearStatusCode() *AdminLoginLogUpdateOne {
	_u.mutation.ClearStatusCode()
	return _u
}

// SetSuccess sets the "success" field.
func (_u *AdminLoginLogUpdateOne) SetSuccess(v bool) *AdminLoginLogUpdateOne {
	_u.mutation.SetSuccess(v)
	return _u
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableSuccess(v *bool) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetSuccess(*v)
	}
	return _u
}

// ClearSuccess clears the value of the "success" field.
func (_u *AdminLoginLogUpdateOne) ClearSuccess() *AdminLoginLogUpdateOne {
	_u.mutation.ClearSuccess()
	return _u
}

// SetReason sets the "reason" field.
func (_u *AdminLoginLogUpdateOne) SetReason(v string) *AdminLoginLogUpdateOne {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableReason(v *string) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// ClearReason clears the value of the "reason" field.
func (_u *AdminLoginLogUpdateOne) ClearReason() *AdminLoginLogUpdateOne {
	_u.mutation.ClearReason()
	return _u
}

// SetLocation sets the "location" field.
func (_u *AdminLoginLogUpdateOne) SetLocation(v string) *AdminLoginLogUpdateOne {
	_u.mutation.SetLocation(v)
	return _u
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (_u *AdminLoginLogUpdateOne) SetNillableLocation(v *string) *AdminLoginLogUpdateOne {
	if v != nil {
		_u.SetLocation(*v)
	}
	return _u
}

// ClearLocation clears the value of the "location" field.
func (_u *AdminLoginLogUpdateOne) ClearLocation() *AdminLoginLogUpdateOne {
	_u.mutation.ClearLocation()
	return _u
}

// Mutation returns the AdminLoginLogMutation object of the builder.
func (_u *AdminLoginLogUpdateOne) Mutation() *AdminLoginLogMutation {
	return _u.mutation
}

// Where appends a list predicates to the AdminLoginLogUpdate builder.
func (_u *AdminLoginLogUpdateOne) Where(ps ...predicate.AdminLoginLog) *AdminLoginLogUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AdminLoginLogUpdateOne) Select(field string, fields ...string) *AdminLoginLogUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AdminLoginLog entity.
func (_u *AdminLoginLogUpdateOne) Save(ctx context.Context) (*AdminLoginLog, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AdminLoginLogUpdateOne) SaveX(ctx context.Context) *AdminLoginLog {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AdminLoginLogUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AdminLoginLogUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AdminLoginLogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdminLoginLogUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AdminLoginLogUpdateOne) sqlSave(ctx context.Context) (_node *AdminLoginLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminloginlog.Table, adminloginlog.Columns, sqlgraph.NewFieldSpec(adminloginlog.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AdminLoginLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminloginlog.FieldID)
		for _, f := range fields {
			if !adminloginlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminloginlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(adminloginlog.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LoginIP(); ok {
		_spec.SetField(adminloginlog.FieldLoginIP, field.TypeString, value)
	}
	if _u.mutation.LoginIPCleared() {
		_spec.ClearField(adminloginlog.FieldLoginIP, field.TypeString)
	}
	if value, ok := _u.mutation.LoginMAC(); ok {
		_spec.SetField(adminloginlog.FieldLoginMAC, field.TypeString, value)
	}
	if _u.mutation.LoginMACCleared() {
		_spec.ClearField(adminloginlog.FieldLoginMAC, field.TypeString)
	}
	if value, ok := _u.mutation.LoginTime(); ok {
		_spec.SetField(adminloginlog.FieldLoginTime, field.TypeTime, value)
	}
	if _u.mutation.LoginTimeCleared() {
		_spec.ClearField(adminloginlog.FieldLoginTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(adminloginlog.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(adminloginlog.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.BrowserName(); ok {
		_spec.SetField(adminloginlog.FieldBrowserName, field.TypeString, value)
	}
	if _u.mutation.BrowserNameCleared() {
		_spec.ClearField(adminloginlog.FieldBrowserName, field.TypeString)
	}
	if value, ok := _u.mutation.BrowserVersion(); ok {
		_spec.SetField(adminloginlog.FieldBrowserVersion, field.TypeString, value)
	}
	if _u.mutation.BrowserVersionCleared() {
		_spec.ClearField(adminloginlog.FieldBrowserVersion, field.TypeString)
	}
	if value, ok := _u.mutation.ClientID(); ok {
		_spec.SetField(adminloginlog.FieldClientID, field.TypeString, value)
	}
	if _u.mutation.ClientIDCleared() {
		_spec.ClearField(adminloginlog.FieldClientID, field.TypeString)
	}
	if value, ok := _u.mutation.ClientName(); ok {
		_spec.SetField(adminloginlog.FieldClientName, field.TypeString, value)
	}
	if _u.mutation.ClientNameCleared() {
		_spec.ClearField(adminloginlog.FieldClientName, field.TypeString)
	}
	if value, ok := _u.mutation.OsName(); ok {
		_spec.SetField(adminloginlog.FieldOsName, field.TypeString, value)
	}
	if _u.mutation.OsNameCleared() {
		_spec.ClearField(adminloginlog.FieldOsName, field.TypeString)
	}
	if value, ok := _u.mutation.OsVersion(); ok {
		_spec.SetField(adminloginlog.FieldOsVersion, field.TypeString, value)
	}
	if _u.mutation.OsVersionCleared() {
		_spec.ClearField(adminloginlog.FieldOsVersion, field.TypeString)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(adminloginlog.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(adminloginlog.FieldUserID, field.TypeUint32, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(adminloginlog.FieldUserID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(adminloginlog.FieldUsername, field.TypeString, value)
	}
	if _u.mutation.UsernameCleared() {
		_spec.ClearField(adminloginlog.FieldUsername, field.TypeString)
	}
	if value, ok := _u.mutation.StatusCode(); ok {
		_spec.SetField(adminloginlog.FieldStatusCode, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatusCode(); ok {
		_spec.AddField(adminloginlog.FieldStatusCode, field.TypeInt32, value)
	}
	if _u.mutation.StatusCodeCleared() {
		_spec.ClearField(adminloginlog.FieldStatusCode, field.TypeInt32)
	}
	if value, ok := _u.mutation.Success(); ok {
		_spec.SetField(adminloginlog.FieldSuccess, field.TypeBool, value)
	}
	if _u.mutation.SuccessCleared() {
		_spec.ClearField(adminloginlog.FieldSuccess, field.TypeBool)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(adminloginlog.FieldReason, field.TypeString, value)
	}
	if _u.mutation.ReasonCleared() {
		_spec.ClearField(adminloginlog.FieldReason, field.TypeString)
	}
	if value, ok := _u.mutation.Location(); ok {
		_spec.SetField(adminloginlog.FieldLocation, field.TypeString, value)
	}
	if _u.mutation.LocationCleared() {
		_spec.ClearField(adminloginlog.FieldLocation, field.TypeString)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &AdminLoginLog{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminloginlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

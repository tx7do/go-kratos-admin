// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dict/service/v1/dict.proto

package servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DictMain with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DictMain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictMain with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DictMainMultiError, or nil
// if none found.
func (m *DictMain) ValidateAll() error {
	return m.validate(true)
}

func (m *DictMain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Code != nil {
		// no validation rules for Code
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.SortId != nil {
		// no validation rules for SortId
	}

	if m.Remark != nil {
		// no validation rules for Remark
	}

	if m.CreateBy != nil {
		// no validation rules for CreateBy
	}

	if m.UpdateBy != nil {
		// no validation rules for UpdateBy
	}

	if m.CreateTime != nil {

		if all {
			switch v := interface{}(m.GetCreateTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictMainValidationError{
						field:  "CreateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictMainValidationError{
						field:  "CreateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictMainValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdateTime != nil {

		if all {
			switch v := interface{}(m.GetUpdateTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictMainValidationError{
						field:  "UpdateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictMainValidationError{
						field:  "UpdateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictMainValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeleteTime != nil {

		if all {
			switch v := interface{}(m.GetDeleteTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictMainValidationError{
						field:  "DeleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictMainValidationError{
						field:  "DeleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeleteTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictMainValidationError{
					field:  "DeleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DictMainMultiError(errors)
	}

	return nil
}

// DictMainMultiError is an error wrapping multiple validation errors returned
// by DictMain.ValidateAll() if the designated constraints aren't met.
type DictMainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictMainMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictMainMultiError) AllErrors() []error { return m }

// DictMainValidationError is the validation error returned by
// DictMain.Validate if the designated constraints aren't met.
type DictMainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictMainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictMainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictMainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictMainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictMainValidationError) ErrorName() string { return "DictMainValidationError" }

// Error satisfies the builtin error interface
func (e DictMainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictMain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictMainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictMainValidationError{}

// Validate checks the field values on DictItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DictItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DictItemMultiError, or nil
// if none found.
func (m *DictItem) ValidateAll() error {
	return m.validate(true)
}

func (m *DictItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.MainId != nil {
		// no validation rules for MainId
	}

	if m.Code != nil {
		// no validation rules for Code
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Value != nil {
		// no validation rules for Value
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.SortId != nil {
		// no validation rules for SortId
	}

	if m.Remark != nil {
		// no validation rules for Remark
	}

	if m.CreateBy != nil {
		// no validation rules for CreateBy
	}

	if m.UpdateBy != nil {
		// no validation rules for UpdateBy
	}

	if m.CreateTime != nil {

		if all {
			switch v := interface{}(m.GetCreateTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictItemValidationError{
						field:  "CreateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictItemValidationError{
						field:  "CreateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictItemValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdateTime != nil {

		if all {
			switch v := interface{}(m.GetUpdateTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictItemValidationError{
						field:  "UpdateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictItemValidationError{
						field:  "UpdateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictItemValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeleteTime != nil {

		if all {
			switch v := interface{}(m.GetDeleteTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictItemValidationError{
						field:  "DeleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictItemValidationError{
						field:  "DeleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeleteTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictItemValidationError{
					field:  "DeleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DictItemMultiError(errors)
	}

	return nil
}

// DictItemMultiError is an error wrapping multiple validation errors returned
// by DictItem.ValidateAll() if the designated constraints aren't met.
type DictItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictItemMultiError) AllErrors() []error { return m }

// DictItemValidationError is the validation error returned by
// DictItem.Validate if the designated constraints aren't met.
type DictItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictItemValidationError) ErrorName() string { return "DictItemValidationError" }

// Error satisfies the builtin error interface
func (e DictItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictItemValidationError{}

// Validate checks the field values on ListDictMainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDictMainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictMainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictMainResponseMultiError, or nil if none found.
func (m *ListDictMainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictMainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictMainResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictMainResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictMainResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListDictMainResponseMultiError(errors)
	}

	return nil
}

// ListDictMainResponseMultiError is an error wrapping multiple validation
// errors returned by ListDictMainResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDictMainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictMainResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictMainResponseMultiError) AllErrors() []error { return m }

// ListDictMainResponseValidationError is the validation error returned by
// ListDictMainResponse.Validate if the designated constraints aren't met.
type ListDictMainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictMainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictMainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictMainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictMainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictMainResponseValidationError) ErrorName() string {
	return "ListDictMainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictMainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictMainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictMainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictMainResponseValidationError{}

// Validate checks the field values on GetDictMainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictMainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictMainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictMainRequestMultiError, or nil if none found.
func (m *GetDictMainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictMainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.QueryBy.(type) {
	case *GetDictMainRequest_Id:
		if v == nil {
			err := GetDictMainRequestValidationError{
				field:  "QueryBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Id
	case *GetDictMainRequest_Code:
		if v == nil {
			err := GetDictMainRequestValidationError{
				field:  "QueryBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Code
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetDictMainRequestMultiError(errors)
	}

	return nil
}

// GetDictMainRequestMultiError is an error wrapping multiple validation errors
// returned by GetDictMainRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDictMainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictMainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictMainRequestMultiError) AllErrors() []error { return m }

// GetDictMainRequestValidationError is the validation error returned by
// GetDictMainRequest.Validate if the designated constraints aren't met.
type GetDictMainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictMainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictMainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictMainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictMainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictMainRequestValidationError) ErrorName() string {
	return "GetDictMainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictMainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictMainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictMainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictMainRequestValidationError{}

// Validate checks the field values on CreateDictMainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictMainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictMainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictMainRequestMultiError, or nil if none found.
func (m *CreateDictMainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictMainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDictMainRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDictMainRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDictMainRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDictMainRequestMultiError(errors)
	}

	return nil
}

// CreateDictMainRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDictMainRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDictMainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictMainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictMainRequestMultiError) AllErrors() []error { return m }

// CreateDictMainRequestValidationError is the validation error returned by
// CreateDictMainRequest.Validate if the designated constraints aren't met.
type CreateDictMainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictMainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictMainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictMainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictMainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictMainRequestValidationError) ErrorName() string {
	return "CreateDictMainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictMainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictMainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictMainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictMainRequestValidationError{}

// Validate checks the field values on UpdateDictMainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictMainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictMainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictMainRequestMultiError, or nil if none found.
func (m *UpdateDictMainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictMainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictMainRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictMainRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictMainRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictMainRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictMainRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictMainRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.AllowMissing != nil {
		// no validation rules for AllowMissing
	}

	if len(errors) > 0 {
		return UpdateDictMainRequestMultiError(errors)
	}

	return nil
}

// UpdateDictMainRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDictMainRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictMainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictMainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictMainRequestMultiError) AllErrors() []error { return m }

// UpdateDictMainRequestValidationError is the validation error returned by
// UpdateDictMainRequest.Validate if the designated constraints aren't met.
type UpdateDictMainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictMainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictMainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictMainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictMainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictMainRequestValidationError) ErrorName() string {
	return "UpdateDictMainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictMainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictMainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictMainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictMainRequestValidationError{}

// Validate checks the field values on BatchDeleteDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchDeleteDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchDeleteDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchDeleteDictRequestMultiError, or nil if none found.
func (m *BatchDeleteDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchDeleteDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchDeleteDictRequestMultiError(errors)
	}

	return nil
}

// BatchDeleteDictRequestMultiError is an error wrapping multiple validation
// errors returned by BatchDeleteDictRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchDeleteDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchDeleteDictRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchDeleteDictRequestMultiError) AllErrors() []error { return m }

// BatchDeleteDictRequestValidationError is the validation error returned by
// BatchDeleteDictRequest.Validate if the designated constraints aren't met.
type BatchDeleteDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchDeleteDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchDeleteDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchDeleteDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchDeleteDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchDeleteDictRequestValidationError) ErrorName() string {
	return "BatchDeleteDictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchDeleteDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchDeleteDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchDeleteDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchDeleteDictRequestValidationError{}

// Validate checks the field values on ListDictItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDictItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictItemResponseMultiError, or nil if none found.
func (m *ListDictItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictItemResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictItemResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictItemResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListDictItemResponseMultiError(errors)
	}

	return nil
}

// ListDictItemResponseMultiError is an error wrapping multiple validation
// errors returned by ListDictItemResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDictItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictItemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictItemResponseMultiError) AllErrors() []error { return m }

// ListDictItemResponseValidationError is the validation error returned by
// ListDictItemResponse.Validate if the designated constraints aren't met.
type ListDictItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictItemResponseValidationError) ErrorName() string {
	return "ListDictItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictItemResponseValidationError{}

// Validate checks the field values on CreateDictItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictItemRequestMultiError, or nil if none found.
func (m *CreateDictItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDictItemRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDictItemRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDictItemRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDictItemRequestMultiError(errors)
	}

	return nil
}

// CreateDictItemRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDictItemRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDictItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictItemRequestMultiError) AllErrors() []error { return m }

// CreateDictItemRequestValidationError is the validation error returned by
// CreateDictItemRequest.Validate if the designated constraints aren't met.
type CreateDictItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictItemRequestValidationError) ErrorName() string {
	return "CreateDictItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictItemRequestValidationError{}

// Validate checks the field values on UpdateDictItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictItemRequestMultiError, or nil if none found.
func (m *UpdateDictItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictItemRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictItemRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictItemRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictItemRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictItemRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictItemRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.AllowMissing != nil {
		// no validation rules for AllowMissing
	}

	if len(errors) > 0 {
		return UpdateDictItemRequestMultiError(errors)
	}

	return nil
}

// UpdateDictItemRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDictItemRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictItemRequestMultiError) AllErrors() []error { return m }

// UpdateDictItemRequestValidationError is the validation error returned by
// UpdateDictItemRequest.Validate if the designated constraints aren't met.
type UpdateDictItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictItemRequestValidationError) ErrorName() string {
	return "UpdateDictItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictItemRequestValidationError{}

// Validate checks the field values on GetDictItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictItemRequestMultiError, or nil if none found.
func (m *GetDictItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.QueryBy.(type) {
	case *GetDictItemRequest_Id:
		if v == nil {
			err := GetDictItemRequestValidationError{
				field:  "QueryBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Id
	case *GetDictItemRequest_Code:
		if v == nil {
			err := GetDictItemRequestValidationError{
				field:  "QueryBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Code
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetDictItemRequestMultiError(errors)
	}

	return nil
}

// GetDictItemRequestMultiError is an error wrapping multiple validation errors
// returned by GetDictItemRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDictItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictItemRequestMultiError) AllErrors() []error { return m }

// GetDictItemRequestValidationError is the validation error returned by
// GetDictItemRequest.Validate if the designated constraints aren't met.
type GetDictItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictItemRequestValidationError) ErrorName() string {
	return "GetDictItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictItemRequestValidationError{}

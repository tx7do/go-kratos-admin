// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/notificationmessagecategory"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationMessageCategoryUpdate is the builder for updating NotificationMessageCategory entities.
type NotificationMessageCategoryUpdate struct {
	config
	hooks     []Hook
	mutation  *NotificationMessageCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NotificationMessageCategoryUpdate builder.
func (_u *NotificationMessageCategoryUpdate) Where(ps ...predicate.NotificationMessageCategory) *NotificationMessageCategoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *NotificationMessageCategoryUpdate) SetUpdateTime(v time.Time) *NotificationMessageCategoryUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableUpdateTime(v *time.Time) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *NotificationMessageCategoryUpdate) ClearUpdateTime() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *NotificationMessageCategoryUpdate) SetDeleteTime(v time.Time) *NotificationMessageCategoryUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableDeleteTime(v *time.Time) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *NotificationMessageCategoryUpdate) ClearDeleteTime() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *NotificationMessageCategoryUpdate) SetCreateBy(v uint32) *NotificationMessageCategoryUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableCreateBy(v *uint32) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *NotificationMessageCategoryUpdate) AddCreateBy(v int32) *NotificationMessageCategoryUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *NotificationMessageCategoryUpdate) ClearCreateBy() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *NotificationMessageCategoryUpdate) SetUpdateBy(v uint32) *NotificationMessageCategoryUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableUpdateBy(v *uint32) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *NotificationMessageCategoryUpdate) AddUpdateBy(v int32) *NotificationMessageCategoryUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *NotificationMessageCategoryUpdate) ClearUpdateBy() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *NotificationMessageCategoryUpdate) SetRemark(v string) *NotificationMessageCategoryUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableRemark(v *string) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *NotificationMessageCategoryUpdate) ClearRemark() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetName sets the "name" field.
func (_u *NotificationMessageCategoryUpdate) SetName(v string) *NotificationMessageCategoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableName(v *string) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *NotificationMessageCategoryUpdate) ClearName() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetCode sets the "code" field.
func (_u *NotificationMessageCategoryUpdate) SetCode(v string) *NotificationMessageCategoryUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableCode(v *string) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *NotificationMessageCategoryUpdate) ClearCode() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearCode()
	return _u
}

// SetSortID sets the "sort_id" field.
func (_u *NotificationMessageCategoryUpdate) SetSortID(v int32) *NotificationMessageCategoryUpdate {
	_u.mutation.ResetSortID()
	_u.mutation.SetSortID(v)
	return _u
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableSortID(v *int32) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetSortID(*v)
	}
	return _u
}

// AddSortID adds value to the "sort_id" field.
func (_u *NotificationMessageCategoryUpdate) AddSortID(v int32) *NotificationMessageCategoryUpdate {
	_u.mutation.AddSortID(v)
	return _u
}

// ClearSortID clears the value of the "sort_id" field.
func (_u *NotificationMessageCategoryUpdate) ClearSortID() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearSortID()
	return _u
}

// SetEnable sets the "enable" field.
func (_u *NotificationMessageCategoryUpdate) SetEnable(v bool) *NotificationMessageCategoryUpdate {
	_u.mutation.SetEnable(v)
	return _u
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableEnable(v *bool) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetEnable(*v)
	}
	return _u
}

// ClearEnable clears the value of the "enable" field.
func (_u *NotificationMessageCategoryUpdate) ClearEnable() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearEnable()
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *NotificationMessageCategoryUpdate) SetParentID(v uint32) *NotificationMessageCategoryUpdate {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableParentID(v *uint32) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *NotificationMessageCategoryUpdate) ClearParentID() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearParentID()
	return _u
}

// SetParent sets the "parent" edge to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdate) SetParent(v *NotificationMessageCategory) *NotificationMessageCategoryUpdate {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the NotificationMessageCategory entity by IDs.
func (_u *NotificationMessageCategoryUpdate) AddChildIDs(ids ...uint32) *NotificationMessageCategoryUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdate) AddChildren(v ...*NotificationMessageCategory) *NotificationMessageCategoryUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the NotificationMessageCategoryMutation object of the builder.
func (_u *NotificationMessageCategoryUpdate) Mutation() *NotificationMessageCategoryMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdate) ClearParent() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdate) ClearChildren() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to NotificationMessageCategory entities by IDs.
func (_u *NotificationMessageCategoryUpdate) RemoveChildIDs(ids ...uint32) *NotificationMessageCategoryUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to NotificationMessageCategory entities.
func (_u *NotificationMessageCategoryUpdate) RemoveChildren(v ...*NotificationMessageCategory) *NotificationMessageCategoryUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NotificationMessageCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationMessageCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NotificationMessageCategoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationMessageCategoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationMessageCategoryUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := notificationmessagecategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NotificationMessageCategory.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := notificationmessagecategory.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "NotificationMessageCategory.code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *NotificationMessageCategoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationMessageCategoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *NotificationMessageCategoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationmessagecategory.Table, notificationmessagecategory.Columns, sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(notificationmessagecategory.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(notificationmessagecategory.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(notificationmessagecategory.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(notificationmessagecategory.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(notificationmessagecategory.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(notificationmessagecategory.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(notificationmessagecategory.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(notificationmessagecategory.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(notificationmessagecategory.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(notificationmessagecategory.FieldUpdateBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(notificationmessagecategory.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(notificationmessagecategory.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(notificationmessagecategory.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(notificationmessagecategory.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(notificationmessagecategory.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(notificationmessagecategory.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(notificationmessagecategory.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(notificationmessagecategory.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.SortID(); ok {
		_spec.SetField(notificationmessagecategory.FieldSortID, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortID(); ok {
		_spec.AddField(notificationmessagecategory.FieldSortID, field.TypeInt32, value)
	}
	if _u.mutation.SortIDCleared() {
		_spec.ClearField(notificationmessagecategory.FieldSortID, field.TypeInt32)
	}
	if value, ok := _u.mutation.Enable(); ok {
		_spec.SetField(notificationmessagecategory.FieldEnable, field.TypeBool, value)
	}
	if _u.mutation.EnableCleared() {
		_spec.ClearField(notificationmessagecategory.FieldEnable, field.TypeBool)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationmessagecategory.ParentTable,
			Columns: []string{notificationmessagecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationmessagecategory.ParentTable,
			Columns: []string{notificationmessagecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationmessagecategory.ChildrenTable,
			Columns: []string{notificationmessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationmessagecategory.ChildrenTable,
			Columns: []string{notificationmessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationmessagecategory.ChildrenTable,
			Columns: []string{notificationmessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationmessagecategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NotificationMessageCategoryUpdateOne is the builder for updating a single NotificationMessageCategory entity.
type NotificationMessageCategoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NotificationMessageCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (_u *NotificationMessageCategoryUpdateOne) SetUpdateTime(v time.Time) *NotificationMessageCategoryUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableUpdateTime(v *time.Time) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearUpdateTime() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *NotificationMessageCategoryUpdateOne) SetDeleteTime(v time.Time) *NotificationMessageCategoryUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableDeleteTime(v *time.Time) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearDeleteTime() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *NotificationMessageCategoryUpdateOne) SetCreateBy(v uint32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableCreateBy(v *uint32) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *NotificationMessageCategoryUpdateOne) AddCreateBy(v int32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearCreateBy() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *NotificationMessageCategoryUpdateOne) SetUpdateBy(v uint32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableUpdateBy(v *uint32) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *NotificationMessageCategoryUpdateOne) AddUpdateBy(v int32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearUpdateBy() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *NotificationMessageCategoryUpdateOne) SetRemark(v string) *NotificationMessageCategoryUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableRemark(v *string) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearRemark() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetName sets the "name" field.
func (_u *NotificationMessageCategoryUpdateOne) SetName(v string) *NotificationMessageCategoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableName(v *string) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearName() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetCode sets the "code" field.
func (_u *NotificationMessageCategoryUpdateOne) SetCode(v string) *NotificationMessageCategoryUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableCode(v *string) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearCode() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearCode()
	return _u
}

// SetSortID sets the "sort_id" field.
func (_u *NotificationMessageCategoryUpdateOne) SetSortID(v int32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.ResetSortID()
	_u.mutation.SetSortID(v)
	return _u
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableSortID(v *int32) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetSortID(*v)
	}
	return _u
}

// AddSortID adds value to the "sort_id" field.
func (_u *NotificationMessageCategoryUpdateOne) AddSortID(v int32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.AddSortID(v)
	return _u
}

// ClearSortID clears the value of the "sort_id" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearSortID() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearSortID()
	return _u
}

// SetEnable sets the "enable" field.
func (_u *NotificationMessageCategoryUpdateOne) SetEnable(v bool) *NotificationMessageCategoryUpdateOne {
	_u.mutation.SetEnable(v)
	return _u
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableEnable(v *bool) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetEnable(*v)
	}
	return _u
}

// ClearEnable clears the value of the "enable" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearEnable() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearEnable()
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *NotificationMessageCategoryUpdateOne) SetParentID(v uint32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableParentID(v *uint32) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearParentID() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearParentID()
	return _u
}

// SetParent sets the "parent" edge to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdateOne) SetParent(v *NotificationMessageCategory) *NotificationMessageCategoryUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the NotificationMessageCategory entity by IDs.
func (_u *NotificationMessageCategoryUpdateOne) AddChildIDs(ids ...uint32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdateOne) AddChildren(v ...*NotificationMessageCategory) *NotificationMessageCategoryUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the NotificationMessageCategoryMutation object of the builder.
func (_u *NotificationMessageCategoryUpdateOne) Mutation() *NotificationMessageCategoryMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdateOne) ClearParent() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdateOne) ClearChildren() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to NotificationMessageCategory entities by IDs.
func (_u *NotificationMessageCategoryUpdateOne) RemoveChildIDs(ids ...uint32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to NotificationMessageCategory entities.
func (_u *NotificationMessageCategoryUpdateOne) RemoveChildren(v ...*NotificationMessageCategory) *NotificationMessageCategoryUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the NotificationMessageCategoryUpdate builder.
func (_u *NotificationMessageCategoryUpdateOne) Where(ps ...predicate.NotificationMessageCategory) *NotificationMessageCategoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NotificationMessageCategoryUpdateOne) Select(field string, fields ...string) *NotificationMessageCategoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdateOne) Save(ctx context.Context) (*NotificationMessageCategory, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationMessageCategoryUpdateOne) SaveX(ctx context.Context) *NotificationMessageCategory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NotificationMessageCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationMessageCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationMessageCategoryUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := notificationmessagecategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NotificationMessageCategory.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := notificationmessagecategory.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "NotificationMessageCategory.code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *NotificationMessageCategoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationMessageCategoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *NotificationMessageCategoryUpdateOne) sqlSave(ctx context.Context) (_node *NotificationMessageCategory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationmessagecategory.Table, notificationmessagecategory.Columns, sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotificationMessageCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationmessagecategory.FieldID)
		for _, f := range fields {
			if !notificationmessagecategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notificationmessagecategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(notificationmessagecategory.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(notificationmessagecategory.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(notificationmessagecategory.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(notificationmessagecategory.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(notificationmessagecategory.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(notificationmessagecategory.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(notificationmessagecategory.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(notificationmessagecategory.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(notificationmessagecategory.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(notificationmessagecategory.FieldUpdateBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(notificationmessagecategory.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(notificationmessagecategory.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(notificationmessagecategory.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(notificationmessagecategory.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(notificationmessagecategory.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(notificationmessagecategory.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(notificationmessagecategory.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(notificationmessagecategory.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.SortID(); ok {
		_spec.SetField(notificationmessagecategory.FieldSortID, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortID(); ok {
		_spec.AddField(notificationmessagecategory.FieldSortID, field.TypeInt32, value)
	}
	if _u.mutation.SortIDCleared() {
		_spec.ClearField(notificationmessagecategory.FieldSortID, field.TypeInt32)
	}
	if value, ok := _u.mutation.Enable(); ok {
		_spec.SetField(notificationmessagecategory.FieldEnable, field.TypeBool, value)
	}
	if _u.mutation.EnableCleared() {
		_spec.ClearField(notificationmessagecategory.FieldEnable, field.TypeBool)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationmessagecategory.ParentTable,
			Columns: []string{notificationmessagecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationmessagecategory.ParentTable,
			Columns: []string{notificationmessagecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationmessagecategory.ChildrenTable,
			Columns: []string{notificationmessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationmessagecategory.ChildrenTable,
			Columns: []string{notificationmessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationmessagecategory.ChildrenTable,
			Columns: []string{notificationmessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &NotificationMessageCategory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationmessagecategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/tenant"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantCreate is the builder for creating a Tenant entity.
type TenantCreate struct {
	config
	mutation *TenantMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (_c *TenantCreate) SetCreateTime(v time.Time) *TenantCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *TenantCreate) SetNillableCreateTime(v *time.Time) *TenantCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *TenantCreate) SetUpdateTime(v time.Time) *TenantCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *TenantCreate) SetNillableUpdateTime(v *time.Time) *TenantCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *TenantCreate) SetDeleteTime(v time.Time) *TenantCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *TenantCreate) SetNillableDeleteTime(v *time.Time) *TenantCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *TenantCreate) SetCreateBy(v uint32) *TenantCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *TenantCreate) SetNillableCreateBy(v *uint32) *TenantCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *TenantCreate) SetUpdateBy(v uint32) *TenantCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *TenantCreate) SetNillableUpdateBy(v *uint32) *TenantCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetRemark sets the "remark" field.
func (_c *TenantCreate) SetRemark(v string) *TenantCreate {
	_c.mutation.SetRemark(v)
	return _c
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_c *TenantCreate) SetNillableRemark(v *string) *TenantCreate {
	if v != nil {
		_c.SetRemark(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *TenantCreate) SetName(v string) *TenantCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *TenantCreate) SetNillableName(v *string) *TenantCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetCode sets the "code" field.
func (_c *TenantCreate) SetCode(v string) *TenantCreate {
	_c.mutation.SetCode(v)
	return _c
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_c *TenantCreate) SetNillableCode(v *string) *TenantCreate {
	if v != nil {
		_c.SetCode(*v)
	}
	return _c
}

// SetLogoURL sets the "logo_url" field.
func (_c *TenantCreate) SetLogoURL(v string) *TenantCreate {
	_c.mutation.SetLogoURL(v)
	return _c
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (_c *TenantCreate) SetNillableLogoURL(v *string) *TenantCreate {
	if v != nil {
		_c.SetLogoURL(*v)
	}
	return _c
}

// SetIndustry sets the "industry" field.
func (_c *TenantCreate) SetIndustry(v string) *TenantCreate {
	_c.mutation.SetIndustry(v)
	return _c
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (_c *TenantCreate) SetNillableIndustry(v *string) *TenantCreate {
	if v != nil {
		_c.SetIndustry(*v)
	}
	return _c
}

// SetAdminUserID sets the "admin_user_id" field.
func (_c *TenantCreate) SetAdminUserID(v uint32) *TenantCreate {
	_c.mutation.SetAdminUserID(v)
	return _c
}

// SetNillableAdminUserID sets the "admin_user_id" field if the given value is not nil.
func (_c *TenantCreate) SetNillableAdminUserID(v *uint32) *TenantCreate {
	if v != nil {
		_c.SetAdminUserID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *TenantCreate) SetStatus(v tenant.Status) *TenantCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *TenantCreate) SetNillableStatus(v *tenant.Status) *TenantCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetType sets the "type" field.
func (_c *TenantCreate) SetType(v tenant.Type) *TenantCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *TenantCreate) SetNillableType(v *tenant.Type) *TenantCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetAuditStatus sets the "audit_status" field.
func (_c *TenantCreate) SetAuditStatus(v tenant.AuditStatus) *TenantCreate {
	_c.mutation.SetAuditStatus(v)
	return _c
}

// SetNillableAuditStatus sets the "audit_status" field if the given value is not nil.
func (_c *TenantCreate) SetNillableAuditStatus(v *tenant.AuditStatus) *TenantCreate {
	if v != nil {
		_c.SetAuditStatus(*v)
	}
	return _c
}

// SetSubscriptionAt sets the "subscription_at" field.
func (_c *TenantCreate) SetSubscriptionAt(v time.Time) *TenantCreate {
	_c.mutation.SetSubscriptionAt(v)
	return _c
}

// SetNillableSubscriptionAt sets the "subscription_at" field if the given value is not nil.
func (_c *TenantCreate) SetNillableSubscriptionAt(v *time.Time) *TenantCreate {
	if v != nil {
		_c.SetSubscriptionAt(*v)
	}
	return _c
}

// SetUnsubscribeAt sets the "unsubscribe_at" field.
func (_c *TenantCreate) SetUnsubscribeAt(v time.Time) *TenantCreate {
	_c.mutation.SetUnsubscribeAt(v)
	return _c
}

// SetNillableUnsubscribeAt sets the "unsubscribe_at" field if the given value is not nil.
func (_c *TenantCreate) SetNillableUnsubscribeAt(v *time.Time) *TenantCreate {
	if v != nil {
		_c.SetUnsubscribeAt(*v)
	}
	return _c
}

// SetSubscriptionPlan sets the "subscription_plan" field.
func (_c *TenantCreate) SetSubscriptionPlan(v string) *TenantCreate {
	_c.mutation.SetSubscriptionPlan(v)
	return _c
}

// SetNillableSubscriptionPlan sets the "subscription_plan" field if the given value is not nil.
func (_c *TenantCreate) SetNillableSubscriptionPlan(v *string) *TenantCreate {
	if v != nil {
		_c.SetSubscriptionPlan(*v)
	}
	return _c
}

// SetExpiredAt sets the "expired_at" field.
func (_c *TenantCreate) SetExpiredAt(v time.Time) *TenantCreate {
	_c.mutation.SetExpiredAt(v)
	return _c
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (_c *TenantCreate) SetNillableExpiredAt(v *time.Time) *TenantCreate {
	if v != nil {
		_c.SetExpiredAt(*v)
	}
	return _c
}

// SetLastLoginTime sets the "last_login_time" field.
func (_c *TenantCreate) SetLastLoginTime(v time.Time) *TenantCreate {
	_c.mutation.SetLastLoginTime(v)
	return _c
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (_c *TenantCreate) SetNillableLastLoginTime(v *time.Time) *TenantCreate {
	if v != nil {
		_c.SetLastLoginTime(*v)
	}
	return _c
}

// SetLastLoginIP sets the "last_login_ip" field.
func (_c *TenantCreate) SetLastLoginIP(v string) *TenantCreate {
	_c.mutation.SetLastLoginIP(v)
	return _c
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (_c *TenantCreate) SetNillableLastLoginIP(v *string) *TenantCreate {
	if v != nil {
		_c.SetLastLoginIP(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *TenantCreate) SetID(v uint32) *TenantCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the TenantMutation object of the builder.
func (_c *TenantCreate) Mutation() *TenantMutation {
	return _c.mutation
}

// Save creates the Tenant in the database.
func (_c *TenantCreate) Save(ctx context.Context) (*Tenant, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TenantCreate) SaveX(ctx context.Context) *Tenant {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TenantCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TenantCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TenantCreate) defaults() {
	if _, ok := _c.mutation.Remark(); !ok {
		v := tenant.DefaultRemark
		_c.mutation.SetRemark(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := tenant.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.GetType(); !ok {
		v := tenant.DefaultType
		_c.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TenantCreate) check() error {
	if v, ok := _c.mutation.Name(); ok {
		if err := tenant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tenant.name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Code(); ok {
		if err := tenant.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Tenant.code": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := tenant.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Tenant.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := tenant.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Tenant.type": %w`, err)}
		}
	}
	if v, ok := _c.mutation.AuditStatus(); ok {
		if err := tenant.AuditStatusValidator(v); err != nil {
			return &ValidationError{Name: "audit_status", err: fmt.Errorf(`ent: validator failed for field "Tenant.audit_status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := tenant.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Tenant.id": %w`, err)}
		}
	}
	return nil
}

func (_c *TenantCreate) sqlSave(ctx context.Context) (*Tenant, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TenantCreate) createSpec() (*Tenant, *sqlgraph.CreateSpec) {
	var (
		_node = &Tenant{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(tenant.Table, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(tenant.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(tenant.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(tenant.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(tenant.FieldCreateBy, field.TypeUint32, value)
		_node.CreateBy = &value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(tenant.FieldUpdateBy, field.TypeUint32, value)
		_node.UpdateBy = &value
	}
	if value, ok := _c.mutation.Remark(); ok {
		_spec.SetField(tenant.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := _c.mutation.Code(); ok {
		_spec.SetField(tenant.FieldCode, field.TypeString, value)
		_node.Code = &value
	}
	if value, ok := _c.mutation.LogoURL(); ok {
		_spec.SetField(tenant.FieldLogoURL, field.TypeString, value)
		_node.LogoURL = &value
	}
	if value, ok := _c.mutation.Industry(); ok {
		_spec.SetField(tenant.FieldIndustry, field.TypeString, value)
		_node.Industry = &value
	}
	if value, ok := _c.mutation.AdminUserID(); ok {
		_spec.SetField(tenant.FieldAdminUserID, field.TypeUint32, value)
		_node.AdminUserID = &value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(tenant.FieldStatus, field.TypeEnum, value)
		_node.Status = &value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(tenant.FieldType, field.TypeEnum, value)
		_node.Type = &value
	}
	if value, ok := _c.mutation.AuditStatus(); ok {
		_spec.SetField(tenant.FieldAuditStatus, field.TypeEnum, value)
		_node.AuditStatus = &value
	}
	if value, ok := _c.mutation.SubscriptionAt(); ok {
		_spec.SetField(tenant.FieldSubscriptionAt, field.TypeTime, value)
		_node.SubscriptionAt = &value
	}
	if value, ok := _c.mutation.UnsubscribeAt(); ok {
		_spec.SetField(tenant.FieldUnsubscribeAt, field.TypeTime, value)
		_node.UnsubscribeAt = &value
	}
	if value, ok := _c.mutation.SubscriptionPlan(); ok {
		_spec.SetField(tenant.FieldSubscriptionPlan, field.TypeString, value)
		_node.SubscriptionPlan = &value
	}
	if value, ok := _c.mutation.ExpiredAt(); ok {
		_spec.SetField(tenant.FieldExpiredAt, field.TypeTime, value)
		_node.ExpiredAt = &value
	}
	if value, ok := _c.mutation.LastLoginTime(); ok {
		_spec.SetField(tenant.FieldLastLoginTime, field.TypeTime, value)
		_node.LastLoginTime = &value
	}
	if value, ok := _c.mutation.LastLoginIP(); ok {
		_spec.SetField(tenant.FieldLastLoginIP, field.TypeString, value)
		_node.LastLoginIP = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tenant.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (_c *TenantCreate) OnConflict(opts ...sql.ConflictOption) *TenantUpsertOne {
	_c.conflict = opts
	return &TenantUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TenantCreate) OnConflictColumns(columns ...string) *TenantUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TenantUpsertOne{
		create: _c,
	}
}

type (
	// TenantUpsertOne is the builder for "upsert"-ing
	//  one Tenant node.
	TenantUpsertOne struct {
		create *TenantCreate
	}

	// TenantUpsert is the "OnConflict" setter.
	TenantUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *TenantUpsert) SetUpdateTime(v time.Time) *TenantUpsert {
	u.Set(tenant.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TenantUpsert) UpdateUpdateTime() *TenantUpsert {
	u.SetExcluded(tenant.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *TenantUpsert) ClearUpdateTime() *TenantUpsert {
	u.SetNull(tenant.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *TenantUpsert) SetDeleteTime(v time.Time) *TenantUpsert {
	u.Set(tenant.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *TenantUpsert) UpdateDeleteTime() *TenantUpsert {
	u.SetExcluded(tenant.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *TenantUpsert) ClearDeleteTime() *TenantUpsert {
	u.SetNull(tenant.FieldDeleteTime)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *TenantUpsert) SetCreateBy(v uint32) *TenantUpsert {
	u.Set(tenant.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *TenantUpsert) UpdateCreateBy() *TenantUpsert {
	u.SetExcluded(tenant.FieldCreateBy)
	return u
}

// AddCreateBy adds v to the "create_by" field.
func (u *TenantUpsert) AddCreateBy(v uint32) *TenantUpsert {
	u.Add(tenant.FieldCreateBy, v)
	return u
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *TenantUpsert) ClearCreateBy() *TenantUpsert {
	u.SetNull(tenant.FieldCreateBy)
	return u
}

// SetUpdateBy sets the "update_by" field.
func (u *TenantUpsert) SetUpdateBy(v uint32) *TenantUpsert {
	u.Set(tenant.FieldUpdateBy, v)
	return u
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *TenantUpsert) UpdateUpdateBy() *TenantUpsert {
	u.SetExcluded(tenant.FieldUpdateBy)
	return u
}

// AddUpdateBy adds v to the "update_by" field.
func (u *TenantUpsert) AddUpdateBy(v uint32) *TenantUpsert {
	u.Add(tenant.FieldUpdateBy, v)
	return u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *TenantUpsert) ClearUpdateBy() *TenantUpsert {
	u.SetNull(tenant.FieldUpdateBy)
	return u
}

// SetRemark sets the "remark" field.
func (u *TenantUpsert) SetRemark(v string) *TenantUpsert {
	u.Set(tenant.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TenantUpsert) UpdateRemark() *TenantUpsert {
	u.SetExcluded(tenant.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *TenantUpsert) ClearRemark() *TenantUpsert {
	u.SetNull(tenant.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *TenantUpsert) SetName(v string) *TenantUpsert {
	u.Set(tenant.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenantUpsert) UpdateName() *TenantUpsert {
	u.SetExcluded(tenant.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *TenantUpsert) ClearName() *TenantUpsert {
	u.SetNull(tenant.FieldName)
	return u
}

// SetCode sets the "code" field.
func (u *TenantUpsert) SetCode(v string) *TenantUpsert {
	u.Set(tenant.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TenantUpsert) UpdateCode() *TenantUpsert {
	u.SetExcluded(tenant.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *TenantUpsert) ClearCode() *TenantUpsert {
	u.SetNull(tenant.FieldCode)
	return u
}

// SetLogoURL sets the "logo_url" field.
func (u *TenantUpsert) SetLogoURL(v string) *TenantUpsert {
	u.Set(tenant.FieldLogoURL, v)
	return u
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *TenantUpsert) UpdateLogoURL() *TenantUpsert {
	u.SetExcluded(tenant.FieldLogoURL)
	return u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *TenantUpsert) ClearLogoURL() *TenantUpsert {
	u.SetNull(tenant.FieldLogoURL)
	return u
}

// SetIndustry sets the "industry" field.
func (u *TenantUpsert) SetIndustry(v string) *TenantUpsert {
	u.Set(tenant.FieldIndustry, v)
	return u
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *TenantUpsert) UpdateIndustry() *TenantUpsert {
	u.SetExcluded(tenant.FieldIndustry)
	return u
}

// ClearIndustry clears the value of the "industry" field.
func (u *TenantUpsert) ClearIndustry() *TenantUpsert {
	u.SetNull(tenant.FieldIndustry)
	return u
}

// SetAdminUserID sets the "admin_user_id" field.
func (u *TenantUpsert) SetAdminUserID(v uint32) *TenantUpsert {
	u.Set(tenant.FieldAdminUserID, v)
	return u
}

// UpdateAdminUserID sets the "admin_user_id" field to the value that was provided on create.
func (u *TenantUpsert) UpdateAdminUserID() *TenantUpsert {
	u.SetExcluded(tenant.FieldAdminUserID)
	return u
}

// AddAdminUserID adds v to the "admin_user_id" field.
func (u *TenantUpsert) AddAdminUserID(v uint32) *TenantUpsert {
	u.Add(tenant.FieldAdminUserID, v)
	return u
}

// ClearAdminUserID clears the value of the "admin_user_id" field.
func (u *TenantUpsert) ClearAdminUserID() *TenantUpsert {
	u.SetNull(tenant.FieldAdminUserID)
	return u
}

// SetStatus sets the "status" field.
func (u *TenantUpsert) SetStatus(v tenant.Status) *TenantUpsert {
	u.Set(tenant.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TenantUpsert) UpdateStatus() *TenantUpsert {
	u.SetExcluded(tenant.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *TenantUpsert) ClearStatus() *TenantUpsert {
	u.SetNull(tenant.FieldStatus)
	return u
}

// SetType sets the "type" field.
func (u *TenantUpsert) SetType(v tenant.Type) *TenantUpsert {
	u.Set(tenant.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TenantUpsert) UpdateType() *TenantUpsert {
	u.SetExcluded(tenant.FieldType)
	return u
}

// ClearType clears the value of the "type" field.
func (u *TenantUpsert) ClearType() *TenantUpsert {
	u.SetNull(tenant.FieldType)
	return u
}

// SetAuditStatus sets the "audit_status" field.
func (u *TenantUpsert) SetAuditStatus(v tenant.AuditStatus) *TenantUpsert {
	u.Set(tenant.FieldAuditStatus, v)
	return u
}

// UpdateAuditStatus sets the "audit_status" field to the value that was provided on create.
func (u *TenantUpsert) UpdateAuditStatus() *TenantUpsert {
	u.SetExcluded(tenant.FieldAuditStatus)
	return u
}

// ClearAuditStatus clears the value of the "audit_status" field.
func (u *TenantUpsert) ClearAuditStatus() *TenantUpsert {
	u.SetNull(tenant.FieldAuditStatus)
	return u
}

// SetSubscriptionAt sets the "subscription_at" field.
func (u *TenantUpsert) SetSubscriptionAt(v time.Time) *TenantUpsert {
	u.Set(tenant.FieldSubscriptionAt, v)
	return u
}

// UpdateSubscriptionAt sets the "subscription_at" field to the value that was provided on create.
func (u *TenantUpsert) UpdateSubscriptionAt() *TenantUpsert {
	u.SetExcluded(tenant.FieldSubscriptionAt)
	return u
}

// ClearSubscriptionAt clears the value of the "subscription_at" field.
func (u *TenantUpsert) ClearSubscriptionAt() *TenantUpsert {
	u.SetNull(tenant.FieldSubscriptionAt)
	return u
}

// SetUnsubscribeAt sets the "unsubscribe_at" field.
func (u *TenantUpsert) SetUnsubscribeAt(v time.Time) *TenantUpsert {
	u.Set(tenant.FieldUnsubscribeAt, v)
	return u
}

// UpdateUnsubscribeAt sets the "unsubscribe_at" field to the value that was provided on create.
func (u *TenantUpsert) UpdateUnsubscribeAt() *TenantUpsert {
	u.SetExcluded(tenant.FieldUnsubscribeAt)
	return u
}

// ClearUnsubscribeAt clears the value of the "unsubscribe_at" field.
func (u *TenantUpsert) ClearUnsubscribeAt() *TenantUpsert {
	u.SetNull(tenant.FieldUnsubscribeAt)
	return u
}

// SetSubscriptionPlan sets the "subscription_plan" field.
func (u *TenantUpsert) SetSubscriptionPlan(v string) *TenantUpsert {
	u.Set(tenant.FieldSubscriptionPlan, v)
	return u
}

// UpdateSubscriptionPlan sets the "subscription_plan" field to the value that was provided on create.
func (u *TenantUpsert) UpdateSubscriptionPlan() *TenantUpsert {
	u.SetExcluded(tenant.FieldSubscriptionPlan)
	return u
}

// ClearSubscriptionPlan clears the value of the "subscription_plan" field.
func (u *TenantUpsert) ClearSubscriptionPlan() *TenantUpsert {
	u.SetNull(tenant.FieldSubscriptionPlan)
	return u
}

// SetExpiredAt sets the "expired_at" field.
func (u *TenantUpsert) SetExpiredAt(v time.Time) *TenantUpsert {
	u.Set(tenant.FieldExpiredAt, v)
	return u
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *TenantUpsert) UpdateExpiredAt() *TenantUpsert {
	u.SetExcluded(tenant.FieldExpiredAt)
	return u
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *TenantUpsert) ClearExpiredAt() *TenantUpsert {
	u.SetNull(tenant.FieldExpiredAt)
	return u
}

// SetLastLoginTime sets the "last_login_time" field.
func (u *TenantUpsert) SetLastLoginTime(v time.Time) *TenantUpsert {
	u.Set(tenant.FieldLastLoginTime, v)
	return u
}

// UpdateLastLoginTime sets the "last_login_time" field to the value that was provided on create.
func (u *TenantUpsert) UpdateLastLoginTime() *TenantUpsert {
	u.SetExcluded(tenant.FieldLastLoginTime)
	return u
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (u *TenantUpsert) ClearLastLoginTime() *TenantUpsert {
	u.SetNull(tenant.FieldLastLoginTime)
	return u
}

// SetLastLoginIP sets the "last_login_ip" field.
func (u *TenantUpsert) SetLastLoginIP(v string) *TenantUpsert {
	u.Set(tenant.FieldLastLoginIP, v)
	return u
}

// UpdateLastLoginIP sets the "last_login_ip" field to the value that was provided on create.
func (u *TenantUpsert) UpdateLastLoginIP() *TenantUpsert {
	u.SetExcluded(tenant.FieldLastLoginIP)
	return u
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (u *TenantUpsert) ClearLastLoginIP() *TenantUpsert {
	u.SetNull(tenant.FieldLastLoginIP)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tenant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenantUpsertOne) UpdateNewValues() *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tenant.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(tenant.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tenant.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TenantUpsertOne) Ignore() *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantUpsertOne) DoNothing() *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantCreate.OnConflict
// documentation for more info.
func (u *TenantUpsertOne) Update(set func(*TenantUpsert)) *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TenantUpsertOne) SetUpdateTime(v time.Time) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateUpdateTime() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *TenantUpsertOne) ClearUpdateTime() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *TenantUpsertOne) SetDeleteTime(v time.Time) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateDeleteTime() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *TenantUpsertOne) ClearDeleteTime() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *TenantUpsertOne) SetCreateBy(v uint32) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *TenantUpsertOne) AddCreateBy(v uint32) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateCreateBy() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *TenantUpsertOne) ClearCreateBy() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *TenantUpsertOne) SetUpdateBy(v uint32) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *TenantUpsertOne) AddUpdateBy(v uint32) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateUpdateBy() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *TenantUpsertOne) ClearUpdateBy() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *TenantUpsertOne) SetRemark(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateRemark() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TenantUpsertOne) ClearRemark() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *TenantUpsertOne) SetName(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateName() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TenantUpsertOne) ClearName() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearName()
	})
}

// SetCode sets the "code" field.
func (u *TenantUpsertOne) SetCode(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateCode() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *TenantUpsertOne) ClearCode() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearCode()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *TenantUpsertOne) SetLogoURL(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateLogoURL() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *TenantUpsertOne) ClearLogoURL() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearLogoURL()
	})
}

// SetIndustry sets the "industry" field.
func (u *TenantUpsertOne) SetIndustry(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateIndustry() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateIndustry()
	})
}

// ClearIndustry clears the value of the "industry" field.
func (u *TenantUpsertOne) ClearIndustry() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearIndustry()
	})
}

// SetAdminUserID sets the "admin_user_id" field.
func (u *TenantUpsertOne) SetAdminUserID(v uint32) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetAdminUserID(v)
	})
}

// AddAdminUserID adds v to the "admin_user_id" field.
func (u *TenantUpsertOne) AddAdminUserID(v uint32) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.AddAdminUserID(v)
	})
}

// UpdateAdminUserID sets the "admin_user_id" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateAdminUserID() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateAdminUserID()
	})
}

// ClearAdminUserID clears the value of the "admin_user_id" field.
func (u *TenantUpsertOne) ClearAdminUserID() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearAdminUserID()
	})
}

// SetStatus sets the "status" field.
func (u *TenantUpsertOne) SetStatus(v tenant.Status) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateStatus() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *TenantUpsertOne) ClearStatus() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearStatus()
	})
}

// SetType sets the "type" field.
func (u *TenantUpsertOne) SetType(v tenant.Type) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateType() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *TenantUpsertOne) ClearType() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearType()
	})
}

// SetAuditStatus sets the "audit_status" field.
func (u *TenantUpsertOne) SetAuditStatus(v tenant.AuditStatus) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetAuditStatus(v)
	})
}

// UpdateAuditStatus sets the "audit_status" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateAuditStatus() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateAuditStatus()
	})
}

// ClearAuditStatus clears the value of the "audit_status" field.
func (u *TenantUpsertOne) ClearAuditStatus() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearAuditStatus()
	})
}

// SetSubscriptionAt sets the "subscription_at" field.
func (u *TenantUpsertOne) SetSubscriptionAt(v time.Time) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetSubscriptionAt(v)
	})
}

// UpdateSubscriptionAt sets the "subscription_at" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateSubscriptionAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateSubscriptionAt()
	})
}

// ClearSubscriptionAt clears the value of the "subscription_at" field.
func (u *TenantUpsertOne) ClearSubscriptionAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearSubscriptionAt()
	})
}

// SetUnsubscribeAt sets the "unsubscribe_at" field.
func (u *TenantUpsertOne) SetUnsubscribeAt(v time.Time) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetUnsubscribeAt(v)
	})
}

// UpdateUnsubscribeAt sets the "unsubscribe_at" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateUnsubscribeAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUnsubscribeAt()
	})
}

// ClearUnsubscribeAt clears the value of the "unsubscribe_at" field.
func (u *TenantUpsertOne) ClearUnsubscribeAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearUnsubscribeAt()
	})
}

// SetSubscriptionPlan sets the "subscription_plan" field.
func (u *TenantUpsertOne) SetSubscriptionPlan(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetSubscriptionPlan(v)
	})
}

// UpdateSubscriptionPlan sets the "subscription_plan" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateSubscriptionPlan() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateSubscriptionPlan()
	})
}

// ClearSubscriptionPlan clears the value of the "subscription_plan" field.
func (u *TenantUpsertOne) ClearSubscriptionPlan() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearSubscriptionPlan()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *TenantUpsertOne) SetExpiredAt(v time.Time) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateExpiredAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *TenantUpsertOne) ClearExpiredAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearExpiredAt()
	})
}

// SetLastLoginTime sets the "last_login_time" field.
func (u *TenantUpsertOne) SetLastLoginTime(v time.Time) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetLastLoginTime(v)
	})
}

// UpdateLastLoginTime sets the "last_login_time" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateLastLoginTime() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateLastLoginTime()
	})
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (u *TenantUpsertOne) ClearLastLoginTime() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearLastLoginTime()
	})
}

// SetLastLoginIP sets the "last_login_ip" field.
func (u *TenantUpsertOne) SetLastLoginIP(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetLastLoginIP(v)
	})
}

// UpdateLastLoginIP sets the "last_login_ip" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateLastLoginIP() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateLastLoginIP()
	})
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (u *TenantUpsertOne) ClearLastLoginIP() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearLastLoginIP()
	})
}

// Exec executes the query.
func (u *TenantUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenantCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TenantUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TenantUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TenantCreateBulk is the builder for creating many Tenant entities in bulk.
type TenantCreateBulk struct {
	config
	err      error
	builders []*TenantCreate
	conflict []sql.ConflictOption
}

// Save creates the Tenant entities in the database.
func (_c *TenantCreateBulk) Save(ctx context.Context) ([]*Tenant, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Tenant, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TenantCreateBulk) SaveX(ctx context.Context) []*Tenant {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TenantCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TenantCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tenant.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (_c *TenantCreateBulk) OnConflict(opts ...sql.ConflictOption) *TenantUpsertBulk {
	_c.conflict = opts
	return &TenantUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TenantCreateBulk) OnConflictColumns(columns ...string) *TenantUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TenantUpsertBulk{
		create: _c,
	}
}

// TenantUpsertBulk is the builder for "upsert"-ing
// a bulk of Tenant nodes.
type TenantUpsertBulk struct {
	create *TenantCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tenant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenantUpsertBulk) UpdateNewValues() *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tenant.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(tenant.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TenantUpsertBulk) Ignore() *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantUpsertBulk) DoNothing() *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantCreateBulk.OnConflict
// documentation for more info.
func (u *TenantUpsertBulk) Update(set func(*TenantUpsert)) *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TenantUpsertBulk) SetUpdateTime(v time.Time) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateUpdateTime() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *TenantUpsertBulk) ClearUpdateTime() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *TenantUpsertBulk) SetDeleteTime(v time.Time) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateDeleteTime() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *TenantUpsertBulk) ClearDeleteTime() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *TenantUpsertBulk) SetCreateBy(v uint32) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *TenantUpsertBulk) AddCreateBy(v uint32) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateCreateBy() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *TenantUpsertBulk) ClearCreateBy() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *TenantUpsertBulk) SetUpdateBy(v uint32) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *TenantUpsertBulk) AddUpdateBy(v uint32) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateUpdateBy() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *TenantUpsertBulk) ClearUpdateBy() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *TenantUpsertBulk) SetRemark(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateRemark() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TenantUpsertBulk) ClearRemark() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *TenantUpsertBulk) SetName(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateName() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TenantUpsertBulk) ClearName() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearName()
	})
}

// SetCode sets the "code" field.
func (u *TenantUpsertBulk) SetCode(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateCode() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *TenantUpsertBulk) ClearCode() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearCode()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *TenantUpsertBulk) SetLogoURL(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateLogoURL() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *TenantUpsertBulk) ClearLogoURL() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearLogoURL()
	})
}

// SetIndustry sets the "industry" field.
func (u *TenantUpsertBulk) SetIndustry(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateIndustry() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateIndustry()
	})
}

// ClearIndustry clears the value of the "industry" field.
func (u *TenantUpsertBulk) ClearIndustry() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearIndustry()
	})
}

// SetAdminUserID sets the "admin_user_id" field.
func (u *TenantUpsertBulk) SetAdminUserID(v uint32) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetAdminUserID(v)
	})
}

// AddAdminUserID adds v to the "admin_user_id" field.
func (u *TenantUpsertBulk) AddAdminUserID(v uint32) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.AddAdminUserID(v)
	})
}

// UpdateAdminUserID sets the "admin_user_id" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateAdminUserID() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateAdminUserID()
	})
}

// ClearAdminUserID clears the value of the "admin_user_id" field.
func (u *TenantUpsertBulk) ClearAdminUserID() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearAdminUserID()
	})
}

// SetStatus sets the "status" field.
func (u *TenantUpsertBulk) SetStatus(v tenant.Status) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateStatus() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *TenantUpsertBulk) ClearStatus() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearStatus()
	})
}

// SetType sets the "type" field.
func (u *TenantUpsertBulk) SetType(v tenant.Type) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateType() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *TenantUpsertBulk) ClearType() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearType()
	})
}

// SetAuditStatus sets the "audit_status" field.
func (u *TenantUpsertBulk) SetAuditStatus(v tenant.AuditStatus) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetAuditStatus(v)
	})
}

// UpdateAuditStatus sets the "audit_status" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateAuditStatus() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateAuditStatus()
	})
}

// ClearAuditStatus clears the value of the "audit_status" field.
func (u *TenantUpsertBulk) ClearAuditStatus() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearAuditStatus()
	})
}

// SetSubscriptionAt sets the "subscription_at" field.
func (u *TenantUpsertBulk) SetSubscriptionAt(v time.Time) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetSubscriptionAt(v)
	})
}

// UpdateSubscriptionAt sets the "subscription_at" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateSubscriptionAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateSubscriptionAt()
	})
}

// ClearSubscriptionAt clears the value of the "subscription_at" field.
func (u *TenantUpsertBulk) ClearSubscriptionAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearSubscriptionAt()
	})
}

// SetUnsubscribeAt sets the "unsubscribe_at" field.
func (u *TenantUpsertBulk) SetUnsubscribeAt(v time.Time) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetUnsubscribeAt(v)
	})
}

// UpdateUnsubscribeAt sets the "unsubscribe_at" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateUnsubscribeAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUnsubscribeAt()
	})
}

// ClearUnsubscribeAt clears the value of the "unsubscribe_at" field.
func (u *TenantUpsertBulk) ClearUnsubscribeAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearUnsubscribeAt()
	})
}

// SetSubscriptionPlan sets the "subscription_plan" field.
func (u *TenantUpsertBulk) SetSubscriptionPlan(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetSubscriptionPlan(v)
	})
}

// UpdateSubscriptionPlan sets the "subscription_plan" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateSubscriptionPlan() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateSubscriptionPlan()
	})
}

// ClearSubscriptionPlan clears the value of the "subscription_plan" field.
func (u *TenantUpsertBulk) ClearSubscriptionPlan() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearSubscriptionPlan()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *TenantUpsertBulk) SetExpiredAt(v time.Time) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateExpiredAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *TenantUpsertBulk) ClearExpiredAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearExpiredAt()
	})
}

// SetLastLoginTime sets the "last_login_time" field.
func (u *TenantUpsertBulk) SetLastLoginTime(v time.Time) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetLastLoginTime(v)
	})
}

// UpdateLastLoginTime sets the "last_login_time" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateLastLoginTime() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateLastLoginTime()
	})
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (u *TenantUpsertBulk) ClearLastLoginTime() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearLastLoginTime()
	})
}

// SetLastLoginIP sets the "last_login_ip" field.
func (u *TenantUpsertBulk) SetLastLoginIP(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetLastLoginIP(v)
	})
}

// UpdateLastLoginIP sets the "last_login_ip" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateLastLoginIP() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateLastLoginIP()
	})
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (u *TenantUpsertBulk) ClearLastLoginIP() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearLastLoginIP()
	})
}

// Exec executes the query.
func (u *TenantUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TenantCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenantCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

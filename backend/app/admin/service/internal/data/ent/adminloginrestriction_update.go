// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/adminloginrestriction"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminLoginRestrictionUpdate is the builder for updating AdminLoginRestriction entities.
type AdminLoginRestrictionUpdate struct {
	config
	hooks     []Hook
	mutation  *AdminLoginRestrictionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AdminLoginRestrictionUpdate builder.
func (_u *AdminLoginRestrictionUpdate) Where(ps ...predicate.AdminLoginRestriction) *AdminLoginRestrictionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AdminLoginRestrictionUpdate) SetUpdatedAt(v time.Time) *AdminLoginRestrictionUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableUpdatedAt(v *time.Time) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *AdminLoginRestrictionUpdate) ClearUpdatedAt() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *AdminLoginRestrictionUpdate) SetDeletedAt(v time.Time) *AdminLoginRestrictionUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableDeletedAt(v *time.Time) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *AdminLoginRestrictionUpdate) ClearDeletedAt() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *AdminLoginRestrictionUpdate) SetCreatedBy(v uint32) *AdminLoginRestrictionUpdate {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableCreatedBy(v *uint32) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *AdminLoginRestrictionUpdate) AddCreatedBy(v int32) *AdminLoginRestrictionUpdate {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *AdminLoginRestrictionUpdate) ClearCreatedBy() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *AdminLoginRestrictionUpdate) SetUpdatedBy(v uint32) *AdminLoginRestrictionUpdate {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableUpdatedBy(v *uint32) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *AdminLoginRestrictionUpdate) AddUpdatedBy(v int32) *AdminLoginRestrictionUpdate {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *AdminLoginRestrictionUpdate) ClearUpdatedBy() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *AdminLoginRestrictionUpdate) SetDeletedBy(v uint32) *AdminLoginRestrictionUpdate {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableDeletedBy(v *uint32) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *AdminLoginRestrictionUpdate) AddDeletedBy(v int32) *AdminLoginRestrictionUpdate {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *AdminLoginRestrictionUpdate) ClearDeletedBy() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTargetID sets the "target_id" field.
func (_u *AdminLoginRestrictionUpdate) SetTargetID(v uint32) *AdminLoginRestrictionUpdate {
	_u.mutation.ResetTargetID()
	_u.mutation.SetTargetID(v)
	return _u
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableTargetID(v *uint32) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetTargetID(*v)
	}
	return _u
}

// AddTargetID adds value to the "target_id" field.
func (_u *AdminLoginRestrictionUpdate) AddTargetID(v int32) *AdminLoginRestrictionUpdate {
	_u.mutation.AddTargetID(v)
	return _u
}

// ClearTargetID clears the value of the "target_id" field.
func (_u *AdminLoginRestrictionUpdate) ClearTargetID() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearTargetID()
	return _u
}

// SetValue sets the "value" field.
func (_u *AdminLoginRestrictionUpdate) SetValue(v string) *AdminLoginRestrictionUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableValue(v *string) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *AdminLoginRestrictionUpdate) ClearValue() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearValue()
	return _u
}

// SetReason sets the "reason" field.
func (_u *AdminLoginRestrictionUpdate) SetReason(v string) *AdminLoginRestrictionUpdate {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableReason(v *string) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// ClearReason clears the value of the "reason" field.
func (_u *AdminLoginRestrictionUpdate) ClearReason() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearReason()
	return _u
}

// SetType sets the "type" field.
func (_u *AdminLoginRestrictionUpdate) SetType(v adminloginrestriction.Type) *AdminLoginRestrictionUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableType(v *adminloginrestriction.Type) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *AdminLoginRestrictionUpdate) ClearType() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearType()
	return _u
}

// SetMethod sets the "method" field.
func (_u *AdminLoginRestrictionUpdate) SetMethod(v adminloginrestriction.Method) *AdminLoginRestrictionUpdate {
	_u.mutation.SetMethod(v)
	return _u
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableMethod(v *adminloginrestriction.Method) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetMethod(*v)
	}
	return _u
}

// ClearMethod clears the value of the "method" field.
func (_u *AdminLoginRestrictionUpdate) ClearMethod() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearMethod()
	return _u
}

// Mutation returns the AdminLoginRestrictionMutation object of the builder.
func (_u *AdminLoginRestrictionUpdate) Mutation() *AdminLoginRestrictionMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AdminLoginRestrictionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AdminLoginRestrictionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AdminLoginRestrictionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AdminLoginRestrictionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AdminLoginRestrictionUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := adminloginrestriction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "AdminLoginRestriction.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Method(); ok {
		if err := adminloginrestriction.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "AdminLoginRestriction.method": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AdminLoginRestrictionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdminLoginRestrictionUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AdminLoginRestrictionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(adminloginrestriction.Table, adminloginrestriction.Columns, sqlgraph.NewFieldSpec(adminloginrestriction.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(adminloginrestriction.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(adminloginrestriction.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(adminloginrestriction.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(adminloginrestriction.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(adminloginrestriction.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(adminloginrestriction.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(adminloginrestriction.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(adminloginrestriction.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(adminloginrestriction.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(adminloginrestriction.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(adminloginrestriction.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(adminloginrestriction.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(adminloginrestriction.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(adminloginrestriction.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.TargetID(); ok {
		_spec.SetField(adminloginrestriction.FieldTargetID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedTargetID(); ok {
		_spec.AddField(adminloginrestriction.FieldTargetID, field.TypeUint32, value)
	}
	if _u.mutation.TargetIDCleared() {
		_spec.ClearField(adminloginrestriction.FieldTargetID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(adminloginrestriction.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(adminloginrestriction.FieldValue, field.TypeString)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(adminloginrestriction.FieldReason, field.TypeString, value)
	}
	if _u.mutation.ReasonCleared() {
		_spec.ClearField(adminloginrestriction.FieldReason, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(adminloginrestriction.FieldType, field.TypeEnum, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(adminloginrestriction.FieldType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Method(); ok {
		_spec.SetField(adminloginrestriction.FieldMethod, field.TypeEnum, value)
	}
	if _u.mutation.MethodCleared() {
		_spec.ClearField(adminloginrestriction.FieldMethod, field.TypeEnum)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminloginrestriction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AdminLoginRestrictionUpdateOne is the builder for updating a single AdminLoginRestriction entity.
type AdminLoginRestrictionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AdminLoginRestrictionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AdminLoginRestrictionUpdateOne) SetUpdatedAt(v time.Time) *AdminLoginRestrictionUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableUpdatedAt(v *time.Time) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearUpdatedAt() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *AdminLoginRestrictionUpdateOne) SetDeletedAt(v time.Time) *AdminLoginRestrictionUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableDeletedAt(v *time.Time) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearDeletedAt() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *AdminLoginRestrictionUpdateOne) SetCreatedBy(v uint32) *AdminLoginRestrictionUpdateOne {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableCreatedBy(v *uint32) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *AdminLoginRestrictionUpdateOne) AddCreatedBy(v int32) *AdminLoginRestrictionUpdateOne {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearCreatedBy() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *AdminLoginRestrictionUpdateOne) SetUpdatedBy(v uint32) *AdminLoginRestrictionUpdateOne {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableUpdatedBy(v *uint32) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *AdminLoginRestrictionUpdateOne) AddUpdatedBy(v int32) *AdminLoginRestrictionUpdateOne {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearUpdatedBy() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *AdminLoginRestrictionUpdateOne) SetDeletedBy(v uint32) *AdminLoginRestrictionUpdateOne {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableDeletedBy(v *uint32) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *AdminLoginRestrictionUpdateOne) AddDeletedBy(v int32) *AdminLoginRestrictionUpdateOne {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearDeletedBy() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTargetID sets the "target_id" field.
func (_u *AdminLoginRestrictionUpdateOne) SetTargetID(v uint32) *AdminLoginRestrictionUpdateOne {
	_u.mutation.ResetTargetID()
	_u.mutation.SetTargetID(v)
	return _u
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableTargetID(v *uint32) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetTargetID(*v)
	}
	return _u
}

// AddTargetID adds value to the "target_id" field.
func (_u *AdminLoginRestrictionUpdateOne) AddTargetID(v int32) *AdminLoginRestrictionUpdateOne {
	_u.mutation.AddTargetID(v)
	return _u
}

// ClearTargetID clears the value of the "target_id" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearTargetID() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearTargetID()
	return _u
}

// SetValue sets the "value" field.
func (_u *AdminLoginRestrictionUpdateOne) SetValue(v string) *AdminLoginRestrictionUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableValue(v *string) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearValue() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearValue()
	return _u
}

// SetReason sets the "reason" field.
func (_u *AdminLoginRestrictionUpdateOne) SetReason(v string) *AdminLoginRestrictionUpdateOne {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableReason(v *string) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// ClearReason clears the value of the "reason" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearReason() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearReason()
	return _u
}

// SetType sets the "type" field.
func (_u *AdminLoginRestrictionUpdateOne) SetType(v adminloginrestriction.Type) *AdminLoginRestrictionUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableType(v *adminloginrestriction.Type) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearType() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearType()
	return _u
}

// SetMethod sets the "method" field.
func (_u *AdminLoginRestrictionUpdateOne) SetMethod(v adminloginrestriction.Method) *AdminLoginRestrictionUpdateOne {
	_u.mutation.SetMethod(v)
	return _u
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableMethod(v *adminloginrestriction.Method) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetMethod(*v)
	}
	return _u
}

// ClearMethod clears the value of the "method" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearMethod() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearMethod()
	return _u
}

// Mutation returns the AdminLoginRestrictionMutation object of the builder.
func (_u *AdminLoginRestrictionUpdateOne) Mutation() *AdminLoginRestrictionMutation {
	return _u.mutation
}

// Where appends a list predicates to the AdminLoginRestrictionUpdate builder.
func (_u *AdminLoginRestrictionUpdateOne) Where(ps ...predicate.AdminLoginRestriction) *AdminLoginRestrictionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AdminLoginRestrictionUpdateOne) Select(field string, fields ...string) *AdminLoginRestrictionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AdminLoginRestriction entity.
func (_u *AdminLoginRestrictionUpdateOne) Save(ctx context.Context) (*AdminLoginRestriction, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AdminLoginRestrictionUpdateOne) SaveX(ctx context.Context) *AdminLoginRestriction {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AdminLoginRestrictionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AdminLoginRestrictionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AdminLoginRestrictionUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := adminloginrestriction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "AdminLoginRestriction.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Method(); ok {
		if err := adminloginrestriction.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "AdminLoginRestriction.method": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AdminLoginRestrictionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdminLoginRestrictionUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AdminLoginRestrictionUpdateOne) sqlSave(ctx context.Context) (_node *AdminLoginRestriction, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(adminloginrestriction.Table, adminloginrestriction.Columns, sqlgraph.NewFieldSpec(adminloginrestriction.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AdminLoginRestriction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminloginrestriction.FieldID)
		for _, f := range fields {
			if !adminloginrestriction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminloginrestriction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(adminloginrestriction.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(adminloginrestriction.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(adminloginrestriction.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(adminloginrestriction.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(adminloginrestriction.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(adminloginrestriction.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(adminloginrestriction.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(adminloginrestriction.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(adminloginrestriction.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(adminloginrestriction.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(adminloginrestriction.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(adminloginrestriction.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(adminloginrestriction.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(adminloginrestriction.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.TargetID(); ok {
		_spec.SetField(adminloginrestriction.FieldTargetID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedTargetID(); ok {
		_spec.AddField(adminloginrestriction.FieldTargetID, field.TypeUint32, value)
	}
	if _u.mutation.TargetIDCleared() {
		_spec.ClearField(adminloginrestriction.FieldTargetID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(adminloginrestriction.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(adminloginrestriction.FieldValue, field.TypeString)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(adminloginrestriction.FieldReason, field.TypeString, value)
	}
	if _u.mutation.ReasonCleared() {
		_spec.ClearField(adminloginrestriction.FieldReason, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(adminloginrestriction.FieldType, field.TypeEnum, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(adminloginrestriction.FieldType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Method(); ok {
		_spec.SetField(adminloginrestriction.FieldMethod, field.TypeEnum, value)
	}
	if _u.mutation.MethodCleared() {
		_spec.ClearField(adminloginrestriction.FieldMethod, field.TypeEnum)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &AdminLoginRestriction{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminloginrestriction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

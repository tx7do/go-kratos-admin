// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/notificationmessage"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationMessageUpdate is the builder for updating NotificationMessage entities.
type NotificationMessageUpdate struct {
	config
	hooks     []Hook
	mutation  *NotificationMessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NotificationMessageUpdate builder.
func (_u *NotificationMessageUpdate) Where(ps ...predicate.NotificationMessage) *NotificationMessageUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationMessageUpdate) SetUpdatedAt(v time.Time) *NotificationMessageUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *NotificationMessageUpdate) SetNillableUpdatedAt(v *time.Time) *NotificationMessageUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *NotificationMessageUpdate) ClearUpdatedAt() *NotificationMessageUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *NotificationMessageUpdate) SetDeletedAt(v time.Time) *NotificationMessageUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *NotificationMessageUpdate) SetNillableDeletedAt(v *time.Time) *NotificationMessageUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *NotificationMessageUpdate) ClearDeletedAt() *NotificationMessageUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *NotificationMessageUpdate) SetCreatedBy(v uint32) *NotificationMessageUpdate {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *NotificationMessageUpdate) SetNillableCreatedBy(v *uint32) *NotificationMessageUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *NotificationMessageUpdate) AddCreatedBy(v int32) *NotificationMessageUpdate {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *NotificationMessageUpdate) ClearCreatedBy() *NotificationMessageUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *NotificationMessageUpdate) SetUpdatedBy(v uint32) *NotificationMessageUpdate {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *NotificationMessageUpdate) SetNillableUpdatedBy(v *uint32) *NotificationMessageUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *NotificationMessageUpdate) AddUpdatedBy(v int32) *NotificationMessageUpdate {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *NotificationMessageUpdate) ClearUpdatedBy() *NotificationMessageUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *NotificationMessageUpdate) SetDeletedBy(v uint32) *NotificationMessageUpdate {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *NotificationMessageUpdate) SetNillableDeletedBy(v *uint32) *NotificationMessageUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *NotificationMessageUpdate) AddDeletedBy(v int32) *NotificationMessageUpdate {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *NotificationMessageUpdate) ClearDeletedBy() *NotificationMessageUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetSubject sets the "subject" field.
func (_u *NotificationMessageUpdate) SetSubject(v string) *NotificationMessageUpdate {
	_u.mutation.SetSubject(v)
	return _u
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (_u *NotificationMessageUpdate) SetNillableSubject(v *string) *NotificationMessageUpdate {
	if v != nil {
		_u.SetSubject(*v)
	}
	return _u
}

// ClearSubject clears the value of the "subject" field.
func (_u *NotificationMessageUpdate) ClearSubject() *NotificationMessageUpdate {
	_u.mutation.ClearSubject()
	return _u
}

// SetContent sets the "content" field.
func (_u *NotificationMessageUpdate) SetContent(v string) *NotificationMessageUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *NotificationMessageUpdate) SetNillableContent(v *string) *NotificationMessageUpdate {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// ClearContent clears the value of the "content" field.
func (_u *NotificationMessageUpdate) ClearContent() *NotificationMessageUpdate {
	_u.mutation.ClearContent()
	return _u
}

// SetCategoryID sets the "category_id" field.
func (_u *NotificationMessageUpdate) SetCategoryID(v uint32) *NotificationMessageUpdate {
	_u.mutation.ResetCategoryID()
	_u.mutation.SetCategoryID(v)
	return _u
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_u *NotificationMessageUpdate) SetNillableCategoryID(v *uint32) *NotificationMessageUpdate {
	if v != nil {
		_u.SetCategoryID(*v)
	}
	return _u
}

// AddCategoryID adds value to the "category_id" field.
func (_u *NotificationMessageUpdate) AddCategoryID(v int32) *NotificationMessageUpdate {
	_u.mutation.AddCategoryID(v)
	return _u
}

// ClearCategoryID clears the value of the "category_id" field.
func (_u *NotificationMessageUpdate) ClearCategoryID() *NotificationMessageUpdate {
	_u.mutation.ClearCategoryID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *NotificationMessageUpdate) SetStatus(v notificationmessage.Status) *NotificationMessageUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *NotificationMessageUpdate) SetNillableStatus(v *notificationmessage.Status) *NotificationMessageUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *NotificationMessageUpdate) ClearStatus() *NotificationMessageUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// Mutation returns the NotificationMessageMutation object of the builder.
func (_u *NotificationMessageUpdate) Mutation() *NotificationMessageMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NotificationMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NotificationMessageUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationMessageUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationMessageUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := notificationmessage.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "NotificationMessage.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *NotificationMessageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationMessageUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *NotificationMessageUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationmessage.Table, notificationmessage.Columns, sqlgraph.NewFieldSpec(notificationmessage.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(notificationmessage.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationmessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(notificationmessage.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(notificationmessage.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationmessage.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(notificationmessage.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(notificationmessage.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(notificationmessage.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(notificationmessage.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(notificationmessage.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(notificationmessage.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(notificationmessage.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(notificationmessage.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(notificationmessage.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Subject(); ok {
		_spec.SetField(notificationmessage.FieldSubject, field.TypeString, value)
	}
	if _u.mutation.SubjectCleared() {
		_spec.ClearField(notificationmessage.FieldSubject, field.TypeString)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(notificationmessage.FieldContent, field.TypeString, value)
	}
	if _u.mutation.ContentCleared() {
		_spec.ClearField(notificationmessage.FieldContent, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryID(); ok {
		_spec.SetField(notificationmessage.FieldCategoryID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCategoryID(); ok {
		_spec.AddField(notificationmessage.FieldCategoryID, field.TypeUint32, value)
	}
	if _u.mutation.CategoryIDCleared() {
		_spec.ClearField(notificationmessage.FieldCategoryID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(notificationmessage.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(notificationmessage.FieldStatus, field.TypeEnum)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NotificationMessageUpdateOne is the builder for updating a single NotificationMessage entity.
type NotificationMessageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NotificationMessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationMessageUpdateOne) SetUpdatedAt(v time.Time) *NotificationMessageUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *NotificationMessageUpdateOne) SetNillableUpdatedAt(v *time.Time) *NotificationMessageUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *NotificationMessageUpdateOne) ClearUpdatedAt() *NotificationMessageUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *NotificationMessageUpdateOne) SetDeletedAt(v time.Time) *NotificationMessageUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *NotificationMessageUpdateOne) SetNillableDeletedAt(v *time.Time) *NotificationMessageUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *NotificationMessageUpdateOne) ClearDeletedAt() *NotificationMessageUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *NotificationMessageUpdateOne) SetCreatedBy(v uint32) *NotificationMessageUpdateOne {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *NotificationMessageUpdateOne) SetNillableCreatedBy(v *uint32) *NotificationMessageUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *NotificationMessageUpdateOne) AddCreatedBy(v int32) *NotificationMessageUpdateOne {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *NotificationMessageUpdateOne) ClearCreatedBy() *NotificationMessageUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *NotificationMessageUpdateOne) SetUpdatedBy(v uint32) *NotificationMessageUpdateOne {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *NotificationMessageUpdateOne) SetNillableUpdatedBy(v *uint32) *NotificationMessageUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *NotificationMessageUpdateOne) AddUpdatedBy(v int32) *NotificationMessageUpdateOne {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *NotificationMessageUpdateOne) ClearUpdatedBy() *NotificationMessageUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *NotificationMessageUpdateOne) SetDeletedBy(v uint32) *NotificationMessageUpdateOne {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *NotificationMessageUpdateOne) SetNillableDeletedBy(v *uint32) *NotificationMessageUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *NotificationMessageUpdateOne) AddDeletedBy(v int32) *NotificationMessageUpdateOne {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *NotificationMessageUpdateOne) ClearDeletedBy() *NotificationMessageUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetSubject sets the "subject" field.
func (_u *NotificationMessageUpdateOne) SetSubject(v string) *NotificationMessageUpdateOne {
	_u.mutation.SetSubject(v)
	return _u
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (_u *NotificationMessageUpdateOne) SetNillableSubject(v *string) *NotificationMessageUpdateOne {
	if v != nil {
		_u.SetSubject(*v)
	}
	return _u
}

// ClearSubject clears the value of the "subject" field.
func (_u *NotificationMessageUpdateOne) ClearSubject() *NotificationMessageUpdateOne {
	_u.mutation.ClearSubject()
	return _u
}

// SetContent sets the "content" field.
func (_u *NotificationMessageUpdateOne) SetContent(v string) *NotificationMessageUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *NotificationMessageUpdateOne) SetNillableContent(v *string) *NotificationMessageUpdateOne {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// ClearContent clears the value of the "content" field.
func (_u *NotificationMessageUpdateOne) ClearContent() *NotificationMessageUpdateOne {
	_u.mutation.ClearContent()
	return _u
}

// SetCategoryID sets the "category_id" field.
func (_u *NotificationMessageUpdateOne) SetCategoryID(v uint32) *NotificationMessageUpdateOne {
	_u.mutation.ResetCategoryID()
	_u.mutation.SetCategoryID(v)
	return _u
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_u *NotificationMessageUpdateOne) SetNillableCategoryID(v *uint32) *NotificationMessageUpdateOne {
	if v != nil {
		_u.SetCategoryID(*v)
	}
	return _u
}

// AddCategoryID adds value to the "category_id" field.
func (_u *NotificationMessageUpdateOne) AddCategoryID(v int32) *NotificationMessageUpdateOne {
	_u.mutation.AddCategoryID(v)
	return _u
}

// ClearCategoryID clears the value of the "category_id" field.
func (_u *NotificationMessageUpdateOne) ClearCategoryID() *NotificationMessageUpdateOne {
	_u.mutation.ClearCategoryID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *NotificationMessageUpdateOne) SetStatus(v notificationmessage.Status) *NotificationMessageUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *NotificationMessageUpdateOne) SetNillableStatus(v *notificationmessage.Status) *NotificationMessageUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *NotificationMessageUpdateOne) ClearStatus() *NotificationMessageUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// Mutation returns the NotificationMessageMutation object of the builder.
func (_u *NotificationMessageUpdateOne) Mutation() *NotificationMessageMutation {
	return _u.mutation
}

// Where appends a list predicates to the NotificationMessageUpdate builder.
func (_u *NotificationMessageUpdateOne) Where(ps ...predicate.NotificationMessage) *NotificationMessageUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NotificationMessageUpdateOne) Select(field string, fields ...string) *NotificationMessageUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated NotificationMessage entity.
func (_u *NotificationMessageUpdateOne) Save(ctx context.Context) (*NotificationMessage, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationMessageUpdateOne) SaveX(ctx context.Context) *NotificationMessage {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NotificationMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationMessageUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationMessageUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := notificationmessage.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "NotificationMessage.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *NotificationMessageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationMessageUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *NotificationMessageUpdateOne) sqlSave(ctx context.Context) (_node *NotificationMessage, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationmessage.Table, notificationmessage.Columns, sqlgraph.NewFieldSpec(notificationmessage.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotificationMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationmessage.FieldID)
		for _, f := range fields {
			if !notificationmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notificationmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(notificationmessage.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationmessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(notificationmessage.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(notificationmessage.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationmessage.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(notificationmessage.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(notificationmessage.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(notificationmessage.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(notificationmessage.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(notificationmessage.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(notificationmessage.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(notificationmessage.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(notificationmessage.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(notificationmessage.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Subject(); ok {
		_spec.SetField(notificationmessage.FieldSubject, field.TypeString, value)
	}
	if _u.mutation.SubjectCleared() {
		_spec.ClearField(notificationmessage.FieldSubject, field.TypeString)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(notificationmessage.FieldContent, field.TypeString, value)
	}
	if _u.mutation.ContentCleared() {
		_spec.ClearField(notificationmessage.FieldContent, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryID(); ok {
		_spec.SetField(notificationmessage.FieldCategoryID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCategoryID(); ok {
		_spec.AddField(notificationmessage.FieldCategoryID, field.TypeUint32, value)
	}
	if _u.mutation.CategoryIDCleared() {
		_spec.ClearField(notificationmessage.FieldCategoryID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(notificationmessage.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(notificationmessage.FieldStatus, field.TypeEnum)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &NotificationMessage{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

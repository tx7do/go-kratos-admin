// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dict/service/v1/language.proto

package servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Language with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Language) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Language with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LanguageMultiError, or nil
// if none found.
func (m *Language) ValidateAll() error {
	return m.validate(true)
}

func (m *Language) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.LanguageCode != nil {
		// no validation rules for LanguageCode
	}

	if m.LanguageName != nil {
		// no validation rules for LanguageName
	}

	if m.NativeName != nil {
		// no validation rules for NativeName
	}

	if m.IsDefault != nil {
		// no validation rules for IsDefault
	}

	if m.IsEnabled != nil {
		// no validation rules for IsEnabled
	}

	if m.CreatedBy != nil {
		// no validation rules for CreatedBy
	}

	if m.UpdatedBy != nil {
		// no validation rules for UpdatedBy
	}

	if m.DeletedBy != nil {
		// no validation rules for DeletedBy
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LanguageValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LanguageValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LanguageValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LanguageValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LanguageValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LanguageValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeletedAt != nil {

		if all {
			switch v := interface{}(m.GetDeletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LanguageValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LanguageValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LanguageValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LanguageMultiError(errors)
	}

	return nil
}

// LanguageMultiError is an error wrapping multiple validation errors returned
// by Language.ValidateAll() if the designated constraints aren't met.
type LanguageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LanguageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LanguageMultiError) AllErrors() []error { return m }

// LanguageValidationError is the validation error returned by
// Language.Validate if the designated constraints aren't met.
type LanguageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LanguageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LanguageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LanguageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LanguageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LanguageValidationError) ErrorName() string { return "LanguageValidationError" }

// Error satisfies the builtin error interface
func (e LanguageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLanguage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LanguageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LanguageValidationError{}

// Validate checks the field values on ListLanguageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLanguageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLanguageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLanguageResponseMultiError, or nil if none found.
func (m *ListLanguageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLanguageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLanguageResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLanguageResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLanguageResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListLanguageResponseMultiError(errors)
	}

	return nil
}

// ListLanguageResponseMultiError is an error wrapping multiple validation
// errors returned by ListLanguageResponse.ValidateAll() if the designated
// constraints aren't met.
type ListLanguageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLanguageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLanguageResponseMultiError) AllErrors() []error { return m }

// ListLanguageResponseValidationError is the validation error returned by
// ListLanguageResponse.Validate if the designated constraints aren't met.
type ListLanguageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLanguageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLanguageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLanguageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLanguageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLanguageResponseValidationError) ErrorName() string {
	return "ListLanguageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLanguageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLanguageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLanguageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLanguageResponseValidationError{}

// Validate checks the field values on GetLanguageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLanguageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLanguageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLanguageRequestMultiError, or nil if none found.
func (m *GetLanguageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLanguageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetLanguageRequestMultiError(errors)
	}

	return nil
}

// GetLanguageRequestMultiError is an error wrapping multiple validation errors
// returned by GetLanguageRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLanguageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLanguageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLanguageRequestMultiError) AllErrors() []error { return m }

// GetLanguageRequestValidationError is the validation error returned by
// GetLanguageRequest.Validate if the designated constraints aren't met.
type GetLanguageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLanguageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLanguageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLanguageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLanguageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLanguageRequestValidationError) ErrorName() string {
	return "GetLanguageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLanguageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLanguageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLanguageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLanguageRequestValidationError{}

// Validate checks the field values on CreateLanguageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLanguageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLanguageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLanguageRequestMultiError, or nil if none found.
func (m *CreateLanguageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLanguageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLanguageRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLanguageRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLanguageRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateLanguageRequestMultiError(errors)
	}

	return nil
}

// CreateLanguageRequestMultiError is an error wrapping multiple validation
// errors returned by CreateLanguageRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateLanguageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLanguageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLanguageRequestMultiError) AllErrors() []error { return m }

// CreateLanguageRequestValidationError is the validation error returned by
// CreateLanguageRequest.Validate if the designated constraints aren't met.
type CreateLanguageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLanguageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLanguageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLanguageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLanguageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLanguageRequestValidationError) ErrorName() string {
	return "CreateLanguageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLanguageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLanguageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLanguageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLanguageRequestValidationError{}

// Validate checks the field values on UpdateLanguageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLanguageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLanguageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLanguageRequestMultiError, or nil if none found.
func (m *UpdateLanguageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLanguageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLanguageRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLanguageRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLanguageRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLanguageRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLanguageRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLanguageRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.AllowMissing != nil {
		// no validation rules for AllowMissing
	}

	if len(errors) > 0 {
		return UpdateLanguageRequestMultiError(errors)
	}

	return nil
}

// UpdateLanguageRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateLanguageRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateLanguageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLanguageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLanguageRequestMultiError) AllErrors() []error { return m }

// UpdateLanguageRequestValidationError is the validation error returned by
// UpdateLanguageRequest.Validate if the designated constraints aren't met.
type UpdateLanguageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLanguageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLanguageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLanguageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLanguageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLanguageRequestValidationError) ErrorName() string {
	return "UpdateLanguageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLanguageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLanguageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLanguageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLanguageRequestValidationError{}

// Validate checks the field values on DeleteLanguageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLanguageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLanguageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLanguageRequestMultiError, or nil if none found.
func (m *DeleteLanguageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLanguageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteLanguageRequestMultiError(errors)
	}

	return nil
}

// DeleteLanguageRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteLanguageRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteLanguageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLanguageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLanguageRequestMultiError) AllErrors() []error { return m }

// DeleteLanguageRequestValidationError is the validation error returned by
// DeleteLanguageRequest.Validate if the designated constraints aren't met.
type DeleteLanguageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLanguageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLanguageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLanguageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLanguageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLanguageRequestValidationError) ErrorName() string {
	return "DeleteLanguageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLanguageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLanguageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLanguageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLanguageRequestValidationError{}

// Validate checks the field values on BatchCreateLanguagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateLanguagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateLanguagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateLanguagesRequestMultiError, or nil if none found.
func (m *BatchCreateLanguagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateLanguagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateLanguagesRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateLanguagesRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateLanguagesRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCreateLanguagesRequestMultiError(errors)
	}

	return nil
}

// BatchCreateLanguagesRequestMultiError is an error wrapping multiple
// validation errors returned by BatchCreateLanguagesRequest.ValidateAll() if
// the designated constraints aren't met.
type BatchCreateLanguagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateLanguagesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateLanguagesRequestMultiError) AllErrors() []error { return m }

// BatchCreateLanguagesRequestValidationError is the validation error returned
// by BatchCreateLanguagesRequest.Validate if the designated constraints
// aren't met.
type BatchCreateLanguagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateLanguagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateLanguagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateLanguagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateLanguagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateLanguagesRequestValidationError) ErrorName() string {
	return "BatchCreateLanguagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateLanguagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateLanguagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateLanguagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateLanguagesRequestValidationError{}

// Validate checks the field values on BatchCreateLanguagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateLanguagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateLanguagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateLanguagesResponseMultiError, or nil if none found.
func (m *BatchCreateLanguagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateLanguagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchCreateLanguagesResponseMultiError(errors)
	}

	return nil
}

// BatchCreateLanguagesResponseMultiError is an error wrapping multiple
// validation errors returned by BatchCreateLanguagesResponse.ValidateAll() if
// the designated constraints aren't met.
type BatchCreateLanguagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateLanguagesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateLanguagesResponseMultiError) AllErrors() []error { return m }

// BatchCreateLanguagesResponseValidationError is the validation error returned
// by BatchCreateLanguagesResponse.Validate if the designated constraints
// aren't met.
type BatchCreateLanguagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateLanguagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateLanguagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateLanguagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateLanguagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateLanguagesResponseValidationError) ErrorName() string {
	return "BatchCreateLanguagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateLanguagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateLanguagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateLanguagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateLanguagesResponseValidationError{}

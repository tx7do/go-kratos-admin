// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/file"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FileCreate is the builder for creating a File entity.
type FileCreate struct {
	config
	mutation *FileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *FileCreate) SetCreatedAt(v time.Time) *FileCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *FileCreate) SetNillableCreatedAt(v *time.Time) *FileCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *FileCreate) SetUpdatedAt(v time.Time) *FileCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *FileCreate) SetNillableUpdatedAt(v *time.Time) *FileCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *FileCreate) SetDeletedAt(v time.Time) *FileCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *FileCreate) SetNillableDeletedAt(v *time.Time) *FileCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *FileCreate) SetCreatedBy(v uint32) *FileCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *FileCreate) SetNillableCreatedBy(v *uint32) *FileCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *FileCreate) SetUpdatedBy(v uint32) *FileCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *FileCreate) SetNillableUpdatedBy(v *uint32) *FileCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *FileCreate) SetDeletedBy(v uint32) *FileCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *FileCreate) SetNillableDeletedBy(v *uint32) *FileCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetRemark sets the "remark" field.
func (_c *FileCreate) SetRemark(v string) *FileCreate {
	_c.mutation.SetRemark(v)
	return _c
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_c *FileCreate) SetNillableRemark(v *string) *FileCreate {
	if v != nil {
		_c.SetRemark(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *FileCreate) SetTenantID(v uint32) *FileCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_c *FileCreate) SetNillableTenantID(v *uint32) *FileCreate {
	if v != nil {
		_c.SetTenantID(*v)
	}
	return _c
}

// SetProvider sets the "provider" field.
func (_c *FileCreate) SetProvider(v file.Provider) *FileCreate {
	_c.mutation.SetProvider(v)
	return _c
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (_c *FileCreate) SetNillableProvider(v *file.Provider) *FileCreate {
	if v != nil {
		_c.SetProvider(*v)
	}
	return _c
}

// SetBucketName sets the "bucket_name" field.
func (_c *FileCreate) SetBucketName(v string) *FileCreate {
	_c.mutation.SetBucketName(v)
	return _c
}

// SetNillableBucketName sets the "bucket_name" field if the given value is not nil.
func (_c *FileCreate) SetNillableBucketName(v *string) *FileCreate {
	if v != nil {
		_c.SetBucketName(*v)
	}
	return _c
}

// SetFileDirectory sets the "file_directory" field.
func (_c *FileCreate) SetFileDirectory(v string) *FileCreate {
	_c.mutation.SetFileDirectory(v)
	return _c
}

// SetNillableFileDirectory sets the "file_directory" field if the given value is not nil.
func (_c *FileCreate) SetNillableFileDirectory(v *string) *FileCreate {
	if v != nil {
		_c.SetFileDirectory(*v)
	}
	return _c
}

// SetFileGUID sets the "file_guid" field.
func (_c *FileCreate) SetFileGUID(v string) *FileCreate {
	_c.mutation.SetFileGUID(v)
	return _c
}

// SetNillableFileGUID sets the "file_guid" field if the given value is not nil.
func (_c *FileCreate) SetNillableFileGUID(v *string) *FileCreate {
	if v != nil {
		_c.SetFileGUID(*v)
	}
	return _c
}

// SetSaveFileName sets the "save_file_name" field.
func (_c *FileCreate) SetSaveFileName(v string) *FileCreate {
	_c.mutation.SetSaveFileName(v)
	return _c
}

// SetNillableSaveFileName sets the "save_file_name" field if the given value is not nil.
func (_c *FileCreate) SetNillableSaveFileName(v *string) *FileCreate {
	if v != nil {
		_c.SetSaveFileName(*v)
	}
	return _c
}

// SetFileName sets the "file_name" field.
func (_c *FileCreate) SetFileName(v string) *FileCreate {
	_c.mutation.SetFileName(v)
	return _c
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (_c *FileCreate) SetNillableFileName(v *string) *FileCreate {
	if v != nil {
		_c.SetFileName(*v)
	}
	return _c
}

// SetExtension sets the "extension" field.
func (_c *FileCreate) SetExtension(v string) *FileCreate {
	_c.mutation.SetExtension(v)
	return _c
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (_c *FileCreate) SetNillableExtension(v *string) *FileCreate {
	if v != nil {
		_c.SetExtension(*v)
	}
	return _c
}

// SetSize sets the "size" field.
func (_c *FileCreate) SetSize(v uint64) *FileCreate {
	_c.mutation.SetSize(v)
	return _c
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_c *FileCreate) SetNillableSize(v *uint64) *FileCreate {
	if v != nil {
		_c.SetSize(*v)
	}
	return _c
}

// SetSizeFormat sets the "size_format" field.
func (_c *FileCreate) SetSizeFormat(v string) *FileCreate {
	_c.mutation.SetSizeFormat(v)
	return _c
}

// SetNillableSizeFormat sets the "size_format" field if the given value is not nil.
func (_c *FileCreate) SetNillableSizeFormat(v *string) *FileCreate {
	if v != nil {
		_c.SetSizeFormat(*v)
	}
	return _c
}

// SetLinkURL sets the "link_url" field.
func (_c *FileCreate) SetLinkURL(v string) *FileCreate {
	_c.mutation.SetLinkURL(v)
	return _c
}

// SetNillableLinkURL sets the "link_url" field if the given value is not nil.
func (_c *FileCreate) SetNillableLinkURL(v *string) *FileCreate {
	if v != nil {
		_c.SetLinkURL(*v)
	}
	return _c
}

// SetMd5 sets the "md5" field.
func (_c *FileCreate) SetMd5(v string) *FileCreate {
	_c.mutation.SetMd5(v)
	return _c
}

// SetNillableMd5 sets the "md5" field if the given value is not nil.
func (_c *FileCreate) SetNillableMd5(v *string) *FileCreate {
	if v != nil {
		_c.SetMd5(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *FileCreate) SetID(v uint32) *FileCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the FileMutation object of the builder.
func (_c *FileCreate) Mutation() *FileMutation {
	return _c.mutation
}

// Save creates the File in the database.
func (_c *FileCreate) Save(ctx context.Context) (*File, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *FileCreate) SaveX(ctx context.Context) *File {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FileCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FileCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *FileCreate) check() error {
	if v, ok := _c.mutation.Provider(); ok {
		if err := file.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "File.provider": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := file.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "File.id": %w`, err)}
		}
	}
	return nil
}

func (_c *FileCreate) sqlSave(ctx context.Context) (*File, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *FileCreate) createSpec() (*File, *sqlgraph.CreateSpec) {
	var (
		_node = &File{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(file.Table, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(file.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(file.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(file.FieldCreatedBy, field.TypeUint32, value)
		_node.CreatedBy = &value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(file.FieldUpdatedBy, field.TypeUint32, value)
		_node.UpdatedBy = &value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(file.FieldDeletedBy, field.TypeUint32, value)
		_node.DeletedBy = &value
	}
	if value, ok := _c.mutation.Remark(); ok {
		_spec.SetField(file.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(file.FieldTenantID, field.TypeUint32, value)
		_node.TenantID = &value
	}
	if value, ok := _c.mutation.Provider(); ok {
		_spec.SetField(file.FieldProvider, field.TypeEnum, value)
		_node.Provider = &value
	}
	if value, ok := _c.mutation.BucketName(); ok {
		_spec.SetField(file.FieldBucketName, field.TypeString, value)
		_node.BucketName = &value
	}
	if value, ok := _c.mutation.FileDirectory(); ok {
		_spec.SetField(file.FieldFileDirectory, field.TypeString, value)
		_node.FileDirectory = &value
	}
	if value, ok := _c.mutation.FileGUID(); ok {
		_spec.SetField(file.FieldFileGUID, field.TypeString, value)
		_node.FileGUID = &value
	}
	if value, ok := _c.mutation.SaveFileName(); ok {
		_spec.SetField(file.FieldSaveFileName, field.TypeString, value)
		_node.SaveFileName = &value
	}
	if value, ok := _c.mutation.FileName(); ok {
		_spec.SetField(file.FieldFileName, field.TypeString, value)
		_node.FileName = &value
	}
	if value, ok := _c.mutation.Extension(); ok {
		_spec.SetField(file.FieldExtension, field.TypeString, value)
		_node.Extension = &value
	}
	if value, ok := _c.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeUint64, value)
		_node.Size = &value
	}
	if value, ok := _c.mutation.SizeFormat(); ok {
		_spec.SetField(file.FieldSizeFormat, field.TypeString, value)
		_node.SizeFormat = &value
	}
	if value, ok := _c.mutation.LinkURL(); ok {
		_spec.SetField(file.FieldLinkURL, field.TypeString, value)
		_node.LinkURL = &value
	}
	if value, ok := _c.mutation.Md5(); ok {
		_spec.SetField(file.FieldMd5, field.TypeString, value)
		_node.Md5 = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.File.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *FileCreate) OnConflict(opts ...sql.ConflictOption) *FileUpsertOne {
	_c.conflict = opts
	return &FileUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.File.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *FileCreate) OnConflictColumns(columns ...string) *FileUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &FileUpsertOne{
		create: _c,
	}
}

type (
	// FileUpsertOne is the builder for "upsert"-ing
	//  one File node.
	FileUpsertOne struct {
		create *FileCreate
	}

	// FileUpsert is the "OnConflict" setter.
	FileUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *FileUpsert) SetUpdatedAt(v time.Time) *FileUpsert {
	u.Set(file.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FileUpsert) UpdateUpdatedAt() *FileUpsert {
	u.SetExcluded(file.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *FileUpsert) ClearUpdatedAt() *FileUpsert {
	u.SetNull(file.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FileUpsert) SetDeletedAt(v time.Time) *FileUpsert {
	u.Set(file.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FileUpsert) UpdateDeletedAt() *FileUpsert {
	u.SetExcluded(file.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FileUpsert) ClearDeletedAt() *FileUpsert {
	u.SetNull(file.FieldDeletedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *FileUpsert) SetCreatedBy(v uint32) *FileUpsert {
	u.Set(file.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *FileUpsert) UpdateCreatedBy() *FileUpsert {
	u.SetExcluded(file.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *FileUpsert) AddCreatedBy(v uint32) *FileUpsert {
	u.Add(file.FieldCreatedBy, v)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *FileUpsert) ClearCreatedBy() *FileUpsert {
	u.SetNull(file.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FileUpsert) SetUpdatedBy(v uint32) *FileUpsert {
	u.Set(file.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FileUpsert) UpdateUpdatedBy() *FileUpsert {
	u.SetExcluded(file.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FileUpsert) AddUpdatedBy(v uint32) *FileUpsert {
	u.Add(file.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *FileUpsert) ClearUpdatedBy() *FileUpsert {
	u.SetNull(file.FieldUpdatedBy)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *FileUpsert) SetDeletedBy(v uint32) *FileUpsert {
	u.Set(file.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *FileUpsert) UpdateDeletedBy() *FileUpsert {
	u.SetExcluded(file.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *FileUpsert) AddDeletedBy(v uint32) *FileUpsert {
	u.Add(file.FieldDeletedBy, v)
	return u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *FileUpsert) ClearDeletedBy() *FileUpsert {
	u.SetNull(file.FieldDeletedBy)
	return u
}

// SetRemark sets the "remark" field.
func (u *FileUpsert) SetRemark(v string) *FileUpsert {
	u.Set(file.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *FileUpsert) UpdateRemark() *FileUpsert {
	u.SetExcluded(file.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *FileUpsert) ClearRemark() *FileUpsert {
	u.SetNull(file.FieldRemark)
	return u
}

// SetProvider sets the "provider" field.
func (u *FileUpsert) SetProvider(v file.Provider) *FileUpsert {
	u.Set(file.FieldProvider, v)
	return u
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *FileUpsert) UpdateProvider() *FileUpsert {
	u.SetExcluded(file.FieldProvider)
	return u
}

// ClearProvider clears the value of the "provider" field.
func (u *FileUpsert) ClearProvider() *FileUpsert {
	u.SetNull(file.FieldProvider)
	return u
}

// SetBucketName sets the "bucket_name" field.
func (u *FileUpsert) SetBucketName(v string) *FileUpsert {
	u.Set(file.FieldBucketName, v)
	return u
}

// UpdateBucketName sets the "bucket_name" field to the value that was provided on create.
func (u *FileUpsert) UpdateBucketName() *FileUpsert {
	u.SetExcluded(file.FieldBucketName)
	return u
}

// ClearBucketName clears the value of the "bucket_name" field.
func (u *FileUpsert) ClearBucketName() *FileUpsert {
	u.SetNull(file.FieldBucketName)
	return u
}

// SetFileDirectory sets the "file_directory" field.
func (u *FileUpsert) SetFileDirectory(v string) *FileUpsert {
	u.Set(file.FieldFileDirectory, v)
	return u
}

// UpdateFileDirectory sets the "file_directory" field to the value that was provided on create.
func (u *FileUpsert) UpdateFileDirectory() *FileUpsert {
	u.SetExcluded(file.FieldFileDirectory)
	return u
}

// ClearFileDirectory clears the value of the "file_directory" field.
func (u *FileUpsert) ClearFileDirectory() *FileUpsert {
	u.SetNull(file.FieldFileDirectory)
	return u
}

// SetFileGUID sets the "file_guid" field.
func (u *FileUpsert) SetFileGUID(v string) *FileUpsert {
	u.Set(file.FieldFileGUID, v)
	return u
}

// UpdateFileGUID sets the "file_guid" field to the value that was provided on create.
func (u *FileUpsert) UpdateFileGUID() *FileUpsert {
	u.SetExcluded(file.FieldFileGUID)
	return u
}

// ClearFileGUID clears the value of the "file_guid" field.
func (u *FileUpsert) ClearFileGUID() *FileUpsert {
	u.SetNull(file.FieldFileGUID)
	return u
}

// SetSaveFileName sets the "save_file_name" field.
func (u *FileUpsert) SetSaveFileName(v string) *FileUpsert {
	u.Set(file.FieldSaveFileName, v)
	return u
}

// UpdateSaveFileName sets the "save_file_name" field to the value that was provided on create.
func (u *FileUpsert) UpdateSaveFileName() *FileUpsert {
	u.SetExcluded(file.FieldSaveFileName)
	return u
}

// ClearSaveFileName clears the value of the "save_file_name" field.
func (u *FileUpsert) ClearSaveFileName() *FileUpsert {
	u.SetNull(file.FieldSaveFileName)
	return u
}

// SetFileName sets the "file_name" field.
func (u *FileUpsert) SetFileName(v string) *FileUpsert {
	u.Set(file.FieldFileName, v)
	return u
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *FileUpsert) UpdateFileName() *FileUpsert {
	u.SetExcluded(file.FieldFileName)
	return u
}

// ClearFileName clears the value of the "file_name" field.
func (u *FileUpsert) ClearFileName() *FileUpsert {
	u.SetNull(file.FieldFileName)
	return u
}

// SetExtension sets the "extension" field.
func (u *FileUpsert) SetExtension(v string) *FileUpsert {
	u.Set(file.FieldExtension, v)
	return u
}

// UpdateExtension sets the "extension" field to the value that was provided on create.
func (u *FileUpsert) UpdateExtension() *FileUpsert {
	u.SetExcluded(file.FieldExtension)
	return u
}

// ClearExtension clears the value of the "extension" field.
func (u *FileUpsert) ClearExtension() *FileUpsert {
	u.SetNull(file.FieldExtension)
	return u
}

// SetSize sets the "size" field.
func (u *FileUpsert) SetSize(v uint64) *FileUpsert {
	u.Set(file.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *FileUpsert) UpdateSize() *FileUpsert {
	u.SetExcluded(file.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *FileUpsert) AddSize(v uint64) *FileUpsert {
	u.Add(file.FieldSize, v)
	return u
}

// ClearSize clears the value of the "size" field.
func (u *FileUpsert) ClearSize() *FileUpsert {
	u.SetNull(file.FieldSize)
	return u
}

// SetSizeFormat sets the "size_format" field.
func (u *FileUpsert) SetSizeFormat(v string) *FileUpsert {
	u.Set(file.FieldSizeFormat, v)
	return u
}

// UpdateSizeFormat sets the "size_format" field to the value that was provided on create.
func (u *FileUpsert) UpdateSizeFormat() *FileUpsert {
	u.SetExcluded(file.FieldSizeFormat)
	return u
}

// ClearSizeFormat clears the value of the "size_format" field.
func (u *FileUpsert) ClearSizeFormat() *FileUpsert {
	u.SetNull(file.FieldSizeFormat)
	return u
}

// SetLinkURL sets the "link_url" field.
func (u *FileUpsert) SetLinkURL(v string) *FileUpsert {
	u.Set(file.FieldLinkURL, v)
	return u
}

// UpdateLinkURL sets the "link_url" field to the value that was provided on create.
func (u *FileUpsert) UpdateLinkURL() *FileUpsert {
	u.SetExcluded(file.FieldLinkURL)
	return u
}

// ClearLinkURL clears the value of the "link_url" field.
func (u *FileUpsert) ClearLinkURL() *FileUpsert {
	u.SetNull(file.FieldLinkURL)
	return u
}

// SetMd5 sets the "md5" field.
func (u *FileUpsert) SetMd5(v string) *FileUpsert {
	u.Set(file.FieldMd5, v)
	return u
}

// UpdateMd5 sets the "md5" field to the value that was provided on create.
func (u *FileUpsert) UpdateMd5() *FileUpsert {
	u.SetExcluded(file.FieldMd5)
	return u
}

// ClearMd5 clears the value of the "md5" field.
func (u *FileUpsert) ClearMd5() *FileUpsert {
	u.SetNull(file.FieldMd5)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.File.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(file.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FileUpsertOne) UpdateNewValues() *FileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(file.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(file.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(file.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.File.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FileUpsertOne) Ignore() *FileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileUpsertOne) DoNothing() *FileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileCreate.OnConflict
// documentation for more info.
func (u *FileUpsertOne) Update(set func(*FileUpsert)) *FileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FileUpsertOne) SetUpdatedAt(v time.Time) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateUpdatedAt() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *FileUpsertOne) ClearUpdatedAt() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FileUpsertOne) SetDeletedAt(v time.Time) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateDeletedAt() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FileUpsertOne) ClearDeletedAt() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *FileUpsertOne) SetCreatedBy(v uint32) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *FileUpsertOne) AddCreatedBy(v uint32) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateCreatedBy() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *FileUpsertOne) ClearCreatedBy() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FileUpsertOne) SetUpdatedBy(v uint32) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FileUpsertOne) AddUpdatedBy(v uint32) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateUpdatedBy() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *FileUpsertOne) ClearUpdatedBy() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *FileUpsertOne) SetDeletedBy(v uint32) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *FileUpsertOne) AddDeletedBy(v uint32) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateDeletedBy() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *FileUpsertOne) ClearDeletedBy() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearDeletedBy()
	})
}

// SetRemark sets the "remark" field.
func (u *FileUpsertOne) SetRemark(v string) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateRemark() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *FileUpsertOne) ClearRemark() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearRemark()
	})
}

// SetProvider sets the "provider" field.
func (u *FileUpsertOne) SetProvider(v file.Provider) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateProvider() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateProvider()
	})
}

// ClearProvider clears the value of the "provider" field.
func (u *FileUpsertOne) ClearProvider() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearProvider()
	})
}

// SetBucketName sets the "bucket_name" field.
func (u *FileUpsertOne) SetBucketName(v string) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetBucketName(v)
	})
}

// UpdateBucketName sets the "bucket_name" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateBucketName() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateBucketName()
	})
}

// ClearBucketName clears the value of the "bucket_name" field.
func (u *FileUpsertOne) ClearBucketName() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearBucketName()
	})
}

// SetFileDirectory sets the "file_directory" field.
func (u *FileUpsertOne) SetFileDirectory(v string) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetFileDirectory(v)
	})
}

// UpdateFileDirectory sets the "file_directory" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateFileDirectory() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateFileDirectory()
	})
}

// ClearFileDirectory clears the value of the "file_directory" field.
func (u *FileUpsertOne) ClearFileDirectory() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearFileDirectory()
	})
}

// SetFileGUID sets the "file_guid" field.
func (u *FileUpsertOne) SetFileGUID(v string) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetFileGUID(v)
	})
}

// UpdateFileGUID sets the "file_guid" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateFileGUID() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateFileGUID()
	})
}

// ClearFileGUID clears the value of the "file_guid" field.
func (u *FileUpsertOne) ClearFileGUID() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearFileGUID()
	})
}

// SetSaveFileName sets the "save_file_name" field.
func (u *FileUpsertOne) SetSaveFileName(v string) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetSaveFileName(v)
	})
}

// UpdateSaveFileName sets the "save_file_name" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateSaveFileName() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateSaveFileName()
	})
}

// ClearSaveFileName clears the value of the "save_file_name" field.
func (u *FileUpsertOne) ClearSaveFileName() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearSaveFileName()
	})
}

// SetFileName sets the "file_name" field.
func (u *FileUpsertOne) SetFileName(v string) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateFileName() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateFileName()
	})
}

// ClearFileName clears the value of the "file_name" field.
func (u *FileUpsertOne) ClearFileName() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearFileName()
	})
}

// SetExtension sets the "extension" field.
func (u *FileUpsertOne) SetExtension(v string) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetExtension(v)
	})
}

// UpdateExtension sets the "extension" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateExtension() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateExtension()
	})
}

// ClearExtension clears the value of the "extension" field.
func (u *FileUpsertOne) ClearExtension() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearExtension()
	})
}

// SetSize sets the "size" field.
func (u *FileUpsertOne) SetSize(v uint64) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *FileUpsertOne) AddSize(v uint64) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateSize() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *FileUpsertOne) ClearSize() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearSize()
	})
}

// SetSizeFormat sets the "size_format" field.
func (u *FileUpsertOne) SetSizeFormat(v string) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetSizeFormat(v)
	})
}

// UpdateSizeFormat sets the "size_format" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateSizeFormat() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateSizeFormat()
	})
}

// ClearSizeFormat clears the value of the "size_format" field.
func (u *FileUpsertOne) ClearSizeFormat() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearSizeFormat()
	})
}

// SetLinkURL sets the "link_url" field.
func (u *FileUpsertOne) SetLinkURL(v string) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetLinkURL(v)
	})
}

// UpdateLinkURL sets the "link_url" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateLinkURL() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateLinkURL()
	})
}

// ClearLinkURL clears the value of the "link_url" field.
func (u *FileUpsertOne) ClearLinkURL() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearLinkURL()
	})
}

// SetMd5 sets the "md5" field.
func (u *FileUpsertOne) SetMd5(v string) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetMd5(v)
	})
}

// UpdateMd5 sets the "md5" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateMd5() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateMd5()
	})
}

// ClearMd5 clears the value of the "md5" field.
func (u *FileUpsertOne) ClearMd5() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearMd5()
	})
}

// Exec executes the query.
func (u *FileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FileUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FileUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FileCreateBulk is the builder for creating many File entities in bulk.
type FileCreateBulk struct {
	config
	err      error
	builders []*FileCreate
	conflict []sql.ConflictOption
}

// Save creates the File entities in the database.
func (_c *FileCreateBulk) Save(ctx context.Context) ([]*File, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*File, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *FileCreateBulk) SaveX(ctx context.Context) []*File {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FileCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FileCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.File.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *FileCreateBulk) OnConflict(opts ...sql.ConflictOption) *FileUpsertBulk {
	_c.conflict = opts
	return &FileUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.File.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *FileCreateBulk) OnConflictColumns(columns ...string) *FileUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &FileUpsertBulk{
		create: _c,
	}
}

// FileUpsertBulk is the builder for "upsert"-ing
// a bulk of File nodes.
type FileUpsertBulk struct {
	create *FileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.File.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(file.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FileUpsertBulk) UpdateNewValues() *FileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(file.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(file.FieldCreatedAt)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(file.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.File.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FileUpsertBulk) Ignore() *FileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileUpsertBulk) DoNothing() *FileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileCreateBulk.OnConflict
// documentation for more info.
func (u *FileUpsertBulk) Update(set func(*FileUpsert)) *FileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FileUpsertBulk) SetUpdatedAt(v time.Time) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateUpdatedAt() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *FileUpsertBulk) ClearUpdatedAt() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FileUpsertBulk) SetDeletedAt(v time.Time) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateDeletedAt() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FileUpsertBulk) ClearDeletedAt() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *FileUpsertBulk) SetCreatedBy(v uint32) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *FileUpsertBulk) AddCreatedBy(v uint32) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateCreatedBy() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *FileUpsertBulk) ClearCreatedBy() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FileUpsertBulk) SetUpdatedBy(v uint32) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FileUpsertBulk) AddUpdatedBy(v uint32) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateUpdatedBy() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *FileUpsertBulk) ClearUpdatedBy() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *FileUpsertBulk) SetDeletedBy(v uint32) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *FileUpsertBulk) AddDeletedBy(v uint32) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateDeletedBy() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *FileUpsertBulk) ClearDeletedBy() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearDeletedBy()
	})
}

// SetRemark sets the "remark" field.
func (u *FileUpsertBulk) SetRemark(v string) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateRemark() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *FileUpsertBulk) ClearRemark() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearRemark()
	})
}

// SetProvider sets the "provider" field.
func (u *FileUpsertBulk) SetProvider(v file.Provider) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateProvider() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateProvider()
	})
}

// ClearProvider clears the value of the "provider" field.
func (u *FileUpsertBulk) ClearProvider() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearProvider()
	})
}

// SetBucketName sets the "bucket_name" field.
func (u *FileUpsertBulk) SetBucketName(v string) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetBucketName(v)
	})
}

// UpdateBucketName sets the "bucket_name" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateBucketName() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateBucketName()
	})
}

// ClearBucketName clears the value of the "bucket_name" field.
func (u *FileUpsertBulk) ClearBucketName() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearBucketName()
	})
}

// SetFileDirectory sets the "file_directory" field.
func (u *FileUpsertBulk) SetFileDirectory(v string) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetFileDirectory(v)
	})
}

// UpdateFileDirectory sets the "file_directory" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateFileDirectory() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateFileDirectory()
	})
}

// ClearFileDirectory clears the value of the "file_directory" field.
func (u *FileUpsertBulk) ClearFileDirectory() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearFileDirectory()
	})
}

// SetFileGUID sets the "file_guid" field.
func (u *FileUpsertBulk) SetFileGUID(v string) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetFileGUID(v)
	})
}

// UpdateFileGUID sets the "file_guid" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateFileGUID() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateFileGUID()
	})
}

// ClearFileGUID clears the value of the "file_guid" field.
func (u *FileUpsertBulk) ClearFileGUID() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearFileGUID()
	})
}

// SetSaveFileName sets the "save_file_name" field.
func (u *FileUpsertBulk) SetSaveFileName(v string) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetSaveFileName(v)
	})
}

// UpdateSaveFileName sets the "save_file_name" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateSaveFileName() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateSaveFileName()
	})
}

// ClearSaveFileName clears the value of the "save_file_name" field.
func (u *FileUpsertBulk) ClearSaveFileName() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearSaveFileName()
	})
}

// SetFileName sets the "file_name" field.
func (u *FileUpsertBulk) SetFileName(v string) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateFileName() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateFileName()
	})
}

// ClearFileName clears the value of the "file_name" field.
func (u *FileUpsertBulk) ClearFileName() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearFileName()
	})
}

// SetExtension sets the "extension" field.
func (u *FileUpsertBulk) SetExtension(v string) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetExtension(v)
	})
}

// UpdateExtension sets the "extension" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateExtension() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateExtension()
	})
}

// ClearExtension clears the value of the "extension" field.
func (u *FileUpsertBulk) ClearExtension() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearExtension()
	})
}

// SetSize sets the "size" field.
func (u *FileUpsertBulk) SetSize(v uint64) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *FileUpsertBulk) AddSize(v uint64) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateSize() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *FileUpsertBulk) ClearSize() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearSize()
	})
}

// SetSizeFormat sets the "size_format" field.
func (u *FileUpsertBulk) SetSizeFormat(v string) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetSizeFormat(v)
	})
}

// UpdateSizeFormat sets the "size_format" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateSizeFormat() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateSizeFormat()
	})
}

// ClearSizeFormat clears the value of the "size_format" field.
func (u *FileUpsertBulk) ClearSizeFormat() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearSizeFormat()
	})
}

// SetLinkURL sets the "link_url" field.
func (u *FileUpsertBulk) SetLinkURL(v string) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetLinkURL(v)
	})
}

// UpdateLinkURL sets the "link_url" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateLinkURL() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateLinkURL()
	})
}

// ClearLinkURL clears the value of the "link_url" field.
func (u *FileUpsertBulk) ClearLinkURL() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearLinkURL()
	})
}

// SetMd5 sets the "md5" field.
func (u *FileUpsertBulk) SetMd5(v string) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetMd5(v)
	})
}

// UpdateMd5 sets the "md5" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateMd5() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateMd5()
	})
}

// ClearMd5 clears the value of the "md5" field.
func (u *FileUpsertBulk) ClearMd5() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearMd5()
	})
}

// Exec executes the query.
func (u *FileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

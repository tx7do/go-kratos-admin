// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	servicev1 "kratos-admin/api/gen/go/admin/service/v1"
	"kratos-admin/app/admin/service/internal/data/ent/menu"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuUpdate is the builder for updating Menu entities.
type MenuUpdate struct {
	config
	hooks     []Hook
	mutation  *MenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MenuUpdate builder.
func (_u *MenuUpdate) Where(ps ...predicate.Menu) *MenuUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MenuUpdate) SetUpdatedAt(v time.Time) *MenuUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableUpdatedAt(v *time.Time) *MenuUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MenuUpdate) ClearUpdatedAt() *MenuUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *MenuUpdate) SetDeletedAt(v time.Time) *MenuUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableDeletedAt(v *time.Time) *MenuUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *MenuUpdate) ClearDeletedAt() *MenuUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *MenuUpdate) SetCreatedBy(v uint32) *MenuUpdate {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableCreatedBy(v *uint32) *MenuUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *MenuUpdate) AddCreatedBy(v int32) *MenuUpdate {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *MenuUpdate) ClearCreatedBy() *MenuUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *MenuUpdate) SetUpdatedBy(v uint32) *MenuUpdate {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableUpdatedBy(v *uint32) *MenuUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *MenuUpdate) AddUpdatedBy(v int32) *MenuUpdate {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *MenuUpdate) ClearUpdatedBy() *MenuUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *MenuUpdate) SetDeletedBy(v uint32) *MenuUpdate {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableDeletedBy(v *uint32) *MenuUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *MenuUpdate) AddDeletedBy(v int32) *MenuUpdate {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *MenuUpdate) ClearDeletedBy() *MenuUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *MenuUpdate) SetRemark(v string) *MenuUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableRemark(v *string) *MenuUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *MenuUpdate) ClearRemark() *MenuUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *MenuUpdate) SetParentID(v uint32) *MenuUpdate {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableParentID(v *uint32) *MenuUpdate {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *MenuUpdate) ClearParentID() *MenuUpdate {
	_u.mutation.ClearParentID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MenuUpdate) SetStatus(v menu.Status) *MenuUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableStatus(v *menu.Status) *MenuUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *MenuUpdate) ClearStatus() *MenuUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetType sets the "type" field.
func (_u *MenuUpdate) SetType(v menu.Type) *MenuUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableType(v *menu.Type) *MenuUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *MenuUpdate) ClearType() *MenuUpdate {
	_u.mutation.ClearType()
	return _u
}

// SetPath sets the "path" field.
func (_u *MenuUpdate) SetPath(v string) *MenuUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *MenuUpdate) SetNillablePath(v *string) *MenuUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *MenuUpdate) ClearPath() *MenuUpdate {
	_u.mutation.ClearPath()
	return _u
}

// SetRedirect sets the "redirect" field.
func (_u *MenuUpdate) SetRedirect(v string) *MenuUpdate {
	_u.mutation.SetRedirect(v)
	return _u
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableRedirect(v *string) *MenuUpdate {
	if v != nil {
		_u.SetRedirect(*v)
	}
	return _u
}

// ClearRedirect clears the value of the "redirect" field.
func (_u *MenuUpdate) ClearRedirect() *MenuUpdate {
	_u.mutation.ClearRedirect()
	return _u
}

// SetAlias sets the "alias" field.
func (_u *MenuUpdate) SetAlias(v string) *MenuUpdate {
	_u.mutation.SetAlias(v)
	return _u
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableAlias(v *string) *MenuUpdate {
	if v != nil {
		_u.SetAlias(*v)
	}
	return _u
}

// ClearAlias clears the value of the "alias" field.
func (_u *MenuUpdate) ClearAlias() *MenuUpdate {
	_u.mutation.ClearAlias()
	return _u
}

// SetName sets the "name" field.
func (_u *MenuUpdate) SetName(v string) *MenuUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableName(v *string) *MenuUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MenuUpdate) ClearName() *MenuUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetComponent sets the "component" field.
func (_u *MenuUpdate) SetComponent(v string) *MenuUpdate {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableComponent(v *string) *MenuUpdate {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// ClearComponent clears the value of the "component" field.
func (_u *MenuUpdate) ClearComponent() *MenuUpdate {
	_u.mutation.ClearComponent()
	return _u
}

// SetMeta sets the "meta" field.
func (_u *MenuUpdate) SetMeta(v *servicev1.RouteMeta) *MenuUpdate {
	_u.mutation.SetMeta(v)
	return _u
}

// ClearMeta clears the value of the "meta" field.
func (_u *MenuUpdate) ClearMeta() *MenuUpdate {
	_u.mutation.ClearMeta()
	return _u
}

// SetParent sets the "parent" edge to the Menu entity.
func (_u *MenuUpdate) SetParent(v *Menu) *MenuUpdate {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (_u *MenuUpdate) AddChildIDs(ids ...uint32) *MenuUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Menu entity.
func (_u *MenuUpdate) AddChildren(v ...*Menu) *MenuUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (_u *MenuUpdate) Mutation() *MenuMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Menu entity.
func (_u *MenuUpdate) ClearParent() *MenuUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Menu entity.
func (_u *MenuUpdate) ClearChildren() *MenuUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (_u *MenuUpdate) RemoveChildIDs(ids ...uint32) *MenuUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Menu entities.
func (_u *MenuUpdate) RemoveChildren(v ...*Menu) *MenuUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MenuUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MenuUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MenuUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MenuUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MenuUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := menu.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Menu.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := menu.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Menu.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Meta(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "meta", err: fmt.Errorf(`ent: validator failed for field "Menu.meta": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *MenuUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MenuUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *MenuUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(menu.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(menu.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(menu.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(menu.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(menu.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(menu.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(menu.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(menu.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(menu.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(menu.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(menu.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(menu.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(menu.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(menu.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(menu.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(menu.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeEnum, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(menu.FieldType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(menu.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
	}
	if _u.mutation.RedirectCleared() {
		_spec.ClearField(menu.FieldRedirect, field.TypeString)
	}
	if value, ok := _u.mutation.Alias(); ok {
		_spec.SetField(menu.FieldAlias, field.TypeString, value)
	}
	if _u.mutation.AliasCleared() {
		_spec.ClearField(menu.FieldAlias, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(menu.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
	}
	if _u.mutation.ComponentCleared() {
		_spec.ClearField(menu.FieldComponent, field.TypeString)
	}
	if value, ok := _u.mutation.Meta(); ok {
		_spec.SetField(menu.FieldMeta, field.TypeJSON, value)
	}
	if _u.mutation.MetaCleared() {
		_spec.ClearField(menu.FieldMeta, field.TypeJSON)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MenuUpdateOne is the builder for updating a single Menu entity.
type MenuUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MenuUpdateOne) SetUpdatedAt(v time.Time) *MenuUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableUpdatedAt(v *time.Time) *MenuUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MenuUpdateOne) ClearUpdatedAt() *MenuUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *MenuUpdateOne) SetDeletedAt(v time.Time) *MenuUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableDeletedAt(v *time.Time) *MenuUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *MenuUpdateOne) ClearDeletedAt() *MenuUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *MenuUpdateOne) SetCreatedBy(v uint32) *MenuUpdateOne {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableCreatedBy(v *uint32) *MenuUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *MenuUpdateOne) AddCreatedBy(v int32) *MenuUpdateOne {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *MenuUpdateOne) ClearCreatedBy() *MenuUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *MenuUpdateOne) SetUpdatedBy(v uint32) *MenuUpdateOne {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableUpdatedBy(v *uint32) *MenuUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *MenuUpdateOne) AddUpdatedBy(v int32) *MenuUpdateOne {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *MenuUpdateOne) ClearUpdatedBy() *MenuUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *MenuUpdateOne) SetDeletedBy(v uint32) *MenuUpdateOne {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableDeletedBy(v *uint32) *MenuUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *MenuUpdateOne) AddDeletedBy(v int32) *MenuUpdateOne {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *MenuUpdateOne) ClearDeletedBy() *MenuUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *MenuUpdateOne) SetRemark(v string) *MenuUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableRemark(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *MenuUpdateOne) ClearRemark() *MenuUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *MenuUpdateOne) SetParentID(v uint32) *MenuUpdateOne {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableParentID(v *uint32) *MenuUpdateOne {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *MenuUpdateOne) ClearParentID() *MenuUpdateOne {
	_u.mutation.ClearParentID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MenuUpdateOne) SetStatus(v menu.Status) *MenuUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableStatus(v *menu.Status) *MenuUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *MenuUpdateOne) ClearStatus() *MenuUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetType sets the "type" field.
func (_u *MenuUpdateOne) SetType(v menu.Type) *MenuUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableType(v *menu.Type) *MenuUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *MenuUpdateOne) ClearType() *MenuUpdateOne {
	_u.mutation.ClearType()
	return _u
}

// SetPath sets the "path" field.
func (_u *MenuUpdateOne) SetPath(v string) *MenuUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillablePath(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *MenuUpdateOne) ClearPath() *MenuUpdateOne {
	_u.mutation.ClearPath()
	return _u
}

// SetRedirect sets the "redirect" field.
func (_u *MenuUpdateOne) SetRedirect(v string) *MenuUpdateOne {
	_u.mutation.SetRedirect(v)
	return _u
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableRedirect(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetRedirect(*v)
	}
	return _u
}

// ClearRedirect clears the value of the "redirect" field.
func (_u *MenuUpdateOne) ClearRedirect() *MenuUpdateOne {
	_u.mutation.ClearRedirect()
	return _u
}

// SetAlias sets the "alias" field.
func (_u *MenuUpdateOne) SetAlias(v string) *MenuUpdateOne {
	_u.mutation.SetAlias(v)
	return _u
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableAlias(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetAlias(*v)
	}
	return _u
}

// ClearAlias clears the value of the "alias" field.
func (_u *MenuUpdateOne) ClearAlias() *MenuUpdateOne {
	_u.mutation.ClearAlias()
	return _u
}

// SetName sets the "name" field.
func (_u *MenuUpdateOne) SetName(v string) *MenuUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableName(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MenuUpdateOne) ClearName() *MenuUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetComponent sets the "component" field.
func (_u *MenuUpdateOne) SetComponent(v string) *MenuUpdateOne {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableComponent(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// ClearComponent clears the value of the "component" field.
func (_u *MenuUpdateOne) ClearComponent() *MenuUpdateOne {
	_u.mutation.ClearComponent()
	return _u
}

// SetMeta sets the "meta" field.
func (_u *MenuUpdateOne) SetMeta(v *servicev1.RouteMeta) *MenuUpdateOne {
	_u.mutation.SetMeta(v)
	return _u
}

// ClearMeta clears the value of the "meta" field.
func (_u *MenuUpdateOne) ClearMeta() *MenuUpdateOne {
	_u.mutation.ClearMeta()
	return _u
}

// SetParent sets the "parent" edge to the Menu entity.
func (_u *MenuUpdateOne) SetParent(v *Menu) *MenuUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (_u *MenuUpdateOne) AddChildIDs(ids ...uint32) *MenuUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Menu entity.
func (_u *MenuUpdateOne) AddChildren(v ...*Menu) *MenuUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (_u *MenuUpdateOne) Mutation() *MenuMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Menu entity.
func (_u *MenuUpdateOne) ClearParent() *MenuUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Menu entity.
func (_u *MenuUpdateOne) ClearChildren() *MenuUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (_u *MenuUpdateOne) RemoveChildIDs(ids ...uint32) *MenuUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Menu entities.
func (_u *MenuUpdateOne) RemoveChildren(v ...*Menu) *MenuUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the MenuUpdate builder.
func (_u *MenuUpdateOne) Where(ps ...predicate.Menu) *MenuUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MenuUpdateOne) Select(field string, fields ...string) *MenuUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Menu entity.
func (_u *MenuUpdateOne) Save(ctx context.Context) (*Menu, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MenuUpdateOne) SaveX(ctx context.Context) *Menu {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MenuUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MenuUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MenuUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := menu.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Menu.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := menu.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Menu.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Meta(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "meta", err: fmt.Errorf(`ent: validator failed for field "Menu.meta": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *MenuUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MenuUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *MenuUpdateOne) sqlSave(ctx context.Context) (_node *Menu, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Menu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menu.FieldID)
		for _, f := range fields {
			if !menu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(menu.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(menu.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(menu.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(menu.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(menu.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(menu.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(menu.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(menu.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(menu.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(menu.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(menu.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(menu.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(menu.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(menu.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(menu.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(menu.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeEnum, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(menu.FieldType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(menu.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
	}
	if _u.mutation.RedirectCleared() {
		_spec.ClearField(menu.FieldRedirect, field.TypeString)
	}
	if value, ok := _u.mutation.Alias(); ok {
		_spec.SetField(menu.FieldAlias, field.TypeString, value)
	}
	if _u.mutation.AliasCleared() {
		_spec.ClearField(menu.FieldAlias, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(menu.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
	}
	if _u.mutation.ComponentCleared() {
		_spec.ClearField(menu.FieldComponent, field.TypeString)
	}
	if value, ok := _u.mutation.Meta(); ok {
		_spec.SetField(menu.FieldMeta, field.TypeJSON, value)
	}
	if _u.mutation.MetaCleared() {
		_spec.ClearField(menu.FieldMeta, field.TypeJSON)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Menu{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: dict/service/v1/language.proto

package servicev1

import (
	context "context"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LanguageService_ListLanguage_FullMethodName = "/dict.service.v1.LanguageService/ListLanguage"
	LanguageService_Get_FullMethodName          = "/dict.service.v1.LanguageService/Get"
	LanguageService_Create_FullMethodName       = "/dict.service.v1.LanguageService/Create"
	LanguageService_Update_FullMethodName       = "/dict.service.v1.LanguageService/Update"
	LanguageService_Delete_FullMethodName       = "/dict.service.v1.LanguageService/Delete"
	LanguageService_BatchCreate_FullMethodName  = "/dict.service.v1.LanguageService/BatchCreate"
)

// LanguageServiceClient is the client API for LanguageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 语言管理服务
type LanguageServiceClient interface {
	// 分页查询语言列表
	ListLanguage(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*ListLanguageResponse, error)
	// 查询语言详情
	Get(ctx context.Context, in *GetLanguageRequest, opts ...grpc.CallOption) (*Language, error)
	// 创建语言
	Create(ctx context.Context, in *CreateLanguageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新语言
	Update(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除语言
	Delete(ctx context.Context, in *DeleteLanguageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 批量创建语言
	BatchCreate(ctx context.Context, in *BatchCreateLanguagesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type languageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLanguageServiceClient(cc grpc.ClientConnInterface) LanguageServiceClient {
	return &languageServiceClient{cc}
}

func (c *languageServiceClient) ListLanguage(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*ListLanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLanguageResponse)
	err := c.cc.Invoke(ctx, LanguageService_ListLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) Get(ctx context.Context, in *GetLanguageRequest, opts ...grpc.CallOption) (*Language, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Language)
	err := c.cc.Invoke(ctx, LanguageService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) Create(ctx context.Context, in *CreateLanguageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LanguageService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) Update(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LanguageService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) Delete(ctx context.Context, in *DeleteLanguageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LanguageService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) BatchCreate(ctx context.Context, in *BatchCreateLanguagesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LanguageService_BatchCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanguageServiceServer is the server API for LanguageService service.
// All implementations must embed UnimplementedLanguageServiceServer
// for forward compatibility.
//
// 语言管理服务
type LanguageServiceServer interface {
	// 分页查询语言列表
	ListLanguage(context.Context, *v1.PagingRequest) (*ListLanguageResponse, error)
	// 查询语言详情
	Get(context.Context, *GetLanguageRequest) (*Language, error)
	// 创建语言
	Create(context.Context, *CreateLanguageRequest) (*emptypb.Empty, error)
	// 更新语言
	Update(context.Context, *UpdateLanguageRequest) (*emptypb.Empty, error)
	// 删除语言
	Delete(context.Context, *DeleteLanguageRequest) (*emptypb.Empty, error)
	// 批量创建语言
	BatchCreate(context.Context, *BatchCreateLanguagesRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedLanguageServiceServer()
}

// UnimplementedLanguageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLanguageServiceServer struct{}

func (UnimplementedLanguageServiceServer) ListLanguage(context.Context, *v1.PagingRequest) (*ListLanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLanguage not implemented")
}
func (UnimplementedLanguageServiceServer) Get(context.Context, *GetLanguageRequest) (*Language, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLanguageServiceServer) Create(context.Context, *CreateLanguageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLanguageServiceServer) Update(context.Context, *UpdateLanguageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLanguageServiceServer) Delete(context.Context, *DeleteLanguageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLanguageServiceServer) BatchCreate(context.Context, *BatchCreateLanguagesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedLanguageServiceServer) mustEmbedUnimplementedLanguageServiceServer() {}
func (UnimplementedLanguageServiceServer) testEmbeddedByValue()                         {}

// UnsafeLanguageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanguageServiceServer will
// result in compilation errors.
type UnsafeLanguageServiceServer interface {
	mustEmbedUnimplementedLanguageServiceServer()
}

func RegisterLanguageServiceServer(s grpc.ServiceRegistrar, srv LanguageServiceServer) {
	// If the following call pancis, it indicates UnimplementedLanguageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LanguageService_ServiceDesc, srv)
}

func _LanguageService_ListLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).ListLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_ListLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).ListLanguage(ctx, req.(*v1.PagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).Get(ctx, req.(*GetLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).Create(ctx, req.(*CreateLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).Update(ctx, req.(*UpdateLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).Delete(ctx, req.(*DeleteLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_BatchCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).BatchCreate(ctx, req.(*BatchCreateLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LanguageService_ServiceDesc is the grpc.ServiceDesc for LanguageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LanguageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dict.service.v1.LanguageService",
	HandlerType: (*LanguageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLanguage",
			Handler:    _LanguageService_ListLanguage_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LanguageService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _LanguageService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LanguageService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LanguageService_Delete_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _LanguageService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dict/service/v1/language.proto",
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/role"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleCreate is the builder for creating a Role entity.
type RoleCreate struct {
	config
	mutation *RoleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (_c *RoleCreate) SetCreateTime(v time.Time) *RoleCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *RoleCreate) SetNillableCreateTime(v *time.Time) *RoleCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *RoleCreate) SetUpdateTime(v time.Time) *RoleCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *RoleCreate) SetNillableUpdateTime(v *time.Time) *RoleCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *RoleCreate) SetDeleteTime(v time.Time) *RoleCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *RoleCreate) SetNillableDeleteTime(v *time.Time) *RoleCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *RoleCreate) SetCreateBy(v uint32) *RoleCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *RoleCreate) SetNillableCreateBy(v *uint32) *RoleCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *RoleCreate) SetUpdateBy(v uint32) *RoleCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *RoleCreate) SetNillableUpdateBy(v *uint32) *RoleCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetRemark sets the "remark" field.
func (_c *RoleCreate) SetRemark(v string) *RoleCreate {
	_c.mutation.SetRemark(v)
	return _c
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_c *RoleCreate) SetNillableRemark(v *string) *RoleCreate {
	if v != nil {
		_c.SetRemark(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *RoleCreate) SetTenantID(v uint32) *RoleCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_c *RoleCreate) SetNillableTenantID(v *uint32) *RoleCreate {
	if v != nil {
		_c.SetTenantID(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *RoleCreate) SetName(v string) *RoleCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *RoleCreate) SetNillableName(v *string) *RoleCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetCode sets the "code" field.
func (_c *RoleCreate) SetCode(v string) *RoleCreate {
	_c.mutation.SetCode(v)
	return _c
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_c *RoleCreate) SetNillableCode(v *string) *RoleCreate {
	if v != nil {
		_c.SetCode(*v)
	}
	return _c
}

// SetParentID sets the "parent_id" field.
func (_c *RoleCreate) SetParentID(v uint32) *RoleCreate {
	_c.mutation.SetParentID(v)
	return _c
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_c *RoleCreate) SetNillableParentID(v *uint32) *RoleCreate {
	if v != nil {
		_c.SetParentID(*v)
	}
	return _c
}

// SetSortID sets the "sort_id" field.
func (_c *RoleCreate) SetSortID(v int32) *RoleCreate {
	_c.mutation.SetSortID(v)
	return _c
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (_c *RoleCreate) SetNillableSortID(v *int32) *RoleCreate {
	if v != nil {
		_c.SetSortID(*v)
	}
	return _c
}

// SetMenus sets the "menus" field.
func (_c *RoleCreate) SetMenus(v []uint32) *RoleCreate {
	_c.mutation.SetMenus(v)
	return _c
}

// SetApis sets the "apis" field.
func (_c *RoleCreate) SetApis(v []uint32) *RoleCreate {
	_c.mutation.SetApis(v)
	return _c
}

// SetDataScope sets the "data_scope" field.
func (_c *RoleCreate) SetDataScope(v role.DataScope) *RoleCreate {
	_c.mutation.SetDataScope(v)
	return _c
}

// SetNillableDataScope sets the "data_scope" field if the given value is not nil.
func (_c *RoleCreate) SetNillableDataScope(v *role.DataScope) *RoleCreate {
	if v != nil {
		_c.SetDataScope(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *RoleCreate) SetStatus(v role.Status) *RoleCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *RoleCreate) SetNillableStatus(v *role.Status) *RoleCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *RoleCreate) SetID(v uint32) *RoleCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetParent sets the "parent" edge to the Role entity.
func (_c *RoleCreate) SetParent(v *Role) *RoleCreate {
	return _c.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Role entity by IDs.
func (_c *RoleCreate) AddChildIDs(ids ...uint32) *RoleCreate {
	_c.mutation.AddChildIDs(ids...)
	return _c
}

// AddChildren adds the "children" edges to the Role entity.
func (_c *RoleCreate) AddChildren(v ...*Role) *RoleCreate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (_c *RoleCreate) Mutation() *RoleMutation {
	return _c.mutation
}

// Save creates the Role in the database.
func (_c *RoleCreate) Save(ctx context.Context) (*Role, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *RoleCreate) SaveX(ctx context.Context) *Role {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RoleCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RoleCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *RoleCreate) defaults() {
	if _, ok := _c.mutation.Remark(); !ok {
		v := role.DefaultRemark
		_c.mutation.SetRemark(v)
	}
	if _, ok := _c.mutation.SortID(); !ok {
		v := role.DefaultSortID
		_c.mutation.SetSortID(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := role.DefaultStatus
		_c.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *RoleCreate) check() error {
	if v, ok := _c.mutation.TenantID(); ok {
		if err := role.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Role.tenant_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := role.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Role.name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Code(); ok {
		if err := role.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Role.code": %w`, err)}
		}
	}
	if v, ok := _c.mutation.DataScope(); ok {
		if err := role.DataScopeValidator(v); err != nil {
			return &ValidationError{Name: "data_scope", err: fmt.Errorf(`ent: validator failed for field "Role.data_scope": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := role.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Role.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := role.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Role.id": %w`, err)}
		}
	}
	return nil
}

func (_c *RoleCreate) sqlSave(ctx context.Context) (*Role, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *RoleCreate) createSpec() (*Role, *sqlgraph.CreateSpec) {
	var (
		_node = &Role{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(role.Table, sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(role.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(role.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(role.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(role.FieldCreateBy, field.TypeUint32, value)
		_node.CreateBy = &value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(role.FieldUpdateBy, field.TypeUint32, value)
		_node.UpdateBy = &value
	}
	if value, ok := _c.mutation.Remark(); ok {
		_spec.SetField(role.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(role.FieldTenantID, field.TypeUint32, value)
		_node.TenantID = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := _c.mutation.Code(); ok {
		_spec.SetField(role.FieldCode, field.TypeString, value)
		_node.Code = &value
	}
	if value, ok := _c.mutation.SortID(); ok {
		_spec.SetField(role.FieldSortID, field.TypeInt32, value)
		_node.SortID = &value
	}
	if value, ok := _c.mutation.Menus(); ok {
		_spec.SetField(role.FieldMenus, field.TypeJSON, value)
		_node.Menus = value
	}
	if value, ok := _c.mutation.Apis(); ok {
		_spec.SetField(role.FieldApis, field.TypeJSON, value)
		_node.Apis = value
	}
	if value, ok := _c.mutation.DataScope(); ok {
		_spec.SetField(role.FieldDataScope, field.TypeEnum, value)
		_node.DataScope = &value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(role.FieldStatus, field.TypeEnum, value)
		_node.Status = &value
	}
	if nodes := _c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.ParentTable,
			Columns: []string{role.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Role.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RoleUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (_c *RoleCreate) OnConflict(opts ...sql.ConflictOption) *RoleUpsertOne {
	_c.conflict = opts
	return &RoleUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Role.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RoleCreate) OnConflictColumns(columns ...string) *RoleUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RoleUpsertOne{
		create: _c,
	}
}

type (
	// RoleUpsertOne is the builder for "upsert"-ing
	//  one Role node.
	RoleUpsertOne struct {
		create *RoleCreate
	}

	// RoleUpsert is the "OnConflict" setter.
	RoleUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *RoleUpsert) SetUpdateTime(v time.Time) *RoleUpsert {
	u.Set(role.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *RoleUpsert) UpdateUpdateTime() *RoleUpsert {
	u.SetExcluded(role.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *RoleUpsert) ClearUpdateTime() *RoleUpsert {
	u.SetNull(role.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *RoleUpsert) SetDeleteTime(v time.Time) *RoleUpsert {
	u.Set(role.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *RoleUpsert) UpdateDeleteTime() *RoleUpsert {
	u.SetExcluded(role.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *RoleUpsert) ClearDeleteTime() *RoleUpsert {
	u.SetNull(role.FieldDeleteTime)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *RoleUpsert) SetCreateBy(v uint32) *RoleUpsert {
	u.Set(role.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *RoleUpsert) UpdateCreateBy() *RoleUpsert {
	u.SetExcluded(role.FieldCreateBy)
	return u
}

// AddCreateBy adds v to the "create_by" field.
func (u *RoleUpsert) AddCreateBy(v uint32) *RoleUpsert {
	u.Add(role.FieldCreateBy, v)
	return u
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *RoleUpsert) ClearCreateBy() *RoleUpsert {
	u.SetNull(role.FieldCreateBy)
	return u
}

// SetUpdateBy sets the "update_by" field.
func (u *RoleUpsert) SetUpdateBy(v uint32) *RoleUpsert {
	u.Set(role.FieldUpdateBy, v)
	return u
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *RoleUpsert) UpdateUpdateBy() *RoleUpsert {
	u.SetExcluded(role.FieldUpdateBy)
	return u
}

// AddUpdateBy adds v to the "update_by" field.
func (u *RoleUpsert) AddUpdateBy(v uint32) *RoleUpsert {
	u.Add(role.FieldUpdateBy, v)
	return u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *RoleUpsert) ClearUpdateBy() *RoleUpsert {
	u.SetNull(role.FieldUpdateBy)
	return u
}

// SetRemark sets the "remark" field.
func (u *RoleUpsert) SetRemark(v string) *RoleUpsert {
	u.Set(role.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RoleUpsert) UpdateRemark() *RoleUpsert {
	u.SetExcluded(role.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *RoleUpsert) ClearRemark() *RoleUpsert {
	u.SetNull(role.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *RoleUpsert) SetName(v string) *RoleUpsert {
	u.Set(role.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RoleUpsert) UpdateName() *RoleUpsert {
	u.SetExcluded(role.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *RoleUpsert) ClearName() *RoleUpsert {
	u.SetNull(role.FieldName)
	return u
}

// SetCode sets the "code" field.
func (u *RoleUpsert) SetCode(v string) *RoleUpsert {
	u.Set(role.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *RoleUpsert) UpdateCode() *RoleUpsert {
	u.SetExcluded(role.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *RoleUpsert) ClearCode() *RoleUpsert {
	u.SetNull(role.FieldCode)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *RoleUpsert) SetParentID(v uint32) *RoleUpsert {
	u.Set(role.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *RoleUpsert) UpdateParentID() *RoleUpsert {
	u.SetExcluded(role.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *RoleUpsert) ClearParentID() *RoleUpsert {
	u.SetNull(role.FieldParentID)
	return u
}

// SetSortID sets the "sort_id" field.
func (u *RoleUpsert) SetSortID(v int32) *RoleUpsert {
	u.Set(role.FieldSortID, v)
	return u
}

// UpdateSortID sets the "sort_id" field to the value that was provided on create.
func (u *RoleUpsert) UpdateSortID() *RoleUpsert {
	u.SetExcluded(role.FieldSortID)
	return u
}

// AddSortID adds v to the "sort_id" field.
func (u *RoleUpsert) AddSortID(v int32) *RoleUpsert {
	u.Add(role.FieldSortID, v)
	return u
}

// ClearSortID clears the value of the "sort_id" field.
func (u *RoleUpsert) ClearSortID() *RoleUpsert {
	u.SetNull(role.FieldSortID)
	return u
}

// SetMenus sets the "menus" field.
func (u *RoleUpsert) SetMenus(v []uint32) *RoleUpsert {
	u.Set(role.FieldMenus, v)
	return u
}

// UpdateMenus sets the "menus" field to the value that was provided on create.
func (u *RoleUpsert) UpdateMenus() *RoleUpsert {
	u.SetExcluded(role.FieldMenus)
	return u
}

// ClearMenus clears the value of the "menus" field.
func (u *RoleUpsert) ClearMenus() *RoleUpsert {
	u.SetNull(role.FieldMenus)
	return u
}

// SetApis sets the "apis" field.
func (u *RoleUpsert) SetApis(v []uint32) *RoleUpsert {
	u.Set(role.FieldApis, v)
	return u
}

// UpdateApis sets the "apis" field to the value that was provided on create.
func (u *RoleUpsert) UpdateApis() *RoleUpsert {
	u.SetExcluded(role.FieldApis)
	return u
}

// ClearApis clears the value of the "apis" field.
func (u *RoleUpsert) ClearApis() *RoleUpsert {
	u.SetNull(role.FieldApis)
	return u
}

// SetDataScope sets the "data_scope" field.
func (u *RoleUpsert) SetDataScope(v role.DataScope) *RoleUpsert {
	u.Set(role.FieldDataScope, v)
	return u
}

// UpdateDataScope sets the "data_scope" field to the value that was provided on create.
func (u *RoleUpsert) UpdateDataScope() *RoleUpsert {
	u.SetExcluded(role.FieldDataScope)
	return u
}

// ClearDataScope clears the value of the "data_scope" field.
func (u *RoleUpsert) ClearDataScope() *RoleUpsert {
	u.SetNull(role.FieldDataScope)
	return u
}

// SetStatus sets the "status" field.
func (u *RoleUpsert) SetStatus(v role.Status) *RoleUpsert {
	u.Set(role.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RoleUpsert) UpdateStatus() *RoleUpsert {
	u.SetExcluded(role.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *RoleUpsert) ClearStatus() *RoleUpsert {
	u.SetNull(role.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Role.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(role.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RoleUpsertOne) UpdateNewValues() *RoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(role.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(role.FieldCreateTime)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(role.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Role.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RoleUpsertOne) Ignore() *RoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RoleUpsertOne) DoNothing() *RoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RoleCreate.OnConflict
// documentation for more info.
func (u *RoleUpsertOne) Update(set func(*RoleUpsert)) *RoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RoleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *RoleUpsertOne) SetUpdateTime(v time.Time) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateUpdateTime() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *RoleUpsertOne) ClearUpdateTime() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *RoleUpsertOne) SetDeleteTime(v time.Time) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateDeleteTime() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *RoleUpsertOne) ClearDeleteTime() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *RoleUpsertOne) SetCreateBy(v uint32) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *RoleUpsertOne) AddCreateBy(v uint32) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateCreateBy() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *RoleUpsertOne) ClearCreateBy() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *RoleUpsertOne) SetUpdateBy(v uint32) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *RoleUpsertOne) AddUpdateBy(v uint32) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateUpdateBy() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *RoleUpsertOne) ClearUpdateBy() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *RoleUpsertOne) SetRemark(v string) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateRemark() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *RoleUpsertOne) ClearRemark() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *RoleUpsertOne) SetName(v string) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateName() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *RoleUpsertOne) ClearName() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearName()
	})
}

// SetCode sets the "code" field.
func (u *RoleUpsertOne) SetCode(v string) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateCode() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *RoleUpsertOne) ClearCode() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearCode()
	})
}

// SetParentID sets the "parent_id" field.
func (u *RoleUpsertOne) SetParentID(v uint32) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateParentID() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *RoleUpsertOne) ClearParentID() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearParentID()
	})
}

// SetSortID sets the "sort_id" field.
func (u *RoleUpsertOne) SetSortID(v int32) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetSortID(v)
	})
}

// AddSortID adds v to the "sort_id" field.
func (u *RoleUpsertOne) AddSortID(v int32) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.AddSortID(v)
	})
}

// UpdateSortID sets the "sort_id" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateSortID() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateSortID()
	})
}

// ClearSortID clears the value of the "sort_id" field.
func (u *RoleUpsertOne) ClearSortID() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearSortID()
	})
}

// SetMenus sets the "menus" field.
func (u *RoleUpsertOne) SetMenus(v []uint32) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetMenus(v)
	})
}

// UpdateMenus sets the "menus" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateMenus() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateMenus()
	})
}

// ClearMenus clears the value of the "menus" field.
func (u *RoleUpsertOne) ClearMenus() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearMenus()
	})
}

// SetApis sets the "apis" field.
func (u *RoleUpsertOne) SetApis(v []uint32) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetApis(v)
	})
}

// UpdateApis sets the "apis" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateApis() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateApis()
	})
}

// ClearApis clears the value of the "apis" field.
func (u *RoleUpsertOne) ClearApis() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearApis()
	})
}

// SetDataScope sets the "data_scope" field.
func (u *RoleUpsertOne) SetDataScope(v role.DataScope) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetDataScope(v)
	})
}

// UpdateDataScope sets the "data_scope" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateDataScope() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateDataScope()
	})
}

// ClearDataScope clears the value of the "data_scope" field.
func (u *RoleUpsertOne) ClearDataScope() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearDataScope()
	})
}

// SetStatus sets the "status" field.
func (u *RoleUpsertOne) SetStatus(v role.Status) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateStatus() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *RoleUpsertOne) ClearStatus() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *RoleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RoleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RoleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RoleUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RoleUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RoleCreateBulk is the builder for creating many Role entities in bulk.
type RoleCreateBulk struct {
	config
	err      error
	builders []*RoleCreate
	conflict []sql.ConflictOption
}

// Save creates the Role entities in the database.
func (_c *RoleCreateBulk) Save(ctx context.Context) ([]*Role, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Role, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *RoleCreateBulk) SaveX(ctx context.Context) []*Role {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RoleCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RoleCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Role.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RoleUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (_c *RoleCreateBulk) OnConflict(opts ...sql.ConflictOption) *RoleUpsertBulk {
	_c.conflict = opts
	return &RoleUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Role.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RoleCreateBulk) OnConflictColumns(columns ...string) *RoleUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RoleUpsertBulk{
		create: _c,
	}
}

// RoleUpsertBulk is the builder for "upsert"-ing
// a bulk of Role nodes.
type RoleUpsertBulk struct {
	create *RoleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Role.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(role.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RoleUpsertBulk) UpdateNewValues() *RoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(role.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(role.FieldCreateTime)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(role.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Role.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RoleUpsertBulk) Ignore() *RoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RoleUpsertBulk) DoNothing() *RoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RoleCreateBulk.OnConflict
// documentation for more info.
func (u *RoleUpsertBulk) Update(set func(*RoleUpsert)) *RoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RoleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *RoleUpsertBulk) SetUpdateTime(v time.Time) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateUpdateTime() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *RoleUpsertBulk) ClearUpdateTime() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *RoleUpsertBulk) SetDeleteTime(v time.Time) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateDeleteTime() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *RoleUpsertBulk) ClearDeleteTime() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *RoleUpsertBulk) SetCreateBy(v uint32) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *RoleUpsertBulk) AddCreateBy(v uint32) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateCreateBy() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *RoleUpsertBulk) ClearCreateBy() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *RoleUpsertBulk) SetUpdateBy(v uint32) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *RoleUpsertBulk) AddUpdateBy(v uint32) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateUpdateBy() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *RoleUpsertBulk) ClearUpdateBy() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *RoleUpsertBulk) SetRemark(v string) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateRemark() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *RoleUpsertBulk) ClearRemark() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *RoleUpsertBulk) SetName(v string) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateName() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *RoleUpsertBulk) ClearName() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearName()
	})
}

// SetCode sets the "code" field.
func (u *RoleUpsertBulk) SetCode(v string) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateCode() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *RoleUpsertBulk) ClearCode() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearCode()
	})
}

// SetParentID sets the "parent_id" field.
func (u *RoleUpsertBulk) SetParentID(v uint32) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateParentID() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *RoleUpsertBulk) ClearParentID() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearParentID()
	})
}

// SetSortID sets the "sort_id" field.
func (u *RoleUpsertBulk) SetSortID(v int32) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetSortID(v)
	})
}

// AddSortID adds v to the "sort_id" field.
func (u *RoleUpsertBulk) AddSortID(v int32) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.AddSortID(v)
	})
}

// UpdateSortID sets the "sort_id" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateSortID() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateSortID()
	})
}

// ClearSortID clears the value of the "sort_id" field.
func (u *RoleUpsertBulk) ClearSortID() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearSortID()
	})
}

// SetMenus sets the "menus" field.
func (u *RoleUpsertBulk) SetMenus(v []uint32) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetMenus(v)
	})
}

// UpdateMenus sets the "menus" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateMenus() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateMenus()
	})
}

// ClearMenus clears the value of the "menus" field.
func (u *RoleUpsertBulk) ClearMenus() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearMenus()
	})
}

// SetApis sets the "apis" field.
func (u *RoleUpsertBulk) SetApis(v []uint32) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetApis(v)
	})
}

// UpdateApis sets the "apis" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateApis() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateApis()
	})
}

// ClearApis clears the value of the "apis" field.
func (u *RoleUpsertBulk) ClearApis() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearApis()
	})
}

// SetDataScope sets the "data_scope" field.
func (u *RoleUpsertBulk) SetDataScope(v role.DataScope) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetDataScope(v)
	})
}

// UpdateDataScope sets the "data_scope" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateDataScope() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateDataScope()
	})
}

// ClearDataScope clears the value of the "data_scope" field.
func (u *RoleUpsertBulk) ClearDataScope() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearDataScope()
	})
}

// SetStatus sets the "status" field.
func (u *RoleUpsertBulk) SetStatus(v role.Status) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateStatus() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *RoleUpsertBulk) ClearStatus() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *RoleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RoleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RoleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RoleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package language

import (
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldDeletedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uint32) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v uint32) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v uint32) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldDeletedBy, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int32) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldSortOrder, v))
}

// IsEnabled applies equality check predicate on the "is_enabled" field. It's identical to IsEnabledEQ.
func IsEnabled(v bool) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldIsEnabled, v))
}

// LanguageCode applies equality check predicate on the "language_code" field. It's identical to LanguageCodeEQ.
func LanguageCode(v string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageName applies equality check predicate on the "language_name" field. It's identical to LanguageNameEQ.
func LanguageName(v string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldLanguageName, v))
}

// NativeName applies equality check predicate on the "native_name" field. It's identical to NativeNameEQ.
func NativeName(v string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldNativeName, v))
}

// IsDefault applies equality check predicate on the "is_default" field. It's identical to IsDefaultEQ.
func IsDefault(v bool) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldIsDefault, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Language {
	return predicate.Language(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Language {
	return predicate.Language(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Language {
	return predicate.Language(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Language {
	return predicate.Language(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Language {
	return predicate.Language(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Language {
	return predicate.Language(sql.FieldNotNull(FieldDeletedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uint32) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uint32) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uint32) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uint32) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uint32) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uint32) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uint32) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uint32) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Language {
	return predicate.Language(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Language {
	return predicate.Language(sql.FieldNotNull(FieldCreatedBy))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v uint32) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v uint32) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...uint32) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...uint32) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v uint32) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v uint32) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v uint32) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v uint32) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Language {
	return predicate.Language(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Language {
	return predicate.Language(sql.FieldNotNull(FieldUpdatedBy))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v uint32) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v uint32) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...uint32) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...uint32) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v uint32) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v uint32) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v uint32) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v uint32) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.Language {
	return predicate.Language(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.Language {
	return predicate.Language(sql.FieldNotNull(FieldDeletedBy))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int32) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int32) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int32) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int32) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int32) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int32) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int32) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int32) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldSortOrder, v))
}

// SortOrderIsNil applies the IsNil predicate on the "sort_order" field.
func SortOrderIsNil() predicate.Language {
	return predicate.Language(sql.FieldIsNull(FieldSortOrder))
}

// SortOrderNotNil applies the NotNil predicate on the "sort_order" field.
func SortOrderNotNil() predicate.Language {
	return predicate.Language(sql.FieldNotNull(FieldSortOrder))
}

// IsEnabledEQ applies the EQ predicate on the "is_enabled" field.
func IsEnabledEQ(v bool) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldIsEnabled, v))
}

// IsEnabledNEQ applies the NEQ predicate on the "is_enabled" field.
func IsEnabledNEQ(v bool) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldIsEnabled, v))
}

// IsEnabledIsNil applies the IsNil predicate on the "is_enabled" field.
func IsEnabledIsNil() predicate.Language {
	return predicate.Language(sql.FieldIsNull(FieldIsEnabled))
}

// IsEnabledNotNil applies the NotNil predicate on the "is_enabled" field.
func IsEnabledNotNil() predicate.Language {
	return predicate.Language(sql.FieldNotNull(FieldIsEnabled))
}

// LanguageCodeEQ applies the EQ predicate on the "language_code" field.
func LanguageCodeEQ(v string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageCodeNEQ applies the NEQ predicate on the "language_code" field.
func LanguageCodeNEQ(v string) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldLanguageCode, v))
}

// LanguageCodeIn applies the In predicate on the "language_code" field.
func LanguageCodeIn(vs ...string) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldLanguageCode, vs...))
}

// LanguageCodeNotIn applies the NotIn predicate on the "language_code" field.
func LanguageCodeNotIn(vs ...string) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldLanguageCode, vs...))
}

// LanguageCodeGT applies the GT predicate on the "language_code" field.
func LanguageCodeGT(v string) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldLanguageCode, v))
}

// LanguageCodeGTE applies the GTE predicate on the "language_code" field.
func LanguageCodeGTE(v string) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldLanguageCode, v))
}

// LanguageCodeLT applies the LT predicate on the "language_code" field.
func LanguageCodeLT(v string) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldLanguageCode, v))
}

// LanguageCodeLTE applies the LTE predicate on the "language_code" field.
func LanguageCodeLTE(v string) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldLanguageCode, v))
}

// LanguageCodeContains applies the Contains predicate on the "language_code" field.
func LanguageCodeContains(v string) predicate.Language {
	return predicate.Language(sql.FieldContains(FieldLanguageCode, v))
}

// LanguageCodeHasPrefix applies the HasPrefix predicate on the "language_code" field.
func LanguageCodeHasPrefix(v string) predicate.Language {
	return predicate.Language(sql.FieldHasPrefix(FieldLanguageCode, v))
}

// LanguageCodeHasSuffix applies the HasSuffix predicate on the "language_code" field.
func LanguageCodeHasSuffix(v string) predicate.Language {
	return predicate.Language(sql.FieldHasSuffix(FieldLanguageCode, v))
}

// LanguageCodeIsNil applies the IsNil predicate on the "language_code" field.
func LanguageCodeIsNil() predicate.Language {
	return predicate.Language(sql.FieldIsNull(FieldLanguageCode))
}

// LanguageCodeNotNil applies the NotNil predicate on the "language_code" field.
func LanguageCodeNotNil() predicate.Language {
	return predicate.Language(sql.FieldNotNull(FieldLanguageCode))
}

// LanguageCodeEqualFold applies the EqualFold predicate on the "language_code" field.
func LanguageCodeEqualFold(v string) predicate.Language {
	return predicate.Language(sql.FieldEqualFold(FieldLanguageCode, v))
}

// LanguageCodeContainsFold applies the ContainsFold predicate on the "language_code" field.
func LanguageCodeContainsFold(v string) predicate.Language {
	return predicate.Language(sql.FieldContainsFold(FieldLanguageCode, v))
}

// LanguageNameEQ applies the EQ predicate on the "language_name" field.
func LanguageNameEQ(v string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldLanguageName, v))
}

// LanguageNameNEQ applies the NEQ predicate on the "language_name" field.
func LanguageNameNEQ(v string) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldLanguageName, v))
}

// LanguageNameIn applies the In predicate on the "language_name" field.
func LanguageNameIn(vs ...string) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldLanguageName, vs...))
}

// LanguageNameNotIn applies the NotIn predicate on the "language_name" field.
func LanguageNameNotIn(vs ...string) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldLanguageName, vs...))
}

// LanguageNameGT applies the GT predicate on the "language_name" field.
func LanguageNameGT(v string) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldLanguageName, v))
}

// LanguageNameGTE applies the GTE predicate on the "language_name" field.
func LanguageNameGTE(v string) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldLanguageName, v))
}

// LanguageNameLT applies the LT predicate on the "language_name" field.
func LanguageNameLT(v string) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldLanguageName, v))
}

// LanguageNameLTE applies the LTE predicate on the "language_name" field.
func LanguageNameLTE(v string) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldLanguageName, v))
}

// LanguageNameContains applies the Contains predicate on the "language_name" field.
func LanguageNameContains(v string) predicate.Language {
	return predicate.Language(sql.FieldContains(FieldLanguageName, v))
}

// LanguageNameHasPrefix applies the HasPrefix predicate on the "language_name" field.
func LanguageNameHasPrefix(v string) predicate.Language {
	return predicate.Language(sql.FieldHasPrefix(FieldLanguageName, v))
}

// LanguageNameHasSuffix applies the HasSuffix predicate on the "language_name" field.
func LanguageNameHasSuffix(v string) predicate.Language {
	return predicate.Language(sql.FieldHasSuffix(FieldLanguageName, v))
}

// LanguageNameIsNil applies the IsNil predicate on the "language_name" field.
func LanguageNameIsNil() predicate.Language {
	return predicate.Language(sql.FieldIsNull(FieldLanguageName))
}

// LanguageNameNotNil applies the NotNil predicate on the "language_name" field.
func LanguageNameNotNil() predicate.Language {
	return predicate.Language(sql.FieldNotNull(FieldLanguageName))
}

// LanguageNameEqualFold applies the EqualFold predicate on the "language_name" field.
func LanguageNameEqualFold(v string) predicate.Language {
	return predicate.Language(sql.FieldEqualFold(FieldLanguageName, v))
}

// LanguageNameContainsFold applies the ContainsFold predicate on the "language_name" field.
func LanguageNameContainsFold(v string) predicate.Language {
	return predicate.Language(sql.FieldContainsFold(FieldLanguageName, v))
}

// NativeNameEQ applies the EQ predicate on the "native_name" field.
func NativeNameEQ(v string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldNativeName, v))
}

// NativeNameNEQ applies the NEQ predicate on the "native_name" field.
func NativeNameNEQ(v string) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldNativeName, v))
}

// NativeNameIn applies the In predicate on the "native_name" field.
func NativeNameIn(vs ...string) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldNativeName, vs...))
}

// NativeNameNotIn applies the NotIn predicate on the "native_name" field.
func NativeNameNotIn(vs ...string) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldNativeName, vs...))
}

// NativeNameGT applies the GT predicate on the "native_name" field.
func NativeNameGT(v string) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldNativeName, v))
}

// NativeNameGTE applies the GTE predicate on the "native_name" field.
func NativeNameGTE(v string) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldNativeName, v))
}

// NativeNameLT applies the LT predicate on the "native_name" field.
func NativeNameLT(v string) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldNativeName, v))
}

// NativeNameLTE applies the LTE predicate on the "native_name" field.
func NativeNameLTE(v string) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldNativeName, v))
}

// NativeNameContains applies the Contains predicate on the "native_name" field.
func NativeNameContains(v string) predicate.Language {
	return predicate.Language(sql.FieldContains(FieldNativeName, v))
}

// NativeNameHasPrefix applies the HasPrefix predicate on the "native_name" field.
func NativeNameHasPrefix(v string) predicate.Language {
	return predicate.Language(sql.FieldHasPrefix(FieldNativeName, v))
}

// NativeNameHasSuffix applies the HasSuffix predicate on the "native_name" field.
func NativeNameHasSuffix(v string) predicate.Language {
	return predicate.Language(sql.FieldHasSuffix(FieldNativeName, v))
}

// NativeNameIsNil applies the IsNil predicate on the "native_name" field.
func NativeNameIsNil() predicate.Language {
	return predicate.Language(sql.FieldIsNull(FieldNativeName))
}

// NativeNameNotNil applies the NotNil predicate on the "native_name" field.
func NativeNameNotNil() predicate.Language {
	return predicate.Language(sql.FieldNotNull(FieldNativeName))
}

// NativeNameEqualFold applies the EqualFold predicate on the "native_name" field.
func NativeNameEqualFold(v string) predicate.Language {
	return predicate.Language(sql.FieldEqualFold(FieldNativeName, v))
}

// NativeNameContainsFold applies the ContainsFold predicate on the "native_name" field.
func NativeNameContainsFold(v string) predicate.Language {
	return predicate.Language(sql.FieldContainsFold(FieldNativeName, v))
}

// IsDefaultEQ applies the EQ predicate on the "is_default" field.
func IsDefaultEQ(v bool) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldIsDefault, v))
}

// IsDefaultNEQ applies the NEQ predicate on the "is_default" field.
func IsDefaultNEQ(v bool) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldIsDefault, v))
}

// IsDefaultIsNil applies the IsNil predicate on the "is_default" field.
func IsDefaultIsNil() predicate.Language {
	return predicate.Language(sql.FieldIsNull(FieldIsDefault))
}

// IsDefaultNotNil applies the NotNil predicate on the "is_default" field.
func IsDefaultNotNil() predicate.Language {
	return predicate.Language(sql.FieldNotNull(FieldIsDefault))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Language) predicate.Language {
	return predicate.Language(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Language) predicate.Language {
	return predicate.Language(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Language) predicate.Language {
	return predicate.Language(sql.NotPredicates(p))
}

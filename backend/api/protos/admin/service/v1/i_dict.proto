syntax = "proto3";

package admin.service.v1;

import "gnostic/openapi/v3/annotations.proto";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

import "pagination/v1/pagination.proto";

// 字典管理服务
service DictService {
  // 分页查询主字典列表
  rpc ListDictMain (pagination.PagingRequest) returns (ListDictMainResponse) {
    option (google.api.http) = {
      get: "/admin/v1/dict-mains"
    };
  }

  // 查询主字典详情
  rpc GetDictMain (GetDictMainRequest) returns (DictMain) {
    option (google.api.http) = {
      get: "/admin/v1/dict-mains/{id}"
      additional_bindings {
        get: "/api/v1/dict-mains/code/{code}"
      }
    };
  }

  // 创建主字典
  rpc CreateDictMain (CreateDictMainRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/admin/v1/dict-mains"
      body: "*"
    };
  }

  // 更新主字典
  rpc UpdateDictMain (UpdateDictMainRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/admin/v1/dict-mains/{data.id}"
      body: "*"
    };
  }

  // 删除主字典
  rpc DeleteDictMain (BatchDeleteDictRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/admin/v1/dict-mains"
    };
  }


  // 分页查询子字典列表
  rpc ListDictItem (pagination.PagingRequest) returns (ListDictItemResponse) {
    option (google.api.http) = {
      get: "/admin/v1/dict-items"
    };
  }

  // 创建子字典
  rpc CreateDictItem (CreateDictItemRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/admin/v1/dict-items"
      body: "*"
    };
  }

  // 更新子字典
  rpc UpdateDictItem (UpdateDictItemRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/admin/v1/dict-items/{data.id}"
      body: "*"
    };
  }

  // 删除子字典
  rpc DeleteDictItem (BatchDeleteDictRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/admin/v1/dict-items"
    };
  }
}

// 主字典
message DictMain {
  optional uint32 id = 1 [
    json_name = "id",
    (gnostic.openapi.v3.property) = {
      description: "主字典ID"
    }
  ]; // 主字典ID

  optional string code = 2 [
    json_name = "code",
    (gnostic.openapi.v3.property) = {
      description: "主字典编码"
    }
  ]; // 主字典编码

  optional string name = 3 [
    json_name = "name",
    (gnostic.openapi.v3.property) = {
      description: "主字典名称"
    }
  ]; // 主字典名称

  optional string remark = 4 [
    json_name = "remark",
    (gnostic.openapi.v3.property) = {
      description: "备注"
    }
  ]; // 备注

  optional uint32 create_by = 100 [json_name = "createBy", (gnostic.openapi.v3.property) = {description: "创建者ID"}]; // 创建者ID
  optional uint32 update_by = 101 [json_name = "updateBy", (gnostic.openapi.v3.property) = {description: "更新者ID"}]; // 更新者ID

  optional google.protobuf.Timestamp create_time = 200 [json_name = "createTime", (gnostic.openapi.v3.property) = {description: "创建时间"}];// 创建时间
  optional google.protobuf.Timestamp update_time = 201 [json_name = "updateTime", (gnostic.openapi.v3.property) = {description: "更新时间"}];// 更新时间
  optional google.protobuf.Timestamp delete_time = 202 [json_name = "deleteTime", (gnostic.openapi.v3.property) = {description: "删除时间"}];// 删除时间
}

// 子字典
message DictItem {
  // 字典状态
  enum Status {
    OFF = 0;         // 禁用
    ON = 1;          // 启用
  }

  optional uint32 id = 1 [
    json_name = "id",
    (gnostic.openapi.v3.property) = {
      description: "子项ID"
    }
  ]; // 子项ID

  optional uint32 main_id = 2 [
    json_name = "mainId",
    (gnostic.openapi.v3.property) = {
      description: "主字典ID"
    }
  ]; // 主字典ID

  optional string code = 3 [
    json_name = "code",
    (gnostic.openapi.v3.property) = {
      description: "子项编码"
    }
  ]; // 子项编码

  optional string name = 4 [
    json_name = "name",
    (gnostic.openapi.v3.property) = {
      description: "子项名称"
    }
  ]; // 子项名称

  optional Status status = 5 [
    json_name = "status",
    (gnostic.openapi.v3.property) = {description: "字典状态"}
  ]; // 字典状态

  optional int32 sort_id = 6 [
    json_name = "sortId",
    (gnostic.openapi.v3.property) = {
      description: "排序编号"
    }
  ]; // 排序编号

  optional string remark = 7 [
    json_name = "remark",
    (gnostic.openapi.v3.property) = {
      description: "备注"
    }
  ]; // 备注

  optional uint32 create_by = 100 [json_name = "createBy", (gnostic.openapi.v3.property) = {description: "创建者ID"}]; // 创建者ID
  optional uint32 update_by = 101 [json_name = "updateBy", (gnostic.openapi.v3.property) = {description: "更新者ID"}]; // 更新者ID

  optional google.protobuf.Timestamp create_time = 200 [json_name = "createTime", (gnostic.openapi.v3.property) = {description: "创建时间"}];// 创建时间
  optional google.protobuf.Timestamp update_time = 201 [json_name = "updateTime", (gnostic.openapi.v3.property) = {description: "更新时间"}];// 更新时间
  optional google.protobuf.Timestamp delete_time = 202 [json_name = "deleteTime", (gnostic.openapi.v3.property) = {description: "删除时间"}];// 删除时间
}

// 查询主字典列表 - 回应
message ListDictMainResponse {
  repeated DictMain items = 1;
  uint32 total = 2;
}

// 查询主字典详情 - 请求
message GetDictMainRequest {
  oneof query_by {
    uint32 id = 1;
    string code = 2;
  }
}

// 创建主字典 - 请求
message CreateDictMainRequest {
  DictMain data = 1;
}

// 更新主字典 - 请求
message UpdateDictMainRequest {
  DictMain data = 1;

  google.protobuf.FieldMask update_mask = 2 [
    (gnostic.openapi.v3.property) = {
      description: "要更新的字段列表",
      example: {yaml : "id,realname,username"}
    },
    json_name = "updateMask"
  ]; // 要更新的字段列表

  optional bool allow_missing = 3 [
    (gnostic.openapi.v3.property) = {description: "如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。"},
    json_name = "allowMissing"
  ]; // 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
}

// 批量删除字典 - 请求
message BatchDeleteDictRequest {
  repeated uint32 ids = 1;  // 要删除的ID列表
}

// 查询子字典列表 - 回应
message ListDictItemResponse {
  repeated DictItem items = 1;
  uint32 total = 2;
}

// 创建子字典 - 请求
message CreateDictItemRequest {
  DictItem data = 1;
}

// 更新子字典 - 请求
message UpdateDictItemRequest {
  DictItem data = 1;

  google.protobuf.FieldMask update_mask = 2 [
    (gnostic.openapi.v3.property) = {
      description: "要更新的字段列表",
      example: {yaml : "id,realname,username"}
    },
    json_name = "updateMask"
  ]; // 要更新的字段列表

  optional bool allow_missing = 3 [
    (gnostic.openapi.v3.property) = {description: "如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。"},
    json_name = "allowMissing"
  ]; // 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
}

// 查询子字典详情 - 请求
message GetDictItemRequest {
  oneof query_by {
    uint32 id = 1;
    string code = 2;
  }
}
// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: admin/service/v1/i_dict.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v11 "kratos-admin/api/gen/go/dict/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDictServiceCreateDictEntry = "/admin.service.v1.DictService/CreateDictEntry"
const OperationDictServiceCreateDictType = "/admin.service.v1.DictService/CreateDictType"
const OperationDictServiceDeleteDictEntry = "/admin.service.v1.DictService/DeleteDictEntry"
const OperationDictServiceDeleteDictType = "/admin.service.v1.DictService/DeleteDictType"
const OperationDictServiceGetDictType = "/admin.service.v1.DictService/GetDictType"
const OperationDictServiceListDictEntry = "/admin.service.v1.DictService/ListDictEntry"
const OperationDictServiceListDictType = "/admin.service.v1.DictService/ListDictType"
const OperationDictServiceUpdateDictEntry = "/admin.service.v1.DictService/UpdateDictEntry"
const OperationDictServiceUpdateDictType = "/admin.service.v1.DictService/UpdateDictType"

type DictServiceHTTPServer interface {
	// CreateDictEntry 创建字典条目
	CreateDictEntry(context.Context, *v11.CreateDictEntryRequest) (*emptypb.Empty, error)
	// CreateDictType 创建字典类型
	CreateDictType(context.Context, *v11.CreateDictTypeRequest) (*emptypb.Empty, error)
	// DeleteDictEntry 删除字典条目
	DeleteDictEntry(context.Context, *v11.BatchDeleteDictRequest) (*emptypb.Empty, error)
	// DeleteDictType 删除字典类型
	DeleteDictType(context.Context, *v11.BatchDeleteDictRequest) (*emptypb.Empty, error)
	// GetDictType 查询字典类型详情
	GetDictType(context.Context, *v11.GetDictTypeRequest) (*v11.DictType, error)
	// ListDictEntry 分页查询字典条目列表
	ListDictEntry(context.Context, *v1.PagingRequest) (*v11.ListDictEntryResponse, error)
	// ListDictType 分页查询字典类型列表
	ListDictType(context.Context, *v1.PagingRequest) (*v11.ListDictTypeResponse, error)
	// UpdateDictEntry 更新字典条目
	UpdateDictEntry(context.Context, *v11.UpdateDictEntryRequest) (*emptypb.Empty, error)
	// UpdateDictType 更新字典类型
	UpdateDictType(context.Context, *v11.UpdateDictTypeRequest) (*emptypb.Empty, error)
}

func RegisterDictServiceHTTPServer(s *http.Server, srv DictServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/dict-types", _DictService_ListDictType0_HTTP_Handler(srv))
	r.GET("/api/v1/dict-types/code/{code}", _DictService_GetDictType0_HTTP_Handler(srv))
	r.GET("/admin/v1/dict-types/{id}", _DictService_GetDictType1_HTTP_Handler(srv))
	r.POST("/admin/v1/dict-types", _DictService_CreateDictType0_HTTP_Handler(srv))
	r.PUT("/admin/v1/dict-types/{data.id}", _DictService_UpdateDictType0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/dict-types", _DictService_DeleteDictType0_HTTP_Handler(srv))
	r.GET("/admin/v1/dict-entries", _DictService_ListDictEntry0_HTTP_Handler(srv))
	r.POST("/admin/v1/dict-entries", _DictService_CreateDictEntry0_HTTP_Handler(srv))
	r.PUT("/admin/v1/dict-entries/{data.id}", _DictService_UpdateDictEntry0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/dict-entries", _DictService_DeleteDictEntry0_HTTP_Handler(srv))
}

func _DictService_ListDictType0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.PagingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceListDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDictType(ctx, req.(*v1.PagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.ListDictTypeResponse)
		return ctx.Result(200, reply)
	}
}

func _DictService_GetDictType0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.GetDictTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceGetDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictType(ctx, req.(*v11.GetDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.DictType)
		return ctx.Result(200, reply)
	}
}

func _DictService_GetDictType1_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.GetDictTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceGetDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictType(ctx, req.(*v11.GetDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.DictType)
		return ctx.Result(200, reply)
	}
}

func _DictService_CreateDictType0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.CreateDictTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceCreateDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDictType(ctx, req.(*v11.CreateDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _DictService_UpdateDictType0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.UpdateDictTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceUpdateDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDictType(ctx, req.(*v11.UpdateDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _DictService_DeleteDictType0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.BatchDeleteDictRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceDeleteDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDictType(ctx, req.(*v11.BatchDeleteDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _DictService_ListDictEntry0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.PagingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceListDictEntry)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDictEntry(ctx, req.(*v1.PagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.ListDictEntryResponse)
		return ctx.Result(200, reply)
	}
}

func _DictService_CreateDictEntry0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.CreateDictEntryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceCreateDictEntry)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDictEntry(ctx, req.(*v11.CreateDictEntryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _DictService_UpdateDictEntry0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.UpdateDictEntryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceUpdateDictEntry)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDictEntry(ctx, req.(*v11.UpdateDictEntryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _DictService_DeleteDictEntry0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.BatchDeleteDictRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceDeleteDictEntry)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDictEntry(ctx, req.(*v11.BatchDeleteDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type DictServiceHTTPClient interface {
	// CreateDictEntry 创建字典条目
	CreateDictEntry(ctx context.Context, req *v11.CreateDictEntryRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// CreateDictType 创建字典类型
	CreateDictType(ctx context.Context, req *v11.CreateDictTypeRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// DeleteDictEntry 删除字典条目
	DeleteDictEntry(ctx context.Context, req *v11.BatchDeleteDictRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// DeleteDictType 删除字典类型
	DeleteDictType(ctx context.Context, req *v11.BatchDeleteDictRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// GetDictType 查询字典类型详情
	GetDictType(ctx context.Context, req *v11.GetDictTypeRequest, opts ...http.CallOption) (rsp *v11.DictType, err error)
	// ListDictEntry 分页查询字典条目列表
	ListDictEntry(ctx context.Context, req *v1.PagingRequest, opts ...http.CallOption) (rsp *v11.ListDictEntryResponse, err error)
	// ListDictType 分页查询字典类型列表
	ListDictType(ctx context.Context, req *v1.PagingRequest, opts ...http.CallOption) (rsp *v11.ListDictTypeResponse, err error)
	// UpdateDictEntry 更新字典条目
	UpdateDictEntry(ctx context.Context, req *v11.UpdateDictEntryRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// UpdateDictType 更新字典类型
	UpdateDictType(ctx context.Context, req *v11.UpdateDictTypeRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type DictServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDictServiceHTTPClient(client *http.Client) DictServiceHTTPClient {
	return &DictServiceHTTPClientImpl{client}
}

// CreateDictEntry 创建字典条目
func (c *DictServiceHTTPClientImpl) CreateDictEntry(ctx context.Context, in *v11.CreateDictEntryRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/dict-entries"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictServiceCreateDictEntry))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateDictType 创建字典类型
func (c *DictServiceHTTPClientImpl) CreateDictType(ctx context.Context, in *v11.CreateDictTypeRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/dict-types"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictServiceCreateDictType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteDictEntry 删除字典条目
func (c *DictServiceHTTPClientImpl) DeleteDictEntry(ctx context.Context, in *v11.BatchDeleteDictRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/dict-entries"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictServiceDeleteDictEntry))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteDictType 删除字典类型
func (c *DictServiceHTTPClientImpl) DeleteDictType(ctx context.Context, in *v11.BatchDeleteDictRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/dict-types"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictServiceDeleteDictType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetDictType 查询字典类型详情
func (c *DictServiceHTTPClientImpl) GetDictType(ctx context.Context, in *v11.GetDictTypeRequest, opts ...http.CallOption) (*v11.DictType, error) {
	var out v11.DictType
	pattern := "/admin/v1/dict-types/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictServiceGetDictType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListDictEntry 分页查询字典条目列表
func (c *DictServiceHTTPClientImpl) ListDictEntry(ctx context.Context, in *v1.PagingRequest, opts ...http.CallOption) (*v11.ListDictEntryResponse, error) {
	var out v11.ListDictEntryResponse
	pattern := "/admin/v1/dict-entries"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictServiceListDictEntry))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListDictType 分页查询字典类型列表
func (c *DictServiceHTTPClientImpl) ListDictType(ctx context.Context, in *v1.PagingRequest, opts ...http.CallOption) (*v11.ListDictTypeResponse, error) {
	var out v11.ListDictTypeResponse
	pattern := "/admin/v1/dict-types"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictServiceListDictType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateDictEntry 更新字典条目
func (c *DictServiceHTTPClientImpl) UpdateDictEntry(ctx context.Context, in *v11.UpdateDictEntryRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/dict-entries/{data.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictServiceUpdateDictEntry))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateDictType 更新字典类型
func (c *DictServiceHTTPClientImpl) UpdateDictType(ctx context.Context, in *v11.UpdateDictTypeRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/dict-types/{data.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictServiceUpdateDictType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

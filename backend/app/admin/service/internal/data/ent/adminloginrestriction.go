// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/adminloginrestriction"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 后台登录限制表
type AdminLoginRestriction struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint32 `json:"id,omitempty"`
	// 创建时间
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建者ID
	CreatedBy *uint32 `json:"created_by,omitempty"`
	// 更新者ID
	UpdatedBy *uint32 `json:"updated_by,omitempty"`
	// 删除者ID
	DeletedBy *uint32 `json:"deleted_by,omitempty"`
	// 目标用户ID
	TargetID *uint32 `json:"target_id,omitempty"`
	// 限制值（如IP地址、MAC地址或地区代码）
	Value *string `json:"value,omitempty"`
	// 限制原因
	Reason *string `json:"reason,omitempty"`
	// 限制类型
	Type *adminloginrestriction.Type `json:"type,omitempty"`
	// 限制方式
	Method       *adminloginrestriction.Method `json:"method,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminLoginRestriction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminloginrestriction.FieldID, adminloginrestriction.FieldCreatedBy, adminloginrestriction.FieldUpdatedBy, adminloginrestriction.FieldDeletedBy, adminloginrestriction.FieldTargetID:
			values[i] = new(sql.NullInt64)
		case adminloginrestriction.FieldValue, adminloginrestriction.FieldReason, adminloginrestriction.FieldType, adminloginrestriction.FieldMethod:
			values[i] = new(sql.NullString)
		case adminloginrestriction.FieldCreatedAt, adminloginrestriction.FieldUpdatedAt, adminloginrestriction.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminLoginRestriction fields.
func (_m *AdminLoginRestriction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminloginrestriction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint32(value.Int64)
		case adminloginrestriction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = new(time.Time)
				*_m.CreatedAt = value.Time
			}
		case adminloginrestriction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = new(time.Time)
				*_m.UpdatedAt = value.Time
			}
		case adminloginrestriction.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case adminloginrestriction.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = new(uint32)
				*_m.CreatedBy = uint32(value.Int64)
			}
		case adminloginrestriction.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = new(uint32)
				*_m.UpdatedBy = uint32(value.Int64)
			}
		case adminloginrestriction.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = new(uint32)
				*_m.DeletedBy = uint32(value.Int64)
			}
		case adminloginrestriction.FieldTargetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_id", values[i])
			} else if value.Valid {
				_m.TargetID = new(uint32)
				*_m.TargetID = uint32(value.Int64)
			}
		case adminloginrestriction.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				_m.Value = new(string)
				*_m.Value = value.String
			}
		case adminloginrestriction.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				_m.Reason = new(string)
				*_m.Reason = value.String
			}
		case adminloginrestriction.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = new(adminloginrestriction.Type)
				*_m.Type = adminloginrestriction.Type(value.String)
			}
		case adminloginrestriction.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				_m.Method = new(adminloginrestriction.Method)
				*_m.Method = adminloginrestriction.Method(value.String)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the AdminLoginRestriction.
// This includes values selected through modifiers, order, etc.
func (_m *AdminLoginRestriction) GetValue(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this AdminLoginRestriction.
// Note that you need to call AdminLoginRestriction.Unwrap() before calling this method if this AdminLoginRestriction
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *AdminLoginRestriction) Update() *AdminLoginRestrictionUpdateOne {
	return NewAdminLoginRestrictionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the AdminLoginRestriction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *AdminLoginRestriction) Unwrap() *AdminLoginRestriction {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminLoginRestriction is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *AdminLoginRestriction) String() string {
	var builder strings.Builder
	builder.WriteString("AdminLoginRestriction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	if v := _m.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.CreatedBy; v != nil {
		builder.WriteString("created_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.TargetID; v != nil {
		builder.WriteString("target_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Value; v != nil {
		builder.WriteString("value=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Reason; v != nil {
		builder.WriteString("reason=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Type; v != nil {
		builder.WriteString("type=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Method; v != nil {
		builder.WriteString("method=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// AdminLoginRestrictions is a parsable slice of AdminLoginRestriction.
type AdminLoginRestrictions []*AdminLoginRestriction

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/dictentry"
	"kratos-admin/app/admin/service/internal/data/ent/dicttype"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 字典条目表
type DictEntry struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint32 `json:"id,omitempty"`
	// 创建时间
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建者ID
	CreatedBy *uint32 `json:"created_by,omitempty"`
	// 更新者ID
	UpdatedBy *uint32 `json:"updated_by,omitempty"`
	// 删除者ID
	DeletedBy *uint32 `json:"deleted_by,omitempty"`
	// 描述
	Description *string `json:"description,omitempty"`
	// 排序顺序，值越小越靠前
	SortOrder *int32 `json:"sort_order,omitempty"`
	// 是否启用
	IsEnabled *bool `json:"is_enabled,omitempty"`
	// 租户ID
	TenantID uint32 `json:"tenant_id,omitempty"`
	// 字典项的显示标签
	EntryLabel *string `json:"entry_label,omitempty"`
	// 字典项的实际值
	EntryValue *string `json:"entry_value,omitempty"`
	// 数值型值
	NumericValue *int32 `json:"numeric_value,omitempty"`
	// 语言代码
	LanguageCode *string `json:"language_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DictEntryQuery when eager-loading is set.
	Edges        DictEntryEdges `json:"edges"`
	type_id      *uint32
	selectValues sql.SelectValues
}

// DictEntryEdges holds the relations/edges for other nodes in the graph.
type DictEntryEdges struct {
	// SysDictTypes holds the value of the sys_dict_types edge.
	SysDictTypes *DictType `json:"sys_dict_types,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SysDictTypesOrErr returns the SysDictTypes value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DictEntryEdges) SysDictTypesOrErr() (*DictType, error) {
	if e.SysDictTypes != nil {
		return e.SysDictTypes, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: dicttype.Label}
	}
	return nil, &NotLoadedError{edge: "sys_dict_types"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DictEntry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dictentry.FieldIsEnabled:
			values[i] = new(sql.NullBool)
		case dictentry.FieldID, dictentry.FieldCreatedBy, dictentry.FieldUpdatedBy, dictentry.FieldDeletedBy, dictentry.FieldSortOrder, dictentry.FieldTenantID, dictentry.FieldNumericValue:
			values[i] = new(sql.NullInt64)
		case dictentry.FieldDescription, dictentry.FieldEntryLabel, dictentry.FieldEntryValue, dictentry.FieldLanguageCode:
			values[i] = new(sql.NullString)
		case dictentry.FieldCreatedAt, dictentry.FieldUpdatedAt, dictentry.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case dictentry.ForeignKeys[0]: // type_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DictEntry fields.
func (_m *DictEntry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dictentry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint32(value.Int64)
		case dictentry.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = new(time.Time)
				*_m.CreatedAt = value.Time
			}
		case dictentry.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = new(time.Time)
				*_m.UpdatedAt = value.Time
			}
		case dictentry.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case dictentry.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = new(uint32)
				*_m.CreatedBy = uint32(value.Int64)
			}
		case dictentry.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = new(uint32)
				*_m.UpdatedBy = uint32(value.Int64)
			}
		case dictentry.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = new(uint32)
				*_m.DeletedBy = uint32(value.Int64)
			}
		case dictentry.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = new(string)
				*_m.Description = value.String
			}
		case dictentry.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				_m.SortOrder = new(int32)
				*_m.SortOrder = int32(value.Int64)
			}
		case dictentry.FieldIsEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enabled", values[i])
			} else if value.Valid {
				_m.IsEnabled = new(bool)
				*_m.IsEnabled = value.Bool
			}
		case dictentry.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = uint32(value.Int64)
			}
		case dictentry.FieldEntryLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entry_label", values[i])
			} else if value.Valid {
				_m.EntryLabel = new(string)
				*_m.EntryLabel = value.String
			}
		case dictentry.FieldEntryValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entry_value", values[i])
			} else if value.Valid {
				_m.EntryValue = new(string)
				*_m.EntryValue = value.String
			}
		case dictentry.FieldNumericValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field numeric_value", values[i])
			} else if value.Valid {
				_m.NumericValue = new(int32)
				*_m.NumericValue = int32(value.Int64)
			}
		case dictentry.FieldLanguageCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_code", values[i])
			} else if value.Valid {
				_m.LanguageCode = new(string)
				*_m.LanguageCode = value.String
			}
		case dictentry.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field type_id", value)
			} else if value.Valid {
				_m.type_id = new(uint32)
				*_m.type_id = uint32(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DictEntry.
// This includes values selected through modifiers, order, etc.
func (_m *DictEntry) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QuerySysDictTypes queries the "sys_dict_types" edge of the DictEntry entity.
func (_m *DictEntry) QuerySysDictTypes() *DictTypeQuery {
	return NewDictEntryClient(_m.config).QuerySysDictTypes(_m)
}

// Update returns a builder for updating this DictEntry.
// Note that you need to call DictEntry.Unwrap() before calling this method if this DictEntry
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *DictEntry) Update() *DictEntryUpdateOne {
	return NewDictEntryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the DictEntry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *DictEntry) Unwrap() *DictEntry {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: DictEntry is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *DictEntry) String() string {
	var builder strings.Builder
	builder.WriteString("DictEntry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	if v := _m.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.CreatedBy; v != nil {
		builder.WriteString("created_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.SortOrder; v != nil {
		builder.WriteString("sort_order=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.IsEnabled; v != nil {
		builder.WriteString("is_enabled=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.TenantID))
	builder.WriteString(", ")
	if v := _m.EntryLabel; v != nil {
		builder.WriteString("entry_label=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.EntryValue; v != nil {
		builder.WriteString("entry_value=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.NumericValue; v != nil {
		builder.WriteString("numeric_value=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.LanguageCode; v != nil {
		builder.WriteString("language_code=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// DictEntries is a parsable slice of DictEntry.
type DictEntries []*DictEntry

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/dictentry"
	"kratos-admin/app/admin/service/internal/data/ent/dicttype"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictEntryUpdate is the builder for updating DictEntry entities.
type DictEntryUpdate struct {
	config
	hooks     []Hook
	mutation  *DictEntryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DictEntryUpdate builder.
func (_u *DictEntryUpdate) Where(ps ...predicate.DictEntry) *DictEntryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DictEntryUpdate) SetUpdatedAt(v time.Time) *DictEntryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *DictEntryUpdate) SetNillableUpdatedAt(v *time.Time) *DictEntryUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *DictEntryUpdate) ClearUpdatedAt() *DictEntryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *DictEntryUpdate) SetDeletedAt(v time.Time) *DictEntryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *DictEntryUpdate) SetNillableDeletedAt(v *time.Time) *DictEntryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *DictEntryUpdate) ClearDeletedAt() *DictEntryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *DictEntryUpdate) SetCreatedBy(v uint32) *DictEntryUpdate {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *DictEntryUpdate) SetNillableCreatedBy(v *uint32) *DictEntryUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *DictEntryUpdate) AddCreatedBy(v int32) *DictEntryUpdate {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *DictEntryUpdate) ClearCreatedBy() *DictEntryUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *DictEntryUpdate) SetUpdatedBy(v uint32) *DictEntryUpdate {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *DictEntryUpdate) SetNillableUpdatedBy(v *uint32) *DictEntryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *DictEntryUpdate) AddUpdatedBy(v int32) *DictEntryUpdate {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *DictEntryUpdate) ClearUpdatedBy() *DictEntryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *DictEntryUpdate) SetDeletedBy(v uint32) *DictEntryUpdate {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *DictEntryUpdate) SetNillableDeletedBy(v *uint32) *DictEntryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *DictEntryUpdate) AddDeletedBy(v int32) *DictEntryUpdate {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *DictEntryUpdate) ClearDeletedBy() *DictEntryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetDescription sets the "description" field.
func (_u *DictEntryUpdate) SetDescription(v string) *DictEntryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *DictEntryUpdate) SetNillableDescription(v *string) *DictEntryUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *DictEntryUpdate) ClearDescription() *DictEntryUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetSortOrder sets the "sort_order" field.
func (_u *DictEntryUpdate) SetSortOrder(v int32) *DictEntryUpdate {
	_u.mutation.ResetSortOrder()
	_u.mutation.SetSortOrder(v)
	return _u
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_u *DictEntryUpdate) SetNillableSortOrder(v *int32) *DictEntryUpdate {
	if v != nil {
		_u.SetSortOrder(*v)
	}
	return _u
}

// AddSortOrder adds value to the "sort_order" field.
func (_u *DictEntryUpdate) AddSortOrder(v int32) *DictEntryUpdate {
	_u.mutation.AddSortOrder(v)
	return _u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (_u *DictEntryUpdate) ClearSortOrder() *DictEntryUpdate {
	_u.mutation.ClearSortOrder()
	return _u
}

// SetIsEnabled sets the "is_enabled" field.
func (_u *DictEntryUpdate) SetIsEnabled(v bool) *DictEntryUpdate {
	_u.mutation.SetIsEnabled(v)
	return _u
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_u *DictEntryUpdate) SetNillableIsEnabled(v *bool) *DictEntryUpdate {
	if v != nil {
		_u.SetIsEnabled(*v)
	}
	return _u
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (_u *DictEntryUpdate) ClearIsEnabled() *DictEntryUpdate {
	_u.mutation.ClearIsEnabled()
	return _u
}

// SetEntryLabel sets the "entry_label" field.
func (_u *DictEntryUpdate) SetEntryLabel(v string) *DictEntryUpdate {
	_u.mutation.SetEntryLabel(v)
	return _u
}

// SetNillableEntryLabel sets the "entry_label" field if the given value is not nil.
func (_u *DictEntryUpdate) SetNillableEntryLabel(v *string) *DictEntryUpdate {
	if v != nil {
		_u.SetEntryLabel(*v)
	}
	return _u
}

// ClearEntryLabel clears the value of the "entry_label" field.
func (_u *DictEntryUpdate) ClearEntryLabel() *DictEntryUpdate {
	_u.mutation.ClearEntryLabel()
	return _u
}

// SetEntryValue sets the "entry_value" field.
func (_u *DictEntryUpdate) SetEntryValue(v string) *DictEntryUpdate {
	_u.mutation.SetEntryValue(v)
	return _u
}

// SetNillableEntryValue sets the "entry_value" field if the given value is not nil.
func (_u *DictEntryUpdate) SetNillableEntryValue(v *string) *DictEntryUpdate {
	if v != nil {
		_u.SetEntryValue(*v)
	}
	return _u
}

// ClearEntryValue clears the value of the "entry_value" field.
func (_u *DictEntryUpdate) ClearEntryValue() *DictEntryUpdate {
	_u.mutation.ClearEntryValue()
	return _u
}

// SetNumericValue sets the "numeric_value" field.
func (_u *DictEntryUpdate) SetNumericValue(v int32) *DictEntryUpdate {
	_u.mutation.ResetNumericValue()
	_u.mutation.SetNumericValue(v)
	return _u
}

// SetNillableNumericValue sets the "numeric_value" field if the given value is not nil.
func (_u *DictEntryUpdate) SetNillableNumericValue(v *int32) *DictEntryUpdate {
	if v != nil {
		_u.SetNumericValue(*v)
	}
	return _u
}

// AddNumericValue adds value to the "numeric_value" field.
func (_u *DictEntryUpdate) AddNumericValue(v int32) *DictEntryUpdate {
	_u.mutation.AddNumericValue(v)
	return _u
}

// ClearNumericValue clears the value of the "numeric_value" field.
func (_u *DictEntryUpdate) ClearNumericValue() *DictEntryUpdate {
	_u.mutation.ClearNumericValue()
	return _u
}

// SetLanguageCode sets the "language_code" field.
func (_u *DictEntryUpdate) SetLanguageCode(v string) *DictEntryUpdate {
	_u.mutation.SetLanguageCode(v)
	return _u
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (_u *DictEntryUpdate) SetNillableLanguageCode(v *string) *DictEntryUpdate {
	if v != nil {
		_u.SetLanguageCode(*v)
	}
	return _u
}

// ClearLanguageCode clears the value of the "language_code" field.
func (_u *DictEntryUpdate) ClearLanguageCode() *DictEntryUpdate {
	_u.mutation.ClearLanguageCode()
	return _u
}

// SetSysDictTypesID sets the "sys_dict_types" edge to the DictType entity by ID.
func (_u *DictEntryUpdate) SetSysDictTypesID(id uint32) *DictEntryUpdate {
	_u.mutation.SetSysDictTypesID(id)
	return _u
}

// SetSysDictTypes sets the "sys_dict_types" edge to the DictType entity.
func (_u *DictEntryUpdate) SetSysDictTypes(v *DictType) *DictEntryUpdate {
	return _u.SetSysDictTypesID(v.ID)
}

// Mutation returns the DictEntryMutation object of the builder.
func (_u *DictEntryUpdate) Mutation() *DictEntryMutation {
	return _u.mutation
}

// ClearSysDictTypes clears the "sys_dict_types" edge to the DictType entity.
func (_u *DictEntryUpdate) ClearSysDictTypes() *DictEntryUpdate {
	_u.mutation.ClearSysDictTypes()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DictEntryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DictEntryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DictEntryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DictEntryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DictEntryUpdate) check() error {
	if v, ok := _u.mutation.EntryLabel(); ok {
		if err := dictentry.EntryLabelValidator(v); err != nil {
			return &ValidationError{Name: "entry_label", err: fmt.Errorf(`ent: validator failed for field "DictEntry.entry_label": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EntryValue(); ok {
		if err := dictentry.EntryValueValidator(v); err != nil {
			return &ValidationError{Name: "entry_value", err: fmt.Errorf(`ent: validator failed for field "DictEntry.entry_value": %w`, err)}
		}
	}
	if _u.mutation.SysDictTypesCleared() && len(_u.mutation.SysDictTypesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DictEntry.sys_dict_types"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DictEntryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictEntryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DictEntryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dictentry.Table, dictentry.Columns, sqlgraph.NewFieldSpec(dictentry.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(dictentry.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dictentry.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(dictentry.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(dictentry.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(dictentry.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(dictentry.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(dictentry.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(dictentry.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(dictentry.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(dictentry.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(dictentry.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(dictentry.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(dictentry.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(dictentry.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(dictentry.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(dictentry.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.SortOrder(); ok {
		_spec.SetField(dictentry.FieldSortOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortOrder(); ok {
		_spec.AddField(dictentry.FieldSortOrder, field.TypeInt32, value)
	}
	if _u.mutation.SortOrderCleared() {
		_spec.ClearField(dictentry.FieldSortOrder, field.TypeInt32)
	}
	if value, ok := _u.mutation.IsEnabled(); ok {
		_spec.SetField(dictentry.FieldIsEnabled, field.TypeBool, value)
	}
	if _u.mutation.IsEnabledCleared() {
		_spec.ClearField(dictentry.FieldIsEnabled, field.TypeBool)
	}
	if value, ok := _u.mutation.EntryLabel(); ok {
		_spec.SetField(dictentry.FieldEntryLabel, field.TypeString, value)
	}
	if _u.mutation.EntryLabelCleared() {
		_spec.ClearField(dictentry.FieldEntryLabel, field.TypeString)
	}
	if value, ok := _u.mutation.EntryValue(); ok {
		_spec.SetField(dictentry.FieldEntryValue, field.TypeString, value)
	}
	if _u.mutation.EntryValueCleared() {
		_spec.ClearField(dictentry.FieldEntryValue, field.TypeString)
	}
	if value, ok := _u.mutation.NumericValue(); ok {
		_spec.SetField(dictentry.FieldNumericValue, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedNumericValue(); ok {
		_spec.AddField(dictentry.FieldNumericValue, field.TypeInt32, value)
	}
	if _u.mutation.NumericValueCleared() {
		_spec.ClearField(dictentry.FieldNumericValue, field.TypeInt32)
	}
	if value, ok := _u.mutation.LanguageCode(); ok {
		_spec.SetField(dictentry.FieldLanguageCode, field.TypeString, value)
	}
	if _u.mutation.LanguageCodeCleared() {
		_spec.ClearField(dictentry.FieldLanguageCode, field.TypeString)
	}
	if _u.mutation.SysDictTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dictentry.SysDictTypesTable,
			Columns: []string{dictentry.SysDictTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dicttype.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SysDictTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dictentry.SysDictTypesTable,
			Columns: []string{dictentry.SysDictTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dicttype.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DictEntryUpdateOne is the builder for updating a single DictEntry entity.
type DictEntryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DictEntryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DictEntryUpdateOne) SetUpdatedAt(v time.Time) *DictEntryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *DictEntryUpdateOne) SetNillableUpdatedAt(v *time.Time) *DictEntryUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *DictEntryUpdateOne) ClearUpdatedAt() *DictEntryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *DictEntryUpdateOne) SetDeletedAt(v time.Time) *DictEntryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *DictEntryUpdateOne) SetNillableDeletedAt(v *time.Time) *DictEntryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *DictEntryUpdateOne) ClearDeletedAt() *DictEntryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *DictEntryUpdateOne) SetCreatedBy(v uint32) *DictEntryUpdateOne {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *DictEntryUpdateOne) SetNillableCreatedBy(v *uint32) *DictEntryUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *DictEntryUpdateOne) AddCreatedBy(v int32) *DictEntryUpdateOne {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *DictEntryUpdateOne) ClearCreatedBy() *DictEntryUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *DictEntryUpdateOne) SetUpdatedBy(v uint32) *DictEntryUpdateOne {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *DictEntryUpdateOne) SetNillableUpdatedBy(v *uint32) *DictEntryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *DictEntryUpdateOne) AddUpdatedBy(v int32) *DictEntryUpdateOne {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *DictEntryUpdateOne) ClearUpdatedBy() *DictEntryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *DictEntryUpdateOne) SetDeletedBy(v uint32) *DictEntryUpdateOne {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *DictEntryUpdateOne) SetNillableDeletedBy(v *uint32) *DictEntryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *DictEntryUpdateOne) AddDeletedBy(v int32) *DictEntryUpdateOne {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *DictEntryUpdateOne) ClearDeletedBy() *DictEntryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetDescription sets the "description" field.
func (_u *DictEntryUpdateOne) SetDescription(v string) *DictEntryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *DictEntryUpdateOne) SetNillableDescription(v *string) *DictEntryUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *DictEntryUpdateOne) ClearDescription() *DictEntryUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetSortOrder sets the "sort_order" field.
func (_u *DictEntryUpdateOne) SetSortOrder(v int32) *DictEntryUpdateOne {
	_u.mutation.ResetSortOrder()
	_u.mutation.SetSortOrder(v)
	return _u
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_u *DictEntryUpdateOne) SetNillableSortOrder(v *int32) *DictEntryUpdateOne {
	if v != nil {
		_u.SetSortOrder(*v)
	}
	return _u
}

// AddSortOrder adds value to the "sort_order" field.
func (_u *DictEntryUpdateOne) AddSortOrder(v int32) *DictEntryUpdateOne {
	_u.mutation.AddSortOrder(v)
	return _u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (_u *DictEntryUpdateOne) ClearSortOrder() *DictEntryUpdateOne {
	_u.mutation.ClearSortOrder()
	return _u
}

// SetIsEnabled sets the "is_enabled" field.
func (_u *DictEntryUpdateOne) SetIsEnabled(v bool) *DictEntryUpdateOne {
	_u.mutation.SetIsEnabled(v)
	return _u
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_u *DictEntryUpdateOne) SetNillableIsEnabled(v *bool) *DictEntryUpdateOne {
	if v != nil {
		_u.SetIsEnabled(*v)
	}
	return _u
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (_u *DictEntryUpdateOne) ClearIsEnabled() *DictEntryUpdateOne {
	_u.mutation.ClearIsEnabled()
	return _u
}

// SetEntryLabel sets the "entry_label" field.
func (_u *DictEntryUpdateOne) SetEntryLabel(v string) *DictEntryUpdateOne {
	_u.mutation.SetEntryLabel(v)
	return _u
}

// SetNillableEntryLabel sets the "entry_label" field if the given value is not nil.
func (_u *DictEntryUpdateOne) SetNillableEntryLabel(v *string) *DictEntryUpdateOne {
	if v != nil {
		_u.SetEntryLabel(*v)
	}
	return _u
}

// ClearEntryLabel clears the value of the "entry_label" field.
func (_u *DictEntryUpdateOne) ClearEntryLabel() *DictEntryUpdateOne {
	_u.mutation.ClearEntryLabel()
	return _u
}

// SetEntryValue sets the "entry_value" field.
func (_u *DictEntryUpdateOne) SetEntryValue(v string) *DictEntryUpdateOne {
	_u.mutation.SetEntryValue(v)
	return _u
}

// SetNillableEntryValue sets the "entry_value" field if the given value is not nil.
func (_u *DictEntryUpdateOne) SetNillableEntryValue(v *string) *DictEntryUpdateOne {
	if v != nil {
		_u.SetEntryValue(*v)
	}
	return _u
}

// ClearEntryValue clears the value of the "entry_value" field.
func (_u *DictEntryUpdateOne) ClearEntryValue() *DictEntryUpdateOne {
	_u.mutation.ClearEntryValue()
	return _u
}

// SetNumericValue sets the "numeric_value" field.
func (_u *DictEntryUpdateOne) SetNumericValue(v int32) *DictEntryUpdateOne {
	_u.mutation.ResetNumericValue()
	_u.mutation.SetNumericValue(v)
	return _u
}

// SetNillableNumericValue sets the "numeric_value" field if the given value is not nil.
func (_u *DictEntryUpdateOne) SetNillableNumericValue(v *int32) *DictEntryUpdateOne {
	if v != nil {
		_u.SetNumericValue(*v)
	}
	return _u
}

// AddNumericValue adds value to the "numeric_value" field.
func (_u *DictEntryUpdateOne) AddNumericValue(v int32) *DictEntryUpdateOne {
	_u.mutation.AddNumericValue(v)
	return _u
}

// ClearNumericValue clears the value of the "numeric_value" field.
func (_u *DictEntryUpdateOne) ClearNumericValue() *DictEntryUpdateOne {
	_u.mutation.ClearNumericValue()
	return _u
}

// SetLanguageCode sets the "language_code" field.
func (_u *DictEntryUpdateOne) SetLanguageCode(v string) *DictEntryUpdateOne {
	_u.mutation.SetLanguageCode(v)
	return _u
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (_u *DictEntryUpdateOne) SetNillableLanguageCode(v *string) *DictEntryUpdateOne {
	if v != nil {
		_u.SetLanguageCode(*v)
	}
	return _u
}

// ClearLanguageCode clears the value of the "language_code" field.
func (_u *DictEntryUpdateOne) ClearLanguageCode() *DictEntryUpdateOne {
	_u.mutation.ClearLanguageCode()
	return _u
}

// SetSysDictTypesID sets the "sys_dict_types" edge to the DictType entity by ID.
func (_u *DictEntryUpdateOne) SetSysDictTypesID(id uint32) *DictEntryUpdateOne {
	_u.mutation.SetSysDictTypesID(id)
	return _u
}

// SetSysDictTypes sets the "sys_dict_types" edge to the DictType entity.
func (_u *DictEntryUpdateOne) SetSysDictTypes(v *DictType) *DictEntryUpdateOne {
	return _u.SetSysDictTypesID(v.ID)
}

// Mutation returns the DictEntryMutation object of the builder.
func (_u *DictEntryUpdateOne) Mutation() *DictEntryMutation {
	return _u.mutation
}

// ClearSysDictTypes clears the "sys_dict_types" edge to the DictType entity.
func (_u *DictEntryUpdateOne) ClearSysDictTypes() *DictEntryUpdateOne {
	_u.mutation.ClearSysDictTypes()
	return _u
}

// Where appends a list predicates to the DictEntryUpdate builder.
func (_u *DictEntryUpdateOne) Where(ps ...predicate.DictEntry) *DictEntryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DictEntryUpdateOne) Select(field string, fields ...string) *DictEntryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated DictEntry entity.
func (_u *DictEntryUpdateOne) Save(ctx context.Context) (*DictEntry, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DictEntryUpdateOne) SaveX(ctx context.Context) *DictEntry {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DictEntryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DictEntryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DictEntryUpdateOne) check() error {
	if v, ok := _u.mutation.EntryLabel(); ok {
		if err := dictentry.EntryLabelValidator(v); err != nil {
			return &ValidationError{Name: "entry_label", err: fmt.Errorf(`ent: validator failed for field "DictEntry.entry_label": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EntryValue(); ok {
		if err := dictentry.EntryValueValidator(v); err != nil {
			return &ValidationError{Name: "entry_value", err: fmt.Errorf(`ent: validator failed for field "DictEntry.entry_value": %w`, err)}
		}
	}
	if _u.mutation.SysDictTypesCleared() && len(_u.mutation.SysDictTypesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DictEntry.sys_dict_types"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DictEntryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictEntryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DictEntryUpdateOne) sqlSave(ctx context.Context) (_node *DictEntry, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dictentry.Table, dictentry.Columns, sqlgraph.NewFieldSpec(dictentry.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DictEntry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dictentry.FieldID)
		for _, f := range fields {
			if !dictentry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dictentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(dictentry.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dictentry.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(dictentry.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(dictentry.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(dictentry.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(dictentry.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(dictentry.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(dictentry.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(dictentry.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(dictentry.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(dictentry.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(dictentry.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(dictentry.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(dictentry.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(dictentry.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(dictentry.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.SortOrder(); ok {
		_spec.SetField(dictentry.FieldSortOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortOrder(); ok {
		_spec.AddField(dictentry.FieldSortOrder, field.TypeInt32, value)
	}
	if _u.mutation.SortOrderCleared() {
		_spec.ClearField(dictentry.FieldSortOrder, field.TypeInt32)
	}
	if value, ok := _u.mutation.IsEnabled(); ok {
		_spec.SetField(dictentry.FieldIsEnabled, field.TypeBool, value)
	}
	if _u.mutation.IsEnabledCleared() {
		_spec.ClearField(dictentry.FieldIsEnabled, field.TypeBool)
	}
	if value, ok := _u.mutation.EntryLabel(); ok {
		_spec.SetField(dictentry.FieldEntryLabel, field.TypeString, value)
	}
	if _u.mutation.EntryLabelCleared() {
		_spec.ClearField(dictentry.FieldEntryLabel, field.TypeString)
	}
	if value, ok := _u.mutation.EntryValue(); ok {
		_spec.SetField(dictentry.FieldEntryValue, field.TypeString, value)
	}
	if _u.mutation.EntryValueCleared() {
		_spec.ClearField(dictentry.FieldEntryValue, field.TypeString)
	}
	if value, ok := _u.mutation.NumericValue(); ok {
		_spec.SetField(dictentry.FieldNumericValue, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedNumericValue(); ok {
		_spec.AddField(dictentry.FieldNumericValue, field.TypeInt32, value)
	}
	if _u.mutation.NumericValueCleared() {
		_spec.ClearField(dictentry.FieldNumericValue, field.TypeInt32)
	}
	if value, ok := _u.mutation.LanguageCode(); ok {
		_spec.SetField(dictentry.FieldLanguageCode, field.TypeString, value)
	}
	if _u.mutation.LanguageCodeCleared() {
		_spec.ClearField(dictentry.FieldLanguageCode, field.TypeString)
	}
	if _u.mutation.SysDictTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dictentry.SysDictTypesTable,
			Columns: []string{dictentry.SysDictTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dicttype.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SysDictTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dictentry.SysDictTypesTable,
			Columns: []string{dictentry.SysDictTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dicttype.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &DictEntry{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/department"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DepartmentCreate is the builder for creating a Department entity.
type DepartmentCreate struct {
	config
	mutation *DepartmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (_c *DepartmentCreate) SetCreateTime(v time.Time) *DepartmentCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *DepartmentCreate) SetNillableCreateTime(v *time.Time) *DepartmentCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *DepartmentCreate) SetUpdateTime(v time.Time) *DepartmentCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *DepartmentCreate) SetNillableUpdateTime(v *time.Time) *DepartmentCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *DepartmentCreate) SetDeleteTime(v time.Time) *DepartmentCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *DepartmentCreate) SetNillableDeleteTime(v *time.Time) *DepartmentCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *DepartmentCreate) SetCreateBy(v uint32) *DepartmentCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *DepartmentCreate) SetNillableCreateBy(v *uint32) *DepartmentCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *DepartmentCreate) SetUpdateBy(v uint32) *DepartmentCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *DepartmentCreate) SetNillableUpdateBy(v *uint32) *DepartmentCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetRemark sets the "remark" field.
func (_c *DepartmentCreate) SetRemark(v string) *DepartmentCreate {
	_c.mutation.SetRemark(v)
	return _c
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_c *DepartmentCreate) SetNillableRemark(v *string) *DepartmentCreate {
	if v != nil {
		_c.SetRemark(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *DepartmentCreate) SetTenantID(v uint32) *DepartmentCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_c *DepartmentCreate) SetNillableTenantID(v *uint32) *DepartmentCreate {
	if v != nil {
		_c.SetTenantID(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *DepartmentCreate) SetName(v string) *DepartmentCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *DepartmentCreate) SetNillableName(v *string) *DepartmentCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetParentID sets the "parent_id" field.
func (_c *DepartmentCreate) SetParentID(v uint32) *DepartmentCreate {
	_c.mutation.SetParentID(v)
	return _c
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_c *DepartmentCreate) SetNillableParentID(v *uint32) *DepartmentCreate {
	if v != nil {
		_c.SetParentID(*v)
	}
	return _c
}

// SetOrganizationID sets the "organization_id" field.
func (_c *DepartmentCreate) SetOrganizationID(v uint32) *DepartmentCreate {
	_c.mutation.SetOrganizationID(v)
	return _c
}

// SetManagerID sets the "manager_id" field.
func (_c *DepartmentCreate) SetManagerID(v uint32) *DepartmentCreate {
	_c.mutation.SetManagerID(v)
	return _c
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (_c *DepartmentCreate) SetNillableManagerID(v *uint32) *DepartmentCreate {
	if v != nil {
		_c.SetManagerID(*v)
	}
	return _c
}

// SetSortID sets the "sort_id" field.
func (_c *DepartmentCreate) SetSortID(v int32) *DepartmentCreate {
	_c.mutation.SetSortID(v)
	return _c
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (_c *DepartmentCreate) SetNillableSortID(v *int32) *DepartmentCreate {
	if v != nil {
		_c.SetSortID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *DepartmentCreate) SetStatus(v department.Status) *DepartmentCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *DepartmentCreate) SetNillableStatus(v *department.Status) *DepartmentCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *DepartmentCreate) SetDescription(v string) *DepartmentCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *DepartmentCreate) SetNillableDescription(v *string) *DepartmentCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *DepartmentCreate) SetID(v uint32) *DepartmentCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetParent sets the "parent" edge to the Department entity.
func (_c *DepartmentCreate) SetParent(v *Department) *DepartmentCreate {
	return _c.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Department entity by IDs.
func (_c *DepartmentCreate) AddChildIDs(ids ...uint32) *DepartmentCreate {
	_c.mutation.AddChildIDs(ids...)
	return _c
}

// AddChildren adds the "children" edges to the Department entity.
func (_c *DepartmentCreate) AddChildren(v ...*Department) *DepartmentCreate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildIDs(ids...)
}

// Mutation returns the DepartmentMutation object of the builder.
func (_c *DepartmentCreate) Mutation() *DepartmentMutation {
	return _c.mutation
}

// Save creates the Department in the database.
func (_c *DepartmentCreate) Save(ctx context.Context) (*Department, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DepartmentCreate) SaveX(ctx context.Context) *Department {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DepartmentCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DepartmentCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DepartmentCreate) defaults() {
	if _, ok := _c.mutation.Remark(); !ok {
		v := department.DefaultRemark
		_c.mutation.SetRemark(v)
	}
	if _, ok := _c.mutation.SortID(); !ok {
		v := department.DefaultSortID
		_c.mutation.SetSortID(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := department.DefaultStatus
		_c.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DepartmentCreate) check() error {
	if v, ok := _c.mutation.TenantID(); ok {
		if err := department.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Department.tenant_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := department.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Department.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "Department.organization_id"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := department.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Department.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := department.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Department.id": %w`, err)}
		}
	}
	return nil
}

func (_c *DepartmentCreate) sqlSave(ctx context.Context) (*Department, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DepartmentCreate) createSpec() (*Department, *sqlgraph.CreateSpec) {
	var (
		_node = &Department{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(department.Table, sqlgraph.NewFieldSpec(department.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(department.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(department.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(department.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(department.FieldCreateBy, field.TypeUint32, value)
		_node.CreateBy = &value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(department.FieldUpdateBy, field.TypeUint32, value)
		_node.UpdateBy = &value
	}
	if value, ok := _c.mutation.Remark(); ok {
		_spec.SetField(department.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(department.FieldTenantID, field.TypeUint32, value)
		_node.TenantID = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(department.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := _c.mutation.OrganizationID(); ok {
		_spec.SetField(department.FieldOrganizationID, field.TypeUint32, value)
		_node.OrganizationID = &value
	}
	if value, ok := _c.mutation.ManagerID(); ok {
		_spec.SetField(department.FieldManagerID, field.TypeUint32, value)
		_node.ManagerID = &value
	}
	if value, ok := _c.mutation.SortID(); ok {
		_spec.SetField(department.FieldSortID, field.TypeInt32, value)
		_node.SortID = &value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(department.FieldStatus, field.TypeEnum, value)
		_node.Status = &value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(department.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if nodes := _c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Department.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DepartmentUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (_c *DepartmentCreate) OnConflict(opts ...sql.ConflictOption) *DepartmentUpsertOne {
	_c.conflict = opts
	return &DepartmentUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Department.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DepartmentCreate) OnConflictColumns(columns ...string) *DepartmentUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DepartmentUpsertOne{
		create: _c,
	}
}

type (
	// DepartmentUpsertOne is the builder for "upsert"-ing
	//  one Department node.
	DepartmentUpsertOne struct {
		create *DepartmentCreate
	}

	// DepartmentUpsert is the "OnConflict" setter.
	DepartmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *DepartmentUpsert) SetUpdateTime(v time.Time) *DepartmentUpsert {
	u.Set(department.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DepartmentUpsert) UpdateUpdateTime() *DepartmentUpsert {
	u.SetExcluded(department.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *DepartmentUpsert) ClearUpdateTime() *DepartmentUpsert {
	u.SetNull(department.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *DepartmentUpsert) SetDeleteTime(v time.Time) *DepartmentUpsert {
	u.Set(department.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *DepartmentUpsert) UpdateDeleteTime() *DepartmentUpsert {
	u.SetExcluded(department.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *DepartmentUpsert) ClearDeleteTime() *DepartmentUpsert {
	u.SetNull(department.FieldDeleteTime)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *DepartmentUpsert) SetCreateBy(v uint32) *DepartmentUpsert {
	u.Set(department.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *DepartmentUpsert) UpdateCreateBy() *DepartmentUpsert {
	u.SetExcluded(department.FieldCreateBy)
	return u
}

// AddCreateBy adds v to the "create_by" field.
func (u *DepartmentUpsert) AddCreateBy(v uint32) *DepartmentUpsert {
	u.Add(department.FieldCreateBy, v)
	return u
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *DepartmentUpsert) ClearCreateBy() *DepartmentUpsert {
	u.SetNull(department.FieldCreateBy)
	return u
}

// SetUpdateBy sets the "update_by" field.
func (u *DepartmentUpsert) SetUpdateBy(v uint32) *DepartmentUpsert {
	u.Set(department.FieldUpdateBy, v)
	return u
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *DepartmentUpsert) UpdateUpdateBy() *DepartmentUpsert {
	u.SetExcluded(department.FieldUpdateBy)
	return u
}

// AddUpdateBy adds v to the "update_by" field.
func (u *DepartmentUpsert) AddUpdateBy(v uint32) *DepartmentUpsert {
	u.Add(department.FieldUpdateBy, v)
	return u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *DepartmentUpsert) ClearUpdateBy() *DepartmentUpsert {
	u.SetNull(department.FieldUpdateBy)
	return u
}

// SetRemark sets the "remark" field.
func (u *DepartmentUpsert) SetRemark(v string) *DepartmentUpsert {
	u.Set(department.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *DepartmentUpsert) UpdateRemark() *DepartmentUpsert {
	u.SetExcluded(department.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *DepartmentUpsert) ClearRemark() *DepartmentUpsert {
	u.SetNull(department.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *DepartmentUpsert) SetName(v string) *DepartmentUpsert {
	u.Set(department.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DepartmentUpsert) UpdateName() *DepartmentUpsert {
	u.SetExcluded(department.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *DepartmentUpsert) ClearName() *DepartmentUpsert {
	u.SetNull(department.FieldName)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *DepartmentUpsert) SetParentID(v uint32) *DepartmentUpsert {
	u.Set(department.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *DepartmentUpsert) UpdateParentID() *DepartmentUpsert {
	u.SetExcluded(department.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *DepartmentUpsert) ClearParentID() *DepartmentUpsert {
	u.SetNull(department.FieldParentID)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *DepartmentUpsert) SetOrganizationID(v uint32) *DepartmentUpsert {
	u.Set(department.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *DepartmentUpsert) UpdateOrganizationID() *DepartmentUpsert {
	u.SetExcluded(department.FieldOrganizationID)
	return u
}

// AddOrganizationID adds v to the "organization_id" field.
func (u *DepartmentUpsert) AddOrganizationID(v uint32) *DepartmentUpsert {
	u.Add(department.FieldOrganizationID, v)
	return u
}

// SetManagerID sets the "manager_id" field.
func (u *DepartmentUpsert) SetManagerID(v uint32) *DepartmentUpsert {
	u.Set(department.FieldManagerID, v)
	return u
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *DepartmentUpsert) UpdateManagerID() *DepartmentUpsert {
	u.SetExcluded(department.FieldManagerID)
	return u
}

// AddManagerID adds v to the "manager_id" field.
func (u *DepartmentUpsert) AddManagerID(v uint32) *DepartmentUpsert {
	u.Add(department.FieldManagerID, v)
	return u
}

// ClearManagerID clears the value of the "manager_id" field.
func (u *DepartmentUpsert) ClearManagerID() *DepartmentUpsert {
	u.SetNull(department.FieldManagerID)
	return u
}

// SetSortID sets the "sort_id" field.
func (u *DepartmentUpsert) SetSortID(v int32) *DepartmentUpsert {
	u.Set(department.FieldSortID, v)
	return u
}

// UpdateSortID sets the "sort_id" field to the value that was provided on create.
func (u *DepartmentUpsert) UpdateSortID() *DepartmentUpsert {
	u.SetExcluded(department.FieldSortID)
	return u
}

// AddSortID adds v to the "sort_id" field.
func (u *DepartmentUpsert) AddSortID(v int32) *DepartmentUpsert {
	u.Add(department.FieldSortID, v)
	return u
}

// ClearSortID clears the value of the "sort_id" field.
func (u *DepartmentUpsert) ClearSortID() *DepartmentUpsert {
	u.SetNull(department.FieldSortID)
	return u
}

// SetStatus sets the "status" field.
func (u *DepartmentUpsert) SetStatus(v department.Status) *DepartmentUpsert {
	u.Set(department.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DepartmentUpsert) UpdateStatus() *DepartmentUpsert {
	u.SetExcluded(department.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *DepartmentUpsert) ClearStatus() *DepartmentUpsert {
	u.SetNull(department.FieldStatus)
	return u
}

// SetDescription sets the "description" field.
func (u *DepartmentUpsert) SetDescription(v string) *DepartmentUpsert {
	u.Set(department.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DepartmentUpsert) UpdateDescription() *DepartmentUpsert {
	u.SetExcluded(department.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *DepartmentUpsert) ClearDescription() *DepartmentUpsert {
	u.SetNull(department.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Department.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(department.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DepartmentUpsertOne) UpdateNewValues() *DepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(department.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(department.FieldCreateTime)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(department.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Department.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DepartmentUpsertOne) Ignore() *DepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DepartmentUpsertOne) DoNothing() *DepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DepartmentCreate.OnConflict
// documentation for more info.
func (u *DepartmentUpsertOne) Update(set func(*DepartmentUpsert)) *DepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DepartmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *DepartmentUpsertOne) SetUpdateTime(v time.Time) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DepartmentUpsertOne) UpdateUpdateTime() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *DepartmentUpsertOne) ClearUpdateTime() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *DepartmentUpsertOne) SetDeleteTime(v time.Time) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *DepartmentUpsertOne) UpdateDeleteTime() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *DepartmentUpsertOne) ClearDeleteTime() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *DepartmentUpsertOne) SetCreateBy(v uint32) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *DepartmentUpsertOne) AddCreateBy(v uint32) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *DepartmentUpsertOne) UpdateCreateBy() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *DepartmentUpsertOne) ClearCreateBy() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *DepartmentUpsertOne) SetUpdateBy(v uint32) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *DepartmentUpsertOne) AddUpdateBy(v uint32) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *DepartmentUpsertOne) UpdateUpdateBy() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *DepartmentUpsertOne) ClearUpdateBy() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *DepartmentUpsertOne) SetRemark(v string) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *DepartmentUpsertOne) UpdateRemark() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *DepartmentUpsertOne) ClearRemark() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *DepartmentUpsertOne) SetName(v string) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DepartmentUpsertOne) UpdateName() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DepartmentUpsertOne) ClearName() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearName()
	})
}

// SetParentID sets the "parent_id" field.
func (u *DepartmentUpsertOne) SetParentID(v uint32) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *DepartmentUpsertOne) UpdateParentID() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *DepartmentUpsertOne) ClearParentID() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearParentID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *DepartmentUpsertOne) SetOrganizationID(v uint32) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetOrganizationID(v)
	})
}

// AddOrganizationID adds v to the "organization_id" field.
func (u *DepartmentUpsertOne) AddOrganizationID(v uint32) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.AddOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *DepartmentUpsertOne) UpdateOrganizationID() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateOrganizationID()
	})
}

// SetManagerID sets the "manager_id" field.
func (u *DepartmentUpsertOne) SetManagerID(v uint32) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetManagerID(v)
	})
}

// AddManagerID adds v to the "manager_id" field.
func (u *DepartmentUpsertOne) AddManagerID(v uint32) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.AddManagerID(v)
	})
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *DepartmentUpsertOne) UpdateManagerID() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateManagerID()
	})
}

// ClearManagerID clears the value of the "manager_id" field.
func (u *DepartmentUpsertOne) ClearManagerID() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearManagerID()
	})
}

// SetSortID sets the "sort_id" field.
func (u *DepartmentUpsertOne) SetSortID(v int32) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetSortID(v)
	})
}

// AddSortID adds v to the "sort_id" field.
func (u *DepartmentUpsertOne) AddSortID(v int32) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.AddSortID(v)
	})
}

// UpdateSortID sets the "sort_id" field to the value that was provided on create.
func (u *DepartmentUpsertOne) UpdateSortID() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateSortID()
	})
}

// ClearSortID clears the value of the "sort_id" field.
func (u *DepartmentUpsertOne) ClearSortID() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearSortID()
	})
}

// SetStatus sets the "status" field.
func (u *DepartmentUpsertOne) SetStatus(v department.Status) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DepartmentUpsertOne) UpdateStatus() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *DepartmentUpsertOne) ClearStatus() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearStatus()
	})
}

// SetDescription sets the "description" field.
func (u *DepartmentUpsertOne) SetDescription(v string) *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DepartmentUpsertOne) UpdateDescription() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DepartmentUpsertOne) ClearDescription() *DepartmentUpsertOne {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *DepartmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DepartmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DepartmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DepartmentUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DepartmentUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DepartmentCreateBulk is the builder for creating many Department entities in bulk.
type DepartmentCreateBulk struct {
	config
	err      error
	builders []*DepartmentCreate
	conflict []sql.ConflictOption
}

// Save creates the Department entities in the database.
func (_c *DepartmentCreateBulk) Save(ctx context.Context) ([]*Department, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Department, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DepartmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DepartmentCreateBulk) SaveX(ctx context.Context) []*Department {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DepartmentCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DepartmentCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Department.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DepartmentUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (_c *DepartmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *DepartmentUpsertBulk {
	_c.conflict = opts
	return &DepartmentUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Department.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DepartmentCreateBulk) OnConflictColumns(columns ...string) *DepartmentUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DepartmentUpsertBulk{
		create: _c,
	}
}

// DepartmentUpsertBulk is the builder for "upsert"-ing
// a bulk of Department nodes.
type DepartmentUpsertBulk struct {
	create *DepartmentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Department.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(department.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DepartmentUpsertBulk) UpdateNewValues() *DepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(department.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(department.FieldCreateTime)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(department.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Department.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DepartmentUpsertBulk) Ignore() *DepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DepartmentUpsertBulk) DoNothing() *DepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DepartmentCreateBulk.OnConflict
// documentation for more info.
func (u *DepartmentUpsertBulk) Update(set func(*DepartmentUpsert)) *DepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DepartmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *DepartmentUpsertBulk) SetUpdateTime(v time.Time) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DepartmentUpsertBulk) UpdateUpdateTime() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *DepartmentUpsertBulk) ClearUpdateTime() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *DepartmentUpsertBulk) SetDeleteTime(v time.Time) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *DepartmentUpsertBulk) UpdateDeleteTime() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *DepartmentUpsertBulk) ClearDeleteTime() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *DepartmentUpsertBulk) SetCreateBy(v uint32) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *DepartmentUpsertBulk) AddCreateBy(v uint32) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *DepartmentUpsertBulk) UpdateCreateBy() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *DepartmentUpsertBulk) ClearCreateBy() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *DepartmentUpsertBulk) SetUpdateBy(v uint32) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *DepartmentUpsertBulk) AddUpdateBy(v uint32) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *DepartmentUpsertBulk) UpdateUpdateBy() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *DepartmentUpsertBulk) ClearUpdateBy() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *DepartmentUpsertBulk) SetRemark(v string) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *DepartmentUpsertBulk) UpdateRemark() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *DepartmentUpsertBulk) ClearRemark() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *DepartmentUpsertBulk) SetName(v string) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DepartmentUpsertBulk) UpdateName() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DepartmentUpsertBulk) ClearName() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearName()
	})
}

// SetParentID sets the "parent_id" field.
func (u *DepartmentUpsertBulk) SetParentID(v uint32) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *DepartmentUpsertBulk) UpdateParentID() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *DepartmentUpsertBulk) ClearParentID() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearParentID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *DepartmentUpsertBulk) SetOrganizationID(v uint32) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetOrganizationID(v)
	})
}

// AddOrganizationID adds v to the "organization_id" field.
func (u *DepartmentUpsertBulk) AddOrganizationID(v uint32) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.AddOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *DepartmentUpsertBulk) UpdateOrganizationID() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateOrganizationID()
	})
}

// SetManagerID sets the "manager_id" field.
func (u *DepartmentUpsertBulk) SetManagerID(v uint32) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetManagerID(v)
	})
}

// AddManagerID adds v to the "manager_id" field.
func (u *DepartmentUpsertBulk) AddManagerID(v uint32) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.AddManagerID(v)
	})
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *DepartmentUpsertBulk) UpdateManagerID() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateManagerID()
	})
}

// ClearManagerID clears the value of the "manager_id" field.
func (u *DepartmentUpsertBulk) ClearManagerID() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearManagerID()
	})
}

// SetSortID sets the "sort_id" field.
func (u *DepartmentUpsertBulk) SetSortID(v int32) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetSortID(v)
	})
}

// AddSortID adds v to the "sort_id" field.
func (u *DepartmentUpsertBulk) AddSortID(v int32) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.AddSortID(v)
	})
}

// UpdateSortID sets the "sort_id" field to the value that was provided on create.
func (u *DepartmentUpsertBulk) UpdateSortID() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateSortID()
	})
}

// ClearSortID clears the value of the "sort_id" field.
func (u *DepartmentUpsertBulk) ClearSortID() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearSortID()
	})
}

// SetStatus sets the "status" field.
func (u *DepartmentUpsertBulk) SetStatus(v department.Status) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DepartmentUpsertBulk) UpdateStatus() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *DepartmentUpsertBulk) ClearStatus() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearStatus()
	})
}

// SetDescription sets the "description" field.
func (u *DepartmentUpsertBulk) SetDescription(v string) *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DepartmentUpsertBulk) UpdateDescription() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DepartmentUpsertBulk) ClearDescription() *DepartmentUpsertBulk {
	return u.Update(func(s *DepartmentUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *DepartmentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DepartmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DepartmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DepartmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

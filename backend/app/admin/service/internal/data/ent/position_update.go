// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/position"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PositionUpdate is the builder for updating Position entities.
type PositionUpdate struct {
	config
	hooks     []Hook
	mutation  *PositionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PositionUpdate builder.
func (_u *PositionUpdate) Where(ps ...predicate.Position) *PositionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PositionUpdate) SetUpdatedAt(v time.Time) *PositionUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *PositionUpdate) SetNillableUpdatedAt(v *time.Time) *PositionUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *PositionUpdate) ClearUpdatedAt() *PositionUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *PositionUpdate) SetDeletedAt(v time.Time) *PositionUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *PositionUpdate) SetNillableDeletedAt(v *time.Time) *PositionUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *PositionUpdate) ClearDeletedAt() *PositionUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *PositionUpdate) SetCreatedBy(v uint32) *PositionUpdate {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *PositionUpdate) SetNillableCreatedBy(v *uint32) *PositionUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *PositionUpdate) AddCreatedBy(v int32) *PositionUpdate {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *PositionUpdate) ClearCreatedBy() *PositionUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *PositionUpdate) SetUpdatedBy(v uint32) *PositionUpdate {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *PositionUpdate) SetNillableUpdatedBy(v *uint32) *PositionUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *PositionUpdate) AddUpdatedBy(v int32) *PositionUpdate {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *PositionUpdate) ClearUpdatedBy() *PositionUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *PositionUpdate) SetDeletedBy(v uint32) *PositionUpdate {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *PositionUpdate) SetNillableDeletedBy(v *uint32) *PositionUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *PositionUpdate) AddDeletedBy(v int32) *PositionUpdate {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *PositionUpdate) ClearDeletedBy() *PositionUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *PositionUpdate) SetRemark(v string) *PositionUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *PositionUpdate) SetNillableRemark(v *string) *PositionUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *PositionUpdate) ClearRemark() *PositionUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetName sets the "name" field.
func (_u *PositionUpdate) SetName(v string) *PositionUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PositionUpdate) SetNillableName(v *string) *PositionUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *PositionUpdate) ClearName() *PositionUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetCode sets the "code" field.
func (_u *PositionUpdate) SetCode(v string) *PositionUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *PositionUpdate) SetNillableCode(v *string) *PositionUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *PositionUpdate) ClearCode() *PositionUpdate {
	_u.mutation.ClearCode()
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *PositionUpdate) SetParentID(v uint32) *PositionUpdate {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *PositionUpdate) SetNillableParentID(v *uint32) *PositionUpdate {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *PositionUpdate) ClearParentID() *PositionUpdate {
	_u.mutation.ClearParentID()
	return _u
}

// SetSortOrder sets the "sort_order" field.
func (_u *PositionUpdate) SetSortOrder(v int32) *PositionUpdate {
	_u.mutation.ResetSortOrder()
	_u.mutation.SetSortOrder(v)
	return _u
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_u *PositionUpdate) SetNillableSortOrder(v *int32) *PositionUpdate {
	if v != nil {
		_u.SetSortOrder(*v)
	}
	return _u
}

// AddSortOrder adds value to the "sort_order" field.
func (_u *PositionUpdate) AddSortOrder(v int32) *PositionUpdate {
	_u.mutation.AddSortOrder(v)
	return _u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (_u *PositionUpdate) ClearSortOrder() *PositionUpdate {
	_u.mutation.ClearSortOrder()
	return _u
}

// SetOrganizationID sets the "organization_id" field.
func (_u *PositionUpdate) SetOrganizationID(v uint32) *PositionUpdate {
	_u.mutation.ResetOrganizationID()
	_u.mutation.SetOrganizationID(v)
	return _u
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_u *PositionUpdate) SetNillableOrganizationID(v *uint32) *PositionUpdate {
	if v != nil {
		_u.SetOrganizationID(*v)
	}
	return _u
}

// AddOrganizationID adds value to the "organization_id" field.
func (_u *PositionUpdate) AddOrganizationID(v int32) *PositionUpdate {
	_u.mutation.AddOrganizationID(v)
	return _u
}

// SetDepartmentID sets the "department_id" field.
func (_u *PositionUpdate) SetDepartmentID(v uint32) *PositionUpdate {
	_u.mutation.ResetDepartmentID()
	_u.mutation.SetDepartmentID(v)
	return _u
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (_u *PositionUpdate) SetNillableDepartmentID(v *uint32) *PositionUpdate {
	if v != nil {
		_u.SetDepartmentID(*v)
	}
	return _u
}

// AddDepartmentID adds value to the "department_id" field.
func (_u *PositionUpdate) AddDepartmentID(v int32) *PositionUpdate {
	_u.mutation.AddDepartmentID(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *PositionUpdate) SetStatus(v position.Status) *PositionUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *PositionUpdate) SetNillableStatus(v *position.Status) *PositionUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *PositionUpdate) ClearStatus() *PositionUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetDescription sets the "description" field.
func (_u *PositionUpdate) SetDescription(v string) *PositionUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *PositionUpdate) SetNillableDescription(v *string) *PositionUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *PositionUpdate) ClearDescription() *PositionUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetQuota sets the "quota" field.
func (_u *PositionUpdate) SetQuota(v uint32) *PositionUpdate {
	_u.mutation.ResetQuota()
	_u.mutation.SetQuota(v)
	return _u
}

// SetNillableQuota sets the "quota" field if the given value is not nil.
func (_u *PositionUpdate) SetNillableQuota(v *uint32) *PositionUpdate {
	if v != nil {
		_u.SetQuota(*v)
	}
	return _u
}

// AddQuota adds value to the "quota" field.
func (_u *PositionUpdate) AddQuota(v int32) *PositionUpdate {
	_u.mutation.AddQuota(v)
	return _u
}

// ClearQuota clears the value of the "quota" field.
func (_u *PositionUpdate) ClearQuota() *PositionUpdate {
	_u.mutation.ClearQuota()
	return _u
}

// SetParent sets the "parent" edge to the Position entity.
func (_u *PositionUpdate) SetParent(v *Position) *PositionUpdate {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Position entity by IDs.
func (_u *PositionUpdate) AddChildIDs(ids ...uint32) *PositionUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Position entity.
func (_u *PositionUpdate) AddChildren(v ...*Position) *PositionUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the PositionMutation object of the builder.
func (_u *PositionUpdate) Mutation() *PositionMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Position entity.
func (_u *PositionUpdate) ClearParent() *PositionUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Position entity.
func (_u *PositionUpdate) ClearChildren() *PositionUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Position entities by IDs.
func (_u *PositionUpdate) RemoveChildIDs(ids ...uint32) *PositionUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Position entities.
func (_u *PositionUpdate) RemoveChildren(v ...*Position) *PositionUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PositionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PositionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PositionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PositionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PositionUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := position.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Position.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := position.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Position.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := position.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Position.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PositionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PositionUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PositionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(position.Table, position.Columns, sqlgraph.NewFieldSpec(position.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(position.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(position.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(position.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(position.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(position.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(position.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(position.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(position.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(position.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(position.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(position.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(position.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(position.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(position.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(position.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(position.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(position.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(position.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(position.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(position.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.SortOrder(); ok {
		_spec.SetField(position.FieldSortOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortOrder(); ok {
		_spec.AddField(position.FieldSortOrder, field.TypeInt32, value)
	}
	if _u.mutation.SortOrderCleared() {
		_spec.ClearField(position.FieldSortOrder, field.TypeInt32)
	}
	if value, ok := _u.mutation.OrganizationID(); ok {
		_spec.SetField(position.FieldOrganizationID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedOrganizationID(); ok {
		_spec.AddField(position.FieldOrganizationID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.DepartmentID(); ok {
		_spec.SetField(position.FieldDepartmentID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDepartmentID(); ok {
		_spec.AddField(position.FieldDepartmentID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(position.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(position.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(position.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(position.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Quota(); ok {
		_spec.SetField(position.FieldQuota, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedQuota(); ok {
		_spec.AddField(position.FieldQuota, field.TypeUint32, value)
	}
	if _u.mutation.QuotaCleared() {
		_spec.ClearField(position.FieldQuota, field.TypeUint32)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.ParentTable,
			Columns: []string{position.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.ParentTable,
			Columns: []string{position.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ChildrenTable,
			Columns: []string{position.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ChildrenTable,
			Columns: []string{position.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ChildrenTable,
			Columns: []string{position.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{position.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PositionUpdateOne is the builder for updating a single Position entity.
type PositionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PositionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PositionUpdateOne) SetUpdatedAt(v time.Time) *PositionUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *PositionUpdateOne) SetNillableUpdatedAt(v *time.Time) *PositionUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *PositionUpdateOne) ClearUpdatedAt() *PositionUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *PositionUpdateOne) SetDeletedAt(v time.Time) *PositionUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *PositionUpdateOne) SetNillableDeletedAt(v *time.Time) *PositionUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *PositionUpdateOne) ClearDeletedAt() *PositionUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *PositionUpdateOne) SetCreatedBy(v uint32) *PositionUpdateOne {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *PositionUpdateOne) SetNillableCreatedBy(v *uint32) *PositionUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *PositionUpdateOne) AddCreatedBy(v int32) *PositionUpdateOne {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *PositionUpdateOne) ClearCreatedBy() *PositionUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *PositionUpdateOne) SetUpdatedBy(v uint32) *PositionUpdateOne {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *PositionUpdateOne) SetNillableUpdatedBy(v *uint32) *PositionUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *PositionUpdateOne) AddUpdatedBy(v int32) *PositionUpdateOne {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *PositionUpdateOne) ClearUpdatedBy() *PositionUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *PositionUpdateOne) SetDeletedBy(v uint32) *PositionUpdateOne {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *PositionUpdateOne) SetNillableDeletedBy(v *uint32) *PositionUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *PositionUpdateOne) AddDeletedBy(v int32) *PositionUpdateOne {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *PositionUpdateOne) ClearDeletedBy() *PositionUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *PositionUpdateOne) SetRemark(v string) *PositionUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *PositionUpdateOne) SetNillableRemark(v *string) *PositionUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *PositionUpdateOne) ClearRemark() *PositionUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetName sets the "name" field.
func (_u *PositionUpdateOne) SetName(v string) *PositionUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PositionUpdateOne) SetNillableName(v *string) *PositionUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *PositionUpdateOne) ClearName() *PositionUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetCode sets the "code" field.
func (_u *PositionUpdateOne) SetCode(v string) *PositionUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *PositionUpdateOne) SetNillableCode(v *string) *PositionUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *PositionUpdateOne) ClearCode() *PositionUpdateOne {
	_u.mutation.ClearCode()
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *PositionUpdateOne) SetParentID(v uint32) *PositionUpdateOne {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *PositionUpdateOne) SetNillableParentID(v *uint32) *PositionUpdateOne {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *PositionUpdateOne) ClearParentID() *PositionUpdateOne {
	_u.mutation.ClearParentID()
	return _u
}

// SetSortOrder sets the "sort_order" field.
func (_u *PositionUpdateOne) SetSortOrder(v int32) *PositionUpdateOne {
	_u.mutation.ResetSortOrder()
	_u.mutation.SetSortOrder(v)
	return _u
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_u *PositionUpdateOne) SetNillableSortOrder(v *int32) *PositionUpdateOne {
	if v != nil {
		_u.SetSortOrder(*v)
	}
	return _u
}

// AddSortOrder adds value to the "sort_order" field.
func (_u *PositionUpdateOne) AddSortOrder(v int32) *PositionUpdateOne {
	_u.mutation.AddSortOrder(v)
	return _u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (_u *PositionUpdateOne) ClearSortOrder() *PositionUpdateOne {
	_u.mutation.ClearSortOrder()
	return _u
}

// SetOrganizationID sets the "organization_id" field.
func (_u *PositionUpdateOne) SetOrganizationID(v uint32) *PositionUpdateOne {
	_u.mutation.ResetOrganizationID()
	_u.mutation.SetOrganizationID(v)
	return _u
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_u *PositionUpdateOne) SetNillableOrganizationID(v *uint32) *PositionUpdateOne {
	if v != nil {
		_u.SetOrganizationID(*v)
	}
	return _u
}

// AddOrganizationID adds value to the "organization_id" field.
func (_u *PositionUpdateOne) AddOrganizationID(v int32) *PositionUpdateOne {
	_u.mutation.AddOrganizationID(v)
	return _u
}

// SetDepartmentID sets the "department_id" field.
func (_u *PositionUpdateOne) SetDepartmentID(v uint32) *PositionUpdateOne {
	_u.mutation.ResetDepartmentID()
	_u.mutation.SetDepartmentID(v)
	return _u
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (_u *PositionUpdateOne) SetNillableDepartmentID(v *uint32) *PositionUpdateOne {
	if v != nil {
		_u.SetDepartmentID(*v)
	}
	return _u
}

// AddDepartmentID adds value to the "department_id" field.
func (_u *PositionUpdateOne) AddDepartmentID(v int32) *PositionUpdateOne {
	_u.mutation.AddDepartmentID(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *PositionUpdateOne) SetStatus(v position.Status) *PositionUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *PositionUpdateOne) SetNillableStatus(v *position.Status) *PositionUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *PositionUpdateOne) ClearStatus() *PositionUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetDescription sets the "description" field.
func (_u *PositionUpdateOne) SetDescription(v string) *PositionUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *PositionUpdateOne) SetNillableDescription(v *string) *PositionUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *PositionUpdateOne) ClearDescription() *PositionUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetQuota sets the "quota" field.
func (_u *PositionUpdateOne) SetQuota(v uint32) *PositionUpdateOne {
	_u.mutation.ResetQuota()
	_u.mutation.SetQuota(v)
	return _u
}

// SetNillableQuota sets the "quota" field if the given value is not nil.
func (_u *PositionUpdateOne) SetNillableQuota(v *uint32) *PositionUpdateOne {
	if v != nil {
		_u.SetQuota(*v)
	}
	return _u
}

// AddQuota adds value to the "quota" field.
func (_u *PositionUpdateOne) AddQuota(v int32) *PositionUpdateOne {
	_u.mutation.AddQuota(v)
	return _u
}

// ClearQuota clears the value of the "quota" field.
func (_u *PositionUpdateOne) ClearQuota() *PositionUpdateOne {
	_u.mutation.ClearQuota()
	return _u
}

// SetParent sets the "parent" edge to the Position entity.
func (_u *PositionUpdateOne) SetParent(v *Position) *PositionUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Position entity by IDs.
func (_u *PositionUpdateOne) AddChildIDs(ids ...uint32) *PositionUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Position entity.
func (_u *PositionUpdateOne) AddChildren(v ...*Position) *PositionUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the PositionMutation object of the builder.
func (_u *PositionUpdateOne) Mutation() *PositionMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Position entity.
func (_u *PositionUpdateOne) ClearParent() *PositionUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Position entity.
func (_u *PositionUpdateOne) ClearChildren() *PositionUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Position entities by IDs.
func (_u *PositionUpdateOne) RemoveChildIDs(ids ...uint32) *PositionUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Position entities.
func (_u *PositionUpdateOne) RemoveChildren(v ...*Position) *PositionUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the PositionUpdate builder.
func (_u *PositionUpdateOne) Where(ps ...predicate.Position) *PositionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PositionUpdateOne) Select(field string, fields ...string) *PositionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Position entity.
func (_u *PositionUpdateOne) Save(ctx context.Context) (*Position, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PositionUpdateOne) SaveX(ctx context.Context) *Position {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PositionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PositionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PositionUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := position.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Position.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := position.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Position.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := position.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Position.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PositionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PositionUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PositionUpdateOne) sqlSave(ctx context.Context) (_node *Position, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(position.Table, position.Columns, sqlgraph.NewFieldSpec(position.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Position.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, position.FieldID)
		for _, f := range fields {
			if !position.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != position.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(position.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(position.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(position.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(position.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(position.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(position.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(position.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(position.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(position.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(position.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(position.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(position.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(position.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(position.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(position.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(position.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(position.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(position.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(position.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(position.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.SortOrder(); ok {
		_spec.SetField(position.FieldSortOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortOrder(); ok {
		_spec.AddField(position.FieldSortOrder, field.TypeInt32, value)
	}
	if _u.mutation.SortOrderCleared() {
		_spec.ClearField(position.FieldSortOrder, field.TypeInt32)
	}
	if value, ok := _u.mutation.OrganizationID(); ok {
		_spec.SetField(position.FieldOrganizationID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedOrganizationID(); ok {
		_spec.AddField(position.FieldOrganizationID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.DepartmentID(); ok {
		_spec.SetField(position.FieldDepartmentID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDepartmentID(); ok {
		_spec.AddField(position.FieldDepartmentID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(position.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(position.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(position.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(position.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Quota(); ok {
		_spec.SetField(position.FieldQuota, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedQuota(); ok {
		_spec.AddField(position.FieldQuota, field.TypeUint32, value)
	}
	if _u.mutation.QuotaCleared() {
		_spec.ClearField(position.FieldQuota, field.TypeUint32)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.ParentTable,
			Columns: []string{position.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.ParentTable,
			Columns: []string{position.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ChildrenTable,
			Columns: []string{position.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ChildrenTable,
			Columns: []string{position.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ChildrenTable,
			Columns: []string{position.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Position{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{position.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

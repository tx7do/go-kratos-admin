// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/dict"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictUpdate is the builder for updating Dict entities.
type DictUpdate struct {
	config
	hooks     []Hook
	mutation  *DictMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DictUpdate builder.
func (_u *DictUpdate) Where(ps ...predicate.Dict) *DictUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *DictUpdate) SetUpdateTime(v time.Time) *DictUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *DictUpdate) SetNillableUpdateTime(v *time.Time) *DictUpdate {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *DictUpdate) ClearUpdateTime() *DictUpdate {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *DictUpdate) SetDeleteTime(v time.Time) *DictUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *DictUpdate) SetNillableDeleteTime(v *time.Time) *DictUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *DictUpdate) ClearDeleteTime() *DictUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *DictUpdate) SetCreateBy(v uint32) *DictUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *DictUpdate) SetNillableCreateBy(v *uint32) *DictUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *DictUpdate) AddCreateBy(v int32) *DictUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *DictUpdate) ClearCreateBy() *DictUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *DictUpdate) SetUpdateBy(v uint32) *DictUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *DictUpdate) SetNillableUpdateBy(v *uint32) *DictUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *DictUpdate) AddUpdateBy(v int32) *DictUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *DictUpdate) ClearUpdateBy() *DictUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *DictUpdate) SetRemark(v string) *DictUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *DictUpdate) SetNillableRemark(v *string) *DictUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *DictUpdate) ClearRemark() *DictUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetKey sets the "key" field.
func (_u *DictUpdate) SetKey(v string) *DictUpdate {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *DictUpdate) SetNillableKey(v *string) *DictUpdate {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// ClearKey clears the value of the "key" field.
func (_u *DictUpdate) ClearKey() *DictUpdate {
	_u.mutation.ClearKey()
	return _u
}

// SetCategory sets the "category" field.
func (_u *DictUpdate) SetCategory(v string) *DictUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *DictUpdate) SetNillableCategory(v *string) *DictUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *DictUpdate) ClearCategory() *DictUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// SetCategoryDesc sets the "category_desc" field.
func (_u *DictUpdate) SetCategoryDesc(v string) *DictUpdate {
	_u.mutation.SetCategoryDesc(v)
	return _u
}

// SetNillableCategoryDesc sets the "category_desc" field if the given value is not nil.
func (_u *DictUpdate) SetNillableCategoryDesc(v *string) *DictUpdate {
	if v != nil {
		_u.SetCategoryDesc(*v)
	}
	return _u
}

// ClearCategoryDesc clears the value of the "category_desc" field.
func (_u *DictUpdate) ClearCategoryDesc() *DictUpdate {
	_u.mutation.ClearCategoryDesc()
	return _u
}

// SetValue sets the "value" field.
func (_u *DictUpdate) SetValue(v string) *DictUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *DictUpdate) SetNillableValue(v *string) *DictUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *DictUpdate) ClearValue() *DictUpdate {
	_u.mutation.ClearValue()
	return _u
}

// SetValueDesc sets the "value_desc" field.
func (_u *DictUpdate) SetValueDesc(v string) *DictUpdate {
	_u.mutation.SetValueDesc(v)
	return _u
}

// SetNillableValueDesc sets the "value_desc" field if the given value is not nil.
func (_u *DictUpdate) SetNillableValueDesc(v *string) *DictUpdate {
	if v != nil {
		_u.SetValueDesc(*v)
	}
	return _u
}

// ClearValueDesc clears the value of the "value_desc" field.
func (_u *DictUpdate) ClearValueDesc() *DictUpdate {
	_u.mutation.ClearValueDesc()
	return _u
}

// SetValueDataType sets the "value_data_type" field.
func (_u *DictUpdate) SetValueDataType(v string) *DictUpdate {
	_u.mutation.SetValueDataType(v)
	return _u
}

// SetNillableValueDataType sets the "value_data_type" field if the given value is not nil.
func (_u *DictUpdate) SetNillableValueDataType(v *string) *DictUpdate {
	if v != nil {
		_u.SetValueDataType(*v)
	}
	return _u
}

// ClearValueDataType clears the value of the "value_data_type" field.
func (_u *DictUpdate) ClearValueDataType() *DictUpdate {
	_u.mutation.ClearValueDataType()
	return _u
}

// SetSortID sets the "sort_id" field.
func (_u *DictUpdate) SetSortID(v int32) *DictUpdate {
	_u.mutation.ResetSortID()
	_u.mutation.SetSortID(v)
	return _u
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (_u *DictUpdate) SetNillableSortID(v *int32) *DictUpdate {
	if v != nil {
		_u.SetSortID(*v)
	}
	return _u
}

// AddSortID adds value to the "sort_id" field.
func (_u *DictUpdate) AddSortID(v int32) *DictUpdate {
	_u.mutation.AddSortID(v)
	return _u
}

// ClearSortID clears the value of the "sort_id" field.
func (_u *DictUpdate) ClearSortID() *DictUpdate {
	_u.mutation.ClearSortID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *DictUpdate) SetStatus(v dict.Status) *DictUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DictUpdate) SetNillableStatus(v *dict.Status) *DictUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *DictUpdate) ClearStatus() *DictUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// Mutation returns the DictMutation object of the builder.
func (_u *DictUpdate) Mutation() *DictMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DictUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DictUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DictUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DictUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DictUpdate) check() error {
	if v, ok := _u.mutation.Key(); ok {
		if err := dict.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Dict.key": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := dict.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Dict.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DictUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DictUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dict.Table, dict.Columns, sqlgraph.NewFieldSpec(dict.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(dict.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(dict.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(dict.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(dict.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(dict.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(dict.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(dict.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(dict.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(dict.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(dict.FieldUpdateBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(dict.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(dict.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(dict.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(dict.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(dict.FieldKey, field.TypeString, value)
	}
	if _u.mutation.KeyCleared() {
		_spec.ClearField(dict.FieldKey, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(dict.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(dict.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryDesc(); ok {
		_spec.SetField(dict.FieldCategoryDesc, field.TypeString, value)
	}
	if _u.mutation.CategoryDescCleared() {
		_spec.ClearField(dict.FieldCategoryDesc, field.TypeString)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(dict.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(dict.FieldValue, field.TypeString)
	}
	if value, ok := _u.mutation.ValueDesc(); ok {
		_spec.SetField(dict.FieldValueDesc, field.TypeString, value)
	}
	if _u.mutation.ValueDescCleared() {
		_spec.ClearField(dict.FieldValueDesc, field.TypeString)
	}
	if value, ok := _u.mutation.ValueDataType(); ok {
		_spec.SetField(dict.FieldValueDataType, field.TypeString, value)
	}
	if _u.mutation.ValueDataTypeCleared() {
		_spec.ClearField(dict.FieldValueDataType, field.TypeString)
	}
	if value, ok := _u.mutation.SortID(); ok {
		_spec.SetField(dict.FieldSortID, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortID(); ok {
		_spec.AddField(dict.FieldSortID, field.TypeInt32, value)
	}
	if _u.mutation.SortIDCleared() {
		_spec.ClearField(dict.FieldSortID, field.TypeInt32)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(dict.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(dict.FieldStatus, field.TypeEnum)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dict.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DictUpdateOne is the builder for updating a single Dict entity.
type DictUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DictMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (_u *DictUpdateOne) SetUpdateTime(v time.Time) *DictUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *DictUpdateOne) SetNillableUpdateTime(v *time.Time) *DictUpdateOne {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *DictUpdateOne) ClearUpdateTime() *DictUpdateOne {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *DictUpdateOne) SetDeleteTime(v time.Time) *DictUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *DictUpdateOne) SetNillableDeleteTime(v *time.Time) *DictUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *DictUpdateOne) ClearDeleteTime() *DictUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *DictUpdateOne) SetCreateBy(v uint32) *DictUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *DictUpdateOne) SetNillableCreateBy(v *uint32) *DictUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *DictUpdateOne) AddCreateBy(v int32) *DictUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *DictUpdateOne) ClearCreateBy() *DictUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *DictUpdateOne) SetUpdateBy(v uint32) *DictUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *DictUpdateOne) SetNillableUpdateBy(v *uint32) *DictUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *DictUpdateOne) AddUpdateBy(v int32) *DictUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *DictUpdateOne) ClearUpdateBy() *DictUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *DictUpdateOne) SetRemark(v string) *DictUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *DictUpdateOne) SetNillableRemark(v *string) *DictUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *DictUpdateOne) ClearRemark() *DictUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetKey sets the "key" field.
func (_u *DictUpdateOne) SetKey(v string) *DictUpdateOne {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *DictUpdateOne) SetNillableKey(v *string) *DictUpdateOne {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// ClearKey clears the value of the "key" field.
func (_u *DictUpdateOne) ClearKey() *DictUpdateOne {
	_u.mutation.ClearKey()
	return _u
}

// SetCategory sets the "category" field.
func (_u *DictUpdateOne) SetCategory(v string) *DictUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *DictUpdateOne) SetNillableCategory(v *string) *DictUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *DictUpdateOne) ClearCategory() *DictUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// SetCategoryDesc sets the "category_desc" field.
func (_u *DictUpdateOne) SetCategoryDesc(v string) *DictUpdateOne {
	_u.mutation.SetCategoryDesc(v)
	return _u
}

// SetNillableCategoryDesc sets the "category_desc" field if the given value is not nil.
func (_u *DictUpdateOne) SetNillableCategoryDesc(v *string) *DictUpdateOne {
	if v != nil {
		_u.SetCategoryDesc(*v)
	}
	return _u
}

// ClearCategoryDesc clears the value of the "category_desc" field.
func (_u *DictUpdateOne) ClearCategoryDesc() *DictUpdateOne {
	_u.mutation.ClearCategoryDesc()
	return _u
}

// SetValue sets the "value" field.
func (_u *DictUpdateOne) SetValue(v string) *DictUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *DictUpdateOne) SetNillableValue(v *string) *DictUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *DictUpdateOne) ClearValue() *DictUpdateOne {
	_u.mutation.ClearValue()
	return _u
}

// SetValueDesc sets the "value_desc" field.
func (_u *DictUpdateOne) SetValueDesc(v string) *DictUpdateOne {
	_u.mutation.SetValueDesc(v)
	return _u
}

// SetNillableValueDesc sets the "value_desc" field if the given value is not nil.
func (_u *DictUpdateOne) SetNillableValueDesc(v *string) *DictUpdateOne {
	if v != nil {
		_u.SetValueDesc(*v)
	}
	return _u
}

// ClearValueDesc clears the value of the "value_desc" field.
func (_u *DictUpdateOne) ClearValueDesc() *DictUpdateOne {
	_u.mutation.ClearValueDesc()
	return _u
}

// SetValueDataType sets the "value_data_type" field.
func (_u *DictUpdateOne) SetValueDataType(v string) *DictUpdateOne {
	_u.mutation.SetValueDataType(v)
	return _u
}

// SetNillableValueDataType sets the "value_data_type" field if the given value is not nil.
func (_u *DictUpdateOne) SetNillableValueDataType(v *string) *DictUpdateOne {
	if v != nil {
		_u.SetValueDataType(*v)
	}
	return _u
}

// ClearValueDataType clears the value of the "value_data_type" field.
func (_u *DictUpdateOne) ClearValueDataType() *DictUpdateOne {
	_u.mutation.ClearValueDataType()
	return _u
}

// SetSortID sets the "sort_id" field.
func (_u *DictUpdateOne) SetSortID(v int32) *DictUpdateOne {
	_u.mutation.ResetSortID()
	_u.mutation.SetSortID(v)
	return _u
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (_u *DictUpdateOne) SetNillableSortID(v *int32) *DictUpdateOne {
	if v != nil {
		_u.SetSortID(*v)
	}
	return _u
}

// AddSortID adds value to the "sort_id" field.
func (_u *DictUpdateOne) AddSortID(v int32) *DictUpdateOne {
	_u.mutation.AddSortID(v)
	return _u
}

// ClearSortID clears the value of the "sort_id" field.
func (_u *DictUpdateOne) ClearSortID() *DictUpdateOne {
	_u.mutation.ClearSortID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *DictUpdateOne) SetStatus(v dict.Status) *DictUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DictUpdateOne) SetNillableStatus(v *dict.Status) *DictUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *DictUpdateOne) ClearStatus() *DictUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// Mutation returns the DictMutation object of the builder.
func (_u *DictUpdateOne) Mutation() *DictMutation {
	return _u.mutation
}

// Where appends a list predicates to the DictUpdate builder.
func (_u *DictUpdateOne) Where(ps ...predicate.Dict) *DictUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DictUpdateOne) Select(field string, fields ...string) *DictUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Dict entity.
func (_u *DictUpdateOne) Save(ctx context.Context) (*Dict, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DictUpdateOne) SaveX(ctx context.Context) *Dict {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DictUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DictUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DictUpdateOne) check() error {
	if v, ok := _u.mutation.Key(); ok {
		if err := dict.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Dict.key": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := dict.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Dict.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DictUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DictUpdateOne) sqlSave(ctx context.Context) (_node *Dict, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dict.Table, dict.Columns, sqlgraph.NewFieldSpec(dict.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dict.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dict.FieldID)
		for _, f := range fields {
			if !dict.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dict.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(dict.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(dict.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(dict.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(dict.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(dict.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(dict.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(dict.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(dict.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(dict.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(dict.FieldUpdateBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(dict.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(dict.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(dict.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(dict.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(dict.FieldKey, field.TypeString, value)
	}
	if _u.mutation.KeyCleared() {
		_spec.ClearField(dict.FieldKey, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(dict.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(dict.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryDesc(); ok {
		_spec.SetField(dict.FieldCategoryDesc, field.TypeString, value)
	}
	if _u.mutation.CategoryDescCleared() {
		_spec.ClearField(dict.FieldCategoryDesc, field.TypeString)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(dict.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(dict.FieldValue, field.TypeString)
	}
	if value, ok := _u.mutation.ValueDesc(); ok {
		_spec.SetField(dict.FieldValueDesc, field.TypeString, value)
	}
	if _u.mutation.ValueDescCleared() {
		_spec.ClearField(dict.FieldValueDesc, field.TypeString)
	}
	if value, ok := _u.mutation.ValueDataType(); ok {
		_spec.SetField(dict.FieldValueDataType, field.TypeString, value)
	}
	if _u.mutation.ValueDataTypeCleared() {
		_spec.ClearField(dict.FieldValueDataType, field.TypeString)
	}
	if value, ok := _u.mutation.SortID(); ok {
		_spec.SetField(dict.FieldSortID, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortID(); ok {
		_spec.AddField(dict.FieldSortID, field.TypeInt32, value)
	}
	if _u.mutation.SortIDCleared() {
		_spec.ClearField(dict.FieldSortID, field.TypeInt32)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(dict.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(dict.FieldStatus, field.TypeEnum)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Dict{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dict.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

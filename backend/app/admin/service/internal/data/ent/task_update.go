// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	servicev1 "kratos-admin/api/gen/go/admin/service/v1"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"kratos-admin/app/admin/service/internal/data/ent/task"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TaskUpdate builder.
func (_u *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TaskUpdate) SetUpdatedAt(v time.Time) *TaskUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableUpdatedAt(v *time.Time) *TaskUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TaskUpdate) ClearUpdatedAt() *TaskUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TaskUpdate) SetDeletedAt(v time.Time) *TaskUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableDeletedAt(v *time.Time) *TaskUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TaskUpdate) ClearDeletedAt() *TaskUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *TaskUpdate) SetCreatedBy(v uint32) *TaskUpdate {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableCreatedBy(v *uint32) *TaskUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *TaskUpdate) AddCreatedBy(v int32) *TaskUpdate {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *TaskUpdate) ClearCreatedBy() *TaskUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TaskUpdate) SetUpdatedBy(v uint32) *TaskUpdate {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableUpdatedBy(v *uint32) *TaskUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *TaskUpdate) AddUpdatedBy(v int32) *TaskUpdate {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TaskUpdate) ClearUpdatedBy() *TaskUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TaskUpdate) SetDeletedBy(v uint32) *TaskUpdate {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableDeletedBy(v *uint32) *TaskUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *TaskUpdate) AddDeletedBy(v int32) *TaskUpdate {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TaskUpdate) ClearDeletedBy() *TaskUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *TaskUpdate) SetRemark(v string) *TaskUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableRemark(v *string) *TaskUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *TaskUpdate) ClearRemark() *TaskUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetType sets the "type" field.
func (_u *TaskUpdate) SetType(v task.Type) *TaskUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableType(v *task.Type) *TaskUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *TaskUpdate) ClearType() *TaskUpdate {
	_u.mutation.ClearType()
	return _u
}

// SetTypeName sets the "type_name" field.
func (_u *TaskUpdate) SetTypeName(v string) *TaskUpdate {
	_u.mutation.SetTypeName(v)
	return _u
}

// SetNillableTypeName sets the "type_name" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableTypeName(v *string) *TaskUpdate {
	if v != nil {
		_u.SetTypeName(*v)
	}
	return _u
}

// ClearTypeName clears the value of the "type_name" field.
func (_u *TaskUpdate) ClearTypeName() *TaskUpdate {
	_u.mutation.ClearTypeName()
	return _u
}

// SetTaskPayload sets the "task_payload" field.
func (_u *TaskUpdate) SetTaskPayload(v string) *TaskUpdate {
	_u.mutation.SetTaskPayload(v)
	return _u
}

// SetNillableTaskPayload sets the "task_payload" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableTaskPayload(v *string) *TaskUpdate {
	if v != nil {
		_u.SetTaskPayload(*v)
	}
	return _u
}

// ClearTaskPayload clears the value of the "task_payload" field.
func (_u *TaskUpdate) ClearTaskPayload() *TaskUpdate {
	_u.mutation.ClearTaskPayload()
	return _u
}

// SetCronSpec sets the "cron_spec" field.
func (_u *TaskUpdate) SetCronSpec(v string) *TaskUpdate {
	_u.mutation.SetCronSpec(v)
	return _u
}

// SetNillableCronSpec sets the "cron_spec" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableCronSpec(v *string) *TaskUpdate {
	if v != nil {
		_u.SetCronSpec(*v)
	}
	return _u
}

// ClearCronSpec clears the value of the "cron_spec" field.
func (_u *TaskUpdate) ClearCronSpec() *TaskUpdate {
	_u.mutation.ClearCronSpec()
	return _u
}

// SetTaskOptions sets the "task_options" field.
func (_u *TaskUpdate) SetTaskOptions(v *servicev1.TaskOption) *TaskUpdate {
	_u.mutation.SetTaskOptions(v)
	return _u
}

// ClearTaskOptions clears the value of the "task_options" field.
func (_u *TaskUpdate) ClearTaskOptions() *TaskUpdate {
	_u.mutation.ClearTaskOptions()
	return _u
}

// SetEnable sets the "enable" field.
func (_u *TaskUpdate) SetEnable(v bool) *TaskUpdate {
	_u.mutation.SetEnable(v)
	return _u
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableEnable(v *bool) *TaskUpdate {
	if v != nil {
		_u.SetEnable(*v)
	}
	return _u
}

// ClearEnable clears the value of the "enable" field.
func (_u *TaskUpdate) ClearEnable() *TaskUpdate {
	_u.mutation.ClearEnable()
	return _u
}

// Mutation returns the TaskMutation object of the builder.
func (_u *TaskUpdate) Mutation() *TaskMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TaskUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TaskUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TaskUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskOptions(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "task_options", err: fmt.Errorf(`ent: validator failed for field "Task.task_options": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TaskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TaskUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(task.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(task.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(task.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(task.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(task.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(task.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(task.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(task.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(task.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(task.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(task.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(task.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(task.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(task.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(task.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(task.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(task.FieldType, field.TypeEnum)
	}
	if value, ok := _u.mutation.TypeName(); ok {
		_spec.SetField(task.FieldTypeName, field.TypeString, value)
	}
	if _u.mutation.TypeNameCleared() {
		_spec.ClearField(task.FieldTypeName, field.TypeString)
	}
	if value, ok := _u.mutation.TaskPayload(); ok {
		_spec.SetField(task.FieldTaskPayload, field.TypeString, value)
	}
	if _u.mutation.TaskPayloadCleared() {
		_spec.ClearField(task.FieldTaskPayload, field.TypeString)
	}
	if value, ok := _u.mutation.CronSpec(); ok {
		_spec.SetField(task.FieldCronSpec, field.TypeString, value)
	}
	if _u.mutation.CronSpecCleared() {
		_spec.ClearField(task.FieldCronSpec, field.TypeString)
	}
	if value, ok := _u.mutation.TaskOptions(); ok {
		_spec.SetField(task.FieldTaskOptions, field.TypeJSON, value)
	}
	if _u.mutation.TaskOptionsCleared() {
		_spec.ClearField(task.FieldTaskOptions, field.TypeJSON)
	}
	if value, ok := _u.mutation.Enable(); ok {
		_spec.SetField(task.FieldEnable, field.TypeBool, value)
	}
	if _u.mutation.EnableCleared() {
		_spec.ClearField(task.FieldEnable, field.TypeBool)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TaskUpdateOne) SetUpdatedAt(v time.Time) *TaskUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableUpdatedAt(v *time.Time) *TaskUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TaskUpdateOne) ClearUpdatedAt() *TaskUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TaskUpdateOne) SetDeletedAt(v time.Time) *TaskUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableDeletedAt(v *time.Time) *TaskUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TaskUpdateOne) ClearDeletedAt() *TaskUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *TaskUpdateOne) SetCreatedBy(v uint32) *TaskUpdateOne {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableCreatedBy(v *uint32) *TaskUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *TaskUpdateOne) AddCreatedBy(v int32) *TaskUpdateOne {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *TaskUpdateOne) ClearCreatedBy() *TaskUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TaskUpdateOne) SetUpdatedBy(v uint32) *TaskUpdateOne {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableUpdatedBy(v *uint32) *TaskUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *TaskUpdateOne) AddUpdatedBy(v int32) *TaskUpdateOne {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TaskUpdateOne) ClearUpdatedBy() *TaskUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TaskUpdateOne) SetDeletedBy(v uint32) *TaskUpdateOne {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableDeletedBy(v *uint32) *TaskUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *TaskUpdateOne) AddDeletedBy(v int32) *TaskUpdateOne {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TaskUpdateOne) ClearDeletedBy() *TaskUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *TaskUpdateOne) SetRemark(v string) *TaskUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableRemark(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *TaskUpdateOne) ClearRemark() *TaskUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetType sets the "type" field.
func (_u *TaskUpdateOne) SetType(v task.Type) *TaskUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableType(v *task.Type) *TaskUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *TaskUpdateOne) ClearType() *TaskUpdateOne {
	_u.mutation.ClearType()
	return _u
}

// SetTypeName sets the "type_name" field.
func (_u *TaskUpdateOne) SetTypeName(v string) *TaskUpdateOne {
	_u.mutation.SetTypeName(v)
	return _u
}

// SetNillableTypeName sets the "type_name" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableTypeName(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetTypeName(*v)
	}
	return _u
}

// ClearTypeName clears the value of the "type_name" field.
func (_u *TaskUpdateOne) ClearTypeName() *TaskUpdateOne {
	_u.mutation.ClearTypeName()
	return _u
}

// SetTaskPayload sets the "task_payload" field.
func (_u *TaskUpdateOne) SetTaskPayload(v string) *TaskUpdateOne {
	_u.mutation.SetTaskPayload(v)
	return _u
}

// SetNillableTaskPayload sets the "task_payload" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableTaskPayload(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetTaskPayload(*v)
	}
	return _u
}

// ClearTaskPayload clears the value of the "task_payload" field.
func (_u *TaskUpdateOne) ClearTaskPayload() *TaskUpdateOne {
	_u.mutation.ClearTaskPayload()
	return _u
}

// SetCronSpec sets the "cron_spec" field.
func (_u *TaskUpdateOne) SetCronSpec(v string) *TaskUpdateOne {
	_u.mutation.SetCronSpec(v)
	return _u
}

// SetNillableCronSpec sets the "cron_spec" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableCronSpec(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetCronSpec(*v)
	}
	return _u
}

// ClearCronSpec clears the value of the "cron_spec" field.
func (_u *TaskUpdateOne) ClearCronSpec() *TaskUpdateOne {
	_u.mutation.ClearCronSpec()
	return _u
}

// SetTaskOptions sets the "task_options" field.
func (_u *TaskUpdateOne) SetTaskOptions(v *servicev1.TaskOption) *TaskUpdateOne {
	_u.mutation.SetTaskOptions(v)
	return _u
}

// ClearTaskOptions clears the value of the "task_options" field.
func (_u *TaskUpdateOne) ClearTaskOptions() *TaskUpdateOne {
	_u.mutation.ClearTaskOptions()
	return _u
}

// SetEnable sets the "enable" field.
func (_u *TaskUpdateOne) SetEnable(v bool) *TaskUpdateOne {
	_u.mutation.SetEnable(v)
	return _u
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableEnable(v *bool) *TaskUpdateOne {
	if v != nil {
		_u.SetEnable(*v)
	}
	return _u
}

// ClearEnable clears the value of the "enable" field.
func (_u *TaskUpdateOne) ClearEnable() *TaskUpdateOne {
	_u.mutation.ClearEnable()
	return _u
}

// Mutation returns the TaskMutation object of the builder.
func (_u *TaskUpdateOne) Mutation() *TaskMutation {
	return _u.mutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (_u *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Task entity.
func (_u *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TaskUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskOptions(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "task_options", err: fmt.Errorf(`ent: validator failed for field "Task.task_options": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TaskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(task.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(task.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(task.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(task.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(task.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(task.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(task.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(task.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(task.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(task.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(task.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(task.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(task.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(task.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(task.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(task.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(task.FieldType, field.TypeEnum)
	}
	if value, ok := _u.mutation.TypeName(); ok {
		_spec.SetField(task.FieldTypeName, field.TypeString, value)
	}
	if _u.mutation.TypeNameCleared() {
		_spec.ClearField(task.FieldTypeName, field.TypeString)
	}
	if value, ok := _u.mutation.TaskPayload(); ok {
		_spec.SetField(task.FieldTaskPayload, field.TypeString, value)
	}
	if _u.mutation.TaskPayloadCleared() {
		_spec.ClearField(task.FieldTaskPayload, field.TypeString)
	}
	if value, ok := _u.mutation.CronSpec(); ok {
		_spec.SetField(task.FieldCronSpec, field.TypeString, value)
	}
	if _u.mutation.CronSpecCleared() {
		_spec.ClearField(task.FieldCronSpec, field.TypeString)
	}
	if value, ok := _u.mutation.TaskOptions(); ok {
		_spec.SetField(task.FieldTaskOptions, field.TypeJSON, value)
	}
	if _u.mutation.TaskOptionsCleared() {
		_spec.ClearField(task.FieldTaskOptions, field.TypeJSON)
	}
	if value, ok := _u.mutation.Enable(); ok {
		_spec.SetField(task.FieldEnable, field.TypeBool, value)
	}
	if _u.mutation.EnableCleared() {
		_spec.ClearField(task.FieldEnable, field.TypeBool)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Task{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

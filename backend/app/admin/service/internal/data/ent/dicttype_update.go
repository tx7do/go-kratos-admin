// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/dictentry"
	"kratos-admin/app/admin/service/internal/data/ent/dicttype"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictTypeUpdate is the builder for updating DictType entities.
type DictTypeUpdate struct {
	config
	hooks     []Hook
	mutation  *DictTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DictTypeUpdate builder.
func (_u *DictTypeUpdate) Where(ps ...predicate.DictType) *DictTypeUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DictTypeUpdate) SetUpdatedAt(v time.Time) *DictTypeUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *DictTypeUpdate) SetNillableUpdatedAt(v *time.Time) *DictTypeUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *DictTypeUpdate) ClearUpdatedAt() *DictTypeUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *DictTypeUpdate) SetDeletedAt(v time.Time) *DictTypeUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *DictTypeUpdate) SetNillableDeletedAt(v *time.Time) *DictTypeUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *DictTypeUpdate) ClearDeletedAt() *DictTypeUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *DictTypeUpdate) SetCreatedBy(v uint32) *DictTypeUpdate {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *DictTypeUpdate) SetNillableCreatedBy(v *uint32) *DictTypeUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *DictTypeUpdate) AddCreatedBy(v int32) *DictTypeUpdate {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *DictTypeUpdate) ClearCreatedBy() *DictTypeUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *DictTypeUpdate) SetUpdatedBy(v uint32) *DictTypeUpdate {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *DictTypeUpdate) SetNillableUpdatedBy(v *uint32) *DictTypeUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *DictTypeUpdate) AddUpdatedBy(v int32) *DictTypeUpdate {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *DictTypeUpdate) ClearUpdatedBy() *DictTypeUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *DictTypeUpdate) SetDeletedBy(v uint32) *DictTypeUpdate {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *DictTypeUpdate) SetNillableDeletedBy(v *uint32) *DictTypeUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *DictTypeUpdate) AddDeletedBy(v int32) *DictTypeUpdate {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *DictTypeUpdate) ClearDeletedBy() *DictTypeUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetIsEnabled sets the "is_enabled" field.
func (_u *DictTypeUpdate) SetIsEnabled(v bool) *DictTypeUpdate {
	_u.mutation.SetIsEnabled(v)
	return _u
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_u *DictTypeUpdate) SetNillableIsEnabled(v *bool) *DictTypeUpdate {
	if v != nil {
		_u.SetIsEnabled(*v)
	}
	return _u
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (_u *DictTypeUpdate) ClearIsEnabled() *DictTypeUpdate {
	_u.mutation.ClearIsEnabled()
	return _u
}

// SetSortOrder sets the "sort_order" field.
func (_u *DictTypeUpdate) SetSortOrder(v int32) *DictTypeUpdate {
	_u.mutation.ResetSortOrder()
	_u.mutation.SetSortOrder(v)
	return _u
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_u *DictTypeUpdate) SetNillableSortOrder(v *int32) *DictTypeUpdate {
	if v != nil {
		_u.SetSortOrder(*v)
	}
	return _u
}

// AddSortOrder adds value to the "sort_order" field.
func (_u *DictTypeUpdate) AddSortOrder(v int32) *DictTypeUpdate {
	_u.mutation.AddSortOrder(v)
	return _u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (_u *DictTypeUpdate) ClearSortOrder() *DictTypeUpdate {
	_u.mutation.ClearSortOrder()
	return _u
}

// SetDescription sets the "description" field.
func (_u *DictTypeUpdate) SetDescription(v string) *DictTypeUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *DictTypeUpdate) SetNillableDescription(v *string) *DictTypeUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *DictTypeUpdate) ClearDescription() *DictTypeUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetTypeCode sets the "type_code" field.
func (_u *DictTypeUpdate) SetTypeCode(v string) *DictTypeUpdate {
	_u.mutation.SetTypeCode(v)
	return _u
}

// SetNillableTypeCode sets the "type_code" field if the given value is not nil.
func (_u *DictTypeUpdate) SetNillableTypeCode(v *string) *DictTypeUpdate {
	if v != nil {
		_u.SetTypeCode(*v)
	}
	return _u
}

// ClearTypeCode clears the value of the "type_code" field.
func (_u *DictTypeUpdate) ClearTypeCode() *DictTypeUpdate {
	_u.mutation.ClearTypeCode()
	return _u
}

// SetTypeName sets the "type_name" field.
func (_u *DictTypeUpdate) SetTypeName(v string) *DictTypeUpdate {
	_u.mutation.SetTypeName(v)
	return _u
}

// SetNillableTypeName sets the "type_name" field if the given value is not nil.
func (_u *DictTypeUpdate) SetNillableTypeName(v *string) *DictTypeUpdate {
	if v != nil {
		_u.SetTypeName(*v)
	}
	return _u
}

// ClearTypeName clears the value of the "type_name" field.
func (_u *DictTypeUpdate) ClearTypeName() *DictTypeUpdate {
	_u.mutation.ClearTypeName()
	return _u
}

// AddEntryIDs adds the "entries" edge to the DictEntry entity by IDs.
func (_u *DictTypeUpdate) AddEntryIDs(ids ...uint32) *DictTypeUpdate {
	_u.mutation.AddEntryIDs(ids...)
	return _u
}

// AddEntries adds the "entries" edges to the DictEntry entity.
func (_u *DictTypeUpdate) AddEntries(v ...*DictEntry) *DictTypeUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntryIDs(ids...)
}

// Mutation returns the DictTypeMutation object of the builder.
func (_u *DictTypeUpdate) Mutation() *DictTypeMutation {
	return _u.mutation
}

// ClearEntries clears all "entries" edges to the DictEntry entity.
func (_u *DictTypeUpdate) ClearEntries() *DictTypeUpdate {
	_u.mutation.ClearEntries()
	return _u
}

// RemoveEntryIDs removes the "entries" edge to DictEntry entities by IDs.
func (_u *DictTypeUpdate) RemoveEntryIDs(ids ...uint32) *DictTypeUpdate {
	_u.mutation.RemoveEntryIDs(ids...)
	return _u
}

// RemoveEntries removes "entries" edges to DictEntry entities.
func (_u *DictTypeUpdate) RemoveEntries(v ...*DictEntry) *DictTypeUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DictTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DictTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DictTypeUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DictTypeUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DictTypeUpdate) check() error {
	if v, ok := _u.mutation.TypeCode(); ok {
		if err := dicttype.TypeCodeValidator(v); err != nil {
			return &ValidationError{Name: "type_code", err: fmt.Errorf(`ent: validator failed for field "DictType.type_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TypeName(); ok {
		if err := dicttype.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "type_name", err: fmt.Errorf(`ent: validator failed for field "DictType.type_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DictTypeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictTypeUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DictTypeUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dicttype.Table, dicttype.Columns, sqlgraph.NewFieldSpec(dicttype.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(dicttype.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dicttype.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(dicttype.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(dicttype.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(dicttype.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(dicttype.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(dicttype.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(dicttype.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(dicttype.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(dicttype.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(dicttype.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(dicttype.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(dicttype.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(dicttype.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.IsEnabled(); ok {
		_spec.SetField(dicttype.FieldIsEnabled, field.TypeBool, value)
	}
	if _u.mutation.IsEnabledCleared() {
		_spec.ClearField(dicttype.FieldIsEnabled, field.TypeBool)
	}
	if value, ok := _u.mutation.SortOrder(); ok {
		_spec.SetField(dicttype.FieldSortOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortOrder(); ok {
		_spec.AddField(dicttype.FieldSortOrder, field.TypeInt32, value)
	}
	if _u.mutation.SortOrderCleared() {
		_spec.ClearField(dicttype.FieldSortOrder, field.TypeInt32)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(dicttype.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(dicttype.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.TypeCode(); ok {
		_spec.SetField(dicttype.FieldTypeCode, field.TypeString, value)
	}
	if _u.mutation.TypeCodeCleared() {
		_spec.ClearField(dicttype.FieldTypeCode, field.TypeString)
	}
	if value, ok := _u.mutation.TypeName(); ok {
		_spec.SetField(dicttype.FieldTypeName, field.TypeString, value)
	}
	if _u.mutation.TypeNameCleared() {
		_spec.ClearField(dicttype.FieldTypeName, field.TypeString)
	}
	if _u.mutation.EntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dicttype.EntriesTable,
			Columns: []string{dicttype.EntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictentry.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntriesIDs(); len(nodes) > 0 && !_u.mutation.EntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dicttype.EntriesTable,
			Columns: []string{dicttype.EntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictentry.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dicttype.EntriesTable,
			Columns: []string{dicttype.EntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictentry.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dicttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DictTypeUpdateOne is the builder for updating a single DictType entity.
type DictTypeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DictTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DictTypeUpdateOne) SetUpdatedAt(v time.Time) *DictTypeUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *DictTypeUpdateOne) SetNillableUpdatedAt(v *time.Time) *DictTypeUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *DictTypeUpdateOne) ClearUpdatedAt() *DictTypeUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *DictTypeUpdateOne) SetDeletedAt(v time.Time) *DictTypeUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *DictTypeUpdateOne) SetNillableDeletedAt(v *time.Time) *DictTypeUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *DictTypeUpdateOne) ClearDeletedAt() *DictTypeUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *DictTypeUpdateOne) SetCreatedBy(v uint32) *DictTypeUpdateOne {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *DictTypeUpdateOne) SetNillableCreatedBy(v *uint32) *DictTypeUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *DictTypeUpdateOne) AddCreatedBy(v int32) *DictTypeUpdateOne {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *DictTypeUpdateOne) ClearCreatedBy() *DictTypeUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *DictTypeUpdateOne) SetUpdatedBy(v uint32) *DictTypeUpdateOne {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *DictTypeUpdateOne) SetNillableUpdatedBy(v *uint32) *DictTypeUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *DictTypeUpdateOne) AddUpdatedBy(v int32) *DictTypeUpdateOne {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *DictTypeUpdateOne) ClearUpdatedBy() *DictTypeUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *DictTypeUpdateOne) SetDeletedBy(v uint32) *DictTypeUpdateOne {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *DictTypeUpdateOne) SetNillableDeletedBy(v *uint32) *DictTypeUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *DictTypeUpdateOne) AddDeletedBy(v int32) *DictTypeUpdateOne {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *DictTypeUpdateOne) ClearDeletedBy() *DictTypeUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetIsEnabled sets the "is_enabled" field.
func (_u *DictTypeUpdateOne) SetIsEnabled(v bool) *DictTypeUpdateOne {
	_u.mutation.SetIsEnabled(v)
	return _u
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_u *DictTypeUpdateOne) SetNillableIsEnabled(v *bool) *DictTypeUpdateOne {
	if v != nil {
		_u.SetIsEnabled(*v)
	}
	return _u
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (_u *DictTypeUpdateOne) ClearIsEnabled() *DictTypeUpdateOne {
	_u.mutation.ClearIsEnabled()
	return _u
}

// SetSortOrder sets the "sort_order" field.
func (_u *DictTypeUpdateOne) SetSortOrder(v int32) *DictTypeUpdateOne {
	_u.mutation.ResetSortOrder()
	_u.mutation.SetSortOrder(v)
	return _u
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_u *DictTypeUpdateOne) SetNillableSortOrder(v *int32) *DictTypeUpdateOne {
	if v != nil {
		_u.SetSortOrder(*v)
	}
	return _u
}

// AddSortOrder adds value to the "sort_order" field.
func (_u *DictTypeUpdateOne) AddSortOrder(v int32) *DictTypeUpdateOne {
	_u.mutation.AddSortOrder(v)
	return _u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (_u *DictTypeUpdateOne) ClearSortOrder() *DictTypeUpdateOne {
	_u.mutation.ClearSortOrder()
	return _u
}

// SetDescription sets the "description" field.
func (_u *DictTypeUpdateOne) SetDescription(v string) *DictTypeUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *DictTypeUpdateOne) SetNillableDescription(v *string) *DictTypeUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *DictTypeUpdateOne) ClearDescription() *DictTypeUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetTypeCode sets the "type_code" field.
func (_u *DictTypeUpdateOne) SetTypeCode(v string) *DictTypeUpdateOne {
	_u.mutation.SetTypeCode(v)
	return _u
}

// SetNillableTypeCode sets the "type_code" field if the given value is not nil.
func (_u *DictTypeUpdateOne) SetNillableTypeCode(v *string) *DictTypeUpdateOne {
	if v != nil {
		_u.SetTypeCode(*v)
	}
	return _u
}

// ClearTypeCode clears the value of the "type_code" field.
func (_u *DictTypeUpdateOne) ClearTypeCode() *DictTypeUpdateOne {
	_u.mutation.ClearTypeCode()
	return _u
}

// SetTypeName sets the "type_name" field.
func (_u *DictTypeUpdateOne) SetTypeName(v string) *DictTypeUpdateOne {
	_u.mutation.SetTypeName(v)
	return _u
}

// SetNillableTypeName sets the "type_name" field if the given value is not nil.
func (_u *DictTypeUpdateOne) SetNillableTypeName(v *string) *DictTypeUpdateOne {
	if v != nil {
		_u.SetTypeName(*v)
	}
	return _u
}

// ClearTypeName clears the value of the "type_name" field.
func (_u *DictTypeUpdateOne) ClearTypeName() *DictTypeUpdateOne {
	_u.mutation.ClearTypeName()
	return _u
}

// AddEntryIDs adds the "entries" edge to the DictEntry entity by IDs.
func (_u *DictTypeUpdateOne) AddEntryIDs(ids ...uint32) *DictTypeUpdateOne {
	_u.mutation.AddEntryIDs(ids...)
	return _u
}

// AddEntries adds the "entries" edges to the DictEntry entity.
func (_u *DictTypeUpdateOne) AddEntries(v ...*DictEntry) *DictTypeUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntryIDs(ids...)
}

// Mutation returns the DictTypeMutation object of the builder.
func (_u *DictTypeUpdateOne) Mutation() *DictTypeMutation {
	return _u.mutation
}

// ClearEntries clears all "entries" edges to the DictEntry entity.
func (_u *DictTypeUpdateOne) ClearEntries() *DictTypeUpdateOne {
	_u.mutation.ClearEntries()
	return _u
}

// RemoveEntryIDs removes the "entries" edge to DictEntry entities by IDs.
func (_u *DictTypeUpdateOne) RemoveEntryIDs(ids ...uint32) *DictTypeUpdateOne {
	_u.mutation.RemoveEntryIDs(ids...)
	return _u
}

// RemoveEntries removes "entries" edges to DictEntry entities.
func (_u *DictTypeUpdateOne) RemoveEntries(v ...*DictEntry) *DictTypeUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntryIDs(ids...)
}

// Where appends a list predicates to the DictTypeUpdate builder.
func (_u *DictTypeUpdateOne) Where(ps ...predicate.DictType) *DictTypeUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DictTypeUpdateOne) Select(field string, fields ...string) *DictTypeUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated DictType entity.
func (_u *DictTypeUpdateOne) Save(ctx context.Context) (*DictType, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DictTypeUpdateOne) SaveX(ctx context.Context) *DictType {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DictTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DictTypeUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DictTypeUpdateOne) check() error {
	if v, ok := _u.mutation.TypeCode(); ok {
		if err := dicttype.TypeCodeValidator(v); err != nil {
			return &ValidationError{Name: "type_code", err: fmt.Errorf(`ent: validator failed for field "DictType.type_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TypeName(); ok {
		if err := dicttype.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "type_name", err: fmt.Errorf(`ent: validator failed for field "DictType.type_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DictTypeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictTypeUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DictTypeUpdateOne) sqlSave(ctx context.Context) (_node *DictType, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dicttype.Table, dicttype.Columns, sqlgraph.NewFieldSpec(dicttype.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DictType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dicttype.FieldID)
		for _, f := range fields {
			if !dicttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dicttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(dicttype.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dicttype.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(dicttype.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(dicttype.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(dicttype.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(dicttype.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(dicttype.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(dicttype.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(dicttype.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(dicttype.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(dicttype.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(dicttype.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(dicttype.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(dicttype.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.IsEnabled(); ok {
		_spec.SetField(dicttype.FieldIsEnabled, field.TypeBool, value)
	}
	if _u.mutation.IsEnabledCleared() {
		_spec.ClearField(dicttype.FieldIsEnabled, field.TypeBool)
	}
	if value, ok := _u.mutation.SortOrder(); ok {
		_spec.SetField(dicttype.FieldSortOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortOrder(); ok {
		_spec.AddField(dicttype.FieldSortOrder, field.TypeInt32, value)
	}
	if _u.mutation.SortOrderCleared() {
		_spec.ClearField(dicttype.FieldSortOrder, field.TypeInt32)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(dicttype.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(dicttype.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.TypeCode(); ok {
		_spec.SetField(dicttype.FieldTypeCode, field.TypeString, value)
	}
	if _u.mutation.TypeCodeCleared() {
		_spec.ClearField(dicttype.FieldTypeCode, field.TypeString)
	}
	if value, ok := _u.mutation.TypeName(); ok {
		_spec.SetField(dicttype.FieldTypeName, field.TypeString, value)
	}
	if _u.mutation.TypeNameCleared() {
		_spec.ClearField(dicttype.FieldTypeName, field.TypeString)
	}
	if _u.mutation.EntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dicttype.EntriesTable,
			Columns: []string{dicttype.EntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictentry.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntriesIDs(); len(nodes) > 0 && !_u.mutation.EntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dicttype.EntriesTable,
			Columns: []string{dicttype.EntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictentry.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dicttype.EntriesTable,
			Columns: []string{dicttype.EntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictentry.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &DictType{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dicttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

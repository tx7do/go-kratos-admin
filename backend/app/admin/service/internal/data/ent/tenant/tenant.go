// Code generated by ent, DO NOT EDIT.

package tenant

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the tenant type in the database.
	Label = "tenant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldLogoURL holds the string denoting the logo_url field in the database.
	FieldLogoURL = "logo_url"
	// FieldIndustry holds the string denoting the industry field in the database.
	FieldIndustry = "industry"
	// FieldAdminUserID holds the string denoting the admin_user_id field in the database.
	FieldAdminUserID = "admin_user_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldAuditStatus holds the string denoting the audit_status field in the database.
	FieldAuditStatus = "audit_status"
	// FieldSubscriptionAt holds the string denoting the subscription_at field in the database.
	FieldSubscriptionAt = "subscription_at"
	// FieldUnsubscribeAt holds the string denoting the unsubscribe_at field in the database.
	FieldUnsubscribeAt = "unsubscribe_at"
	// FieldSubscriptionPlan holds the string denoting the subscription_plan field in the database.
	FieldSubscriptionPlan = "subscription_plan"
	// FieldExpiredAt holds the string denoting the expired_at field in the database.
	FieldExpiredAt = "expired_at"
	// FieldLastLoginTime holds the string denoting the last_login_time field in the database.
	FieldLastLoginTime = "last_login_time"
	// FieldLastLoginIP holds the string denoting the last_login_ip field in the database.
	FieldLastLoginIP = "last_login_ip"
	// Table holds the table name of the tenant in the database.
	Table = "sys_tenants"
)

// Columns holds all SQL columns for tenant fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldDeleteTime,
	FieldCreateBy,
	FieldUpdateBy,
	FieldRemark,
	FieldName,
	FieldCode,
	FieldLogoURL,
	FieldIndustry,
	FieldAdminUserID,
	FieldStatus,
	FieldType,
	FieldAuditStatus,
	FieldSubscriptionAt,
	FieldUnsubscribeAt,
	FieldSubscriptionPlan,
	FieldExpiredAt,
	FieldLastLoginTime,
	FieldLastLoginIP,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRemark holds the default value on creation for the "remark" field.
	DefaultRemark string
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(uint32) error
)

// Status defines the type for the "status" enum field.
type Status string

// StatusOn is the default value of the Status enum.
const DefaultStatus = StatusOn

// Status values.
const (
	StatusOn      Status = "ON"
	StatusOff     Status = "OFF"
	StatusExpired Status = "EXPIRED"
	StatusFreeze  Status = "FREEZE"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusOn, StatusOff, StatusExpired, StatusFreeze:
		return nil
	default:
		return fmt.Errorf("tenant: invalid enum value for status field: %q", s)
	}
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeTrial    Type = "TRIAL"
	TypePaid     Type = "PAID"
	TypeInternal Type = "INTERNAL"
	TypePartner  Type = "PARTNER"
	TypeCustom   Type = "CUSTOM"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeTrial, TypePaid, TypeInternal, TypePartner, TypeCustom:
		return nil
	default:
		return fmt.Errorf("tenant: invalid enum value for type field: %q", _type)
	}
}

// AuditStatus defines the type for the "audit_status" enum field.
type AuditStatus string

// AuditStatus values.
const (
	AuditStatusPending  AuditStatus = "PENDING"
	AuditStatusApproved AuditStatus = "APPROVED"
	AuditStatusRejected AuditStatus = "REJECTED"
)

func (as AuditStatus) String() string {
	return string(as)
}

// AuditStatusValidator is a validator for the "audit_status" field enum values. It is called by the builders before save.
func AuditStatusValidator(as AuditStatus) error {
	switch as {
	case AuditStatusPending, AuditStatusApproved, AuditStatusRejected:
		return nil
	default:
		return fmt.Errorf("tenant: invalid enum value for audit_status field: %q", as)
	}
}

// OrderOption defines the ordering options for the Tenant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByLogoURL orders the results by the logo_url field.
func ByLogoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoURL, opts...).ToFunc()
}

// ByIndustry orders the results by the industry field.
func ByIndustry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndustry, opts...).ToFunc()
}

// ByAdminUserID orders the results by the admin_user_id field.
func ByAdminUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdminUserID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByAuditStatus orders the results by the audit_status field.
func ByAuditStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuditStatus, opts...).ToFunc()
}

// BySubscriptionAt orders the results by the subscription_at field.
func BySubscriptionAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionAt, opts...).ToFunc()
}

// ByUnsubscribeAt orders the results by the unsubscribe_at field.
func ByUnsubscribeAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnsubscribeAt, opts...).ToFunc()
}

// BySubscriptionPlan orders the results by the subscription_plan field.
func BySubscriptionPlan(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionPlan, opts...).ToFunc()
}

// ByExpiredAt orders the results by the expired_at field.
func ByExpiredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiredAt, opts...).ToFunc()
}

// ByLastLoginTime orders the results by the last_login_time field.
func ByLastLoginTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginTime, opts...).ToFunc()
}

// ByLastLoginIP orders the results by the last_login_ip field.
func ByLastLoginIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginIP, opts...).ToFunc()
}

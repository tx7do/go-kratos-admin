// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/language"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 语言表
type Language struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint32 `json:"id,omitempty"`
	// 创建时间
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建者ID
	CreatedBy *uint32 `json:"created_by,omitempty"`
	// 更新者ID
	UpdatedBy *uint32 `json:"updated_by,omitempty"`
	// 删除者ID
	DeletedBy *uint32 `json:"deleted_by,omitempty"`
	// 排序顺序，值越小越靠前
	SortOrder *int32 `json:"sort_order,omitempty"`
	// 是否启用
	IsEnabled *bool `json:"is_enabled,omitempty"`
	// 标准语言代码
	LanguageCode *string `json:"language_code,omitempty"`
	// 语言名称
	LanguageName *string `json:"language_name,omitempty"`
	// 本地语言名称
	NativeName *string `json:"native_name,omitempty"`
	// 是否为默认语言
	IsDefault    *bool `json:"is_default,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Language) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case language.FieldIsEnabled, language.FieldIsDefault:
			values[i] = new(sql.NullBool)
		case language.FieldID, language.FieldCreatedBy, language.FieldUpdatedBy, language.FieldDeletedBy, language.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case language.FieldLanguageCode, language.FieldLanguageName, language.FieldNativeName:
			values[i] = new(sql.NullString)
		case language.FieldCreatedAt, language.FieldUpdatedAt, language.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Language fields.
func (_m *Language) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case language.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint32(value.Int64)
		case language.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = new(time.Time)
				*_m.CreatedAt = value.Time
			}
		case language.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = new(time.Time)
				*_m.UpdatedAt = value.Time
			}
		case language.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case language.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = new(uint32)
				*_m.CreatedBy = uint32(value.Int64)
			}
		case language.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = new(uint32)
				*_m.UpdatedBy = uint32(value.Int64)
			}
		case language.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = new(uint32)
				*_m.DeletedBy = uint32(value.Int64)
			}
		case language.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				_m.SortOrder = new(int32)
				*_m.SortOrder = int32(value.Int64)
			}
		case language.FieldIsEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enabled", values[i])
			} else if value.Valid {
				_m.IsEnabled = new(bool)
				*_m.IsEnabled = value.Bool
			}
		case language.FieldLanguageCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_code", values[i])
			} else if value.Valid {
				_m.LanguageCode = new(string)
				*_m.LanguageCode = value.String
			}
		case language.FieldLanguageName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_name", values[i])
			} else if value.Valid {
				_m.LanguageName = new(string)
				*_m.LanguageName = value.String
			}
		case language.FieldNativeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field native_name", values[i])
			} else if value.Valid {
				_m.NativeName = new(string)
				*_m.NativeName = value.String
			}
		case language.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				_m.IsDefault = new(bool)
				*_m.IsDefault = value.Bool
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Language.
// This includes values selected through modifiers, order, etc.
func (_m *Language) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Language.
// Note that you need to call Language.Unwrap() before calling this method if this Language
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Language) Update() *LanguageUpdateOne {
	return NewLanguageClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Language entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Language) Unwrap() *Language {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Language is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Language) String() string {
	var builder strings.Builder
	builder.WriteString("Language(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	if v := _m.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.CreatedBy; v != nil {
		builder.WriteString("created_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.SortOrder; v != nil {
		builder.WriteString("sort_order=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.IsEnabled; v != nil {
		builder.WriteString("is_enabled=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.LanguageCode; v != nil {
		builder.WriteString("language_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.LanguageName; v != nil {
		builder.WriteString("language_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.NativeName; v != nil {
		builder.WriteString("native_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.IsDefault; v != nil {
		builder.WriteString("is_default=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Languages is a parsable slice of Language.
type Languages []*Language

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/dictitem"
	"kratos-admin/app/admin/service/internal/data/ent/dictmain"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictMainUpdate is the builder for updating DictMain entities.
type DictMainUpdate struct {
	config
	hooks     []Hook
	mutation  *DictMainMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DictMainUpdate builder.
func (_u *DictMainUpdate) Where(ps ...predicate.DictMain) *DictMainUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *DictMainUpdate) SetUpdateTime(v time.Time) *DictMainUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *DictMainUpdate) SetNillableUpdateTime(v *time.Time) *DictMainUpdate {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *DictMainUpdate) ClearUpdateTime() *DictMainUpdate {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *DictMainUpdate) SetDeleteTime(v time.Time) *DictMainUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *DictMainUpdate) SetNillableDeleteTime(v *time.Time) *DictMainUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *DictMainUpdate) ClearDeleteTime() *DictMainUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *DictMainUpdate) SetCreateBy(v uint32) *DictMainUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *DictMainUpdate) SetNillableCreateBy(v *uint32) *DictMainUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *DictMainUpdate) AddCreateBy(v int32) *DictMainUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *DictMainUpdate) ClearCreateBy() *DictMainUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *DictMainUpdate) SetUpdateBy(v uint32) *DictMainUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *DictMainUpdate) SetNillableUpdateBy(v *uint32) *DictMainUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *DictMainUpdate) AddUpdateBy(v int32) *DictMainUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *DictMainUpdate) ClearUpdateBy() *DictMainUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *DictMainUpdate) SetRemark(v string) *DictMainUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *DictMainUpdate) SetNillableRemark(v *string) *DictMainUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *DictMainUpdate) ClearRemark() *DictMainUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetCode sets the "code" field.
func (_u *DictMainUpdate) SetCode(v string) *DictMainUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *DictMainUpdate) SetNillableCode(v *string) *DictMainUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *DictMainUpdate) ClearCode() *DictMainUpdate {
	_u.mutation.ClearCode()
	return _u
}

// SetName sets the "name" field.
func (_u *DictMainUpdate) SetName(v string) *DictMainUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DictMainUpdate) SetNillableName(v *string) *DictMainUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *DictMainUpdate) ClearName() *DictMainUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetSortID sets the "sort_id" field.
func (_u *DictMainUpdate) SetSortID(v int32) *DictMainUpdate {
	_u.mutation.ResetSortID()
	_u.mutation.SetSortID(v)
	return _u
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (_u *DictMainUpdate) SetNillableSortID(v *int32) *DictMainUpdate {
	if v != nil {
		_u.SetSortID(*v)
	}
	return _u
}

// AddSortID adds value to the "sort_id" field.
func (_u *DictMainUpdate) AddSortID(v int32) *DictMainUpdate {
	_u.mutation.AddSortID(v)
	return _u
}

// ClearSortID clears the value of the "sort_id" field.
func (_u *DictMainUpdate) ClearSortID() *DictMainUpdate {
	_u.mutation.ClearSortID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *DictMainUpdate) SetStatus(v dictmain.Status) *DictMainUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DictMainUpdate) SetNillableStatus(v *dictmain.Status) *DictMainUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *DictMainUpdate) ClearStatus() *DictMainUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// AddItemIDs adds the "items" edge to the DictItem entity by IDs.
func (_u *DictMainUpdate) AddItemIDs(ids ...uint32) *DictMainUpdate {
	_u.mutation.AddItemIDs(ids...)
	return _u
}

// AddItems adds the "items" edges to the DictItem entity.
func (_u *DictMainUpdate) AddItems(v ...*DictItem) *DictMainUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddItemIDs(ids...)
}

// Mutation returns the DictMainMutation object of the builder.
func (_u *DictMainUpdate) Mutation() *DictMainMutation {
	return _u.mutation
}

// ClearItems clears all "items" edges to the DictItem entity.
func (_u *DictMainUpdate) ClearItems() *DictMainUpdate {
	_u.mutation.ClearItems()
	return _u
}

// RemoveItemIDs removes the "items" edge to DictItem entities by IDs.
func (_u *DictMainUpdate) RemoveItemIDs(ids ...uint32) *DictMainUpdate {
	_u.mutation.RemoveItemIDs(ids...)
	return _u
}

// RemoveItems removes "items" edges to DictItem entities.
func (_u *DictMainUpdate) RemoveItems(v ...*DictItem) *DictMainUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DictMainUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DictMainUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DictMainUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DictMainUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DictMainUpdate) check() error {
	if v, ok := _u.mutation.Code(); ok {
		if err := dictmain.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DictMain.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := dictmain.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DictMain.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := dictmain.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DictMain.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DictMainUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictMainUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DictMainUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dictmain.Table, dictmain.Columns, sqlgraph.NewFieldSpec(dictmain.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(dictmain.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(dictmain.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(dictmain.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(dictmain.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(dictmain.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(dictmain.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(dictmain.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(dictmain.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(dictmain.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(dictmain.FieldUpdateBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(dictmain.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(dictmain.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(dictmain.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(dictmain.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(dictmain.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(dictmain.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(dictmain.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(dictmain.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.SortID(); ok {
		_spec.SetField(dictmain.FieldSortID, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortID(); ok {
		_spec.AddField(dictmain.FieldSortID, field.TypeInt32, value)
	}
	if _u.mutation.SortIDCleared() {
		_spec.ClearField(dictmain.FieldSortID, field.TypeInt32)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(dictmain.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(dictmain.FieldStatus, field.TypeEnum)
	}
	if _u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dictmain.ItemsTable,
			Columns: []string{dictmain.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictitem.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedItemsIDs(); len(nodes) > 0 && !_u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dictmain.ItemsTable,
			Columns: []string{dictmain.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictitem.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dictmain.ItemsTable,
			Columns: []string{dictmain.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictitem.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictmain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DictMainUpdateOne is the builder for updating a single DictMain entity.
type DictMainUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DictMainMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (_u *DictMainUpdateOne) SetUpdateTime(v time.Time) *DictMainUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *DictMainUpdateOne) SetNillableUpdateTime(v *time.Time) *DictMainUpdateOne {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *DictMainUpdateOne) ClearUpdateTime() *DictMainUpdateOne {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *DictMainUpdateOne) SetDeleteTime(v time.Time) *DictMainUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *DictMainUpdateOne) SetNillableDeleteTime(v *time.Time) *DictMainUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *DictMainUpdateOne) ClearDeleteTime() *DictMainUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *DictMainUpdateOne) SetCreateBy(v uint32) *DictMainUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *DictMainUpdateOne) SetNillableCreateBy(v *uint32) *DictMainUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *DictMainUpdateOne) AddCreateBy(v int32) *DictMainUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *DictMainUpdateOne) ClearCreateBy() *DictMainUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *DictMainUpdateOne) SetUpdateBy(v uint32) *DictMainUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *DictMainUpdateOne) SetNillableUpdateBy(v *uint32) *DictMainUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *DictMainUpdateOne) AddUpdateBy(v int32) *DictMainUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *DictMainUpdateOne) ClearUpdateBy() *DictMainUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *DictMainUpdateOne) SetRemark(v string) *DictMainUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *DictMainUpdateOne) SetNillableRemark(v *string) *DictMainUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *DictMainUpdateOne) ClearRemark() *DictMainUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetCode sets the "code" field.
func (_u *DictMainUpdateOne) SetCode(v string) *DictMainUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *DictMainUpdateOne) SetNillableCode(v *string) *DictMainUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *DictMainUpdateOne) ClearCode() *DictMainUpdateOne {
	_u.mutation.ClearCode()
	return _u
}

// SetName sets the "name" field.
func (_u *DictMainUpdateOne) SetName(v string) *DictMainUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DictMainUpdateOne) SetNillableName(v *string) *DictMainUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *DictMainUpdateOne) ClearName() *DictMainUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetSortID sets the "sort_id" field.
func (_u *DictMainUpdateOne) SetSortID(v int32) *DictMainUpdateOne {
	_u.mutation.ResetSortID()
	_u.mutation.SetSortID(v)
	return _u
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (_u *DictMainUpdateOne) SetNillableSortID(v *int32) *DictMainUpdateOne {
	if v != nil {
		_u.SetSortID(*v)
	}
	return _u
}

// AddSortID adds value to the "sort_id" field.
func (_u *DictMainUpdateOne) AddSortID(v int32) *DictMainUpdateOne {
	_u.mutation.AddSortID(v)
	return _u
}

// ClearSortID clears the value of the "sort_id" field.
func (_u *DictMainUpdateOne) ClearSortID() *DictMainUpdateOne {
	_u.mutation.ClearSortID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *DictMainUpdateOne) SetStatus(v dictmain.Status) *DictMainUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DictMainUpdateOne) SetNillableStatus(v *dictmain.Status) *DictMainUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *DictMainUpdateOne) ClearStatus() *DictMainUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// AddItemIDs adds the "items" edge to the DictItem entity by IDs.
func (_u *DictMainUpdateOne) AddItemIDs(ids ...uint32) *DictMainUpdateOne {
	_u.mutation.AddItemIDs(ids...)
	return _u
}

// AddItems adds the "items" edges to the DictItem entity.
func (_u *DictMainUpdateOne) AddItems(v ...*DictItem) *DictMainUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddItemIDs(ids...)
}

// Mutation returns the DictMainMutation object of the builder.
func (_u *DictMainUpdateOne) Mutation() *DictMainMutation {
	return _u.mutation
}

// ClearItems clears all "items" edges to the DictItem entity.
func (_u *DictMainUpdateOne) ClearItems() *DictMainUpdateOne {
	_u.mutation.ClearItems()
	return _u
}

// RemoveItemIDs removes the "items" edge to DictItem entities by IDs.
func (_u *DictMainUpdateOne) RemoveItemIDs(ids ...uint32) *DictMainUpdateOne {
	_u.mutation.RemoveItemIDs(ids...)
	return _u
}

// RemoveItems removes "items" edges to DictItem entities.
func (_u *DictMainUpdateOne) RemoveItems(v ...*DictItem) *DictMainUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveItemIDs(ids...)
}

// Where appends a list predicates to the DictMainUpdate builder.
func (_u *DictMainUpdateOne) Where(ps ...predicate.DictMain) *DictMainUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DictMainUpdateOne) Select(field string, fields ...string) *DictMainUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated DictMain entity.
func (_u *DictMainUpdateOne) Save(ctx context.Context) (*DictMain, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DictMainUpdateOne) SaveX(ctx context.Context) *DictMain {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DictMainUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DictMainUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DictMainUpdateOne) check() error {
	if v, ok := _u.mutation.Code(); ok {
		if err := dictmain.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DictMain.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := dictmain.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DictMain.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := dictmain.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DictMain.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DictMainUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictMainUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DictMainUpdateOne) sqlSave(ctx context.Context) (_node *DictMain, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dictmain.Table, dictmain.Columns, sqlgraph.NewFieldSpec(dictmain.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DictMain.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dictmain.FieldID)
		for _, f := range fields {
			if !dictmain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dictmain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(dictmain.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(dictmain.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(dictmain.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(dictmain.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(dictmain.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(dictmain.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(dictmain.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(dictmain.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(dictmain.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(dictmain.FieldUpdateBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(dictmain.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(dictmain.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(dictmain.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(dictmain.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(dictmain.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(dictmain.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(dictmain.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(dictmain.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.SortID(); ok {
		_spec.SetField(dictmain.FieldSortID, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortID(); ok {
		_spec.AddField(dictmain.FieldSortID, field.TypeInt32, value)
	}
	if _u.mutation.SortIDCleared() {
		_spec.ClearField(dictmain.FieldSortID, field.TypeInt32)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(dictmain.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(dictmain.FieldStatus, field.TypeEnum)
	}
	if _u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dictmain.ItemsTable,
			Columns: []string{dictmain.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictitem.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedItemsIDs(); len(nodes) > 0 && !_u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dictmain.ItemsTable,
			Columns: []string{dictmain.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictitem.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dictmain.ItemsTable,
			Columns: []string{dictmain.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictitem.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &DictMain{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictmain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (_c *UserCreate) SetCreatedBy(v uint32) *UserCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *UserCreate) SetNillableCreatedBy(v *uint32) *UserCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *UserCreate) SetUpdatedBy(v uint32) *UserCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *UserCreate) SetNillableUpdatedBy(v *uint32) *UserCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *UserCreate) SetDeletedBy(v uint32) *UserCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *UserCreate) SetNillableDeletedBy(v *uint32) *UserCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserCreate) SetCreatedAt(v time.Time) *UserCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableCreatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *UserCreate) SetUpdatedAt(v time.Time) *UserCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableUpdatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *UserCreate) SetDeletedAt(v time.Time) *UserCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableDeletedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetRemark sets the "remark" field.
func (_c *UserCreate) SetRemark(v string) *UserCreate {
	_c.mutation.SetRemark(v)
	return _c
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_c *UserCreate) SetNillableRemark(v *string) *UserCreate {
	if v != nil {
		_c.SetRemark(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *UserCreate) SetTenantID(v uint32) *UserCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_c *UserCreate) SetNillableTenantID(v *uint32) *UserCreate {
	if v != nil {
		_c.SetTenantID(*v)
	}
	return _c
}

// SetUsername sets the "username" field.
func (_c *UserCreate) SetUsername(v string) *UserCreate {
	_c.mutation.SetUsername(v)
	return _c
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_c *UserCreate) SetNillableUsername(v *string) *UserCreate {
	if v != nil {
		_c.SetUsername(*v)
	}
	return _c
}

// SetNickname sets the "nickname" field.
func (_c *UserCreate) SetNickname(v string) *UserCreate {
	_c.mutation.SetNickname(v)
	return _c
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_c *UserCreate) SetNillableNickname(v *string) *UserCreate {
	if v != nil {
		_c.SetNickname(*v)
	}
	return _c
}

// SetRealname sets the "realname" field.
func (_c *UserCreate) SetRealname(v string) *UserCreate {
	_c.mutation.SetRealname(v)
	return _c
}

// SetNillableRealname sets the "realname" field if the given value is not nil.
func (_c *UserCreate) SetNillableRealname(v *string) *UserCreate {
	if v != nil {
		_c.SetRealname(*v)
	}
	return _c
}

// SetEmail sets the "email" field.
func (_c *UserCreate) SetEmail(v string) *UserCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_c *UserCreate) SetNillableEmail(v *string) *UserCreate {
	if v != nil {
		_c.SetEmail(*v)
	}
	return _c
}

// SetMobile sets the "mobile" field.
func (_c *UserCreate) SetMobile(v string) *UserCreate {
	_c.mutation.SetMobile(v)
	return _c
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (_c *UserCreate) SetNillableMobile(v *string) *UserCreate {
	if v != nil {
		_c.SetMobile(*v)
	}
	return _c
}

// SetTelephone sets the "telephone" field.
func (_c *UserCreate) SetTelephone(v string) *UserCreate {
	_c.mutation.SetTelephone(v)
	return _c
}

// SetNillableTelephone sets the "telephone" field if the given value is not nil.
func (_c *UserCreate) SetNillableTelephone(v *string) *UserCreate {
	if v != nil {
		_c.SetTelephone(*v)
	}
	return _c
}

// SetAvatar sets the "avatar" field.
func (_c *UserCreate) SetAvatar(v string) *UserCreate {
	_c.mutation.SetAvatar(v)
	return _c
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_c *UserCreate) SetNillableAvatar(v *string) *UserCreate {
	if v != nil {
		_c.SetAvatar(*v)
	}
	return _c
}

// SetAddress sets the "address" field.
func (_c *UserCreate) SetAddress(v string) *UserCreate {
	_c.mutation.SetAddress(v)
	return _c
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_c *UserCreate) SetNillableAddress(v *string) *UserCreate {
	if v != nil {
		_c.SetAddress(*v)
	}
	return _c
}

// SetRegion sets the "region" field.
func (_c *UserCreate) SetRegion(v string) *UserCreate {
	_c.mutation.SetRegion(v)
	return _c
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (_c *UserCreate) SetNillableRegion(v *string) *UserCreate {
	if v != nil {
		_c.SetRegion(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *UserCreate) SetDescription(v string) *UserCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *UserCreate) SetNillableDescription(v *string) *UserCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetGender sets the "gender" field.
func (_c *UserCreate) SetGender(v user.Gender) *UserCreate {
	_c.mutation.SetGender(v)
	return _c
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_c *UserCreate) SetNillableGender(v *user.Gender) *UserCreate {
	if v != nil {
		_c.SetGender(*v)
	}
	return _c
}

// SetAuthority sets the "authority" field.
func (_c *UserCreate) SetAuthority(v user.Authority) *UserCreate {
	_c.mutation.SetAuthority(v)
	return _c
}

// SetNillableAuthority sets the "authority" field if the given value is not nil.
func (_c *UserCreate) SetNillableAuthority(v *user.Authority) *UserCreate {
	if v != nil {
		_c.SetAuthority(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *UserCreate) SetStatus(v user.Status) *UserCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *UserCreate) SetNillableStatus(v *user.Status) *UserCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetLastLoginTime sets the "last_login_time" field.
func (_c *UserCreate) SetLastLoginTime(v time.Time) *UserCreate {
	_c.mutation.SetLastLoginTime(v)
	return _c
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (_c *UserCreate) SetNillableLastLoginTime(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetLastLoginTime(*v)
	}
	return _c
}

// SetLastLoginIP sets the "last_login_ip" field.
func (_c *UserCreate) SetLastLoginIP(v string) *UserCreate {
	_c.mutation.SetLastLoginIP(v)
	return _c
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (_c *UserCreate) SetNillableLastLoginIP(v *string) *UserCreate {
	if v != nil {
		_c.SetLastLoginIP(*v)
	}
	return _c
}

// SetOrgID sets the "org_id" field.
func (_c *UserCreate) SetOrgID(v uint32) *UserCreate {
	_c.mutation.SetOrgID(v)
	return _c
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (_c *UserCreate) SetNillableOrgID(v *uint32) *UserCreate {
	if v != nil {
		_c.SetOrgID(*v)
	}
	return _c
}

// SetDepartmentID sets the "department_id" field.
func (_c *UserCreate) SetDepartmentID(v uint32) *UserCreate {
	_c.mutation.SetDepartmentID(v)
	return _c
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (_c *UserCreate) SetNillableDepartmentID(v *uint32) *UserCreate {
	if v != nil {
		_c.SetDepartmentID(*v)
	}
	return _c
}

// SetPositionID sets the "position_id" field.
func (_c *UserCreate) SetPositionID(v uint32) *UserCreate {
	_c.mutation.SetPositionID(v)
	return _c
}

// SetNillablePositionID sets the "position_id" field if the given value is not nil.
func (_c *UserCreate) SetNillablePositionID(v *uint32) *UserCreate {
	if v != nil {
		_c.SetPositionID(*v)
	}
	return _c
}

// SetWorkID sets the "work_id" field.
func (_c *UserCreate) SetWorkID(v uint32) *UserCreate {
	_c.mutation.SetWorkID(v)
	return _c
}

// SetNillableWorkID sets the "work_id" field if the given value is not nil.
func (_c *UserCreate) SetNillableWorkID(v *uint32) *UserCreate {
	if v != nil {
		_c.SetWorkID(*v)
	}
	return _c
}

// SetRoleIds sets the "role_ids" field.
func (_c *UserCreate) SetRoleIds(v []int) *UserCreate {
	_c.mutation.SetRoleIds(v)
	return _c
}

// SetID sets the "id" field.
func (_c *UserCreate) SetID(v uint32) *UserCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the UserMutation object of the builder.
func (_c *UserCreate) Mutation() *UserMutation {
	return _c.mutation
}

// Save creates the User in the database.
func (_c *UserCreate) Save(ctx context.Context) (*User, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserCreate) SaveX(ctx context.Context) *User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserCreate) defaults() {
	if _, ok := _c.mutation.Mobile(); !ok {
		v := user.DefaultMobile
		_c.mutation.SetMobile(v)
	}
	if _, ok := _c.mutation.Telephone(); !ok {
		v := user.DefaultTelephone
		_c.mutation.SetTelephone(v)
	}
	if _, ok := _c.mutation.Address(); !ok {
		v := user.DefaultAddress
		_c.mutation.SetAddress(v)
	}
	if _, ok := _c.mutation.Region(); !ok {
		v := user.DefaultRegion
		_c.mutation.SetRegion(v)
	}
	if _, ok := _c.mutation.Gender(); !ok {
		v := user.DefaultGender
		_c.mutation.SetGender(v)
	}
	if _, ok := _c.mutation.Authority(); !ok {
		v := user.DefaultAuthority
		_c.mutation.SetAuthority(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := user.DefaultStatus
		_c.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserCreate) check() error {
	if v, ok := _c.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Mobile(); ok {
		if err := user.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "User.mobile": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Telephone(); ok {
		if err := user.TelephoneValidator(v); err != nil {
			return &ValidationError{Name: "telephone", err: fmt.Errorf(`ent: validator failed for field "User.telephone": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Description(); ok {
		if err := user.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "User.description": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "User.gender": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Authority(); !ok {
		return &ValidationError{Name: "authority", err: errors.New(`ent: missing required field "User.authority"`)}
	}
	if v, ok := _c.mutation.Authority(); ok {
		if err := user.AuthorityValidator(v); err != nil {
			return &ValidationError{Name: "authority", err: fmt.Errorf(`ent: validator failed for field "User.authority": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := user.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "User.id": %w`, err)}
		}
	}
	return nil
}

func (_c *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(user.FieldCreatedBy, field.TypeUint32, value)
		_node.CreatedBy = &value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(user.FieldUpdatedBy, field.TypeUint32, value)
		_node.UpdatedBy = &value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(user.FieldDeletedBy, field.TypeUint32, value)
		_node.DeletedBy = &value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.Remark(); ok {
		_spec.SetField(user.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(user.FieldTenantID, field.TypeUint32, value)
		_node.TenantID = &value
	}
	if value, ok := _c.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = &value
	}
	if value, ok := _c.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
		_node.Nickname = &value
	}
	if value, ok := _c.mutation.Realname(); ok {
		_spec.SetField(user.FieldRealname, field.TypeString, value)
		_node.Realname = &value
	}
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := _c.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
		_node.Mobile = &value
	}
	if value, ok := _c.mutation.Telephone(); ok {
		_spec.SetField(user.FieldTelephone, field.TypeString, value)
		_node.Telephone = &value
	}
	if value, ok := _c.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
		_node.Avatar = &value
	}
	if value, ok := _c.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
		_node.Address = &value
	}
	if value, ok := _c.mutation.Region(); ok {
		_spec.SetField(user.FieldRegion, field.TypeString, value)
		_node.Region = &value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
		_node.Gender = &value
	}
	if value, ok := _c.mutation.Authority(); ok {
		_spec.SetField(user.FieldAuthority, field.TypeEnum, value)
		_node.Authority = &value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
		_node.Status = &value
	}
	if value, ok := _c.mutation.LastLoginTime(); ok {
		_spec.SetField(user.FieldLastLoginTime, field.TypeTime, value)
		_node.LastLoginTime = &value
	}
	if value, ok := _c.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
		_node.LastLoginIP = &value
	}
	if value, ok := _c.mutation.OrgID(); ok {
		_spec.SetField(user.FieldOrgID, field.TypeUint32, value)
		_node.OrgID = &value
	}
	if value, ok := _c.mutation.DepartmentID(); ok {
		_spec.SetField(user.FieldDepartmentID, field.TypeUint32, value)
		_node.DepartmentID = &value
	}
	if value, ok := _c.mutation.PositionID(); ok {
		_spec.SetField(user.FieldPositionID, field.TypeUint32, value)
		_node.PositionID = &value
	}
	if value, ok := _c.mutation.WorkID(); ok {
		_spec.SetField(user.FieldWorkID, field.TypeUint32, value)
		_node.WorkID = &value
	}
	if value, ok := _c.mutation.RoleIds(); ok {
		_spec.SetField(user.FieldRoleIds, field.TypeJSON, value)
		_node.RoleIds = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (_c *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	_c.conflict = opts
	return &UserUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: _c,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *UserUpsert) SetCreatedBy(v uint32) *UserUpsert {
	u.Set(user.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *UserUpsert) UpdateCreatedBy() *UserUpsert {
	u.SetExcluded(user.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *UserUpsert) AddCreatedBy(v uint32) *UserUpsert {
	u.Add(user.FieldCreatedBy, v)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *UserUpsert) ClearCreatedBy() *UserUpsert {
	u.SetNull(user.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserUpsert) SetUpdatedBy(v uint32) *UserUpsert {
	u.Set(user.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedBy() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserUpsert) AddUpdatedBy(v uint32) *UserUpsert {
	u.Add(user.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *UserUpsert) ClearUpdatedBy() *UserUpsert {
	u.SetNull(user.FieldUpdatedBy)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *UserUpsert) SetDeletedBy(v uint32) *UserUpsert {
	u.Set(user.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *UserUpsert) UpdateDeletedBy() *UserUpsert {
	u.SetExcluded(user.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *UserUpsert) AddDeletedBy(v uint32) *UserUpsert {
	u.Add(user.FieldDeletedBy, v)
	return u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *UserUpsert) ClearDeletedBy() *UserUpsert {
	u.SetNull(user.FieldDeletedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserUpsert) ClearUpdatedAt() *UserUpsert {
	u.SetNull(user.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsert) SetDeletedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateDeletedAt() *UserUpsert {
	u.SetExcluded(user.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsert) ClearDeletedAt() *UserUpsert {
	u.SetNull(user.FieldDeletedAt)
	return u
}

// SetRemark sets the "remark" field.
func (u *UserUpsert) SetRemark(v string) *UserUpsert {
	u.Set(user.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *UserUpsert) UpdateRemark() *UserUpsert {
	u.SetExcluded(user.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *UserUpsert) ClearRemark() *UserUpsert {
	u.SetNull(user.FieldRemark)
	return u
}

// SetNickname sets the "nickname" field.
func (u *UserUpsert) SetNickname(v string) *UserUpsert {
	u.Set(user.FieldNickname, v)
	return u
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *UserUpsert) UpdateNickname() *UserUpsert {
	u.SetExcluded(user.FieldNickname)
	return u
}

// ClearNickname clears the value of the "nickname" field.
func (u *UserUpsert) ClearNickname() *UserUpsert {
	u.SetNull(user.FieldNickname)
	return u
}

// SetRealname sets the "realname" field.
func (u *UserUpsert) SetRealname(v string) *UserUpsert {
	u.Set(user.FieldRealname, v)
	return u
}

// UpdateRealname sets the "realname" field to the value that was provided on create.
func (u *UserUpsert) UpdateRealname() *UserUpsert {
	u.SetExcluded(user.FieldRealname)
	return u
}

// ClearRealname clears the value of the "realname" field.
func (u *UserUpsert) ClearRealname() *UserUpsert {
	u.SetNull(user.FieldRealname)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsert) ClearEmail() *UserUpsert {
	u.SetNull(user.FieldEmail)
	return u
}

// SetMobile sets the "mobile" field.
func (u *UserUpsert) SetMobile(v string) *UserUpsert {
	u.Set(user.FieldMobile, v)
	return u
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *UserUpsert) UpdateMobile() *UserUpsert {
	u.SetExcluded(user.FieldMobile)
	return u
}

// ClearMobile clears the value of the "mobile" field.
func (u *UserUpsert) ClearMobile() *UserUpsert {
	u.SetNull(user.FieldMobile)
	return u
}

// SetTelephone sets the "telephone" field.
func (u *UserUpsert) SetTelephone(v string) *UserUpsert {
	u.Set(user.FieldTelephone, v)
	return u
}

// UpdateTelephone sets the "telephone" field to the value that was provided on create.
func (u *UserUpsert) UpdateTelephone() *UserUpsert {
	u.SetExcluded(user.FieldTelephone)
	return u
}

// ClearTelephone clears the value of the "telephone" field.
func (u *UserUpsert) ClearTelephone() *UserUpsert {
	u.SetNull(user.FieldTelephone)
	return u
}

// SetAvatar sets the "avatar" field.
func (u *UserUpsert) SetAvatar(v string) *UserUpsert {
	u.Set(user.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserUpsert) UpdateAvatar() *UserUpsert {
	u.SetExcluded(user.FieldAvatar)
	return u
}

// ClearAvatar clears the value of the "avatar" field.
func (u *UserUpsert) ClearAvatar() *UserUpsert {
	u.SetNull(user.FieldAvatar)
	return u
}

// SetAddress sets the "address" field.
func (u *UserUpsert) SetAddress(v string) *UserUpsert {
	u.Set(user.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *UserUpsert) UpdateAddress() *UserUpsert {
	u.SetExcluded(user.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *UserUpsert) ClearAddress() *UserUpsert {
	u.SetNull(user.FieldAddress)
	return u
}

// SetRegion sets the "region" field.
func (u *UserUpsert) SetRegion(v string) *UserUpsert {
	u.Set(user.FieldRegion, v)
	return u
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *UserUpsert) UpdateRegion() *UserUpsert {
	u.SetExcluded(user.FieldRegion)
	return u
}

// ClearRegion clears the value of the "region" field.
func (u *UserUpsert) ClearRegion() *UserUpsert {
	u.SetNull(user.FieldRegion)
	return u
}

// SetDescription sets the "description" field.
func (u *UserUpsert) SetDescription(v string) *UserUpsert {
	u.Set(user.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UserUpsert) UpdateDescription() *UserUpsert {
	u.SetExcluded(user.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *UserUpsert) ClearDescription() *UserUpsert {
	u.SetNull(user.FieldDescription)
	return u
}

// SetGender sets the "gender" field.
func (u *UserUpsert) SetGender(v user.Gender) *UserUpsert {
	u.Set(user.FieldGender, v)
	return u
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *UserUpsert) UpdateGender() *UserUpsert {
	u.SetExcluded(user.FieldGender)
	return u
}

// ClearGender clears the value of the "gender" field.
func (u *UserUpsert) ClearGender() *UserUpsert {
	u.SetNull(user.FieldGender)
	return u
}

// SetStatus sets the "status" field.
func (u *UserUpsert) SetStatus(v user.Status) *UserUpsert {
	u.Set(user.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsert) UpdateStatus() *UserUpsert {
	u.SetExcluded(user.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *UserUpsert) ClearStatus() *UserUpsert {
	u.SetNull(user.FieldStatus)
	return u
}

// SetLastLoginTime sets the "last_login_time" field.
func (u *UserUpsert) SetLastLoginTime(v time.Time) *UserUpsert {
	u.Set(user.FieldLastLoginTime, v)
	return u
}

// UpdateLastLoginTime sets the "last_login_time" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastLoginTime() *UserUpsert {
	u.SetExcluded(user.FieldLastLoginTime)
	return u
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (u *UserUpsert) ClearLastLoginTime() *UserUpsert {
	u.SetNull(user.FieldLastLoginTime)
	return u
}

// SetLastLoginIP sets the "last_login_ip" field.
func (u *UserUpsert) SetLastLoginIP(v string) *UserUpsert {
	u.Set(user.FieldLastLoginIP, v)
	return u
}

// UpdateLastLoginIP sets the "last_login_ip" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastLoginIP() *UserUpsert {
	u.SetExcluded(user.FieldLastLoginIP)
	return u
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (u *UserUpsert) ClearLastLoginIP() *UserUpsert {
	u.SetNull(user.FieldLastLoginIP)
	return u
}

// SetOrgID sets the "org_id" field.
func (u *UserUpsert) SetOrgID(v uint32) *UserUpsert {
	u.Set(user.FieldOrgID, v)
	return u
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateOrgID() *UserUpsert {
	u.SetExcluded(user.FieldOrgID)
	return u
}

// AddOrgID adds v to the "org_id" field.
func (u *UserUpsert) AddOrgID(v uint32) *UserUpsert {
	u.Add(user.FieldOrgID, v)
	return u
}

// ClearOrgID clears the value of the "org_id" field.
func (u *UserUpsert) ClearOrgID() *UserUpsert {
	u.SetNull(user.FieldOrgID)
	return u
}

// SetDepartmentID sets the "department_id" field.
func (u *UserUpsert) SetDepartmentID(v uint32) *UserUpsert {
	u.Set(user.FieldDepartmentID, v)
	return u
}

// UpdateDepartmentID sets the "department_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateDepartmentID() *UserUpsert {
	u.SetExcluded(user.FieldDepartmentID)
	return u
}

// AddDepartmentID adds v to the "department_id" field.
func (u *UserUpsert) AddDepartmentID(v uint32) *UserUpsert {
	u.Add(user.FieldDepartmentID, v)
	return u
}

// ClearDepartmentID clears the value of the "department_id" field.
func (u *UserUpsert) ClearDepartmentID() *UserUpsert {
	u.SetNull(user.FieldDepartmentID)
	return u
}

// SetPositionID sets the "position_id" field.
func (u *UserUpsert) SetPositionID(v uint32) *UserUpsert {
	u.Set(user.FieldPositionID, v)
	return u
}

// UpdatePositionID sets the "position_id" field to the value that was provided on create.
func (u *UserUpsert) UpdatePositionID() *UserUpsert {
	u.SetExcluded(user.FieldPositionID)
	return u
}

// AddPositionID adds v to the "position_id" field.
func (u *UserUpsert) AddPositionID(v uint32) *UserUpsert {
	u.Add(user.FieldPositionID, v)
	return u
}

// ClearPositionID clears the value of the "position_id" field.
func (u *UserUpsert) ClearPositionID() *UserUpsert {
	u.SetNull(user.FieldPositionID)
	return u
}

// SetWorkID sets the "work_id" field.
func (u *UserUpsert) SetWorkID(v uint32) *UserUpsert {
	u.Set(user.FieldWorkID, v)
	return u
}

// UpdateWorkID sets the "work_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateWorkID() *UserUpsert {
	u.SetExcluded(user.FieldWorkID)
	return u
}

// AddWorkID adds v to the "work_id" field.
func (u *UserUpsert) AddWorkID(v uint32) *UserUpsert {
	u.Add(user.FieldWorkID, v)
	return u
}

// ClearWorkID clears the value of the "work_id" field.
func (u *UserUpsert) ClearWorkID() *UserUpsert {
	u.SetNull(user.FieldWorkID)
	return u
}

// SetRoleIds sets the "role_ids" field.
func (u *UserUpsert) SetRoleIds(v []int) *UserUpsert {
	u.Set(user.FieldRoleIds, v)
	return u
}

// UpdateRoleIds sets the "role_ids" field to the value that was provided on create.
func (u *UserUpsert) UpdateRoleIds() *UserUpsert {
	u.SetExcluded(user.FieldRoleIds)
	return u
}

// ClearRoleIds clears the value of the "role_ids" field.
func (u *UserUpsert) ClearRoleIds() *UserUpsert {
	u.SetNull(user.FieldRoleIds)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(user.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(user.FieldTenantID)
		}
		if _, exists := u.create.mutation.Username(); exists {
			s.SetIgnore(user.FieldUsername)
		}
		if _, exists := u.create.mutation.Authority(); exists {
			s.SetIgnore(user.FieldAuthority)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *UserUpsertOne) SetCreatedBy(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *UserUpsertOne) AddCreatedBy(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCreatedBy() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *UserUpsertOne) ClearCreatedBy() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserUpsertOne) SetUpdatedBy(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserUpsertOne) AddUpdatedBy(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedBy() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *UserUpsertOne) ClearUpdatedBy() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *UserUpsertOne) SetDeletedBy(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *UserUpsertOne) AddDeletedBy(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDeletedBy() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *UserUpsertOne) ClearDeletedBy() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeletedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserUpsertOne) ClearUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertOne) SetDeletedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsertOne) ClearDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetRemark sets the "remark" field.
func (u *UserUpsertOne) SetRemark(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRemark() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *UserUpsertOne) ClearRemark() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearRemark()
	})
}

// SetNickname sets the "nickname" field.
func (u *UserUpsertOne) SetNickname(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateNickname() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNickname()
	})
}

// ClearNickname clears the value of the "nickname" field.
func (u *UserUpsertOne) ClearNickname() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearNickname()
	})
}

// SetRealname sets the "realname" field.
func (u *UserUpsertOne) SetRealname(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRealname(v)
	})
}

// UpdateRealname sets the "realname" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRealname() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRealname()
	})
}

// ClearRealname clears the value of the "realname" field.
func (u *UserUpsertOne) ClearRealname() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearRealname()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsertOne) ClearEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmail()
	})
}

// SetMobile sets the "mobile" field.
func (u *UserUpsertOne) SetMobile(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateMobile() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMobile()
	})
}

// ClearMobile clears the value of the "mobile" field.
func (u *UserUpsertOne) ClearMobile() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearMobile()
	})
}

// SetTelephone sets the "telephone" field.
func (u *UserUpsertOne) SetTelephone(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetTelephone(v)
	})
}

// UpdateTelephone sets the "telephone" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateTelephone() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTelephone()
	})
}

// ClearTelephone clears the value of the "telephone" field.
func (u *UserUpsertOne) ClearTelephone() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearTelephone()
	})
}

// SetAvatar sets the "avatar" field.
func (u *UserUpsertOne) SetAvatar(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAvatar() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *UserUpsertOne) ClearAvatar() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAvatar()
	})
}

// SetAddress sets the "address" field.
func (u *UserUpsertOne) SetAddress(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAddress() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *UserUpsertOne) ClearAddress() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAddress()
	})
}

// SetRegion sets the "region" field.
func (u *UserUpsertOne) SetRegion(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRegion() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRegion()
	})
}

// ClearRegion clears the value of the "region" field.
func (u *UserUpsertOne) ClearRegion() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearRegion()
	})
}

// SetDescription sets the "description" field.
func (u *UserUpsertOne) SetDescription(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDescription() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *UserUpsertOne) ClearDescription() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearDescription()
	})
}

// SetGender sets the "gender" field.
func (u *UserUpsertOne) SetGender(v user.Gender) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateGender() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGender()
	})
}

// ClearGender clears the value of the "gender" field.
func (u *UserUpsertOne) ClearGender() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearGender()
	})
}

// SetStatus sets the "status" field.
func (u *UserUpsertOne) SetStatus(v user.Status) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *UserUpsertOne) ClearStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearStatus()
	})
}

// SetLastLoginTime sets the "last_login_time" field.
func (u *UserUpsertOne) SetLastLoginTime(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoginTime(v)
	})
}

// UpdateLastLoginTime sets the "last_login_time" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastLoginTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoginTime()
	})
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (u *UserUpsertOne) ClearLastLoginTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLoginTime()
	})
}

// SetLastLoginIP sets the "last_login_ip" field.
func (u *UserUpsertOne) SetLastLoginIP(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoginIP(v)
	})
}

// UpdateLastLoginIP sets the "last_login_ip" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastLoginIP() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoginIP()
	})
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (u *UserUpsertOne) ClearLastLoginIP() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLoginIP()
	})
}

// SetOrgID sets the "org_id" field.
func (u *UserUpsertOne) SetOrgID(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetOrgID(v)
	})
}

// AddOrgID adds v to the "org_id" field.
func (u *UserUpsertOne) AddOrgID(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddOrgID(v)
	})
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateOrgID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOrgID()
	})
}

// ClearOrgID clears the value of the "org_id" field.
func (u *UserUpsertOne) ClearOrgID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearOrgID()
	})
}

// SetDepartmentID sets the "department_id" field.
func (u *UserUpsertOne) SetDepartmentID(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDepartmentID(v)
	})
}

// AddDepartmentID adds v to the "department_id" field.
func (u *UserUpsertOne) AddDepartmentID(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddDepartmentID(v)
	})
}

// UpdateDepartmentID sets the "department_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDepartmentID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDepartmentID()
	})
}

// ClearDepartmentID clears the value of the "department_id" field.
func (u *UserUpsertOne) ClearDepartmentID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearDepartmentID()
	})
}

// SetPositionID sets the "position_id" field.
func (u *UserUpsertOne) SetPositionID(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPositionID(v)
	})
}

// AddPositionID adds v to the "position_id" field.
func (u *UserUpsertOne) AddPositionID(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddPositionID(v)
	})
}

// UpdatePositionID sets the "position_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePositionID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePositionID()
	})
}

// ClearPositionID clears the value of the "position_id" field.
func (u *UserUpsertOne) ClearPositionID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPositionID()
	})
}

// SetWorkID sets the "work_id" field.
func (u *UserUpsertOne) SetWorkID(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetWorkID(v)
	})
}

// AddWorkID adds v to the "work_id" field.
func (u *UserUpsertOne) AddWorkID(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddWorkID(v)
	})
}

// UpdateWorkID sets the "work_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateWorkID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateWorkID()
	})
}

// ClearWorkID clears the value of the "work_id" field.
func (u *UserUpsertOne) ClearWorkID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearWorkID()
	})
}

// SetRoleIds sets the "role_ids" field.
func (u *UserUpsertOne) SetRoleIds(v []int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRoleIds(v)
	})
}

// UpdateRoleIds sets the "role_ids" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRoleIds() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRoleIds()
	})
}

// ClearRoleIds clears the value of the "role_ids" field.
func (u *UserUpsertOne) ClearRoleIds() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearRoleIds()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (_c *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*User, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (_c *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	_c.conflict = opts
	return &UserUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: _c,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(user.FieldCreatedAt)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(user.FieldTenantID)
			}
			if _, exists := b.mutation.Username(); exists {
				s.SetIgnore(user.FieldUsername)
			}
			if _, exists := b.mutation.Authority(); exists {
				s.SetIgnore(user.FieldAuthority)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *UserUpsertBulk) SetCreatedBy(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *UserUpsertBulk) AddCreatedBy(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCreatedBy() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *UserUpsertBulk) ClearCreatedBy() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserUpsertBulk) SetUpdatedBy(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserUpsertBulk) AddUpdatedBy(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedBy() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *UserUpsertBulk) ClearUpdatedBy() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *UserUpsertBulk) SetDeletedBy(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *UserUpsertBulk) AddDeletedBy(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDeletedBy() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *UserUpsertBulk) ClearDeletedBy() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeletedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserUpsertBulk) ClearUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertBulk) SetDeletedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsertBulk) ClearDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetRemark sets the "remark" field.
func (u *UserUpsertBulk) SetRemark(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRemark() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *UserUpsertBulk) ClearRemark() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearRemark()
	})
}

// SetNickname sets the "nickname" field.
func (u *UserUpsertBulk) SetNickname(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateNickname() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNickname()
	})
}

// ClearNickname clears the value of the "nickname" field.
func (u *UserUpsertBulk) ClearNickname() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearNickname()
	})
}

// SetRealname sets the "realname" field.
func (u *UserUpsertBulk) SetRealname(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRealname(v)
	})
}

// UpdateRealname sets the "realname" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRealname() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRealname()
	})
}

// ClearRealname clears the value of the "realname" field.
func (u *UserUpsertBulk) ClearRealname() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearRealname()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsertBulk) ClearEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmail()
	})
}

// SetMobile sets the "mobile" field.
func (u *UserUpsertBulk) SetMobile(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateMobile() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMobile()
	})
}

// ClearMobile clears the value of the "mobile" field.
func (u *UserUpsertBulk) ClearMobile() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearMobile()
	})
}

// SetTelephone sets the "telephone" field.
func (u *UserUpsertBulk) SetTelephone(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetTelephone(v)
	})
}

// UpdateTelephone sets the "telephone" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateTelephone() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTelephone()
	})
}

// ClearTelephone clears the value of the "telephone" field.
func (u *UserUpsertBulk) ClearTelephone() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearTelephone()
	})
}

// SetAvatar sets the "avatar" field.
func (u *UserUpsertBulk) SetAvatar(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAvatar() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *UserUpsertBulk) ClearAvatar() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAvatar()
	})
}

// SetAddress sets the "address" field.
func (u *UserUpsertBulk) SetAddress(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAddress() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *UserUpsertBulk) ClearAddress() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAddress()
	})
}

// SetRegion sets the "region" field.
func (u *UserUpsertBulk) SetRegion(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRegion() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRegion()
	})
}

// ClearRegion clears the value of the "region" field.
func (u *UserUpsertBulk) ClearRegion() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearRegion()
	})
}

// SetDescription sets the "description" field.
func (u *UserUpsertBulk) SetDescription(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDescription() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *UserUpsertBulk) ClearDescription() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearDescription()
	})
}

// SetGender sets the "gender" field.
func (u *UserUpsertBulk) SetGender(v user.Gender) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateGender() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGender()
	})
}

// ClearGender clears the value of the "gender" field.
func (u *UserUpsertBulk) ClearGender() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearGender()
	})
}

// SetStatus sets the "status" field.
func (u *UserUpsertBulk) SetStatus(v user.Status) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *UserUpsertBulk) ClearStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearStatus()
	})
}

// SetLastLoginTime sets the "last_login_time" field.
func (u *UserUpsertBulk) SetLastLoginTime(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoginTime(v)
	})
}

// UpdateLastLoginTime sets the "last_login_time" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastLoginTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoginTime()
	})
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (u *UserUpsertBulk) ClearLastLoginTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLoginTime()
	})
}

// SetLastLoginIP sets the "last_login_ip" field.
func (u *UserUpsertBulk) SetLastLoginIP(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoginIP(v)
	})
}

// UpdateLastLoginIP sets the "last_login_ip" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastLoginIP() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoginIP()
	})
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (u *UserUpsertBulk) ClearLastLoginIP() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLoginIP()
	})
}

// SetOrgID sets the "org_id" field.
func (u *UserUpsertBulk) SetOrgID(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetOrgID(v)
	})
}

// AddOrgID adds v to the "org_id" field.
func (u *UserUpsertBulk) AddOrgID(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddOrgID(v)
	})
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateOrgID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOrgID()
	})
}

// ClearOrgID clears the value of the "org_id" field.
func (u *UserUpsertBulk) ClearOrgID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearOrgID()
	})
}

// SetDepartmentID sets the "department_id" field.
func (u *UserUpsertBulk) SetDepartmentID(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDepartmentID(v)
	})
}

// AddDepartmentID adds v to the "department_id" field.
func (u *UserUpsertBulk) AddDepartmentID(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddDepartmentID(v)
	})
}

// UpdateDepartmentID sets the "department_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDepartmentID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDepartmentID()
	})
}

// ClearDepartmentID clears the value of the "department_id" field.
func (u *UserUpsertBulk) ClearDepartmentID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearDepartmentID()
	})
}

// SetPositionID sets the "position_id" field.
func (u *UserUpsertBulk) SetPositionID(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPositionID(v)
	})
}

// AddPositionID adds v to the "position_id" field.
func (u *UserUpsertBulk) AddPositionID(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddPositionID(v)
	})
}

// UpdatePositionID sets the "position_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePositionID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePositionID()
	})
}

// ClearPositionID clears the value of the "position_id" field.
func (u *UserUpsertBulk) ClearPositionID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPositionID()
	})
}

// SetWorkID sets the "work_id" field.
func (u *UserUpsertBulk) SetWorkID(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetWorkID(v)
	})
}

// AddWorkID adds v to the "work_id" field.
func (u *UserUpsertBulk) AddWorkID(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddWorkID(v)
	})
}

// UpdateWorkID sets the "work_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateWorkID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateWorkID()
	})
}

// ClearWorkID clears the value of the "work_id" field.
func (u *UserUpsertBulk) ClearWorkID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearWorkID()
	})
}

// SetRoleIds sets the "role_ids" field.
func (u *UserUpsertBulk) SetRoleIds(v []int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRoleIds(v)
	})
}

// UpdateRoleIds sets the "role_ids" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRoleIds() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRoleIds()
	})
}

// ClearRoleIds clears the value of the "role_ids" field.
func (u *UserUpsertBulk) ClearRoleIds() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearRoleIds()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

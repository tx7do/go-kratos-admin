// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/notificationmessagecategory"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationMessageCategoryUpdate is the builder for updating NotificationMessageCategory entities.
type NotificationMessageCategoryUpdate struct {
	config
	hooks     []Hook
	mutation  *NotificationMessageCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NotificationMessageCategoryUpdate builder.
func (_u *NotificationMessageCategoryUpdate) Where(ps ...predicate.NotificationMessageCategory) *NotificationMessageCategoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationMessageCategoryUpdate) SetUpdatedAt(v time.Time) *NotificationMessageCategoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableUpdatedAt(v *time.Time) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *NotificationMessageCategoryUpdate) ClearUpdatedAt() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *NotificationMessageCategoryUpdate) SetDeletedAt(v time.Time) *NotificationMessageCategoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableDeletedAt(v *time.Time) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *NotificationMessageCategoryUpdate) ClearDeletedAt() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *NotificationMessageCategoryUpdate) SetCreatedBy(v uint32) *NotificationMessageCategoryUpdate {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableCreatedBy(v *uint32) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *NotificationMessageCategoryUpdate) AddCreatedBy(v int32) *NotificationMessageCategoryUpdate {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *NotificationMessageCategoryUpdate) ClearCreatedBy() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *NotificationMessageCategoryUpdate) SetUpdatedBy(v uint32) *NotificationMessageCategoryUpdate {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableUpdatedBy(v *uint32) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *NotificationMessageCategoryUpdate) AddUpdatedBy(v int32) *NotificationMessageCategoryUpdate {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *NotificationMessageCategoryUpdate) ClearUpdatedBy() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *NotificationMessageCategoryUpdate) SetDeletedBy(v uint32) *NotificationMessageCategoryUpdate {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableDeletedBy(v *uint32) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *NotificationMessageCategoryUpdate) AddDeletedBy(v int32) *NotificationMessageCategoryUpdate {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *NotificationMessageCategoryUpdate) ClearDeletedBy() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *NotificationMessageCategoryUpdate) SetRemark(v string) *NotificationMessageCategoryUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableRemark(v *string) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *NotificationMessageCategoryUpdate) ClearRemark() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetName sets the "name" field.
func (_u *NotificationMessageCategoryUpdate) SetName(v string) *NotificationMessageCategoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableName(v *string) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *NotificationMessageCategoryUpdate) ClearName() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetCode sets the "code" field.
func (_u *NotificationMessageCategoryUpdate) SetCode(v string) *NotificationMessageCategoryUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableCode(v *string) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *NotificationMessageCategoryUpdate) ClearCode() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearCode()
	return _u
}

// SetSortOrder sets the "sort_order" field.
func (_u *NotificationMessageCategoryUpdate) SetSortOrder(v int32) *NotificationMessageCategoryUpdate {
	_u.mutation.ResetSortOrder()
	_u.mutation.SetSortOrder(v)
	return _u
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableSortOrder(v *int32) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetSortOrder(*v)
	}
	return _u
}

// AddSortOrder adds value to the "sort_order" field.
func (_u *NotificationMessageCategoryUpdate) AddSortOrder(v int32) *NotificationMessageCategoryUpdate {
	_u.mutation.AddSortOrder(v)
	return _u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (_u *NotificationMessageCategoryUpdate) ClearSortOrder() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearSortOrder()
	return _u
}

// SetEnable sets the "enable" field.
func (_u *NotificationMessageCategoryUpdate) SetEnable(v bool) *NotificationMessageCategoryUpdate {
	_u.mutation.SetEnable(v)
	return _u
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableEnable(v *bool) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetEnable(*v)
	}
	return _u
}

// ClearEnable clears the value of the "enable" field.
func (_u *NotificationMessageCategoryUpdate) ClearEnable() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearEnable()
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *NotificationMessageCategoryUpdate) SetParentID(v uint32) *NotificationMessageCategoryUpdate {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdate) SetNillableParentID(v *uint32) *NotificationMessageCategoryUpdate {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *NotificationMessageCategoryUpdate) ClearParentID() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearParentID()
	return _u
}

// SetParent sets the "parent" edge to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdate) SetParent(v *NotificationMessageCategory) *NotificationMessageCategoryUpdate {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the NotificationMessageCategory entity by IDs.
func (_u *NotificationMessageCategoryUpdate) AddChildIDs(ids ...uint32) *NotificationMessageCategoryUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdate) AddChildren(v ...*NotificationMessageCategory) *NotificationMessageCategoryUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the NotificationMessageCategoryMutation object of the builder.
func (_u *NotificationMessageCategoryUpdate) Mutation() *NotificationMessageCategoryMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdate) ClearParent() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdate) ClearChildren() *NotificationMessageCategoryUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to NotificationMessageCategory entities by IDs.
func (_u *NotificationMessageCategoryUpdate) RemoveChildIDs(ids ...uint32) *NotificationMessageCategoryUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to NotificationMessageCategory entities.
func (_u *NotificationMessageCategoryUpdate) RemoveChildren(v ...*NotificationMessageCategory) *NotificationMessageCategoryUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NotificationMessageCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationMessageCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NotificationMessageCategoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationMessageCategoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationMessageCategoryUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := notificationmessagecategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NotificationMessageCategory.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := notificationmessagecategory.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "NotificationMessageCategory.code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *NotificationMessageCategoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationMessageCategoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *NotificationMessageCategoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationmessagecategory.Table, notificationmessagecategory.Columns, sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(notificationmessagecategory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationmessagecategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(notificationmessagecategory.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(notificationmessagecategory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationmessagecategory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(notificationmessagecategory.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(notificationmessagecategory.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(notificationmessagecategory.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(notificationmessagecategory.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(notificationmessagecategory.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(notificationmessagecategory.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(notificationmessagecategory.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(notificationmessagecategory.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(notificationmessagecategory.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(notificationmessagecategory.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(notificationmessagecategory.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(notificationmessagecategory.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(notificationmessagecategory.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(notificationmessagecategory.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(notificationmessagecategory.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.SortOrder(); ok {
		_spec.SetField(notificationmessagecategory.FieldSortOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortOrder(); ok {
		_spec.AddField(notificationmessagecategory.FieldSortOrder, field.TypeInt32, value)
	}
	if _u.mutation.SortOrderCleared() {
		_spec.ClearField(notificationmessagecategory.FieldSortOrder, field.TypeInt32)
	}
	if value, ok := _u.mutation.Enable(); ok {
		_spec.SetField(notificationmessagecategory.FieldEnable, field.TypeBool, value)
	}
	if _u.mutation.EnableCleared() {
		_spec.ClearField(notificationmessagecategory.FieldEnable, field.TypeBool)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationmessagecategory.ParentTable,
			Columns: []string{notificationmessagecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationmessagecategory.ParentTable,
			Columns: []string{notificationmessagecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationmessagecategory.ChildrenTable,
			Columns: []string{notificationmessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationmessagecategory.ChildrenTable,
			Columns: []string{notificationmessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationmessagecategory.ChildrenTable,
			Columns: []string{notificationmessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationmessagecategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NotificationMessageCategoryUpdateOne is the builder for updating a single NotificationMessageCategory entity.
type NotificationMessageCategoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NotificationMessageCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationMessageCategoryUpdateOne) SetUpdatedAt(v time.Time) *NotificationMessageCategoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableUpdatedAt(v *time.Time) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearUpdatedAt() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *NotificationMessageCategoryUpdateOne) SetDeletedAt(v time.Time) *NotificationMessageCategoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableDeletedAt(v *time.Time) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearDeletedAt() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *NotificationMessageCategoryUpdateOne) SetCreatedBy(v uint32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableCreatedBy(v *uint32) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *NotificationMessageCategoryUpdateOne) AddCreatedBy(v int32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearCreatedBy() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *NotificationMessageCategoryUpdateOne) SetUpdatedBy(v uint32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableUpdatedBy(v *uint32) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *NotificationMessageCategoryUpdateOne) AddUpdatedBy(v int32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearUpdatedBy() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *NotificationMessageCategoryUpdateOne) SetDeletedBy(v uint32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableDeletedBy(v *uint32) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *NotificationMessageCategoryUpdateOne) AddDeletedBy(v int32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearDeletedBy() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *NotificationMessageCategoryUpdateOne) SetRemark(v string) *NotificationMessageCategoryUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableRemark(v *string) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearRemark() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetName sets the "name" field.
func (_u *NotificationMessageCategoryUpdateOne) SetName(v string) *NotificationMessageCategoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableName(v *string) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearName() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetCode sets the "code" field.
func (_u *NotificationMessageCategoryUpdateOne) SetCode(v string) *NotificationMessageCategoryUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableCode(v *string) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearCode() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearCode()
	return _u
}

// SetSortOrder sets the "sort_order" field.
func (_u *NotificationMessageCategoryUpdateOne) SetSortOrder(v int32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.ResetSortOrder()
	_u.mutation.SetSortOrder(v)
	return _u
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableSortOrder(v *int32) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetSortOrder(*v)
	}
	return _u
}

// AddSortOrder adds value to the "sort_order" field.
func (_u *NotificationMessageCategoryUpdateOne) AddSortOrder(v int32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.AddSortOrder(v)
	return _u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearSortOrder() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearSortOrder()
	return _u
}

// SetEnable sets the "enable" field.
func (_u *NotificationMessageCategoryUpdateOne) SetEnable(v bool) *NotificationMessageCategoryUpdateOne {
	_u.mutation.SetEnable(v)
	return _u
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableEnable(v *bool) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetEnable(*v)
	}
	return _u
}

// ClearEnable clears the value of the "enable" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearEnable() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearEnable()
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *NotificationMessageCategoryUpdateOne) SetParentID(v uint32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *NotificationMessageCategoryUpdateOne) SetNillableParentID(v *uint32) *NotificationMessageCategoryUpdateOne {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *NotificationMessageCategoryUpdateOne) ClearParentID() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearParentID()
	return _u
}

// SetParent sets the "parent" edge to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdateOne) SetParent(v *NotificationMessageCategory) *NotificationMessageCategoryUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the NotificationMessageCategory entity by IDs.
func (_u *NotificationMessageCategoryUpdateOne) AddChildIDs(ids ...uint32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdateOne) AddChildren(v ...*NotificationMessageCategory) *NotificationMessageCategoryUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the NotificationMessageCategoryMutation object of the builder.
func (_u *NotificationMessageCategoryUpdateOne) Mutation() *NotificationMessageCategoryMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdateOne) ClearParent() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdateOne) ClearChildren() *NotificationMessageCategoryUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to NotificationMessageCategory entities by IDs.
func (_u *NotificationMessageCategoryUpdateOne) RemoveChildIDs(ids ...uint32) *NotificationMessageCategoryUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to NotificationMessageCategory entities.
func (_u *NotificationMessageCategoryUpdateOne) RemoveChildren(v ...*NotificationMessageCategory) *NotificationMessageCategoryUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the NotificationMessageCategoryUpdate builder.
func (_u *NotificationMessageCategoryUpdateOne) Where(ps ...predicate.NotificationMessageCategory) *NotificationMessageCategoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NotificationMessageCategoryUpdateOne) Select(field string, fields ...string) *NotificationMessageCategoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated NotificationMessageCategory entity.
func (_u *NotificationMessageCategoryUpdateOne) Save(ctx context.Context) (*NotificationMessageCategory, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationMessageCategoryUpdateOne) SaveX(ctx context.Context) *NotificationMessageCategory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NotificationMessageCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationMessageCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationMessageCategoryUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := notificationmessagecategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NotificationMessageCategory.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := notificationmessagecategory.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "NotificationMessageCategory.code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *NotificationMessageCategoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationMessageCategoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *NotificationMessageCategoryUpdateOne) sqlSave(ctx context.Context) (_node *NotificationMessageCategory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationmessagecategory.Table, notificationmessagecategory.Columns, sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotificationMessageCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationmessagecategory.FieldID)
		for _, f := range fields {
			if !notificationmessagecategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notificationmessagecategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(notificationmessagecategory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationmessagecategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(notificationmessagecategory.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(notificationmessagecategory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationmessagecategory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(notificationmessagecategory.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(notificationmessagecategory.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(notificationmessagecategory.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(notificationmessagecategory.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(notificationmessagecategory.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(notificationmessagecategory.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(notificationmessagecategory.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(notificationmessagecategory.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(notificationmessagecategory.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(notificationmessagecategory.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(notificationmessagecategory.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(notificationmessagecategory.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(notificationmessagecategory.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(notificationmessagecategory.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(notificationmessagecategory.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.SortOrder(); ok {
		_spec.SetField(notificationmessagecategory.FieldSortOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortOrder(); ok {
		_spec.AddField(notificationmessagecategory.FieldSortOrder, field.TypeInt32, value)
	}
	if _u.mutation.SortOrderCleared() {
		_spec.ClearField(notificationmessagecategory.FieldSortOrder, field.TypeInt32)
	}
	if value, ok := _u.mutation.Enable(); ok {
		_spec.SetField(notificationmessagecategory.FieldEnable, field.TypeBool, value)
	}
	if _u.mutation.EnableCleared() {
		_spec.ClearField(notificationmessagecategory.FieldEnable, field.TypeBool)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationmessagecategory.ParentTable,
			Columns: []string{notificationmessagecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationmessagecategory.ParentTable,
			Columns: []string{notificationmessagecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationmessagecategory.ChildrenTable,
			Columns: []string{notificationmessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationmessagecategory.ChildrenTable,
			Columns: []string{notificationmessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationmessagecategory.ChildrenTable,
			Columns: []string{notificationmessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &NotificationMessageCategory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationmessagecategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	servicev1 "kratos-admin/api/gen/go/admin/service/v1"
	"kratos-admin/app/admin/service/internal/data/ent/adminloginlog"
	"kratos-admin/app/admin/service/internal/data/ent/adminloginrestriction"
	"kratos-admin/app/admin/service/internal/data/ent/adminoperationlog"
	"kratos-admin/app/admin/service/internal/data/ent/apiresource"
	"kratos-admin/app/admin/service/internal/data/ent/department"
	"kratos-admin/app/admin/service/internal/data/ent/dictentry"
	"kratos-admin/app/admin/service/internal/data/ent/dicttype"
	"kratos-admin/app/admin/service/internal/data/ent/file"
	"kratos-admin/app/admin/service/internal/data/ent/language"
	"kratos-admin/app/admin/service/internal/data/ent/menu"
	"kratos-admin/app/admin/service/internal/data/ent/notificationmessage"
	"kratos-admin/app/admin/service/internal/data/ent/notificationmessagecategory"
	"kratos-admin/app/admin/service/internal/data/ent/notificationmessagerecipient"
	"kratos-admin/app/admin/service/internal/data/ent/organization"
	"kratos-admin/app/admin/service/internal/data/ent/position"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"kratos-admin/app/admin/service/internal/data/ent/privatemessage"
	"kratos-admin/app/admin/service/internal/data/ent/role"
	"kratos-admin/app/admin/service/internal/data/ent/roleapi"
	"kratos-admin/app/admin/service/internal/data/ent/roledept"
	"kratos-admin/app/admin/service/internal/data/ent/rolemenu"
	"kratos-admin/app/admin/service/internal/data/ent/roleorg"
	"kratos-admin/app/admin/service/internal/data/ent/roleposition"
	"kratos-admin/app/admin/service/internal/data/ent/task"
	"kratos-admin/app/admin/service/internal/data/ent/tenant"
	"kratos-admin/app/admin/service/internal/data/ent/user"
	"kratos-admin/app/admin/service/internal/data/ent/usercredential"
	"kratos-admin/app/admin/service/internal/data/ent/userposition"
	"kratos-admin/app/admin/service/internal/data/ent/userrole"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAdminLoginLog                = "AdminLoginLog"
	TypeAdminLoginRestriction        = "AdminLoginRestriction"
	TypeAdminOperationLog            = "AdminOperationLog"
	TypeApiResource                  = "ApiResource"
	TypeDepartment                   = "Department"
	TypeDictEntry                    = "DictEntry"
	TypeDictType                     = "DictType"
	TypeFile                         = "File"
	TypeLanguage                     = "Language"
	TypeMenu                         = "Menu"
	TypeNotificationMessage          = "NotificationMessage"
	TypeNotificationMessageCategory  = "NotificationMessageCategory"
	TypeNotificationMessageRecipient = "NotificationMessageRecipient"
	TypeOrganization                 = "Organization"
	TypePosition                     = "Position"
	TypePrivateMessage               = "PrivateMessage"
	TypeRole                         = "Role"
	TypeRoleApi                      = "RoleApi"
	TypeRoleDept                     = "RoleDept"
	TypeRoleMenu                     = "RoleMenu"
	TypeRoleOrg                      = "RoleOrg"
	TypeRolePosition                 = "RolePosition"
	TypeTask                         = "Task"
	TypeTenant                       = "Tenant"
	TypeUser                         = "User"
	TypeUserCredential               = "UserCredential"
	TypeUserPosition                 = "UserPosition"
	TypeUserRole                     = "UserRole"
)

// AdminLoginLogMutation represents an operation that mutates the AdminLoginLog nodes in the graph.
type AdminLoginLogMutation struct {
	config
	op              Op
	typ             string
	id              *uint32
	created_at      *time.Time
	login_ip        *string
	login_mac       *string
	login_time      *time.Time
	user_agent      *string
	browser_name    *string
	browser_version *string
	client_id       *string
	client_name     *string
	os_name         *string
	os_version      *string
	user_id         *uint32
	adduser_id      *int32
	username        *string
	status_code     *int32
	addstatus_code  *int32
	success         *bool
	reason          *string
	location        *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*AdminLoginLog, error)
	predicates      []predicate.AdminLoginLog
}

var _ ent.Mutation = (*AdminLoginLogMutation)(nil)

// adminloginlogOption allows management of the mutation configuration using functional options.
type adminloginlogOption func(*AdminLoginLogMutation)

// newAdminLoginLogMutation creates new mutation for the AdminLoginLog entity.
func newAdminLoginLogMutation(c config, op Op, opts ...adminloginlogOption) *AdminLoginLogMutation {
	m := &AdminLoginLogMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminLoginLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminLoginLogID sets the ID field of the mutation.
func withAdminLoginLogID(id uint32) adminloginlogOption {
	return func(m *AdminLoginLogMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminLoginLog
		)
		m.oldValue = func(ctx context.Context) (*AdminLoginLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminLoginLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminLoginLog sets the old AdminLoginLog of the mutation.
func withAdminLoginLog(node *AdminLoginLog) adminloginlogOption {
	return func(m *AdminLoginLogMutation) {
		m.oldValue = func(context.Context) (*AdminLoginLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminLoginLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminLoginLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AdminLoginLog entities.
func (m *AdminLoginLogMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdminLoginLogMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdminLoginLogMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AdminLoginLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminLoginLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminLoginLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *AdminLoginLogMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[adminloginlog.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *AdminLoginLogMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminLoginLogMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, adminloginlog.FieldCreatedAt)
}

// SetLoginIP sets the "login_ip" field.
func (m *AdminLoginLogMutation) SetLoginIP(s string) {
	m.login_ip = &s
}

// LoginIP returns the value of the "login_ip" field in the mutation.
func (m *AdminLoginLogMutation) LoginIP() (r string, exists bool) {
	v := m.login_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldLoginIP returns the old "login_ip" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldLoginIP(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoginIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoginIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoginIP: %w", err)
	}
	return oldValue.LoginIP, nil
}

// ClearLoginIP clears the value of the "login_ip" field.
func (m *AdminLoginLogMutation) ClearLoginIP() {
	m.login_ip = nil
	m.clearedFields[adminloginlog.FieldLoginIP] = struct{}{}
}

// LoginIPCleared returns if the "login_ip" field was cleared in this mutation.
func (m *AdminLoginLogMutation) LoginIPCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldLoginIP]
	return ok
}

// ResetLoginIP resets all changes to the "login_ip" field.
func (m *AdminLoginLogMutation) ResetLoginIP() {
	m.login_ip = nil
	delete(m.clearedFields, adminloginlog.FieldLoginIP)
}

// SetLoginMAC sets the "login_mac" field.
func (m *AdminLoginLogMutation) SetLoginMAC(s string) {
	m.login_mac = &s
}

// LoginMAC returns the value of the "login_mac" field in the mutation.
func (m *AdminLoginLogMutation) LoginMAC() (r string, exists bool) {
	v := m.login_mac
	if v == nil {
		return
	}
	return *v, true
}

// OldLoginMAC returns the old "login_mac" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldLoginMAC(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoginMAC is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoginMAC requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoginMAC: %w", err)
	}
	return oldValue.LoginMAC, nil
}

// ClearLoginMAC clears the value of the "login_mac" field.
func (m *AdminLoginLogMutation) ClearLoginMAC() {
	m.login_mac = nil
	m.clearedFields[adminloginlog.FieldLoginMAC] = struct{}{}
}

// LoginMACCleared returns if the "login_mac" field was cleared in this mutation.
func (m *AdminLoginLogMutation) LoginMACCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldLoginMAC]
	return ok
}

// ResetLoginMAC resets all changes to the "login_mac" field.
func (m *AdminLoginLogMutation) ResetLoginMAC() {
	m.login_mac = nil
	delete(m.clearedFields, adminloginlog.FieldLoginMAC)
}

// SetLoginTime sets the "login_time" field.
func (m *AdminLoginLogMutation) SetLoginTime(t time.Time) {
	m.login_time = &t
}

// LoginTime returns the value of the "login_time" field in the mutation.
func (m *AdminLoginLogMutation) LoginTime() (r time.Time, exists bool) {
	v := m.login_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLoginTime returns the old "login_time" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldLoginTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoginTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoginTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoginTime: %w", err)
	}
	return oldValue.LoginTime, nil
}

// ClearLoginTime clears the value of the "login_time" field.
func (m *AdminLoginLogMutation) ClearLoginTime() {
	m.login_time = nil
	m.clearedFields[adminloginlog.FieldLoginTime] = struct{}{}
}

// LoginTimeCleared returns if the "login_time" field was cleared in this mutation.
func (m *AdminLoginLogMutation) LoginTimeCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldLoginTime]
	return ok
}

// ResetLoginTime resets all changes to the "login_time" field.
func (m *AdminLoginLogMutation) ResetLoginTime() {
	m.login_time = nil
	delete(m.clearedFields, adminloginlog.FieldLoginTime)
}

// SetUserAgent sets the "user_agent" field.
func (m *AdminLoginLogMutation) SetUserAgent(s string) {
	m.user_agent = &s
}

// UserAgent returns the value of the "user_agent" field in the mutation.
func (m *AdminLoginLogMutation) UserAgent() (r string, exists bool) {
	v := m.user_agent
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAgent returns the old "user_agent" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldUserAgent(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserAgent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserAgent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAgent: %w", err)
	}
	return oldValue.UserAgent, nil
}

// ClearUserAgent clears the value of the "user_agent" field.
func (m *AdminLoginLogMutation) ClearUserAgent() {
	m.user_agent = nil
	m.clearedFields[adminloginlog.FieldUserAgent] = struct{}{}
}

// UserAgentCleared returns if the "user_agent" field was cleared in this mutation.
func (m *AdminLoginLogMutation) UserAgentCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldUserAgent]
	return ok
}

// ResetUserAgent resets all changes to the "user_agent" field.
func (m *AdminLoginLogMutation) ResetUserAgent() {
	m.user_agent = nil
	delete(m.clearedFields, adminloginlog.FieldUserAgent)
}

// SetBrowserName sets the "browser_name" field.
func (m *AdminLoginLogMutation) SetBrowserName(s string) {
	m.browser_name = &s
}

// BrowserName returns the value of the "browser_name" field in the mutation.
func (m *AdminLoginLogMutation) BrowserName() (r string, exists bool) {
	v := m.browser_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBrowserName returns the old "browser_name" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldBrowserName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrowserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrowserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrowserName: %w", err)
	}
	return oldValue.BrowserName, nil
}

// ClearBrowserName clears the value of the "browser_name" field.
func (m *AdminLoginLogMutation) ClearBrowserName() {
	m.browser_name = nil
	m.clearedFields[adminloginlog.FieldBrowserName] = struct{}{}
}

// BrowserNameCleared returns if the "browser_name" field was cleared in this mutation.
func (m *AdminLoginLogMutation) BrowserNameCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldBrowserName]
	return ok
}

// ResetBrowserName resets all changes to the "browser_name" field.
func (m *AdminLoginLogMutation) ResetBrowserName() {
	m.browser_name = nil
	delete(m.clearedFields, adminloginlog.FieldBrowserName)
}

// SetBrowserVersion sets the "browser_version" field.
func (m *AdminLoginLogMutation) SetBrowserVersion(s string) {
	m.browser_version = &s
}

// BrowserVersion returns the value of the "browser_version" field in the mutation.
func (m *AdminLoginLogMutation) BrowserVersion() (r string, exists bool) {
	v := m.browser_version
	if v == nil {
		return
	}
	return *v, true
}

// OldBrowserVersion returns the old "browser_version" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldBrowserVersion(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrowserVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrowserVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrowserVersion: %w", err)
	}
	return oldValue.BrowserVersion, nil
}

// ClearBrowserVersion clears the value of the "browser_version" field.
func (m *AdminLoginLogMutation) ClearBrowserVersion() {
	m.browser_version = nil
	m.clearedFields[adminloginlog.FieldBrowserVersion] = struct{}{}
}

// BrowserVersionCleared returns if the "browser_version" field was cleared in this mutation.
func (m *AdminLoginLogMutation) BrowserVersionCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldBrowserVersion]
	return ok
}

// ResetBrowserVersion resets all changes to the "browser_version" field.
func (m *AdminLoginLogMutation) ResetBrowserVersion() {
	m.browser_version = nil
	delete(m.clearedFields, adminloginlog.FieldBrowserVersion)
}

// SetClientID sets the "client_id" field.
func (m *AdminLoginLogMutation) SetClientID(s string) {
	m.client_id = &s
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *AdminLoginLogMutation) ClientID() (r string, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldClientID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// ClearClientID clears the value of the "client_id" field.
func (m *AdminLoginLogMutation) ClearClientID() {
	m.client_id = nil
	m.clearedFields[adminloginlog.FieldClientID] = struct{}{}
}

// ClientIDCleared returns if the "client_id" field was cleared in this mutation.
func (m *AdminLoginLogMutation) ClientIDCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldClientID]
	return ok
}

// ResetClientID resets all changes to the "client_id" field.
func (m *AdminLoginLogMutation) ResetClientID() {
	m.client_id = nil
	delete(m.clearedFields, adminloginlog.FieldClientID)
}

// SetClientName sets the "client_name" field.
func (m *AdminLoginLogMutation) SetClientName(s string) {
	m.client_name = &s
}

// ClientName returns the value of the "client_name" field in the mutation.
func (m *AdminLoginLogMutation) ClientName() (r string, exists bool) {
	v := m.client_name
	if v == nil {
		return
	}
	return *v, true
}

// OldClientName returns the old "client_name" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldClientName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientName: %w", err)
	}
	return oldValue.ClientName, nil
}

// ClearClientName clears the value of the "client_name" field.
func (m *AdminLoginLogMutation) ClearClientName() {
	m.client_name = nil
	m.clearedFields[adminloginlog.FieldClientName] = struct{}{}
}

// ClientNameCleared returns if the "client_name" field was cleared in this mutation.
func (m *AdminLoginLogMutation) ClientNameCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldClientName]
	return ok
}

// ResetClientName resets all changes to the "client_name" field.
func (m *AdminLoginLogMutation) ResetClientName() {
	m.client_name = nil
	delete(m.clearedFields, adminloginlog.FieldClientName)
}

// SetOsName sets the "os_name" field.
func (m *AdminLoginLogMutation) SetOsName(s string) {
	m.os_name = &s
}

// OsName returns the value of the "os_name" field in the mutation.
func (m *AdminLoginLogMutation) OsName() (r string, exists bool) {
	v := m.os_name
	if v == nil {
		return
	}
	return *v, true
}

// OldOsName returns the old "os_name" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldOsName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOsName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOsName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOsName: %w", err)
	}
	return oldValue.OsName, nil
}

// ClearOsName clears the value of the "os_name" field.
func (m *AdminLoginLogMutation) ClearOsName() {
	m.os_name = nil
	m.clearedFields[adminloginlog.FieldOsName] = struct{}{}
}

// OsNameCleared returns if the "os_name" field was cleared in this mutation.
func (m *AdminLoginLogMutation) OsNameCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldOsName]
	return ok
}

// ResetOsName resets all changes to the "os_name" field.
func (m *AdminLoginLogMutation) ResetOsName() {
	m.os_name = nil
	delete(m.clearedFields, adminloginlog.FieldOsName)
}

// SetOsVersion sets the "os_version" field.
func (m *AdminLoginLogMutation) SetOsVersion(s string) {
	m.os_version = &s
}

// OsVersion returns the value of the "os_version" field in the mutation.
func (m *AdminLoginLogMutation) OsVersion() (r string, exists bool) {
	v := m.os_version
	if v == nil {
		return
	}
	return *v, true
}

// OldOsVersion returns the old "os_version" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldOsVersion(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOsVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOsVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOsVersion: %w", err)
	}
	return oldValue.OsVersion, nil
}

// ClearOsVersion clears the value of the "os_version" field.
func (m *AdminLoginLogMutation) ClearOsVersion() {
	m.os_version = nil
	m.clearedFields[adminloginlog.FieldOsVersion] = struct{}{}
}

// OsVersionCleared returns if the "os_version" field was cleared in this mutation.
func (m *AdminLoginLogMutation) OsVersionCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldOsVersion]
	return ok
}

// ResetOsVersion resets all changes to the "os_version" field.
func (m *AdminLoginLogMutation) ResetOsVersion() {
	m.os_version = nil
	delete(m.clearedFields, adminloginlog.FieldOsVersion)
}

// SetUserID sets the "user_id" field.
func (m *AdminLoginLogMutation) SetUserID(u uint32) {
	m.user_id = &u
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AdminLoginLogMutation) UserID() (r uint32, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldUserID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds u to the "user_id" field.
func (m *AdminLoginLogMutation) AddUserID(u int32) {
	if m.adduser_id != nil {
		*m.adduser_id += u
	} else {
		m.adduser_id = &u
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *AdminLoginLogMutation) AddedUserID() (r int32, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearUserID clears the value of the "user_id" field.
func (m *AdminLoginLogMutation) ClearUserID() {
	m.user_id = nil
	m.adduser_id = nil
	m.clearedFields[adminloginlog.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *AdminLoginLogMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AdminLoginLogMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
	delete(m.clearedFields, adminloginlog.FieldUserID)
}

// SetUsername sets the "username" field.
func (m *AdminLoginLogMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *AdminLoginLogMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldUsername(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *AdminLoginLogMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[adminloginlog.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *AdminLoginLogMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *AdminLoginLogMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, adminloginlog.FieldUsername)
}

// SetStatusCode sets the "status_code" field.
func (m *AdminLoginLogMutation) SetStatusCode(i int32) {
	m.status_code = &i
	m.addstatus_code = nil
}

// StatusCode returns the value of the "status_code" field in the mutation.
func (m *AdminLoginLogMutation) StatusCode() (r int32, exists bool) {
	v := m.status_code
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusCode returns the old "status_code" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldStatusCode(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatusCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatusCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusCode: %w", err)
	}
	return oldValue.StatusCode, nil
}

// AddStatusCode adds i to the "status_code" field.
func (m *AdminLoginLogMutation) AddStatusCode(i int32) {
	if m.addstatus_code != nil {
		*m.addstatus_code += i
	} else {
		m.addstatus_code = &i
	}
}

// AddedStatusCode returns the value that was added to the "status_code" field in this mutation.
func (m *AdminLoginLogMutation) AddedStatusCode() (r int32, exists bool) {
	v := m.addstatus_code
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatusCode clears the value of the "status_code" field.
func (m *AdminLoginLogMutation) ClearStatusCode() {
	m.status_code = nil
	m.addstatus_code = nil
	m.clearedFields[adminloginlog.FieldStatusCode] = struct{}{}
}

// StatusCodeCleared returns if the "status_code" field was cleared in this mutation.
func (m *AdminLoginLogMutation) StatusCodeCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldStatusCode]
	return ok
}

// ResetStatusCode resets all changes to the "status_code" field.
func (m *AdminLoginLogMutation) ResetStatusCode() {
	m.status_code = nil
	m.addstatus_code = nil
	delete(m.clearedFields, adminloginlog.FieldStatusCode)
}

// SetSuccess sets the "success" field.
func (m *AdminLoginLogMutation) SetSuccess(b bool) {
	m.success = &b
}

// Success returns the value of the "success" field in the mutation.
func (m *AdminLoginLogMutation) Success() (r bool, exists bool) {
	v := m.success
	if v == nil {
		return
	}
	return *v, true
}

// OldSuccess returns the old "success" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldSuccess(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuccess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuccess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuccess: %w", err)
	}
	return oldValue.Success, nil
}

// ClearSuccess clears the value of the "success" field.
func (m *AdminLoginLogMutation) ClearSuccess() {
	m.success = nil
	m.clearedFields[adminloginlog.FieldSuccess] = struct{}{}
}

// SuccessCleared returns if the "success" field was cleared in this mutation.
func (m *AdminLoginLogMutation) SuccessCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldSuccess]
	return ok
}

// ResetSuccess resets all changes to the "success" field.
func (m *AdminLoginLogMutation) ResetSuccess() {
	m.success = nil
	delete(m.clearedFields, adminloginlog.FieldSuccess)
}

// SetReason sets the "reason" field.
func (m *AdminLoginLogMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *AdminLoginLogMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldReason(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ClearReason clears the value of the "reason" field.
func (m *AdminLoginLogMutation) ClearReason() {
	m.reason = nil
	m.clearedFields[adminloginlog.FieldReason] = struct{}{}
}

// ReasonCleared returns if the "reason" field was cleared in this mutation.
func (m *AdminLoginLogMutation) ReasonCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldReason]
	return ok
}

// ResetReason resets all changes to the "reason" field.
func (m *AdminLoginLogMutation) ResetReason() {
	m.reason = nil
	delete(m.clearedFields, adminloginlog.FieldReason)
}

// SetLocation sets the "location" field.
func (m *AdminLoginLogMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *AdminLoginLogMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the AdminLoginLog entity.
// If the AdminLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginLogMutation) OldLocation(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ClearLocation clears the value of the "location" field.
func (m *AdminLoginLogMutation) ClearLocation() {
	m.location = nil
	m.clearedFields[adminloginlog.FieldLocation] = struct{}{}
}

// LocationCleared returns if the "location" field was cleared in this mutation.
func (m *AdminLoginLogMutation) LocationCleared() bool {
	_, ok := m.clearedFields[adminloginlog.FieldLocation]
	return ok
}

// ResetLocation resets all changes to the "location" field.
func (m *AdminLoginLogMutation) ResetLocation() {
	m.location = nil
	delete(m.clearedFields, adminloginlog.FieldLocation)
}

// Where appends a list predicates to the AdminLoginLogMutation builder.
func (m *AdminLoginLogMutation) Where(ps ...predicate.AdminLoginLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdminLoginLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdminLoginLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AdminLoginLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdminLoginLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdminLoginLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AdminLoginLog).
func (m *AdminLoginLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminLoginLogMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.created_at != nil {
		fields = append(fields, adminloginlog.FieldCreatedAt)
	}
	if m.login_ip != nil {
		fields = append(fields, adminloginlog.FieldLoginIP)
	}
	if m.login_mac != nil {
		fields = append(fields, adminloginlog.FieldLoginMAC)
	}
	if m.login_time != nil {
		fields = append(fields, adminloginlog.FieldLoginTime)
	}
	if m.user_agent != nil {
		fields = append(fields, adminloginlog.FieldUserAgent)
	}
	if m.browser_name != nil {
		fields = append(fields, adminloginlog.FieldBrowserName)
	}
	if m.browser_version != nil {
		fields = append(fields, adminloginlog.FieldBrowserVersion)
	}
	if m.client_id != nil {
		fields = append(fields, adminloginlog.FieldClientID)
	}
	if m.client_name != nil {
		fields = append(fields, adminloginlog.FieldClientName)
	}
	if m.os_name != nil {
		fields = append(fields, adminloginlog.FieldOsName)
	}
	if m.os_version != nil {
		fields = append(fields, adminloginlog.FieldOsVersion)
	}
	if m.user_id != nil {
		fields = append(fields, adminloginlog.FieldUserID)
	}
	if m.username != nil {
		fields = append(fields, adminloginlog.FieldUsername)
	}
	if m.status_code != nil {
		fields = append(fields, adminloginlog.FieldStatusCode)
	}
	if m.success != nil {
		fields = append(fields, adminloginlog.FieldSuccess)
	}
	if m.reason != nil {
		fields = append(fields, adminloginlog.FieldReason)
	}
	if m.location != nil {
		fields = append(fields, adminloginlog.FieldLocation)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminLoginLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adminloginlog.FieldCreatedAt:
		return m.CreatedAt()
	case adminloginlog.FieldLoginIP:
		return m.LoginIP()
	case adminloginlog.FieldLoginMAC:
		return m.LoginMAC()
	case adminloginlog.FieldLoginTime:
		return m.LoginTime()
	case adminloginlog.FieldUserAgent:
		return m.UserAgent()
	case adminloginlog.FieldBrowserName:
		return m.BrowserName()
	case adminloginlog.FieldBrowserVersion:
		return m.BrowserVersion()
	case adminloginlog.FieldClientID:
		return m.ClientID()
	case adminloginlog.FieldClientName:
		return m.ClientName()
	case adminloginlog.FieldOsName:
		return m.OsName()
	case adminloginlog.FieldOsVersion:
		return m.OsVersion()
	case adminloginlog.FieldUserID:
		return m.UserID()
	case adminloginlog.FieldUsername:
		return m.Username()
	case adminloginlog.FieldStatusCode:
		return m.StatusCode()
	case adminloginlog.FieldSuccess:
		return m.Success()
	case adminloginlog.FieldReason:
		return m.Reason()
	case adminloginlog.FieldLocation:
		return m.Location()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminLoginLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adminloginlog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case adminloginlog.FieldLoginIP:
		return m.OldLoginIP(ctx)
	case adminloginlog.FieldLoginMAC:
		return m.OldLoginMAC(ctx)
	case adminloginlog.FieldLoginTime:
		return m.OldLoginTime(ctx)
	case adminloginlog.FieldUserAgent:
		return m.OldUserAgent(ctx)
	case adminloginlog.FieldBrowserName:
		return m.OldBrowserName(ctx)
	case adminloginlog.FieldBrowserVersion:
		return m.OldBrowserVersion(ctx)
	case adminloginlog.FieldClientID:
		return m.OldClientID(ctx)
	case adminloginlog.FieldClientName:
		return m.OldClientName(ctx)
	case adminloginlog.FieldOsName:
		return m.OldOsName(ctx)
	case adminloginlog.FieldOsVersion:
		return m.OldOsVersion(ctx)
	case adminloginlog.FieldUserID:
		return m.OldUserID(ctx)
	case adminloginlog.FieldUsername:
		return m.OldUsername(ctx)
	case adminloginlog.FieldStatusCode:
		return m.OldStatusCode(ctx)
	case adminloginlog.FieldSuccess:
		return m.OldSuccess(ctx)
	case adminloginlog.FieldReason:
		return m.OldReason(ctx)
	case adminloginlog.FieldLocation:
		return m.OldLocation(ctx)
	}
	return nil, fmt.Errorf("unknown AdminLoginLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminLoginLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adminloginlog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case adminloginlog.FieldLoginIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoginIP(v)
		return nil
	case adminloginlog.FieldLoginMAC:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoginMAC(v)
		return nil
	case adminloginlog.FieldLoginTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoginTime(v)
		return nil
	case adminloginlog.FieldUserAgent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAgent(v)
		return nil
	case adminloginlog.FieldBrowserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrowserName(v)
		return nil
	case adminloginlog.FieldBrowserVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrowserVersion(v)
		return nil
	case adminloginlog.FieldClientID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	case adminloginlog.FieldClientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientName(v)
		return nil
	case adminloginlog.FieldOsName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOsName(v)
		return nil
	case adminloginlog.FieldOsVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOsVersion(v)
		return nil
	case adminloginlog.FieldUserID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case adminloginlog.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case adminloginlog.FieldStatusCode:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusCode(v)
		return nil
	case adminloginlog.FieldSuccess:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuccess(v)
		return nil
	case adminloginlog.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case adminloginlog.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	}
	return fmt.Errorf("unknown AdminLoginLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminLoginLogMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, adminloginlog.FieldUserID)
	}
	if m.addstatus_code != nil {
		fields = append(fields, adminloginlog.FieldStatusCode)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminLoginLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case adminloginlog.FieldUserID:
		return m.AddedUserID()
	case adminloginlog.FieldStatusCode:
		return m.AddedStatusCode()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminLoginLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case adminloginlog.FieldUserID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case adminloginlog.FieldStatusCode:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatusCode(v)
		return nil
	}
	return fmt.Errorf("unknown AdminLoginLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminLoginLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(adminloginlog.FieldCreatedAt) {
		fields = append(fields, adminloginlog.FieldCreatedAt)
	}
	if m.FieldCleared(adminloginlog.FieldLoginIP) {
		fields = append(fields, adminloginlog.FieldLoginIP)
	}
	if m.FieldCleared(adminloginlog.FieldLoginMAC) {
		fields = append(fields, adminloginlog.FieldLoginMAC)
	}
	if m.FieldCleared(adminloginlog.FieldLoginTime) {
		fields = append(fields, adminloginlog.FieldLoginTime)
	}
	if m.FieldCleared(adminloginlog.FieldUserAgent) {
		fields = append(fields, adminloginlog.FieldUserAgent)
	}
	if m.FieldCleared(adminloginlog.FieldBrowserName) {
		fields = append(fields, adminloginlog.FieldBrowserName)
	}
	if m.FieldCleared(adminloginlog.FieldBrowserVersion) {
		fields = append(fields, adminloginlog.FieldBrowserVersion)
	}
	if m.FieldCleared(adminloginlog.FieldClientID) {
		fields = append(fields, adminloginlog.FieldClientID)
	}
	if m.FieldCleared(adminloginlog.FieldClientName) {
		fields = append(fields, adminloginlog.FieldClientName)
	}
	if m.FieldCleared(adminloginlog.FieldOsName) {
		fields = append(fields, adminloginlog.FieldOsName)
	}
	if m.FieldCleared(adminloginlog.FieldOsVersion) {
		fields = append(fields, adminloginlog.FieldOsVersion)
	}
	if m.FieldCleared(adminloginlog.FieldUserID) {
		fields = append(fields, adminloginlog.FieldUserID)
	}
	if m.FieldCleared(adminloginlog.FieldUsername) {
		fields = append(fields, adminloginlog.FieldUsername)
	}
	if m.FieldCleared(adminloginlog.FieldStatusCode) {
		fields = append(fields, adminloginlog.FieldStatusCode)
	}
	if m.FieldCleared(adminloginlog.FieldSuccess) {
		fields = append(fields, adminloginlog.FieldSuccess)
	}
	if m.FieldCleared(adminloginlog.FieldReason) {
		fields = append(fields, adminloginlog.FieldReason)
	}
	if m.FieldCleared(adminloginlog.FieldLocation) {
		fields = append(fields, adminloginlog.FieldLocation)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminLoginLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminLoginLogMutation) ClearField(name string) error {
	switch name {
	case adminloginlog.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case adminloginlog.FieldLoginIP:
		m.ClearLoginIP()
		return nil
	case adminloginlog.FieldLoginMAC:
		m.ClearLoginMAC()
		return nil
	case adminloginlog.FieldLoginTime:
		m.ClearLoginTime()
		return nil
	case adminloginlog.FieldUserAgent:
		m.ClearUserAgent()
		return nil
	case adminloginlog.FieldBrowserName:
		m.ClearBrowserName()
		return nil
	case adminloginlog.FieldBrowserVersion:
		m.ClearBrowserVersion()
		return nil
	case adminloginlog.FieldClientID:
		m.ClearClientID()
		return nil
	case adminloginlog.FieldClientName:
		m.ClearClientName()
		return nil
	case adminloginlog.FieldOsName:
		m.ClearOsName()
		return nil
	case adminloginlog.FieldOsVersion:
		m.ClearOsVersion()
		return nil
	case adminloginlog.FieldUserID:
		m.ClearUserID()
		return nil
	case adminloginlog.FieldUsername:
		m.ClearUsername()
		return nil
	case adminloginlog.FieldStatusCode:
		m.ClearStatusCode()
		return nil
	case adminloginlog.FieldSuccess:
		m.ClearSuccess()
		return nil
	case adminloginlog.FieldReason:
		m.ClearReason()
		return nil
	case adminloginlog.FieldLocation:
		m.ClearLocation()
		return nil
	}
	return fmt.Errorf("unknown AdminLoginLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminLoginLogMutation) ResetField(name string) error {
	switch name {
	case adminloginlog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case adminloginlog.FieldLoginIP:
		m.ResetLoginIP()
		return nil
	case adminloginlog.FieldLoginMAC:
		m.ResetLoginMAC()
		return nil
	case adminloginlog.FieldLoginTime:
		m.ResetLoginTime()
		return nil
	case adminloginlog.FieldUserAgent:
		m.ResetUserAgent()
		return nil
	case adminloginlog.FieldBrowserName:
		m.ResetBrowserName()
		return nil
	case adminloginlog.FieldBrowserVersion:
		m.ResetBrowserVersion()
		return nil
	case adminloginlog.FieldClientID:
		m.ResetClientID()
		return nil
	case adminloginlog.FieldClientName:
		m.ResetClientName()
		return nil
	case adminloginlog.FieldOsName:
		m.ResetOsName()
		return nil
	case adminloginlog.FieldOsVersion:
		m.ResetOsVersion()
		return nil
	case adminloginlog.FieldUserID:
		m.ResetUserID()
		return nil
	case adminloginlog.FieldUsername:
		m.ResetUsername()
		return nil
	case adminloginlog.FieldStatusCode:
		m.ResetStatusCode()
		return nil
	case adminloginlog.FieldSuccess:
		m.ResetSuccess()
		return nil
	case adminloginlog.FieldReason:
		m.ResetReason()
		return nil
	case adminloginlog.FieldLocation:
		m.ResetLocation()
		return nil
	}
	return fmt.Errorf("unknown AdminLoginLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminLoginLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminLoginLogMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminLoginLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminLoginLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminLoginLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminLoginLogMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminLoginLogMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AdminLoginLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminLoginLogMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AdminLoginLog edge %s", name)
}

// AdminLoginRestrictionMutation represents an operation that mutates the AdminLoginRestriction nodes in the graph.
type AdminLoginRestrictionMutation struct {
	config
	op            Op
	typ           string
	id            *uint32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	created_by    *uint32
	addcreated_by *int32
	updated_by    *uint32
	addupdated_by *int32
	deleted_by    *uint32
	adddeleted_by *int32
	target_id     *uint32
	addtarget_id  *int32
	value         *string
	reason        *string
	_type         *adminloginrestriction.Type
	method        *adminloginrestriction.Method
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AdminLoginRestriction, error)
	predicates    []predicate.AdminLoginRestriction
}

var _ ent.Mutation = (*AdminLoginRestrictionMutation)(nil)

// adminloginrestrictionOption allows management of the mutation configuration using functional options.
type adminloginrestrictionOption func(*AdminLoginRestrictionMutation)

// newAdminLoginRestrictionMutation creates new mutation for the AdminLoginRestriction entity.
func newAdminLoginRestrictionMutation(c config, op Op, opts ...adminloginrestrictionOption) *AdminLoginRestrictionMutation {
	m := &AdminLoginRestrictionMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminLoginRestriction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminLoginRestrictionID sets the ID field of the mutation.
func withAdminLoginRestrictionID(id uint32) adminloginrestrictionOption {
	return func(m *AdminLoginRestrictionMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminLoginRestriction
		)
		m.oldValue = func(ctx context.Context) (*AdminLoginRestriction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminLoginRestriction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminLoginRestriction sets the old AdminLoginRestriction of the mutation.
func withAdminLoginRestriction(node *AdminLoginRestriction) adminloginrestrictionOption {
	return func(m *AdminLoginRestrictionMutation) {
		m.oldValue = func(context.Context) (*AdminLoginRestriction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminLoginRestrictionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminLoginRestrictionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AdminLoginRestriction entities.
func (m *AdminLoginRestrictionMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdminLoginRestrictionMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdminLoginRestrictionMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AdminLoginRestriction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminLoginRestrictionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminLoginRestrictionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AdminLoginRestriction entity.
// If the AdminLoginRestriction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginRestrictionMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *AdminLoginRestrictionMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[adminloginrestriction.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *AdminLoginRestrictionMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[adminloginrestriction.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminLoginRestrictionMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, adminloginrestriction.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AdminLoginRestrictionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AdminLoginRestrictionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AdminLoginRestriction entity.
// If the AdminLoginRestriction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginRestrictionMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AdminLoginRestrictionMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[adminloginrestriction.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AdminLoginRestrictionMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[adminloginrestriction.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AdminLoginRestrictionMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, adminloginrestriction.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AdminLoginRestrictionMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AdminLoginRestrictionMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the AdminLoginRestriction entity.
// If the AdminLoginRestriction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginRestrictionMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AdminLoginRestrictionMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[adminloginrestriction.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AdminLoginRestrictionMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[adminloginrestriction.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AdminLoginRestrictionMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, adminloginrestriction.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *AdminLoginRestrictionMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *AdminLoginRestrictionMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the AdminLoginRestriction entity.
// If the AdminLoginRestriction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginRestrictionMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *AdminLoginRestrictionMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *AdminLoginRestrictionMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *AdminLoginRestrictionMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[adminloginrestriction.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *AdminLoginRestrictionMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[adminloginrestriction.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *AdminLoginRestrictionMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, adminloginrestriction.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *AdminLoginRestrictionMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *AdminLoginRestrictionMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the AdminLoginRestriction entity.
// If the AdminLoginRestriction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginRestrictionMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *AdminLoginRestrictionMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *AdminLoginRestrictionMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *AdminLoginRestrictionMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[adminloginrestriction.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *AdminLoginRestrictionMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[adminloginrestriction.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *AdminLoginRestrictionMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, adminloginrestriction.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *AdminLoginRestrictionMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *AdminLoginRestrictionMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the AdminLoginRestriction entity.
// If the AdminLoginRestriction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginRestrictionMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *AdminLoginRestrictionMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *AdminLoginRestrictionMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *AdminLoginRestrictionMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[adminloginrestriction.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *AdminLoginRestrictionMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[adminloginrestriction.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *AdminLoginRestrictionMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, adminloginrestriction.FieldDeletedBy)
}

// SetTargetID sets the "target_id" field.
func (m *AdminLoginRestrictionMutation) SetTargetID(u uint32) {
	m.target_id = &u
	m.addtarget_id = nil
}

// TargetID returns the value of the "target_id" field in the mutation.
func (m *AdminLoginRestrictionMutation) TargetID() (r uint32, exists bool) {
	v := m.target_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetID returns the old "target_id" field's value of the AdminLoginRestriction entity.
// If the AdminLoginRestriction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginRestrictionMutation) OldTargetID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetID: %w", err)
	}
	return oldValue.TargetID, nil
}

// AddTargetID adds u to the "target_id" field.
func (m *AdminLoginRestrictionMutation) AddTargetID(u int32) {
	if m.addtarget_id != nil {
		*m.addtarget_id += u
	} else {
		m.addtarget_id = &u
	}
}

// AddedTargetID returns the value that was added to the "target_id" field in this mutation.
func (m *AdminLoginRestrictionMutation) AddedTargetID() (r int32, exists bool) {
	v := m.addtarget_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTargetID clears the value of the "target_id" field.
func (m *AdminLoginRestrictionMutation) ClearTargetID() {
	m.target_id = nil
	m.addtarget_id = nil
	m.clearedFields[adminloginrestriction.FieldTargetID] = struct{}{}
}

// TargetIDCleared returns if the "target_id" field was cleared in this mutation.
func (m *AdminLoginRestrictionMutation) TargetIDCleared() bool {
	_, ok := m.clearedFields[adminloginrestriction.FieldTargetID]
	return ok
}

// ResetTargetID resets all changes to the "target_id" field.
func (m *AdminLoginRestrictionMutation) ResetTargetID() {
	m.target_id = nil
	m.addtarget_id = nil
	delete(m.clearedFields, adminloginrestriction.FieldTargetID)
}

// SetValue sets the "value" field.
func (m *AdminLoginRestrictionMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *AdminLoginRestrictionMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the AdminLoginRestriction entity.
// If the AdminLoginRestriction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginRestrictionMutation) OldValue(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ClearValue clears the value of the "value" field.
func (m *AdminLoginRestrictionMutation) ClearValue() {
	m.value = nil
	m.clearedFields[adminloginrestriction.FieldValue] = struct{}{}
}

// ValueCleared returns if the "value" field was cleared in this mutation.
func (m *AdminLoginRestrictionMutation) ValueCleared() bool {
	_, ok := m.clearedFields[adminloginrestriction.FieldValue]
	return ok
}

// ResetValue resets all changes to the "value" field.
func (m *AdminLoginRestrictionMutation) ResetValue() {
	m.value = nil
	delete(m.clearedFields, adminloginrestriction.FieldValue)
}

// SetReason sets the "reason" field.
func (m *AdminLoginRestrictionMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *AdminLoginRestrictionMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the AdminLoginRestriction entity.
// If the AdminLoginRestriction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginRestrictionMutation) OldReason(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ClearReason clears the value of the "reason" field.
func (m *AdminLoginRestrictionMutation) ClearReason() {
	m.reason = nil
	m.clearedFields[adminloginrestriction.FieldReason] = struct{}{}
}

// ReasonCleared returns if the "reason" field was cleared in this mutation.
func (m *AdminLoginRestrictionMutation) ReasonCleared() bool {
	_, ok := m.clearedFields[adminloginrestriction.FieldReason]
	return ok
}

// ResetReason resets all changes to the "reason" field.
func (m *AdminLoginRestrictionMutation) ResetReason() {
	m.reason = nil
	delete(m.clearedFields, adminloginrestriction.FieldReason)
}

// SetType sets the "type" field.
func (m *AdminLoginRestrictionMutation) SetType(a adminloginrestriction.Type) {
	m._type = &a
}

// GetType returns the value of the "type" field in the mutation.
func (m *AdminLoginRestrictionMutation) GetType() (r adminloginrestriction.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the AdminLoginRestriction entity.
// If the AdminLoginRestriction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginRestrictionMutation) OldType(ctx context.Context) (v *adminloginrestriction.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *AdminLoginRestrictionMutation) ClearType() {
	m._type = nil
	m.clearedFields[adminloginrestriction.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *AdminLoginRestrictionMutation) TypeCleared() bool {
	_, ok := m.clearedFields[adminloginrestriction.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *AdminLoginRestrictionMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, adminloginrestriction.FieldType)
}

// SetMethod sets the "method" field.
func (m *AdminLoginRestrictionMutation) SetMethod(a adminloginrestriction.Method) {
	m.method = &a
}

// Method returns the value of the "method" field in the mutation.
func (m *AdminLoginRestrictionMutation) Method() (r adminloginrestriction.Method, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the AdminLoginRestriction entity.
// If the AdminLoginRestriction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLoginRestrictionMutation) OldMethod(ctx context.Context) (v *adminloginrestriction.Method, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ClearMethod clears the value of the "method" field.
func (m *AdminLoginRestrictionMutation) ClearMethod() {
	m.method = nil
	m.clearedFields[adminloginrestriction.FieldMethod] = struct{}{}
}

// MethodCleared returns if the "method" field was cleared in this mutation.
func (m *AdminLoginRestrictionMutation) MethodCleared() bool {
	_, ok := m.clearedFields[adminloginrestriction.FieldMethod]
	return ok
}

// ResetMethod resets all changes to the "method" field.
func (m *AdminLoginRestrictionMutation) ResetMethod() {
	m.method = nil
	delete(m.clearedFields, adminloginrestriction.FieldMethod)
}

// Where appends a list predicates to the AdminLoginRestrictionMutation builder.
func (m *AdminLoginRestrictionMutation) Where(ps ...predicate.AdminLoginRestriction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdminLoginRestrictionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdminLoginRestrictionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AdminLoginRestriction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdminLoginRestrictionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdminLoginRestrictionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AdminLoginRestriction).
func (m *AdminLoginRestrictionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminLoginRestrictionMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, adminloginrestriction.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, adminloginrestriction.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, adminloginrestriction.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, adminloginrestriction.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, adminloginrestriction.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, adminloginrestriction.FieldDeletedBy)
	}
	if m.target_id != nil {
		fields = append(fields, adminloginrestriction.FieldTargetID)
	}
	if m.value != nil {
		fields = append(fields, adminloginrestriction.FieldValue)
	}
	if m.reason != nil {
		fields = append(fields, adminloginrestriction.FieldReason)
	}
	if m._type != nil {
		fields = append(fields, adminloginrestriction.FieldType)
	}
	if m.method != nil {
		fields = append(fields, adminloginrestriction.FieldMethod)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminLoginRestrictionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adminloginrestriction.FieldCreatedAt:
		return m.CreatedAt()
	case adminloginrestriction.FieldUpdatedAt:
		return m.UpdatedAt()
	case adminloginrestriction.FieldDeletedAt:
		return m.DeletedAt()
	case adminloginrestriction.FieldCreatedBy:
		return m.CreatedBy()
	case adminloginrestriction.FieldUpdatedBy:
		return m.UpdatedBy()
	case adminloginrestriction.FieldDeletedBy:
		return m.DeletedBy()
	case adminloginrestriction.FieldTargetID:
		return m.TargetID()
	case adminloginrestriction.FieldValue:
		return m.Value()
	case adminloginrestriction.FieldReason:
		return m.Reason()
	case adminloginrestriction.FieldType:
		return m.GetType()
	case adminloginrestriction.FieldMethod:
		return m.Method()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminLoginRestrictionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adminloginrestriction.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case adminloginrestriction.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case adminloginrestriction.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case adminloginrestriction.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case adminloginrestriction.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case adminloginrestriction.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case adminloginrestriction.FieldTargetID:
		return m.OldTargetID(ctx)
	case adminloginrestriction.FieldValue:
		return m.OldValue(ctx)
	case adminloginrestriction.FieldReason:
		return m.OldReason(ctx)
	case adminloginrestriction.FieldType:
		return m.OldType(ctx)
	case adminloginrestriction.FieldMethod:
		return m.OldMethod(ctx)
	}
	return nil, fmt.Errorf("unknown AdminLoginRestriction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminLoginRestrictionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adminloginrestriction.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case adminloginrestriction.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case adminloginrestriction.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case adminloginrestriction.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case adminloginrestriction.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case adminloginrestriction.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case adminloginrestriction.FieldTargetID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetID(v)
		return nil
	case adminloginrestriction.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case adminloginrestriction.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case adminloginrestriction.FieldType:
		v, ok := value.(adminloginrestriction.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case adminloginrestriction.FieldMethod:
		v, ok := value.(adminloginrestriction.Method)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	}
	return fmt.Errorf("unknown AdminLoginRestriction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminLoginRestrictionMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, adminloginrestriction.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, adminloginrestriction.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, adminloginrestriction.FieldDeletedBy)
	}
	if m.addtarget_id != nil {
		fields = append(fields, adminloginrestriction.FieldTargetID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminLoginRestrictionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case adminloginrestriction.FieldCreatedBy:
		return m.AddedCreatedBy()
	case adminloginrestriction.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case adminloginrestriction.FieldDeletedBy:
		return m.AddedDeletedBy()
	case adminloginrestriction.FieldTargetID:
		return m.AddedTargetID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminLoginRestrictionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case adminloginrestriction.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case adminloginrestriction.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case adminloginrestriction.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case adminloginrestriction.FieldTargetID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTargetID(v)
		return nil
	}
	return fmt.Errorf("unknown AdminLoginRestriction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminLoginRestrictionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(adminloginrestriction.FieldCreatedAt) {
		fields = append(fields, adminloginrestriction.FieldCreatedAt)
	}
	if m.FieldCleared(adminloginrestriction.FieldUpdatedAt) {
		fields = append(fields, adminloginrestriction.FieldUpdatedAt)
	}
	if m.FieldCleared(adminloginrestriction.FieldDeletedAt) {
		fields = append(fields, adminloginrestriction.FieldDeletedAt)
	}
	if m.FieldCleared(adminloginrestriction.FieldCreatedBy) {
		fields = append(fields, adminloginrestriction.FieldCreatedBy)
	}
	if m.FieldCleared(adminloginrestriction.FieldUpdatedBy) {
		fields = append(fields, adminloginrestriction.FieldUpdatedBy)
	}
	if m.FieldCleared(adminloginrestriction.FieldDeletedBy) {
		fields = append(fields, adminloginrestriction.FieldDeletedBy)
	}
	if m.FieldCleared(adminloginrestriction.FieldTargetID) {
		fields = append(fields, adminloginrestriction.FieldTargetID)
	}
	if m.FieldCleared(adminloginrestriction.FieldValue) {
		fields = append(fields, adminloginrestriction.FieldValue)
	}
	if m.FieldCleared(adminloginrestriction.FieldReason) {
		fields = append(fields, adminloginrestriction.FieldReason)
	}
	if m.FieldCleared(adminloginrestriction.FieldType) {
		fields = append(fields, adminloginrestriction.FieldType)
	}
	if m.FieldCleared(adminloginrestriction.FieldMethod) {
		fields = append(fields, adminloginrestriction.FieldMethod)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminLoginRestrictionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminLoginRestrictionMutation) ClearField(name string) error {
	switch name {
	case adminloginrestriction.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case adminloginrestriction.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case adminloginrestriction.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case adminloginrestriction.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case adminloginrestriction.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case adminloginrestriction.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case adminloginrestriction.FieldTargetID:
		m.ClearTargetID()
		return nil
	case adminloginrestriction.FieldValue:
		m.ClearValue()
		return nil
	case adminloginrestriction.FieldReason:
		m.ClearReason()
		return nil
	case adminloginrestriction.FieldType:
		m.ClearType()
		return nil
	case adminloginrestriction.FieldMethod:
		m.ClearMethod()
		return nil
	}
	return fmt.Errorf("unknown AdminLoginRestriction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminLoginRestrictionMutation) ResetField(name string) error {
	switch name {
	case adminloginrestriction.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case adminloginrestriction.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case adminloginrestriction.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case adminloginrestriction.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case adminloginrestriction.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case adminloginrestriction.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case adminloginrestriction.FieldTargetID:
		m.ResetTargetID()
		return nil
	case adminloginrestriction.FieldValue:
		m.ResetValue()
		return nil
	case adminloginrestriction.FieldReason:
		m.ResetReason()
		return nil
	case adminloginrestriction.FieldType:
		m.ResetType()
		return nil
	case adminloginrestriction.FieldMethod:
		m.ResetMethod()
		return nil
	}
	return fmt.Errorf("unknown AdminLoginRestriction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminLoginRestrictionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminLoginRestrictionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminLoginRestrictionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminLoginRestrictionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminLoginRestrictionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminLoginRestrictionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminLoginRestrictionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AdminLoginRestriction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminLoginRestrictionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AdminLoginRestriction edge %s", name)
}

// AdminOperationLogMutation represents an operation that mutates the AdminOperationLog nodes in the graph.
type AdminOperationLogMutation struct {
	config
	op              Op
	typ             string
	id              *uint32
	created_at      *time.Time
	request_id      *string
	method          *string
	operation       *string
	_path           *string
	referer         *string
	request_uri     *string
	request_body    *string
	request_header  *string
	response        *string
	cost_time       *float64
	addcost_time    *float64
	user_id         *uint32
	adduser_id      *int32
	username        *string
	client_ip       *string
	status_code     *int32
	addstatus_code  *int32
	reason          *string
	success         *bool
	location        *string
	user_agent      *string
	browser_name    *string
	browser_version *string
	client_id       *string
	client_name     *string
	os_name         *string
	os_version      *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*AdminOperationLog, error)
	predicates      []predicate.AdminOperationLog
}

var _ ent.Mutation = (*AdminOperationLogMutation)(nil)

// adminoperationlogOption allows management of the mutation configuration using functional options.
type adminoperationlogOption func(*AdminOperationLogMutation)

// newAdminOperationLogMutation creates new mutation for the AdminOperationLog entity.
func newAdminOperationLogMutation(c config, op Op, opts ...adminoperationlogOption) *AdminOperationLogMutation {
	m := &AdminOperationLogMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminOperationLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminOperationLogID sets the ID field of the mutation.
func withAdminOperationLogID(id uint32) adminoperationlogOption {
	return func(m *AdminOperationLogMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminOperationLog
		)
		m.oldValue = func(ctx context.Context) (*AdminOperationLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminOperationLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminOperationLog sets the old AdminOperationLog of the mutation.
func withAdminOperationLog(node *AdminOperationLog) adminoperationlogOption {
	return func(m *AdminOperationLogMutation) {
		m.oldValue = func(context.Context) (*AdminOperationLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminOperationLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminOperationLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AdminOperationLog entities.
func (m *AdminOperationLogMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdminOperationLogMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdminOperationLogMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AdminOperationLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminOperationLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminOperationLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *AdminOperationLogMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[adminoperationlog.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *AdminOperationLogMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminOperationLogMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, adminoperationlog.FieldCreatedAt)
}

// SetRequestID sets the "request_id" field.
func (m *AdminOperationLogMutation) SetRequestID(s string) {
	m.request_id = &s
}

// RequestID returns the value of the "request_id" field in the mutation.
func (m *AdminOperationLogMutation) RequestID() (r string, exists bool) {
	v := m.request_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestID returns the old "request_id" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldRequestID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestID: %w", err)
	}
	return oldValue.RequestID, nil
}

// ClearRequestID clears the value of the "request_id" field.
func (m *AdminOperationLogMutation) ClearRequestID() {
	m.request_id = nil
	m.clearedFields[adminoperationlog.FieldRequestID] = struct{}{}
}

// RequestIDCleared returns if the "request_id" field was cleared in this mutation.
func (m *AdminOperationLogMutation) RequestIDCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldRequestID]
	return ok
}

// ResetRequestID resets all changes to the "request_id" field.
func (m *AdminOperationLogMutation) ResetRequestID() {
	m.request_id = nil
	delete(m.clearedFields, adminoperationlog.FieldRequestID)
}

// SetMethod sets the "method" field.
func (m *AdminOperationLogMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *AdminOperationLogMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldMethod(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ClearMethod clears the value of the "method" field.
func (m *AdminOperationLogMutation) ClearMethod() {
	m.method = nil
	m.clearedFields[adminoperationlog.FieldMethod] = struct{}{}
}

// MethodCleared returns if the "method" field was cleared in this mutation.
func (m *AdminOperationLogMutation) MethodCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldMethod]
	return ok
}

// ResetMethod resets all changes to the "method" field.
func (m *AdminOperationLogMutation) ResetMethod() {
	m.method = nil
	delete(m.clearedFields, adminoperationlog.FieldMethod)
}

// SetOperation sets the "operation" field.
func (m *AdminOperationLogMutation) SetOperation(s string) {
	m.operation = &s
}

// Operation returns the value of the "operation" field in the mutation.
func (m *AdminOperationLogMutation) Operation() (r string, exists bool) {
	v := m.operation
	if v == nil {
		return
	}
	return *v, true
}

// OldOperation returns the old "operation" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldOperation(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperation: %w", err)
	}
	return oldValue.Operation, nil
}

// ClearOperation clears the value of the "operation" field.
func (m *AdminOperationLogMutation) ClearOperation() {
	m.operation = nil
	m.clearedFields[adminoperationlog.FieldOperation] = struct{}{}
}

// OperationCleared returns if the "operation" field was cleared in this mutation.
func (m *AdminOperationLogMutation) OperationCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldOperation]
	return ok
}

// ResetOperation resets all changes to the "operation" field.
func (m *AdminOperationLogMutation) ResetOperation() {
	m.operation = nil
	delete(m.clearedFields, adminoperationlog.FieldOperation)
}

// SetPath sets the "path" field.
func (m *AdminOperationLogMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *AdminOperationLogMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldPath(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ClearPath clears the value of the "path" field.
func (m *AdminOperationLogMutation) ClearPath() {
	m._path = nil
	m.clearedFields[adminoperationlog.FieldPath] = struct{}{}
}

// PathCleared returns if the "path" field was cleared in this mutation.
func (m *AdminOperationLogMutation) PathCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldPath]
	return ok
}

// ResetPath resets all changes to the "path" field.
func (m *AdminOperationLogMutation) ResetPath() {
	m._path = nil
	delete(m.clearedFields, adminoperationlog.FieldPath)
}

// SetReferer sets the "referer" field.
func (m *AdminOperationLogMutation) SetReferer(s string) {
	m.referer = &s
}

// Referer returns the value of the "referer" field in the mutation.
func (m *AdminOperationLogMutation) Referer() (r string, exists bool) {
	v := m.referer
	if v == nil {
		return
	}
	return *v, true
}

// OldReferer returns the old "referer" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldReferer(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferer: %w", err)
	}
	return oldValue.Referer, nil
}

// ClearReferer clears the value of the "referer" field.
func (m *AdminOperationLogMutation) ClearReferer() {
	m.referer = nil
	m.clearedFields[adminoperationlog.FieldReferer] = struct{}{}
}

// RefererCleared returns if the "referer" field was cleared in this mutation.
func (m *AdminOperationLogMutation) RefererCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldReferer]
	return ok
}

// ResetReferer resets all changes to the "referer" field.
func (m *AdminOperationLogMutation) ResetReferer() {
	m.referer = nil
	delete(m.clearedFields, adminoperationlog.FieldReferer)
}

// SetRequestURI sets the "request_uri" field.
func (m *AdminOperationLogMutation) SetRequestURI(s string) {
	m.request_uri = &s
}

// RequestURI returns the value of the "request_uri" field in the mutation.
func (m *AdminOperationLogMutation) RequestURI() (r string, exists bool) {
	v := m.request_uri
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestURI returns the old "request_uri" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldRequestURI(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestURI is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestURI requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestURI: %w", err)
	}
	return oldValue.RequestURI, nil
}

// ClearRequestURI clears the value of the "request_uri" field.
func (m *AdminOperationLogMutation) ClearRequestURI() {
	m.request_uri = nil
	m.clearedFields[adminoperationlog.FieldRequestURI] = struct{}{}
}

// RequestURICleared returns if the "request_uri" field was cleared in this mutation.
func (m *AdminOperationLogMutation) RequestURICleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldRequestURI]
	return ok
}

// ResetRequestURI resets all changes to the "request_uri" field.
func (m *AdminOperationLogMutation) ResetRequestURI() {
	m.request_uri = nil
	delete(m.clearedFields, adminoperationlog.FieldRequestURI)
}

// SetRequestBody sets the "request_body" field.
func (m *AdminOperationLogMutation) SetRequestBody(s string) {
	m.request_body = &s
}

// RequestBody returns the value of the "request_body" field in the mutation.
func (m *AdminOperationLogMutation) RequestBody() (r string, exists bool) {
	v := m.request_body
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestBody returns the old "request_body" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldRequestBody(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestBody: %w", err)
	}
	return oldValue.RequestBody, nil
}

// ClearRequestBody clears the value of the "request_body" field.
func (m *AdminOperationLogMutation) ClearRequestBody() {
	m.request_body = nil
	m.clearedFields[adminoperationlog.FieldRequestBody] = struct{}{}
}

// RequestBodyCleared returns if the "request_body" field was cleared in this mutation.
func (m *AdminOperationLogMutation) RequestBodyCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldRequestBody]
	return ok
}

// ResetRequestBody resets all changes to the "request_body" field.
func (m *AdminOperationLogMutation) ResetRequestBody() {
	m.request_body = nil
	delete(m.clearedFields, adminoperationlog.FieldRequestBody)
}

// SetRequestHeader sets the "request_header" field.
func (m *AdminOperationLogMutation) SetRequestHeader(s string) {
	m.request_header = &s
}

// RequestHeader returns the value of the "request_header" field in the mutation.
func (m *AdminOperationLogMutation) RequestHeader() (r string, exists bool) {
	v := m.request_header
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestHeader returns the old "request_header" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldRequestHeader(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestHeader is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestHeader requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestHeader: %w", err)
	}
	return oldValue.RequestHeader, nil
}

// ClearRequestHeader clears the value of the "request_header" field.
func (m *AdminOperationLogMutation) ClearRequestHeader() {
	m.request_header = nil
	m.clearedFields[adminoperationlog.FieldRequestHeader] = struct{}{}
}

// RequestHeaderCleared returns if the "request_header" field was cleared in this mutation.
func (m *AdminOperationLogMutation) RequestHeaderCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldRequestHeader]
	return ok
}

// ResetRequestHeader resets all changes to the "request_header" field.
func (m *AdminOperationLogMutation) ResetRequestHeader() {
	m.request_header = nil
	delete(m.clearedFields, adminoperationlog.FieldRequestHeader)
}

// SetResponse sets the "response" field.
func (m *AdminOperationLogMutation) SetResponse(s string) {
	m.response = &s
}

// Response returns the value of the "response" field in the mutation.
func (m *AdminOperationLogMutation) Response() (r string, exists bool) {
	v := m.response
	if v == nil {
		return
	}
	return *v, true
}

// OldResponse returns the old "response" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldResponse(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResponse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResponse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponse: %w", err)
	}
	return oldValue.Response, nil
}

// ClearResponse clears the value of the "response" field.
func (m *AdminOperationLogMutation) ClearResponse() {
	m.response = nil
	m.clearedFields[adminoperationlog.FieldResponse] = struct{}{}
}

// ResponseCleared returns if the "response" field was cleared in this mutation.
func (m *AdminOperationLogMutation) ResponseCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldResponse]
	return ok
}

// ResetResponse resets all changes to the "response" field.
func (m *AdminOperationLogMutation) ResetResponse() {
	m.response = nil
	delete(m.clearedFields, adminoperationlog.FieldResponse)
}

// SetCostTime sets the "cost_time" field.
func (m *AdminOperationLogMutation) SetCostTime(f float64) {
	m.cost_time = &f
	m.addcost_time = nil
}

// CostTime returns the value of the "cost_time" field in the mutation.
func (m *AdminOperationLogMutation) CostTime() (r float64, exists bool) {
	v := m.cost_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCostTime returns the old "cost_time" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldCostTime(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCostTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCostTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCostTime: %w", err)
	}
	return oldValue.CostTime, nil
}

// AddCostTime adds f to the "cost_time" field.
func (m *AdminOperationLogMutation) AddCostTime(f float64) {
	if m.addcost_time != nil {
		*m.addcost_time += f
	} else {
		m.addcost_time = &f
	}
}

// AddedCostTime returns the value that was added to the "cost_time" field in this mutation.
func (m *AdminOperationLogMutation) AddedCostTime() (r float64, exists bool) {
	v := m.addcost_time
	if v == nil {
		return
	}
	return *v, true
}

// ClearCostTime clears the value of the "cost_time" field.
func (m *AdminOperationLogMutation) ClearCostTime() {
	m.cost_time = nil
	m.addcost_time = nil
	m.clearedFields[adminoperationlog.FieldCostTime] = struct{}{}
}

// CostTimeCleared returns if the "cost_time" field was cleared in this mutation.
func (m *AdminOperationLogMutation) CostTimeCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldCostTime]
	return ok
}

// ResetCostTime resets all changes to the "cost_time" field.
func (m *AdminOperationLogMutation) ResetCostTime() {
	m.cost_time = nil
	m.addcost_time = nil
	delete(m.clearedFields, adminoperationlog.FieldCostTime)
}

// SetUserID sets the "user_id" field.
func (m *AdminOperationLogMutation) SetUserID(u uint32) {
	m.user_id = &u
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AdminOperationLogMutation) UserID() (r uint32, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldUserID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds u to the "user_id" field.
func (m *AdminOperationLogMutation) AddUserID(u int32) {
	if m.adduser_id != nil {
		*m.adduser_id += u
	} else {
		m.adduser_id = &u
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *AdminOperationLogMutation) AddedUserID() (r int32, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearUserID clears the value of the "user_id" field.
func (m *AdminOperationLogMutation) ClearUserID() {
	m.user_id = nil
	m.adduser_id = nil
	m.clearedFields[adminoperationlog.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *AdminOperationLogMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AdminOperationLogMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
	delete(m.clearedFields, adminoperationlog.FieldUserID)
}

// SetUsername sets the "username" field.
func (m *AdminOperationLogMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *AdminOperationLogMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldUsername(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *AdminOperationLogMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[adminoperationlog.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *AdminOperationLogMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *AdminOperationLogMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, adminoperationlog.FieldUsername)
}

// SetClientIP sets the "client_ip" field.
func (m *AdminOperationLogMutation) SetClientIP(s string) {
	m.client_ip = &s
}

// ClientIP returns the value of the "client_ip" field in the mutation.
func (m *AdminOperationLogMutation) ClientIP() (r string, exists bool) {
	v := m.client_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldClientIP returns the old "client_ip" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldClientIP(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientIP: %w", err)
	}
	return oldValue.ClientIP, nil
}

// ClearClientIP clears the value of the "client_ip" field.
func (m *AdminOperationLogMutation) ClearClientIP() {
	m.client_ip = nil
	m.clearedFields[adminoperationlog.FieldClientIP] = struct{}{}
}

// ClientIPCleared returns if the "client_ip" field was cleared in this mutation.
func (m *AdminOperationLogMutation) ClientIPCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldClientIP]
	return ok
}

// ResetClientIP resets all changes to the "client_ip" field.
func (m *AdminOperationLogMutation) ResetClientIP() {
	m.client_ip = nil
	delete(m.clearedFields, adminoperationlog.FieldClientIP)
}

// SetStatusCode sets the "status_code" field.
func (m *AdminOperationLogMutation) SetStatusCode(i int32) {
	m.status_code = &i
	m.addstatus_code = nil
}

// StatusCode returns the value of the "status_code" field in the mutation.
func (m *AdminOperationLogMutation) StatusCode() (r int32, exists bool) {
	v := m.status_code
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusCode returns the old "status_code" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldStatusCode(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatusCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatusCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusCode: %w", err)
	}
	return oldValue.StatusCode, nil
}

// AddStatusCode adds i to the "status_code" field.
func (m *AdminOperationLogMutation) AddStatusCode(i int32) {
	if m.addstatus_code != nil {
		*m.addstatus_code += i
	} else {
		m.addstatus_code = &i
	}
}

// AddedStatusCode returns the value that was added to the "status_code" field in this mutation.
func (m *AdminOperationLogMutation) AddedStatusCode() (r int32, exists bool) {
	v := m.addstatus_code
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatusCode clears the value of the "status_code" field.
func (m *AdminOperationLogMutation) ClearStatusCode() {
	m.status_code = nil
	m.addstatus_code = nil
	m.clearedFields[adminoperationlog.FieldStatusCode] = struct{}{}
}

// StatusCodeCleared returns if the "status_code" field was cleared in this mutation.
func (m *AdminOperationLogMutation) StatusCodeCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldStatusCode]
	return ok
}

// ResetStatusCode resets all changes to the "status_code" field.
func (m *AdminOperationLogMutation) ResetStatusCode() {
	m.status_code = nil
	m.addstatus_code = nil
	delete(m.clearedFields, adminoperationlog.FieldStatusCode)
}

// SetReason sets the "reason" field.
func (m *AdminOperationLogMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *AdminOperationLogMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldReason(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ClearReason clears the value of the "reason" field.
func (m *AdminOperationLogMutation) ClearReason() {
	m.reason = nil
	m.clearedFields[adminoperationlog.FieldReason] = struct{}{}
}

// ReasonCleared returns if the "reason" field was cleared in this mutation.
func (m *AdminOperationLogMutation) ReasonCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldReason]
	return ok
}

// ResetReason resets all changes to the "reason" field.
func (m *AdminOperationLogMutation) ResetReason() {
	m.reason = nil
	delete(m.clearedFields, adminoperationlog.FieldReason)
}

// SetSuccess sets the "success" field.
func (m *AdminOperationLogMutation) SetSuccess(b bool) {
	m.success = &b
}

// Success returns the value of the "success" field in the mutation.
func (m *AdminOperationLogMutation) Success() (r bool, exists bool) {
	v := m.success
	if v == nil {
		return
	}
	return *v, true
}

// OldSuccess returns the old "success" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldSuccess(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuccess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuccess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuccess: %w", err)
	}
	return oldValue.Success, nil
}

// ClearSuccess clears the value of the "success" field.
func (m *AdminOperationLogMutation) ClearSuccess() {
	m.success = nil
	m.clearedFields[adminoperationlog.FieldSuccess] = struct{}{}
}

// SuccessCleared returns if the "success" field was cleared in this mutation.
func (m *AdminOperationLogMutation) SuccessCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldSuccess]
	return ok
}

// ResetSuccess resets all changes to the "success" field.
func (m *AdminOperationLogMutation) ResetSuccess() {
	m.success = nil
	delete(m.clearedFields, adminoperationlog.FieldSuccess)
}

// SetLocation sets the "location" field.
func (m *AdminOperationLogMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *AdminOperationLogMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldLocation(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ClearLocation clears the value of the "location" field.
func (m *AdminOperationLogMutation) ClearLocation() {
	m.location = nil
	m.clearedFields[adminoperationlog.FieldLocation] = struct{}{}
}

// LocationCleared returns if the "location" field was cleared in this mutation.
func (m *AdminOperationLogMutation) LocationCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldLocation]
	return ok
}

// ResetLocation resets all changes to the "location" field.
func (m *AdminOperationLogMutation) ResetLocation() {
	m.location = nil
	delete(m.clearedFields, adminoperationlog.FieldLocation)
}

// SetUserAgent sets the "user_agent" field.
func (m *AdminOperationLogMutation) SetUserAgent(s string) {
	m.user_agent = &s
}

// UserAgent returns the value of the "user_agent" field in the mutation.
func (m *AdminOperationLogMutation) UserAgent() (r string, exists bool) {
	v := m.user_agent
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAgent returns the old "user_agent" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldUserAgent(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserAgent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserAgent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAgent: %w", err)
	}
	return oldValue.UserAgent, nil
}

// ClearUserAgent clears the value of the "user_agent" field.
func (m *AdminOperationLogMutation) ClearUserAgent() {
	m.user_agent = nil
	m.clearedFields[adminoperationlog.FieldUserAgent] = struct{}{}
}

// UserAgentCleared returns if the "user_agent" field was cleared in this mutation.
func (m *AdminOperationLogMutation) UserAgentCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldUserAgent]
	return ok
}

// ResetUserAgent resets all changes to the "user_agent" field.
func (m *AdminOperationLogMutation) ResetUserAgent() {
	m.user_agent = nil
	delete(m.clearedFields, adminoperationlog.FieldUserAgent)
}

// SetBrowserName sets the "browser_name" field.
func (m *AdminOperationLogMutation) SetBrowserName(s string) {
	m.browser_name = &s
}

// BrowserName returns the value of the "browser_name" field in the mutation.
func (m *AdminOperationLogMutation) BrowserName() (r string, exists bool) {
	v := m.browser_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBrowserName returns the old "browser_name" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldBrowserName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrowserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrowserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrowserName: %w", err)
	}
	return oldValue.BrowserName, nil
}

// ClearBrowserName clears the value of the "browser_name" field.
func (m *AdminOperationLogMutation) ClearBrowserName() {
	m.browser_name = nil
	m.clearedFields[adminoperationlog.FieldBrowserName] = struct{}{}
}

// BrowserNameCleared returns if the "browser_name" field was cleared in this mutation.
func (m *AdminOperationLogMutation) BrowserNameCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldBrowserName]
	return ok
}

// ResetBrowserName resets all changes to the "browser_name" field.
func (m *AdminOperationLogMutation) ResetBrowserName() {
	m.browser_name = nil
	delete(m.clearedFields, adminoperationlog.FieldBrowserName)
}

// SetBrowserVersion sets the "browser_version" field.
func (m *AdminOperationLogMutation) SetBrowserVersion(s string) {
	m.browser_version = &s
}

// BrowserVersion returns the value of the "browser_version" field in the mutation.
func (m *AdminOperationLogMutation) BrowserVersion() (r string, exists bool) {
	v := m.browser_version
	if v == nil {
		return
	}
	return *v, true
}

// OldBrowserVersion returns the old "browser_version" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldBrowserVersion(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrowserVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrowserVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrowserVersion: %w", err)
	}
	return oldValue.BrowserVersion, nil
}

// ClearBrowserVersion clears the value of the "browser_version" field.
func (m *AdminOperationLogMutation) ClearBrowserVersion() {
	m.browser_version = nil
	m.clearedFields[adminoperationlog.FieldBrowserVersion] = struct{}{}
}

// BrowserVersionCleared returns if the "browser_version" field was cleared in this mutation.
func (m *AdminOperationLogMutation) BrowserVersionCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldBrowserVersion]
	return ok
}

// ResetBrowserVersion resets all changes to the "browser_version" field.
func (m *AdminOperationLogMutation) ResetBrowserVersion() {
	m.browser_version = nil
	delete(m.clearedFields, adminoperationlog.FieldBrowserVersion)
}

// SetClientID sets the "client_id" field.
func (m *AdminOperationLogMutation) SetClientID(s string) {
	m.client_id = &s
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *AdminOperationLogMutation) ClientID() (r string, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldClientID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// ClearClientID clears the value of the "client_id" field.
func (m *AdminOperationLogMutation) ClearClientID() {
	m.client_id = nil
	m.clearedFields[adminoperationlog.FieldClientID] = struct{}{}
}

// ClientIDCleared returns if the "client_id" field was cleared in this mutation.
func (m *AdminOperationLogMutation) ClientIDCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldClientID]
	return ok
}

// ResetClientID resets all changes to the "client_id" field.
func (m *AdminOperationLogMutation) ResetClientID() {
	m.client_id = nil
	delete(m.clearedFields, adminoperationlog.FieldClientID)
}

// SetClientName sets the "client_name" field.
func (m *AdminOperationLogMutation) SetClientName(s string) {
	m.client_name = &s
}

// ClientName returns the value of the "client_name" field in the mutation.
func (m *AdminOperationLogMutation) ClientName() (r string, exists bool) {
	v := m.client_name
	if v == nil {
		return
	}
	return *v, true
}

// OldClientName returns the old "client_name" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldClientName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientName: %w", err)
	}
	return oldValue.ClientName, nil
}

// ClearClientName clears the value of the "client_name" field.
func (m *AdminOperationLogMutation) ClearClientName() {
	m.client_name = nil
	m.clearedFields[adminoperationlog.FieldClientName] = struct{}{}
}

// ClientNameCleared returns if the "client_name" field was cleared in this mutation.
func (m *AdminOperationLogMutation) ClientNameCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldClientName]
	return ok
}

// ResetClientName resets all changes to the "client_name" field.
func (m *AdminOperationLogMutation) ResetClientName() {
	m.client_name = nil
	delete(m.clearedFields, adminoperationlog.FieldClientName)
}

// SetOsName sets the "os_name" field.
func (m *AdminOperationLogMutation) SetOsName(s string) {
	m.os_name = &s
}

// OsName returns the value of the "os_name" field in the mutation.
func (m *AdminOperationLogMutation) OsName() (r string, exists bool) {
	v := m.os_name
	if v == nil {
		return
	}
	return *v, true
}

// OldOsName returns the old "os_name" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldOsName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOsName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOsName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOsName: %w", err)
	}
	return oldValue.OsName, nil
}

// ClearOsName clears the value of the "os_name" field.
func (m *AdminOperationLogMutation) ClearOsName() {
	m.os_name = nil
	m.clearedFields[adminoperationlog.FieldOsName] = struct{}{}
}

// OsNameCleared returns if the "os_name" field was cleared in this mutation.
func (m *AdminOperationLogMutation) OsNameCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldOsName]
	return ok
}

// ResetOsName resets all changes to the "os_name" field.
func (m *AdminOperationLogMutation) ResetOsName() {
	m.os_name = nil
	delete(m.clearedFields, adminoperationlog.FieldOsName)
}

// SetOsVersion sets the "os_version" field.
func (m *AdminOperationLogMutation) SetOsVersion(s string) {
	m.os_version = &s
}

// OsVersion returns the value of the "os_version" field in the mutation.
func (m *AdminOperationLogMutation) OsVersion() (r string, exists bool) {
	v := m.os_version
	if v == nil {
		return
	}
	return *v, true
}

// OldOsVersion returns the old "os_version" field's value of the AdminOperationLog entity.
// If the AdminOperationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminOperationLogMutation) OldOsVersion(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOsVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOsVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOsVersion: %w", err)
	}
	return oldValue.OsVersion, nil
}

// ClearOsVersion clears the value of the "os_version" field.
func (m *AdminOperationLogMutation) ClearOsVersion() {
	m.os_version = nil
	m.clearedFields[adminoperationlog.FieldOsVersion] = struct{}{}
}

// OsVersionCleared returns if the "os_version" field was cleared in this mutation.
func (m *AdminOperationLogMutation) OsVersionCleared() bool {
	_, ok := m.clearedFields[adminoperationlog.FieldOsVersion]
	return ok
}

// ResetOsVersion resets all changes to the "os_version" field.
func (m *AdminOperationLogMutation) ResetOsVersion() {
	m.os_version = nil
	delete(m.clearedFields, adminoperationlog.FieldOsVersion)
}

// Where appends a list predicates to the AdminOperationLogMutation builder.
func (m *AdminOperationLogMutation) Where(ps ...predicate.AdminOperationLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdminOperationLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdminOperationLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AdminOperationLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdminOperationLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdminOperationLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AdminOperationLog).
func (m *AdminOperationLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminOperationLogMutation) Fields() []string {
	fields := make([]string, 0, 25)
	if m.created_at != nil {
		fields = append(fields, adminoperationlog.FieldCreatedAt)
	}
	if m.request_id != nil {
		fields = append(fields, adminoperationlog.FieldRequestID)
	}
	if m.method != nil {
		fields = append(fields, adminoperationlog.FieldMethod)
	}
	if m.operation != nil {
		fields = append(fields, adminoperationlog.FieldOperation)
	}
	if m._path != nil {
		fields = append(fields, adminoperationlog.FieldPath)
	}
	if m.referer != nil {
		fields = append(fields, adminoperationlog.FieldReferer)
	}
	if m.request_uri != nil {
		fields = append(fields, adminoperationlog.FieldRequestURI)
	}
	if m.request_body != nil {
		fields = append(fields, adminoperationlog.FieldRequestBody)
	}
	if m.request_header != nil {
		fields = append(fields, adminoperationlog.FieldRequestHeader)
	}
	if m.response != nil {
		fields = append(fields, adminoperationlog.FieldResponse)
	}
	if m.cost_time != nil {
		fields = append(fields, adminoperationlog.FieldCostTime)
	}
	if m.user_id != nil {
		fields = append(fields, adminoperationlog.FieldUserID)
	}
	if m.username != nil {
		fields = append(fields, adminoperationlog.FieldUsername)
	}
	if m.client_ip != nil {
		fields = append(fields, adminoperationlog.FieldClientIP)
	}
	if m.status_code != nil {
		fields = append(fields, adminoperationlog.FieldStatusCode)
	}
	if m.reason != nil {
		fields = append(fields, adminoperationlog.FieldReason)
	}
	if m.success != nil {
		fields = append(fields, adminoperationlog.FieldSuccess)
	}
	if m.location != nil {
		fields = append(fields, adminoperationlog.FieldLocation)
	}
	if m.user_agent != nil {
		fields = append(fields, adminoperationlog.FieldUserAgent)
	}
	if m.browser_name != nil {
		fields = append(fields, adminoperationlog.FieldBrowserName)
	}
	if m.browser_version != nil {
		fields = append(fields, adminoperationlog.FieldBrowserVersion)
	}
	if m.client_id != nil {
		fields = append(fields, adminoperationlog.FieldClientID)
	}
	if m.client_name != nil {
		fields = append(fields, adminoperationlog.FieldClientName)
	}
	if m.os_name != nil {
		fields = append(fields, adminoperationlog.FieldOsName)
	}
	if m.os_version != nil {
		fields = append(fields, adminoperationlog.FieldOsVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminOperationLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adminoperationlog.FieldCreatedAt:
		return m.CreatedAt()
	case adminoperationlog.FieldRequestID:
		return m.RequestID()
	case adminoperationlog.FieldMethod:
		return m.Method()
	case adminoperationlog.FieldOperation:
		return m.Operation()
	case adminoperationlog.FieldPath:
		return m.Path()
	case adminoperationlog.FieldReferer:
		return m.Referer()
	case adminoperationlog.FieldRequestURI:
		return m.RequestURI()
	case adminoperationlog.FieldRequestBody:
		return m.RequestBody()
	case adminoperationlog.FieldRequestHeader:
		return m.RequestHeader()
	case adminoperationlog.FieldResponse:
		return m.Response()
	case adminoperationlog.FieldCostTime:
		return m.CostTime()
	case adminoperationlog.FieldUserID:
		return m.UserID()
	case adminoperationlog.FieldUsername:
		return m.Username()
	case adminoperationlog.FieldClientIP:
		return m.ClientIP()
	case adminoperationlog.FieldStatusCode:
		return m.StatusCode()
	case adminoperationlog.FieldReason:
		return m.Reason()
	case adminoperationlog.FieldSuccess:
		return m.Success()
	case adminoperationlog.FieldLocation:
		return m.Location()
	case adminoperationlog.FieldUserAgent:
		return m.UserAgent()
	case adminoperationlog.FieldBrowserName:
		return m.BrowserName()
	case adminoperationlog.FieldBrowserVersion:
		return m.BrowserVersion()
	case adminoperationlog.FieldClientID:
		return m.ClientID()
	case adminoperationlog.FieldClientName:
		return m.ClientName()
	case adminoperationlog.FieldOsName:
		return m.OsName()
	case adminoperationlog.FieldOsVersion:
		return m.OsVersion()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminOperationLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adminoperationlog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case adminoperationlog.FieldRequestID:
		return m.OldRequestID(ctx)
	case adminoperationlog.FieldMethod:
		return m.OldMethod(ctx)
	case adminoperationlog.FieldOperation:
		return m.OldOperation(ctx)
	case adminoperationlog.FieldPath:
		return m.OldPath(ctx)
	case adminoperationlog.FieldReferer:
		return m.OldReferer(ctx)
	case adminoperationlog.FieldRequestURI:
		return m.OldRequestURI(ctx)
	case adminoperationlog.FieldRequestBody:
		return m.OldRequestBody(ctx)
	case adminoperationlog.FieldRequestHeader:
		return m.OldRequestHeader(ctx)
	case adminoperationlog.FieldResponse:
		return m.OldResponse(ctx)
	case adminoperationlog.FieldCostTime:
		return m.OldCostTime(ctx)
	case adminoperationlog.FieldUserID:
		return m.OldUserID(ctx)
	case adminoperationlog.FieldUsername:
		return m.OldUsername(ctx)
	case adminoperationlog.FieldClientIP:
		return m.OldClientIP(ctx)
	case adminoperationlog.FieldStatusCode:
		return m.OldStatusCode(ctx)
	case adminoperationlog.FieldReason:
		return m.OldReason(ctx)
	case adminoperationlog.FieldSuccess:
		return m.OldSuccess(ctx)
	case adminoperationlog.FieldLocation:
		return m.OldLocation(ctx)
	case adminoperationlog.FieldUserAgent:
		return m.OldUserAgent(ctx)
	case adminoperationlog.FieldBrowserName:
		return m.OldBrowserName(ctx)
	case adminoperationlog.FieldBrowserVersion:
		return m.OldBrowserVersion(ctx)
	case adminoperationlog.FieldClientID:
		return m.OldClientID(ctx)
	case adminoperationlog.FieldClientName:
		return m.OldClientName(ctx)
	case adminoperationlog.FieldOsName:
		return m.OldOsName(ctx)
	case adminoperationlog.FieldOsVersion:
		return m.OldOsVersion(ctx)
	}
	return nil, fmt.Errorf("unknown AdminOperationLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminOperationLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adminoperationlog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case adminoperationlog.FieldRequestID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestID(v)
		return nil
	case adminoperationlog.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case adminoperationlog.FieldOperation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperation(v)
		return nil
	case adminoperationlog.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case adminoperationlog.FieldReferer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferer(v)
		return nil
	case adminoperationlog.FieldRequestURI:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestURI(v)
		return nil
	case adminoperationlog.FieldRequestBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestBody(v)
		return nil
	case adminoperationlog.FieldRequestHeader:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestHeader(v)
		return nil
	case adminoperationlog.FieldResponse:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponse(v)
		return nil
	case adminoperationlog.FieldCostTime:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCostTime(v)
		return nil
	case adminoperationlog.FieldUserID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case adminoperationlog.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case adminoperationlog.FieldClientIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientIP(v)
		return nil
	case adminoperationlog.FieldStatusCode:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusCode(v)
		return nil
	case adminoperationlog.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case adminoperationlog.FieldSuccess:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuccess(v)
		return nil
	case adminoperationlog.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case adminoperationlog.FieldUserAgent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAgent(v)
		return nil
	case adminoperationlog.FieldBrowserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrowserName(v)
		return nil
	case adminoperationlog.FieldBrowserVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrowserVersion(v)
		return nil
	case adminoperationlog.FieldClientID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	case adminoperationlog.FieldClientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientName(v)
		return nil
	case adminoperationlog.FieldOsName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOsName(v)
		return nil
	case adminoperationlog.FieldOsVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOsVersion(v)
		return nil
	}
	return fmt.Errorf("unknown AdminOperationLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminOperationLogMutation) AddedFields() []string {
	var fields []string
	if m.addcost_time != nil {
		fields = append(fields, adminoperationlog.FieldCostTime)
	}
	if m.adduser_id != nil {
		fields = append(fields, adminoperationlog.FieldUserID)
	}
	if m.addstatus_code != nil {
		fields = append(fields, adminoperationlog.FieldStatusCode)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminOperationLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case adminoperationlog.FieldCostTime:
		return m.AddedCostTime()
	case adminoperationlog.FieldUserID:
		return m.AddedUserID()
	case adminoperationlog.FieldStatusCode:
		return m.AddedStatusCode()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminOperationLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case adminoperationlog.FieldCostTime:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCostTime(v)
		return nil
	case adminoperationlog.FieldUserID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case adminoperationlog.FieldStatusCode:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatusCode(v)
		return nil
	}
	return fmt.Errorf("unknown AdminOperationLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminOperationLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(adminoperationlog.FieldCreatedAt) {
		fields = append(fields, adminoperationlog.FieldCreatedAt)
	}
	if m.FieldCleared(adminoperationlog.FieldRequestID) {
		fields = append(fields, adminoperationlog.FieldRequestID)
	}
	if m.FieldCleared(adminoperationlog.FieldMethod) {
		fields = append(fields, adminoperationlog.FieldMethod)
	}
	if m.FieldCleared(adminoperationlog.FieldOperation) {
		fields = append(fields, adminoperationlog.FieldOperation)
	}
	if m.FieldCleared(adminoperationlog.FieldPath) {
		fields = append(fields, adminoperationlog.FieldPath)
	}
	if m.FieldCleared(adminoperationlog.FieldReferer) {
		fields = append(fields, adminoperationlog.FieldReferer)
	}
	if m.FieldCleared(adminoperationlog.FieldRequestURI) {
		fields = append(fields, adminoperationlog.FieldRequestURI)
	}
	if m.FieldCleared(adminoperationlog.FieldRequestBody) {
		fields = append(fields, adminoperationlog.FieldRequestBody)
	}
	if m.FieldCleared(adminoperationlog.FieldRequestHeader) {
		fields = append(fields, adminoperationlog.FieldRequestHeader)
	}
	if m.FieldCleared(adminoperationlog.FieldResponse) {
		fields = append(fields, adminoperationlog.FieldResponse)
	}
	if m.FieldCleared(adminoperationlog.FieldCostTime) {
		fields = append(fields, adminoperationlog.FieldCostTime)
	}
	if m.FieldCleared(adminoperationlog.FieldUserID) {
		fields = append(fields, adminoperationlog.FieldUserID)
	}
	if m.FieldCleared(adminoperationlog.FieldUsername) {
		fields = append(fields, adminoperationlog.FieldUsername)
	}
	if m.FieldCleared(adminoperationlog.FieldClientIP) {
		fields = append(fields, adminoperationlog.FieldClientIP)
	}
	if m.FieldCleared(adminoperationlog.FieldStatusCode) {
		fields = append(fields, adminoperationlog.FieldStatusCode)
	}
	if m.FieldCleared(adminoperationlog.FieldReason) {
		fields = append(fields, adminoperationlog.FieldReason)
	}
	if m.FieldCleared(adminoperationlog.FieldSuccess) {
		fields = append(fields, adminoperationlog.FieldSuccess)
	}
	if m.FieldCleared(adminoperationlog.FieldLocation) {
		fields = append(fields, adminoperationlog.FieldLocation)
	}
	if m.FieldCleared(adminoperationlog.FieldUserAgent) {
		fields = append(fields, adminoperationlog.FieldUserAgent)
	}
	if m.FieldCleared(adminoperationlog.FieldBrowserName) {
		fields = append(fields, adminoperationlog.FieldBrowserName)
	}
	if m.FieldCleared(adminoperationlog.FieldBrowserVersion) {
		fields = append(fields, adminoperationlog.FieldBrowserVersion)
	}
	if m.FieldCleared(adminoperationlog.FieldClientID) {
		fields = append(fields, adminoperationlog.FieldClientID)
	}
	if m.FieldCleared(adminoperationlog.FieldClientName) {
		fields = append(fields, adminoperationlog.FieldClientName)
	}
	if m.FieldCleared(adminoperationlog.FieldOsName) {
		fields = append(fields, adminoperationlog.FieldOsName)
	}
	if m.FieldCleared(adminoperationlog.FieldOsVersion) {
		fields = append(fields, adminoperationlog.FieldOsVersion)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminOperationLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminOperationLogMutation) ClearField(name string) error {
	switch name {
	case adminoperationlog.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case adminoperationlog.FieldRequestID:
		m.ClearRequestID()
		return nil
	case adminoperationlog.FieldMethod:
		m.ClearMethod()
		return nil
	case adminoperationlog.FieldOperation:
		m.ClearOperation()
		return nil
	case adminoperationlog.FieldPath:
		m.ClearPath()
		return nil
	case adminoperationlog.FieldReferer:
		m.ClearReferer()
		return nil
	case adminoperationlog.FieldRequestURI:
		m.ClearRequestURI()
		return nil
	case adminoperationlog.FieldRequestBody:
		m.ClearRequestBody()
		return nil
	case adminoperationlog.FieldRequestHeader:
		m.ClearRequestHeader()
		return nil
	case adminoperationlog.FieldResponse:
		m.ClearResponse()
		return nil
	case adminoperationlog.FieldCostTime:
		m.ClearCostTime()
		return nil
	case adminoperationlog.FieldUserID:
		m.ClearUserID()
		return nil
	case adminoperationlog.FieldUsername:
		m.ClearUsername()
		return nil
	case adminoperationlog.FieldClientIP:
		m.ClearClientIP()
		return nil
	case adminoperationlog.FieldStatusCode:
		m.ClearStatusCode()
		return nil
	case adminoperationlog.FieldReason:
		m.ClearReason()
		return nil
	case adminoperationlog.FieldSuccess:
		m.ClearSuccess()
		return nil
	case adminoperationlog.FieldLocation:
		m.ClearLocation()
		return nil
	case adminoperationlog.FieldUserAgent:
		m.ClearUserAgent()
		return nil
	case adminoperationlog.FieldBrowserName:
		m.ClearBrowserName()
		return nil
	case adminoperationlog.FieldBrowserVersion:
		m.ClearBrowserVersion()
		return nil
	case adminoperationlog.FieldClientID:
		m.ClearClientID()
		return nil
	case adminoperationlog.FieldClientName:
		m.ClearClientName()
		return nil
	case adminoperationlog.FieldOsName:
		m.ClearOsName()
		return nil
	case adminoperationlog.FieldOsVersion:
		m.ClearOsVersion()
		return nil
	}
	return fmt.Errorf("unknown AdminOperationLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminOperationLogMutation) ResetField(name string) error {
	switch name {
	case adminoperationlog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case adminoperationlog.FieldRequestID:
		m.ResetRequestID()
		return nil
	case adminoperationlog.FieldMethod:
		m.ResetMethod()
		return nil
	case adminoperationlog.FieldOperation:
		m.ResetOperation()
		return nil
	case adminoperationlog.FieldPath:
		m.ResetPath()
		return nil
	case adminoperationlog.FieldReferer:
		m.ResetReferer()
		return nil
	case adminoperationlog.FieldRequestURI:
		m.ResetRequestURI()
		return nil
	case adminoperationlog.FieldRequestBody:
		m.ResetRequestBody()
		return nil
	case adminoperationlog.FieldRequestHeader:
		m.ResetRequestHeader()
		return nil
	case adminoperationlog.FieldResponse:
		m.ResetResponse()
		return nil
	case adminoperationlog.FieldCostTime:
		m.ResetCostTime()
		return nil
	case adminoperationlog.FieldUserID:
		m.ResetUserID()
		return nil
	case adminoperationlog.FieldUsername:
		m.ResetUsername()
		return nil
	case adminoperationlog.FieldClientIP:
		m.ResetClientIP()
		return nil
	case adminoperationlog.FieldStatusCode:
		m.ResetStatusCode()
		return nil
	case adminoperationlog.FieldReason:
		m.ResetReason()
		return nil
	case adminoperationlog.FieldSuccess:
		m.ResetSuccess()
		return nil
	case adminoperationlog.FieldLocation:
		m.ResetLocation()
		return nil
	case adminoperationlog.FieldUserAgent:
		m.ResetUserAgent()
		return nil
	case adminoperationlog.FieldBrowserName:
		m.ResetBrowserName()
		return nil
	case adminoperationlog.FieldBrowserVersion:
		m.ResetBrowserVersion()
		return nil
	case adminoperationlog.FieldClientID:
		m.ResetClientID()
		return nil
	case adminoperationlog.FieldClientName:
		m.ResetClientName()
		return nil
	case adminoperationlog.FieldOsName:
		m.ResetOsName()
		return nil
	case adminoperationlog.FieldOsVersion:
		m.ResetOsVersion()
		return nil
	}
	return fmt.Errorf("unknown AdminOperationLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminOperationLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminOperationLogMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminOperationLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminOperationLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminOperationLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminOperationLogMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminOperationLogMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AdminOperationLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminOperationLogMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AdminOperationLog edge %s", name)
}

// ApiResourceMutation represents an operation that mutates the ApiResource nodes in the graph.
type ApiResourceMutation struct {
	config
	op                 Op
	typ                string
	id                 *uint32
	created_at         *time.Time
	updated_at         *time.Time
	deleted_at         *time.Time
	created_by         *uint32
	addcreated_by      *int32
	updated_by         *uint32
	addupdated_by      *int32
	deleted_by         *uint32
	adddeleted_by      *int32
	description        *string
	module             *string
	module_description *string
	operation          *string
	_path              *string
	method             *string
	scope              *apiresource.Scope
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*ApiResource, error)
	predicates         []predicate.ApiResource
}

var _ ent.Mutation = (*ApiResourceMutation)(nil)

// apiresourceOption allows management of the mutation configuration using functional options.
type apiresourceOption func(*ApiResourceMutation)

// newApiResourceMutation creates new mutation for the ApiResource entity.
func newApiResourceMutation(c config, op Op, opts ...apiresourceOption) *ApiResourceMutation {
	m := &ApiResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeApiResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApiResourceID sets the ID field of the mutation.
func withApiResourceID(id uint32) apiresourceOption {
	return func(m *ApiResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *ApiResource
		)
		m.oldValue = func(ctx context.Context) (*ApiResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ApiResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApiResource sets the old ApiResource of the mutation.
func withApiResource(node *ApiResource) apiresourceOption {
	return func(m *ApiResourceMutation) {
		m.oldValue = func(context.Context) (*ApiResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApiResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApiResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ApiResource entities.
func (m *ApiResourceMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApiResourceMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApiResourceMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ApiResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ApiResourceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ApiResourceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ApiResource entity.
// If the ApiResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourceMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *ApiResourceMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[apiresource.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *ApiResourceMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[apiresource.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ApiResourceMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, apiresource.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ApiResourceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ApiResourceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ApiResource entity.
// If the ApiResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourceMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *ApiResourceMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[apiresource.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *ApiResourceMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[apiresource.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ApiResourceMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, apiresource.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ApiResourceMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ApiResourceMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ApiResource entity.
// If the ApiResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourceMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ApiResourceMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[apiresource.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ApiResourceMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[apiresource.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ApiResourceMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, apiresource.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *ApiResourceMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *ApiResourceMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the ApiResource entity.
// If the ApiResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourceMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *ApiResourceMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *ApiResourceMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *ApiResourceMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[apiresource.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *ApiResourceMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[apiresource.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *ApiResourceMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, apiresource.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *ApiResourceMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *ApiResourceMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the ApiResource entity.
// If the ApiResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourceMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *ApiResourceMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *ApiResourceMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *ApiResourceMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[apiresource.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *ApiResourceMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[apiresource.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *ApiResourceMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, apiresource.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *ApiResourceMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *ApiResourceMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the ApiResource entity.
// If the ApiResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourceMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *ApiResourceMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *ApiResourceMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *ApiResourceMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[apiresource.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *ApiResourceMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[apiresource.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *ApiResourceMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, apiresource.FieldDeletedBy)
}

// SetDescription sets the "description" field.
func (m *ApiResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ApiResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ApiResource entity.
// If the ApiResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourceMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ApiResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[apiresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ApiResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[apiresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ApiResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, apiresource.FieldDescription)
}

// SetModule sets the "module" field.
func (m *ApiResourceMutation) SetModule(s string) {
	m.module = &s
}

// Module returns the value of the "module" field in the mutation.
func (m *ApiResourceMutation) Module() (r string, exists bool) {
	v := m.module
	if v == nil {
		return
	}
	return *v, true
}

// OldModule returns the old "module" field's value of the ApiResource entity.
// If the ApiResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourceMutation) OldModule(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModule is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModule requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModule: %w", err)
	}
	return oldValue.Module, nil
}

// ClearModule clears the value of the "module" field.
func (m *ApiResourceMutation) ClearModule() {
	m.module = nil
	m.clearedFields[apiresource.FieldModule] = struct{}{}
}

// ModuleCleared returns if the "module" field was cleared in this mutation.
func (m *ApiResourceMutation) ModuleCleared() bool {
	_, ok := m.clearedFields[apiresource.FieldModule]
	return ok
}

// ResetModule resets all changes to the "module" field.
func (m *ApiResourceMutation) ResetModule() {
	m.module = nil
	delete(m.clearedFields, apiresource.FieldModule)
}

// SetModuleDescription sets the "module_description" field.
func (m *ApiResourceMutation) SetModuleDescription(s string) {
	m.module_description = &s
}

// ModuleDescription returns the value of the "module_description" field in the mutation.
func (m *ApiResourceMutation) ModuleDescription() (r string, exists bool) {
	v := m.module_description
	if v == nil {
		return
	}
	return *v, true
}

// OldModuleDescription returns the old "module_description" field's value of the ApiResource entity.
// If the ApiResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourceMutation) OldModuleDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModuleDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModuleDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModuleDescription: %w", err)
	}
	return oldValue.ModuleDescription, nil
}

// ClearModuleDescription clears the value of the "module_description" field.
func (m *ApiResourceMutation) ClearModuleDescription() {
	m.module_description = nil
	m.clearedFields[apiresource.FieldModuleDescription] = struct{}{}
}

// ModuleDescriptionCleared returns if the "module_description" field was cleared in this mutation.
func (m *ApiResourceMutation) ModuleDescriptionCleared() bool {
	_, ok := m.clearedFields[apiresource.FieldModuleDescription]
	return ok
}

// ResetModuleDescription resets all changes to the "module_description" field.
func (m *ApiResourceMutation) ResetModuleDescription() {
	m.module_description = nil
	delete(m.clearedFields, apiresource.FieldModuleDescription)
}

// SetOperation sets the "operation" field.
func (m *ApiResourceMutation) SetOperation(s string) {
	m.operation = &s
}

// Operation returns the value of the "operation" field in the mutation.
func (m *ApiResourceMutation) Operation() (r string, exists bool) {
	v := m.operation
	if v == nil {
		return
	}
	return *v, true
}

// OldOperation returns the old "operation" field's value of the ApiResource entity.
// If the ApiResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourceMutation) OldOperation(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperation: %w", err)
	}
	return oldValue.Operation, nil
}

// ClearOperation clears the value of the "operation" field.
func (m *ApiResourceMutation) ClearOperation() {
	m.operation = nil
	m.clearedFields[apiresource.FieldOperation] = struct{}{}
}

// OperationCleared returns if the "operation" field was cleared in this mutation.
func (m *ApiResourceMutation) OperationCleared() bool {
	_, ok := m.clearedFields[apiresource.FieldOperation]
	return ok
}

// ResetOperation resets all changes to the "operation" field.
func (m *ApiResourceMutation) ResetOperation() {
	m.operation = nil
	delete(m.clearedFields, apiresource.FieldOperation)
}

// SetPath sets the "path" field.
func (m *ApiResourceMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *ApiResourceMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the ApiResource entity.
// If the ApiResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourceMutation) OldPath(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ClearPath clears the value of the "path" field.
func (m *ApiResourceMutation) ClearPath() {
	m._path = nil
	m.clearedFields[apiresource.FieldPath] = struct{}{}
}

// PathCleared returns if the "path" field was cleared in this mutation.
func (m *ApiResourceMutation) PathCleared() bool {
	_, ok := m.clearedFields[apiresource.FieldPath]
	return ok
}

// ResetPath resets all changes to the "path" field.
func (m *ApiResourceMutation) ResetPath() {
	m._path = nil
	delete(m.clearedFields, apiresource.FieldPath)
}

// SetMethod sets the "method" field.
func (m *ApiResourceMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *ApiResourceMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the ApiResource entity.
// If the ApiResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourceMutation) OldMethod(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ClearMethod clears the value of the "method" field.
func (m *ApiResourceMutation) ClearMethod() {
	m.method = nil
	m.clearedFields[apiresource.FieldMethod] = struct{}{}
}

// MethodCleared returns if the "method" field was cleared in this mutation.
func (m *ApiResourceMutation) MethodCleared() bool {
	_, ok := m.clearedFields[apiresource.FieldMethod]
	return ok
}

// ResetMethod resets all changes to the "method" field.
func (m *ApiResourceMutation) ResetMethod() {
	m.method = nil
	delete(m.clearedFields, apiresource.FieldMethod)
}

// SetScope sets the "scope" field.
func (m *ApiResourceMutation) SetScope(a apiresource.Scope) {
	m.scope = &a
}

// Scope returns the value of the "scope" field in the mutation.
func (m *ApiResourceMutation) Scope() (r apiresource.Scope, exists bool) {
	v := m.scope
	if v == nil {
		return
	}
	return *v, true
}

// OldScope returns the old "scope" field's value of the ApiResource entity.
// If the ApiResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourceMutation) OldScope(ctx context.Context) (v *apiresource.Scope, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScope is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScope: %w", err)
	}
	return oldValue.Scope, nil
}

// ClearScope clears the value of the "scope" field.
func (m *ApiResourceMutation) ClearScope() {
	m.scope = nil
	m.clearedFields[apiresource.FieldScope] = struct{}{}
}

// ScopeCleared returns if the "scope" field was cleared in this mutation.
func (m *ApiResourceMutation) ScopeCleared() bool {
	_, ok := m.clearedFields[apiresource.FieldScope]
	return ok
}

// ResetScope resets all changes to the "scope" field.
func (m *ApiResourceMutation) ResetScope() {
	m.scope = nil
	delete(m.clearedFields, apiresource.FieldScope)
}

// Where appends a list predicates to the ApiResourceMutation builder.
func (m *ApiResourceMutation) Where(ps ...predicate.ApiResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApiResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApiResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ApiResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApiResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApiResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ApiResource).
func (m *ApiResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApiResourceMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, apiresource.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, apiresource.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, apiresource.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, apiresource.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, apiresource.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, apiresource.FieldDeletedBy)
	}
	if m.description != nil {
		fields = append(fields, apiresource.FieldDescription)
	}
	if m.module != nil {
		fields = append(fields, apiresource.FieldModule)
	}
	if m.module_description != nil {
		fields = append(fields, apiresource.FieldModuleDescription)
	}
	if m.operation != nil {
		fields = append(fields, apiresource.FieldOperation)
	}
	if m._path != nil {
		fields = append(fields, apiresource.FieldPath)
	}
	if m.method != nil {
		fields = append(fields, apiresource.FieldMethod)
	}
	if m.scope != nil {
		fields = append(fields, apiresource.FieldScope)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApiResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case apiresource.FieldCreatedAt:
		return m.CreatedAt()
	case apiresource.FieldUpdatedAt:
		return m.UpdatedAt()
	case apiresource.FieldDeletedAt:
		return m.DeletedAt()
	case apiresource.FieldCreatedBy:
		return m.CreatedBy()
	case apiresource.FieldUpdatedBy:
		return m.UpdatedBy()
	case apiresource.FieldDeletedBy:
		return m.DeletedBy()
	case apiresource.FieldDescription:
		return m.Description()
	case apiresource.FieldModule:
		return m.Module()
	case apiresource.FieldModuleDescription:
		return m.ModuleDescription()
	case apiresource.FieldOperation:
		return m.Operation()
	case apiresource.FieldPath:
		return m.Path()
	case apiresource.FieldMethod:
		return m.Method()
	case apiresource.FieldScope:
		return m.Scope()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApiResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case apiresource.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case apiresource.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case apiresource.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case apiresource.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case apiresource.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case apiresource.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case apiresource.FieldDescription:
		return m.OldDescription(ctx)
	case apiresource.FieldModule:
		return m.OldModule(ctx)
	case apiresource.FieldModuleDescription:
		return m.OldModuleDescription(ctx)
	case apiresource.FieldOperation:
		return m.OldOperation(ctx)
	case apiresource.FieldPath:
		return m.OldPath(ctx)
	case apiresource.FieldMethod:
		return m.OldMethod(ctx)
	case apiresource.FieldScope:
		return m.OldScope(ctx)
	}
	return nil, fmt.Errorf("unknown ApiResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApiResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case apiresource.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case apiresource.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case apiresource.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case apiresource.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case apiresource.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case apiresource.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case apiresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case apiresource.FieldModule:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModule(v)
		return nil
	case apiresource.FieldModuleDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModuleDescription(v)
		return nil
	case apiresource.FieldOperation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperation(v)
		return nil
	case apiresource.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case apiresource.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case apiresource.FieldScope:
		v, ok := value.(apiresource.Scope)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScope(v)
		return nil
	}
	return fmt.Errorf("unknown ApiResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApiResourceMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, apiresource.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, apiresource.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, apiresource.FieldDeletedBy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApiResourceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case apiresource.FieldCreatedBy:
		return m.AddedCreatedBy()
	case apiresource.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case apiresource.FieldDeletedBy:
		return m.AddedDeletedBy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApiResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case apiresource.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case apiresource.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case apiresource.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	}
	return fmt.Errorf("unknown ApiResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApiResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(apiresource.FieldCreatedAt) {
		fields = append(fields, apiresource.FieldCreatedAt)
	}
	if m.FieldCleared(apiresource.FieldUpdatedAt) {
		fields = append(fields, apiresource.FieldUpdatedAt)
	}
	if m.FieldCleared(apiresource.FieldDeletedAt) {
		fields = append(fields, apiresource.FieldDeletedAt)
	}
	if m.FieldCleared(apiresource.FieldCreatedBy) {
		fields = append(fields, apiresource.FieldCreatedBy)
	}
	if m.FieldCleared(apiresource.FieldUpdatedBy) {
		fields = append(fields, apiresource.FieldUpdatedBy)
	}
	if m.FieldCleared(apiresource.FieldDeletedBy) {
		fields = append(fields, apiresource.FieldDeletedBy)
	}
	if m.FieldCleared(apiresource.FieldDescription) {
		fields = append(fields, apiresource.FieldDescription)
	}
	if m.FieldCleared(apiresource.FieldModule) {
		fields = append(fields, apiresource.FieldModule)
	}
	if m.FieldCleared(apiresource.FieldModuleDescription) {
		fields = append(fields, apiresource.FieldModuleDescription)
	}
	if m.FieldCleared(apiresource.FieldOperation) {
		fields = append(fields, apiresource.FieldOperation)
	}
	if m.FieldCleared(apiresource.FieldPath) {
		fields = append(fields, apiresource.FieldPath)
	}
	if m.FieldCleared(apiresource.FieldMethod) {
		fields = append(fields, apiresource.FieldMethod)
	}
	if m.FieldCleared(apiresource.FieldScope) {
		fields = append(fields, apiresource.FieldScope)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApiResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApiResourceMutation) ClearField(name string) error {
	switch name {
	case apiresource.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case apiresource.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case apiresource.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case apiresource.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case apiresource.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case apiresource.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case apiresource.FieldDescription:
		m.ClearDescription()
		return nil
	case apiresource.FieldModule:
		m.ClearModule()
		return nil
	case apiresource.FieldModuleDescription:
		m.ClearModuleDescription()
		return nil
	case apiresource.FieldOperation:
		m.ClearOperation()
		return nil
	case apiresource.FieldPath:
		m.ClearPath()
		return nil
	case apiresource.FieldMethod:
		m.ClearMethod()
		return nil
	case apiresource.FieldScope:
		m.ClearScope()
		return nil
	}
	return fmt.Errorf("unknown ApiResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApiResourceMutation) ResetField(name string) error {
	switch name {
	case apiresource.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case apiresource.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case apiresource.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case apiresource.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case apiresource.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case apiresource.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case apiresource.FieldDescription:
		m.ResetDescription()
		return nil
	case apiresource.FieldModule:
		m.ResetModule()
		return nil
	case apiresource.FieldModuleDescription:
		m.ResetModuleDescription()
		return nil
	case apiresource.FieldOperation:
		m.ResetOperation()
		return nil
	case apiresource.FieldPath:
		m.ResetPath()
		return nil
	case apiresource.FieldMethod:
		m.ResetMethod()
		return nil
	case apiresource.FieldScope:
		m.ResetScope()
		return nil
	}
	return fmt.Errorf("unknown ApiResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApiResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApiResourceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApiResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApiResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApiResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApiResourceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApiResourceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ApiResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApiResourceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ApiResource edge %s", name)
}

// DepartmentMutation represents an operation that mutates the Department nodes in the graph.
type DepartmentMutation struct {
	config
	op                 Op
	typ                string
	id                 *uint32
	created_at         *time.Time
	updated_at         *time.Time
	deleted_at         *time.Time
	created_by         *uint32
	addcreated_by      *int32
	updated_by         *uint32
	addupdated_by      *int32
	deleted_by         *uint32
	adddeleted_by      *int32
	remark             *string
	tenant_id          *uint32
	addtenant_id       *int32
	name               *string
	organization_id    *uint32
	addorganization_id *int32
	manager_id         *uint32
	addmanager_id      *int32
	sort_order         *int32
	addsort_order      *int32
	status             *department.Status
	description        *string
	clearedFields      map[string]struct{}
	parent             *uint32
	clearedparent      bool
	children           map[uint32]struct{}
	removedchildren    map[uint32]struct{}
	clearedchildren    bool
	done               bool
	oldValue           func(context.Context) (*Department, error)
	predicates         []predicate.Department
}

var _ ent.Mutation = (*DepartmentMutation)(nil)

// departmentOption allows management of the mutation configuration using functional options.
type departmentOption func(*DepartmentMutation)

// newDepartmentMutation creates new mutation for the Department entity.
func newDepartmentMutation(c config, op Op, opts ...departmentOption) *DepartmentMutation {
	m := &DepartmentMutation{
		config:        c,
		op:            op,
		typ:           TypeDepartment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDepartmentID sets the ID field of the mutation.
func withDepartmentID(id uint32) departmentOption {
	return func(m *DepartmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Department
		)
		m.oldValue = func(ctx context.Context) (*Department, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Department.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDepartment sets the old Department of the mutation.
func withDepartment(node *Department) departmentOption {
	return func(m *DepartmentMutation) {
		m.oldValue = func(context.Context) (*Department, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DepartmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DepartmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Department entities.
func (m *DepartmentMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DepartmentMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DepartmentMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Department.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DepartmentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DepartmentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *DepartmentMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[department.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *DepartmentMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[department.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DepartmentMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, department.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DepartmentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DepartmentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *DepartmentMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[department.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *DepartmentMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[department.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DepartmentMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, department.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *DepartmentMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *DepartmentMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *DepartmentMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[department.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *DepartmentMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[department.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *DepartmentMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, department.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *DepartmentMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *DepartmentMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *DepartmentMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *DepartmentMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *DepartmentMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[department.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *DepartmentMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[department.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *DepartmentMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, department.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *DepartmentMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *DepartmentMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *DepartmentMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *DepartmentMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *DepartmentMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[department.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *DepartmentMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[department.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *DepartmentMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, department.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *DepartmentMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *DepartmentMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *DepartmentMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *DepartmentMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *DepartmentMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[department.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *DepartmentMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[department.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *DepartmentMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, department.FieldDeletedBy)
}

// SetRemark sets the "remark" field.
func (m *DepartmentMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *DepartmentMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *DepartmentMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[department.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *DepartmentMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[department.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *DepartmentMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, department.FieldRemark)
}

// SetTenantID sets the "tenant_id" field.
func (m *DepartmentMutation) SetTenantID(u uint32) {
	m.tenant_id = &u
	m.addtenant_id = nil
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *DepartmentMutation) TenantID() (r uint32, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldTenantID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// AddTenantID adds u to the "tenant_id" field.
func (m *DepartmentMutation) AddTenantID(u int32) {
	if m.addtenant_id != nil {
		*m.addtenant_id += u
	} else {
		m.addtenant_id = &u
	}
}

// AddedTenantID returns the value that was added to the "tenant_id" field in this mutation.
func (m *DepartmentMutation) AddedTenantID() (r int32, exists bool) {
	v := m.addtenant_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTenantID clears the value of the "tenant_id" field.
func (m *DepartmentMutation) ClearTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	m.clearedFields[department.FieldTenantID] = struct{}{}
}

// TenantIDCleared returns if the "tenant_id" field was cleared in this mutation.
func (m *DepartmentMutation) TenantIDCleared() bool {
	_, ok := m.clearedFields[department.FieldTenantID]
	return ok
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *DepartmentMutation) ResetTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	delete(m.clearedFields, department.FieldTenantID)
}

// SetName sets the "name" field.
func (m *DepartmentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DepartmentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *DepartmentMutation) ClearName() {
	m.name = nil
	m.clearedFields[department.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *DepartmentMutation) NameCleared() bool {
	_, ok := m.clearedFields[department.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *DepartmentMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, department.FieldName)
}

// SetParentID sets the "parent_id" field.
func (m *DepartmentMutation) SetParentID(u uint32) {
	m.parent = &u
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *DepartmentMutation) ParentID() (r uint32, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldParentID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *DepartmentMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[department.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *DepartmentMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[department.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *DepartmentMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, department.FieldParentID)
}

// SetOrganizationID sets the "organization_id" field.
func (m *DepartmentMutation) SetOrganizationID(u uint32) {
	m.organization_id = &u
	m.addorganization_id = nil
}

// OrganizationID returns the value of the "organization_id" field in the mutation.
func (m *DepartmentMutation) OrganizationID() (r uint32, exists bool) {
	v := m.organization_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrganizationID returns the old "organization_id" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldOrganizationID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrganizationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrganizationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrganizationID: %w", err)
	}
	return oldValue.OrganizationID, nil
}

// AddOrganizationID adds u to the "organization_id" field.
func (m *DepartmentMutation) AddOrganizationID(u int32) {
	if m.addorganization_id != nil {
		*m.addorganization_id += u
	} else {
		m.addorganization_id = &u
	}
}

// AddedOrganizationID returns the value that was added to the "organization_id" field in this mutation.
func (m *DepartmentMutation) AddedOrganizationID() (r int32, exists bool) {
	v := m.addorganization_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrganizationID resets all changes to the "organization_id" field.
func (m *DepartmentMutation) ResetOrganizationID() {
	m.organization_id = nil
	m.addorganization_id = nil
}

// SetManagerID sets the "manager_id" field.
func (m *DepartmentMutation) SetManagerID(u uint32) {
	m.manager_id = &u
	m.addmanager_id = nil
}

// ManagerID returns the value of the "manager_id" field in the mutation.
func (m *DepartmentMutation) ManagerID() (r uint32, exists bool) {
	v := m.manager_id
	if v == nil {
		return
	}
	return *v, true
}

// OldManagerID returns the old "manager_id" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldManagerID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldManagerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldManagerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManagerID: %w", err)
	}
	return oldValue.ManagerID, nil
}

// AddManagerID adds u to the "manager_id" field.
func (m *DepartmentMutation) AddManagerID(u int32) {
	if m.addmanager_id != nil {
		*m.addmanager_id += u
	} else {
		m.addmanager_id = &u
	}
}

// AddedManagerID returns the value that was added to the "manager_id" field in this mutation.
func (m *DepartmentMutation) AddedManagerID() (r int32, exists bool) {
	v := m.addmanager_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearManagerID clears the value of the "manager_id" field.
func (m *DepartmentMutation) ClearManagerID() {
	m.manager_id = nil
	m.addmanager_id = nil
	m.clearedFields[department.FieldManagerID] = struct{}{}
}

// ManagerIDCleared returns if the "manager_id" field was cleared in this mutation.
func (m *DepartmentMutation) ManagerIDCleared() bool {
	_, ok := m.clearedFields[department.FieldManagerID]
	return ok
}

// ResetManagerID resets all changes to the "manager_id" field.
func (m *DepartmentMutation) ResetManagerID() {
	m.manager_id = nil
	m.addmanager_id = nil
	delete(m.clearedFields, department.FieldManagerID)
}

// SetSortOrder sets the "sort_order" field.
func (m *DepartmentMutation) SetSortOrder(i int32) {
	m.sort_order = &i
	m.addsort_order = nil
}

// SortOrder returns the value of the "sort_order" field in the mutation.
func (m *DepartmentMutation) SortOrder() (r int32, exists bool) {
	v := m.sort_order
	if v == nil {
		return
	}
	return *v, true
}

// OldSortOrder returns the old "sort_order" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldSortOrder(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSortOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSortOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSortOrder: %w", err)
	}
	return oldValue.SortOrder, nil
}

// AddSortOrder adds i to the "sort_order" field.
func (m *DepartmentMutation) AddSortOrder(i int32) {
	if m.addsort_order != nil {
		*m.addsort_order += i
	} else {
		m.addsort_order = &i
	}
}

// AddedSortOrder returns the value that was added to the "sort_order" field in this mutation.
func (m *DepartmentMutation) AddedSortOrder() (r int32, exists bool) {
	v := m.addsort_order
	if v == nil {
		return
	}
	return *v, true
}

// ClearSortOrder clears the value of the "sort_order" field.
func (m *DepartmentMutation) ClearSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	m.clearedFields[department.FieldSortOrder] = struct{}{}
}

// SortOrderCleared returns if the "sort_order" field was cleared in this mutation.
func (m *DepartmentMutation) SortOrderCleared() bool {
	_, ok := m.clearedFields[department.FieldSortOrder]
	return ok
}

// ResetSortOrder resets all changes to the "sort_order" field.
func (m *DepartmentMutation) ResetSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	delete(m.clearedFields, department.FieldSortOrder)
}

// SetStatus sets the "status" field.
func (m *DepartmentMutation) SetStatus(d department.Status) {
	m.status = &d
}

// Status returns the value of the "status" field in the mutation.
func (m *DepartmentMutation) Status() (r department.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldStatus(ctx context.Context) (v *department.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *DepartmentMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[department.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *DepartmentMutation) StatusCleared() bool {
	_, ok := m.clearedFields[department.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *DepartmentMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, department.FieldStatus)
}

// SetDescription sets the "description" field.
func (m *DepartmentMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *DepartmentMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *DepartmentMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[department.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *DepartmentMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[department.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *DepartmentMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, department.FieldDescription)
}

// ClearParent clears the "parent" edge to the Department entity.
func (m *DepartmentMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[department.FieldParentID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the Department entity was cleared.
func (m *DepartmentMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *DepartmentMutation) ParentIDs() (ids []uint32) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *DepartmentMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Department entity by ids.
func (m *DepartmentMutation) AddChildIDs(ids ...uint32) {
	if m.children == nil {
		m.children = make(map[uint32]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Department entity.
func (m *DepartmentMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Department entity was cleared.
func (m *DepartmentMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Department entity by IDs.
func (m *DepartmentMutation) RemoveChildIDs(ids ...uint32) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[uint32]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Department entity.
func (m *DepartmentMutation) RemovedChildrenIDs() (ids []uint32) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *DepartmentMutation) ChildrenIDs() (ids []uint32) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *DepartmentMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Where appends a list predicates to the DepartmentMutation builder.
func (m *DepartmentMutation) Where(ps ...predicate.Department) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DepartmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DepartmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Department, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DepartmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DepartmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Department).
func (m *DepartmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DepartmentMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, department.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, department.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, department.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, department.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, department.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, department.FieldDeletedBy)
	}
	if m.remark != nil {
		fields = append(fields, department.FieldRemark)
	}
	if m.tenant_id != nil {
		fields = append(fields, department.FieldTenantID)
	}
	if m.name != nil {
		fields = append(fields, department.FieldName)
	}
	if m.parent != nil {
		fields = append(fields, department.FieldParentID)
	}
	if m.organization_id != nil {
		fields = append(fields, department.FieldOrganizationID)
	}
	if m.manager_id != nil {
		fields = append(fields, department.FieldManagerID)
	}
	if m.sort_order != nil {
		fields = append(fields, department.FieldSortOrder)
	}
	if m.status != nil {
		fields = append(fields, department.FieldStatus)
	}
	if m.description != nil {
		fields = append(fields, department.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DepartmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case department.FieldCreatedAt:
		return m.CreatedAt()
	case department.FieldUpdatedAt:
		return m.UpdatedAt()
	case department.FieldDeletedAt:
		return m.DeletedAt()
	case department.FieldCreatedBy:
		return m.CreatedBy()
	case department.FieldUpdatedBy:
		return m.UpdatedBy()
	case department.FieldDeletedBy:
		return m.DeletedBy()
	case department.FieldRemark:
		return m.Remark()
	case department.FieldTenantID:
		return m.TenantID()
	case department.FieldName:
		return m.Name()
	case department.FieldParentID:
		return m.ParentID()
	case department.FieldOrganizationID:
		return m.OrganizationID()
	case department.FieldManagerID:
		return m.ManagerID()
	case department.FieldSortOrder:
		return m.SortOrder()
	case department.FieldStatus:
		return m.Status()
	case department.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DepartmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case department.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case department.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case department.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case department.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case department.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case department.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case department.FieldRemark:
		return m.OldRemark(ctx)
	case department.FieldTenantID:
		return m.OldTenantID(ctx)
	case department.FieldName:
		return m.OldName(ctx)
	case department.FieldParentID:
		return m.OldParentID(ctx)
	case department.FieldOrganizationID:
		return m.OldOrganizationID(ctx)
	case department.FieldManagerID:
		return m.OldManagerID(ctx)
	case department.FieldSortOrder:
		return m.OldSortOrder(ctx)
	case department.FieldStatus:
		return m.OldStatus(ctx)
	case department.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Department field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DepartmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case department.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case department.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case department.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case department.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case department.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case department.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case department.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case department.FieldTenantID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case department.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case department.FieldParentID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case department.FieldOrganizationID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrganizationID(v)
		return nil
	case department.FieldManagerID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManagerID(v)
		return nil
	case department.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSortOrder(v)
		return nil
	case department.FieldStatus:
		v, ok := value.(department.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case department.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DepartmentMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, department.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, department.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, department.FieldDeletedBy)
	}
	if m.addtenant_id != nil {
		fields = append(fields, department.FieldTenantID)
	}
	if m.addorganization_id != nil {
		fields = append(fields, department.FieldOrganizationID)
	}
	if m.addmanager_id != nil {
		fields = append(fields, department.FieldManagerID)
	}
	if m.addsort_order != nil {
		fields = append(fields, department.FieldSortOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DepartmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case department.FieldCreatedBy:
		return m.AddedCreatedBy()
	case department.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case department.FieldDeletedBy:
		return m.AddedDeletedBy()
	case department.FieldTenantID:
		return m.AddedTenantID()
	case department.FieldOrganizationID:
		return m.AddedOrganizationID()
	case department.FieldManagerID:
		return m.AddedManagerID()
	case department.FieldSortOrder:
		return m.AddedSortOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DepartmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case department.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case department.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case department.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case department.FieldTenantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantID(v)
		return nil
	case department.FieldOrganizationID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrganizationID(v)
		return nil
	case department.FieldManagerID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddManagerID(v)
		return nil
	case department.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSortOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Department numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DepartmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(department.FieldCreatedAt) {
		fields = append(fields, department.FieldCreatedAt)
	}
	if m.FieldCleared(department.FieldUpdatedAt) {
		fields = append(fields, department.FieldUpdatedAt)
	}
	if m.FieldCleared(department.FieldDeletedAt) {
		fields = append(fields, department.FieldDeletedAt)
	}
	if m.FieldCleared(department.FieldCreatedBy) {
		fields = append(fields, department.FieldCreatedBy)
	}
	if m.FieldCleared(department.FieldUpdatedBy) {
		fields = append(fields, department.FieldUpdatedBy)
	}
	if m.FieldCleared(department.FieldDeletedBy) {
		fields = append(fields, department.FieldDeletedBy)
	}
	if m.FieldCleared(department.FieldRemark) {
		fields = append(fields, department.FieldRemark)
	}
	if m.FieldCleared(department.FieldTenantID) {
		fields = append(fields, department.FieldTenantID)
	}
	if m.FieldCleared(department.FieldName) {
		fields = append(fields, department.FieldName)
	}
	if m.FieldCleared(department.FieldParentID) {
		fields = append(fields, department.FieldParentID)
	}
	if m.FieldCleared(department.FieldManagerID) {
		fields = append(fields, department.FieldManagerID)
	}
	if m.FieldCleared(department.FieldSortOrder) {
		fields = append(fields, department.FieldSortOrder)
	}
	if m.FieldCleared(department.FieldStatus) {
		fields = append(fields, department.FieldStatus)
	}
	if m.FieldCleared(department.FieldDescription) {
		fields = append(fields, department.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DepartmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DepartmentMutation) ClearField(name string) error {
	switch name {
	case department.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case department.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case department.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case department.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case department.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case department.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case department.FieldRemark:
		m.ClearRemark()
		return nil
	case department.FieldTenantID:
		m.ClearTenantID()
		return nil
	case department.FieldName:
		m.ClearName()
		return nil
	case department.FieldParentID:
		m.ClearParentID()
		return nil
	case department.FieldManagerID:
		m.ClearManagerID()
		return nil
	case department.FieldSortOrder:
		m.ClearSortOrder()
		return nil
	case department.FieldStatus:
		m.ClearStatus()
		return nil
	case department.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Department nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DepartmentMutation) ResetField(name string) error {
	switch name {
	case department.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case department.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case department.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case department.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case department.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case department.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case department.FieldRemark:
		m.ResetRemark()
		return nil
	case department.FieldTenantID:
		m.ResetTenantID()
		return nil
	case department.FieldName:
		m.ResetName()
		return nil
	case department.FieldParentID:
		m.ResetParentID()
		return nil
	case department.FieldOrganizationID:
		m.ResetOrganizationID()
		return nil
	case department.FieldManagerID:
		m.ResetManagerID()
		return nil
	case department.FieldSortOrder:
		m.ResetSortOrder()
		return nil
	case department.FieldStatus:
		m.ResetStatus()
		return nil
	case department.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DepartmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parent != nil {
		edges = append(edges, department.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, department.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DepartmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case department.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case department.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DepartmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, department.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DepartmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case department.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DepartmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparent {
		edges = append(edges, department.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, department.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DepartmentMutation) EdgeCleared(name string) bool {
	switch name {
	case department.EdgeParent:
		return m.clearedparent
	case department.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DepartmentMutation) ClearEdge(name string) error {
	switch name {
	case department.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Department unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DepartmentMutation) ResetEdge(name string) error {
	switch name {
	case department.EdgeParent:
		m.ResetParent()
		return nil
	case department.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown Department edge %s", name)
}

// DictEntryMutation represents an operation that mutates the DictEntry nodes in the graph.
type DictEntryMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uint32
	created_at            *time.Time
	updated_at            *time.Time
	deleted_at            *time.Time
	created_by            *uint32
	addcreated_by         *int32
	updated_by            *uint32
	addupdated_by         *int32
	deleted_by            *uint32
	adddeleted_by         *int32
	description           *string
	sort_order            *int32
	addsort_order         *int32
	is_enabled            *bool
	tenant_id             *uint32
	addtenant_id          *int32
	entry_label           *string
	entry_value           *string
	numeric_value         *int32
	addnumeric_value      *int32
	language_code         *string
	clearedFields         map[string]struct{}
	sys_dict_types        *uint32
	clearedsys_dict_types bool
	done                  bool
	oldValue              func(context.Context) (*DictEntry, error)
	predicates            []predicate.DictEntry
}

var _ ent.Mutation = (*DictEntryMutation)(nil)

// dictentryOption allows management of the mutation configuration using functional options.
type dictentryOption func(*DictEntryMutation)

// newDictEntryMutation creates new mutation for the DictEntry entity.
func newDictEntryMutation(c config, op Op, opts ...dictentryOption) *DictEntryMutation {
	m := &DictEntryMutation{
		config:        c,
		op:            op,
		typ:           TypeDictEntry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDictEntryID sets the ID field of the mutation.
func withDictEntryID(id uint32) dictentryOption {
	return func(m *DictEntryMutation) {
		var (
			err   error
			once  sync.Once
			value *DictEntry
		)
		m.oldValue = func(ctx context.Context) (*DictEntry, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DictEntry.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDictEntry sets the old DictEntry of the mutation.
func withDictEntry(node *DictEntry) dictentryOption {
	return func(m *DictEntryMutation) {
		m.oldValue = func(context.Context) (*DictEntry, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DictEntryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DictEntryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DictEntry entities.
func (m *DictEntryMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DictEntryMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DictEntryMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DictEntry.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DictEntryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DictEntryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DictEntry entity.
// If the DictEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictEntryMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *DictEntryMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[dictentry.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *DictEntryMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[dictentry.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DictEntryMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, dictentry.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DictEntryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DictEntryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DictEntry entity.
// If the DictEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictEntryMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *DictEntryMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[dictentry.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *DictEntryMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[dictentry.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DictEntryMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, dictentry.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *DictEntryMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *DictEntryMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the DictEntry entity.
// If the DictEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictEntryMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *DictEntryMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[dictentry.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *DictEntryMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[dictentry.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *DictEntryMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, dictentry.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *DictEntryMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *DictEntryMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the DictEntry entity.
// If the DictEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictEntryMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *DictEntryMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *DictEntryMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *DictEntryMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[dictentry.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *DictEntryMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[dictentry.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *DictEntryMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, dictentry.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *DictEntryMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *DictEntryMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the DictEntry entity.
// If the DictEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictEntryMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *DictEntryMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *DictEntryMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *DictEntryMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[dictentry.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *DictEntryMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[dictentry.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *DictEntryMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, dictentry.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *DictEntryMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *DictEntryMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the DictEntry entity.
// If the DictEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictEntryMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *DictEntryMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *DictEntryMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *DictEntryMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[dictentry.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *DictEntryMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[dictentry.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *DictEntryMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, dictentry.FieldDeletedBy)
}

// SetDescription sets the "description" field.
func (m *DictEntryMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *DictEntryMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the DictEntry entity.
// If the DictEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictEntryMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *DictEntryMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[dictentry.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *DictEntryMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[dictentry.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *DictEntryMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, dictentry.FieldDescription)
}

// SetSortOrder sets the "sort_order" field.
func (m *DictEntryMutation) SetSortOrder(i int32) {
	m.sort_order = &i
	m.addsort_order = nil
}

// SortOrder returns the value of the "sort_order" field in the mutation.
func (m *DictEntryMutation) SortOrder() (r int32, exists bool) {
	v := m.sort_order
	if v == nil {
		return
	}
	return *v, true
}

// OldSortOrder returns the old "sort_order" field's value of the DictEntry entity.
// If the DictEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictEntryMutation) OldSortOrder(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSortOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSortOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSortOrder: %w", err)
	}
	return oldValue.SortOrder, nil
}

// AddSortOrder adds i to the "sort_order" field.
func (m *DictEntryMutation) AddSortOrder(i int32) {
	if m.addsort_order != nil {
		*m.addsort_order += i
	} else {
		m.addsort_order = &i
	}
}

// AddedSortOrder returns the value that was added to the "sort_order" field in this mutation.
func (m *DictEntryMutation) AddedSortOrder() (r int32, exists bool) {
	v := m.addsort_order
	if v == nil {
		return
	}
	return *v, true
}

// ClearSortOrder clears the value of the "sort_order" field.
func (m *DictEntryMutation) ClearSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	m.clearedFields[dictentry.FieldSortOrder] = struct{}{}
}

// SortOrderCleared returns if the "sort_order" field was cleared in this mutation.
func (m *DictEntryMutation) SortOrderCleared() bool {
	_, ok := m.clearedFields[dictentry.FieldSortOrder]
	return ok
}

// ResetSortOrder resets all changes to the "sort_order" field.
func (m *DictEntryMutation) ResetSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	delete(m.clearedFields, dictentry.FieldSortOrder)
}

// SetIsEnabled sets the "is_enabled" field.
func (m *DictEntryMutation) SetIsEnabled(b bool) {
	m.is_enabled = &b
}

// IsEnabled returns the value of the "is_enabled" field in the mutation.
func (m *DictEntryMutation) IsEnabled() (r bool, exists bool) {
	v := m.is_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnabled returns the old "is_enabled" field's value of the DictEntry entity.
// If the DictEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictEntryMutation) OldIsEnabled(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnabled: %w", err)
	}
	return oldValue.IsEnabled, nil
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (m *DictEntryMutation) ClearIsEnabled() {
	m.is_enabled = nil
	m.clearedFields[dictentry.FieldIsEnabled] = struct{}{}
}

// IsEnabledCleared returns if the "is_enabled" field was cleared in this mutation.
func (m *DictEntryMutation) IsEnabledCleared() bool {
	_, ok := m.clearedFields[dictentry.FieldIsEnabled]
	return ok
}

// ResetIsEnabled resets all changes to the "is_enabled" field.
func (m *DictEntryMutation) ResetIsEnabled() {
	m.is_enabled = nil
	delete(m.clearedFields, dictentry.FieldIsEnabled)
}

// SetTenantID sets the "tenant_id" field.
func (m *DictEntryMutation) SetTenantID(u uint32) {
	m.tenant_id = &u
	m.addtenant_id = nil
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *DictEntryMutation) TenantID() (r uint32, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the DictEntry entity.
// If the DictEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictEntryMutation) OldTenantID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// AddTenantID adds u to the "tenant_id" field.
func (m *DictEntryMutation) AddTenantID(u int32) {
	if m.addtenant_id != nil {
		*m.addtenant_id += u
	} else {
		m.addtenant_id = &u
	}
}

// AddedTenantID returns the value that was added to the "tenant_id" field in this mutation.
func (m *DictEntryMutation) AddedTenantID() (r int32, exists bool) {
	v := m.addtenant_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTenantID clears the value of the "tenant_id" field.
func (m *DictEntryMutation) ClearTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	m.clearedFields[dictentry.FieldTenantID] = struct{}{}
}

// TenantIDCleared returns if the "tenant_id" field was cleared in this mutation.
func (m *DictEntryMutation) TenantIDCleared() bool {
	_, ok := m.clearedFields[dictentry.FieldTenantID]
	return ok
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *DictEntryMutation) ResetTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	delete(m.clearedFields, dictentry.FieldTenantID)
}

// SetEntryLabel sets the "entry_label" field.
func (m *DictEntryMutation) SetEntryLabel(s string) {
	m.entry_label = &s
}

// EntryLabel returns the value of the "entry_label" field in the mutation.
func (m *DictEntryMutation) EntryLabel() (r string, exists bool) {
	v := m.entry_label
	if v == nil {
		return
	}
	return *v, true
}

// OldEntryLabel returns the old "entry_label" field's value of the DictEntry entity.
// If the DictEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictEntryMutation) OldEntryLabel(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntryLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntryLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntryLabel: %w", err)
	}
	return oldValue.EntryLabel, nil
}

// ClearEntryLabel clears the value of the "entry_label" field.
func (m *DictEntryMutation) ClearEntryLabel() {
	m.entry_label = nil
	m.clearedFields[dictentry.FieldEntryLabel] = struct{}{}
}

// EntryLabelCleared returns if the "entry_label" field was cleared in this mutation.
func (m *DictEntryMutation) EntryLabelCleared() bool {
	_, ok := m.clearedFields[dictentry.FieldEntryLabel]
	return ok
}

// ResetEntryLabel resets all changes to the "entry_label" field.
func (m *DictEntryMutation) ResetEntryLabel() {
	m.entry_label = nil
	delete(m.clearedFields, dictentry.FieldEntryLabel)
}

// SetEntryValue sets the "entry_value" field.
func (m *DictEntryMutation) SetEntryValue(s string) {
	m.entry_value = &s
}

// EntryValue returns the value of the "entry_value" field in the mutation.
func (m *DictEntryMutation) EntryValue() (r string, exists bool) {
	v := m.entry_value
	if v == nil {
		return
	}
	return *v, true
}

// OldEntryValue returns the old "entry_value" field's value of the DictEntry entity.
// If the DictEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictEntryMutation) OldEntryValue(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntryValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntryValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntryValue: %w", err)
	}
	return oldValue.EntryValue, nil
}

// ClearEntryValue clears the value of the "entry_value" field.
func (m *DictEntryMutation) ClearEntryValue() {
	m.entry_value = nil
	m.clearedFields[dictentry.FieldEntryValue] = struct{}{}
}

// EntryValueCleared returns if the "entry_value" field was cleared in this mutation.
func (m *DictEntryMutation) EntryValueCleared() bool {
	_, ok := m.clearedFields[dictentry.FieldEntryValue]
	return ok
}

// ResetEntryValue resets all changes to the "entry_value" field.
func (m *DictEntryMutation) ResetEntryValue() {
	m.entry_value = nil
	delete(m.clearedFields, dictentry.FieldEntryValue)
}

// SetNumericValue sets the "numeric_value" field.
func (m *DictEntryMutation) SetNumericValue(i int32) {
	m.numeric_value = &i
	m.addnumeric_value = nil
}

// NumericValue returns the value of the "numeric_value" field in the mutation.
func (m *DictEntryMutation) NumericValue() (r int32, exists bool) {
	v := m.numeric_value
	if v == nil {
		return
	}
	return *v, true
}

// OldNumericValue returns the old "numeric_value" field's value of the DictEntry entity.
// If the DictEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictEntryMutation) OldNumericValue(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumericValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumericValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumericValue: %w", err)
	}
	return oldValue.NumericValue, nil
}

// AddNumericValue adds i to the "numeric_value" field.
func (m *DictEntryMutation) AddNumericValue(i int32) {
	if m.addnumeric_value != nil {
		*m.addnumeric_value += i
	} else {
		m.addnumeric_value = &i
	}
}

// AddedNumericValue returns the value that was added to the "numeric_value" field in this mutation.
func (m *DictEntryMutation) AddedNumericValue() (r int32, exists bool) {
	v := m.addnumeric_value
	if v == nil {
		return
	}
	return *v, true
}

// ClearNumericValue clears the value of the "numeric_value" field.
func (m *DictEntryMutation) ClearNumericValue() {
	m.numeric_value = nil
	m.addnumeric_value = nil
	m.clearedFields[dictentry.FieldNumericValue] = struct{}{}
}

// NumericValueCleared returns if the "numeric_value" field was cleared in this mutation.
func (m *DictEntryMutation) NumericValueCleared() bool {
	_, ok := m.clearedFields[dictentry.FieldNumericValue]
	return ok
}

// ResetNumericValue resets all changes to the "numeric_value" field.
func (m *DictEntryMutation) ResetNumericValue() {
	m.numeric_value = nil
	m.addnumeric_value = nil
	delete(m.clearedFields, dictentry.FieldNumericValue)
}

// SetLanguageCode sets the "language_code" field.
func (m *DictEntryMutation) SetLanguageCode(s string) {
	m.language_code = &s
}

// LanguageCode returns the value of the "language_code" field in the mutation.
func (m *DictEntryMutation) LanguageCode() (r string, exists bool) {
	v := m.language_code
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguageCode returns the old "language_code" field's value of the DictEntry entity.
// If the DictEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictEntryMutation) OldLanguageCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguageCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguageCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguageCode: %w", err)
	}
	return oldValue.LanguageCode, nil
}

// ClearLanguageCode clears the value of the "language_code" field.
func (m *DictEntryMutation) ClearLanguageCode() {
	m.language_code = nil
	m.clearedFields[dictentry.FieldLanguageCode] = struct{}{}
}

// LanguageCodeCleared returns if the "language_code" field was cleared in this mutation.
func (m *DictEntryMutation) LanguageCodeCleared() bool {
	_, ok := m.clearedFields[dictentry.FieldLanguageCode]
	return ok
}

// ResetLanguageCode resets all changes to the "language_code" field.
func (m *DictEntryMutation) ResetLanguageCode() {
	m.language_code = nil
	delete(m.clearedFields, dictentry.FieldLanguageCode)
}

// SetSysDictTypesID sets the "sys_dict_types" edge to the DictType entity by id.
func (m *DictEntryMutation) SetSysDictTypesID(id uint32) {
	m.sys_dict_types = &id
}

// ClearSysDictTypes clears the "sys_dict_types" edge to the DictType entity.
func (m *DictEntryMutation) ClearSysDictTypes() {
	m.clearedsys_dict_types = true
}

// SysDictTypesCleared reports if the "sys_dict_types" edge to the DictType entity was cleared.
func (m *DictEntryMutation) SysDictTypesCleared() bool {
	return m.clearedsys_dict_types
}

// SysDictTypesID returns the "sys_dict_types" edge ID in the mutation.
func (m *DictEntryMutation) SysDictTypesID() (id uint32, exists bool) {
	if m.sys_dict_types != nil {
		return *m.sys_dict_types, true
	}
	return
}

// SysDictTypesIDs returns the "sys_dict_types" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SysDictTypesID instead. It exists only for internal usage by the builders.
func (m *DictEntryMutation) SysDictTypesIDs() (ids []uint32) {
	if id := m.sys_dict_types; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSysDictTypes resets all changes to the "sys_dict_types" edge.
func (m *DictEntryMutation) ResetSysDictTypes() {
	m.sys_dict_types = nil
	m.clearedsys_dict_types = false
}

// Where appends a list predicates to the DictEntryMutation builder.
func (m *DictEntryMutation) Where(ps ...predicate.DictEntry) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DictEntryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DictEntryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DictEntry, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DictEntryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DictEntryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DictEntry).
func (m *DictEntryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DictEntryMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.created_at != nil {
		fields = append(fields, dictentry.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, dictentry.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, dictentry.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, dictentry.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, dictentry.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, dictentry.FieldDeletedBy)
	}
	if m.description != nil {
		fields = append(fields, dictentry.FieldDescription)
	}
	if m.sort_order != nil {
		fields = append(fields, dictentry.FieldSortOrder)
	}
	if m.is_enabled != nil {
		fields = append(fields, dictentry.FieldIsEnabled)
	}
	if m.tenant_id != nil {
		fields = append(fields, dictentry.FieldTenantID)
	}
	if m.entry_label != nil {
		fields = append(fields, dictentry.FieldEntryLabel)
	}
	if m.entry_value != nil {
		fields = append(fields, dictentry.FieldEntryValue)
	}
	if m.numeric_value != nil {
		fields = append(fields, dictentry.FieldNumericValue)
	}
	if m.language_code != nil {
		fields = append(fields, dictentry.FieldLanguageCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DictEntryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dictentry.FieldCreatedAt:
		return m.CreatedAt()
	case dictentry.FieldUpdatedAt:
		return m.UpdatedAt()
	case dictentry.FieldDeletedAt:
		return m.DeletedAt()
	case dictentry.FieldCreatedBy:
		return m.CreatedBy()
	case dictentry.FieldUpdatedBy:
		return m.UpdatedBy()
	case dictentry.FieldDeletedBy:
		return m.DeletedBy()
	case dictentry.FieldDescription:
		return m.Description()
	case dictentry.FieldSortOrder:
		return m.SortOrder()
	case dictentry.FieldIsEnabled:
		return m.IsEnabled()
	case dictentry.FieldTenantID:
		return m.TenantID()
	case dictentry.FieldEntryLabel:
		return m.EntryLabel()
	case dictentry.FieldEntryValue:
		return m.EntryValue()
	case dictentry.FieldNumericValue:
		return m.NumericValue()
	case dictentry.FieldLanguageCode:
		return m.LanguageCode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DictEntryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dictentry.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case dictentry.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case dictentry.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case dictentry.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case dictentry.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case dictentry.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case dictentry.FieldDescription:
		return m.OldDescription(ctx)
	case dictentry.FieldSortOrder:
		return m.OldSortOrder(ctx)
	case dictentry.FieldIsEnabled:
		return m.OldIsEnabled(ctx)
	case dictentry.FieldTenantID:
		return m.OldTenantID(ctx)
	case dictentry.FieldEntryLabel:
		return m.OldEntryLabel(ctx)
	case dictentry.FieldEntryValue:
		return m.OldEntryValue(ctx)
	case dictentry.FieldNumericValue:
		return m.OldNumericValue(ctx)
	case dictentry.FieldLanguageCode:
		return m.OldLanguageCode(ctx)
	}
	return nil, fmt.Errorf("unknown DictEntry field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DictEntryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dictentry.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case dictentry.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case dictentry.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case dictentry.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case dictentry.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case dictentry.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case dictentry.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case dictentry.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSortOrder(v)
		return nil
	case dictentry.FieldIsEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnabled(v)
		return nil
	case dictentry.FieldTenantID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case dictentry.FieldEntryLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntryLabel(v)
		return nil
	case dictentry.FieldEntryValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntryValue(v)
		return nil
	case dictentry.FieldNumericValue:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumericValue(v)
		return nil
	case dictentry.FieldLanguageCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguageCode(v)
		return nil
	}
	return fmt.Errorf("unknown DictEntry field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DictEntryMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, dictentry.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, dictentry.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, dictentry.FieldDeletedBy)
	}
	if m.addsort_order != nil {
		fields = append(fields, dictentry.FieldSortOrder)
	}
	if m.addtenant_id != nil {
		fields = append(fields, dictentry.FieldTenantID)
	}
	if m.addnumeric_value != nil {
		fields = append(fields, dictentry.FieldNumericValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DictEntryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case dictentry.FieldCreatedBy:
		return m.AddedCreatedBy()
	case dictentry.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case dictentry.FieldDeletedBy:
		return m.AddedDeletedBy()
	case dictentry.FieldSortOrder:
		return m.AddedSortOrder()
	case dictentry.FieldTenantID:
		return m.AddedTenantID()
	case dictentry.FieldNumericValue:
		return m.AddedNumericValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DictEntryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case dictentry.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case dictentry.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case dictentry.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case dictentry.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSortOrder(v)
		return nil
	case dictentry.FieldTenantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantID(v)
		return nil
	case dictentry.FieldNumericValue:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumericValue(v)
		return nil
	}
	return fmt.Errorf("unknown DictEntry numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DictEntryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(dictentry.FieldCreatedAt) {
		fields = append(fields, dictentry.FieldCreatedAt)
	}
	if m.FieldCleared(dictentry.FieldUpdatedAt) {
		fields = append(fields, dictentry.FieldUpdatedAt)
	}
	if m.FieldCleared(dictentry.FieldDeletedAt) {
		fields = append(fields, dictentry.FieldDeletedAt)
	}
	if m.FieldCleared(dictentry.FieldCreatedBy) {
		fields = append(fields, dictentry.FieldCreatedBy)
	}
	if m.FieldCleared(dictentry.FieldUpdatedBy) {
		fields = append(fields, dictentry.FieldUpdatedBy)
	}
	if m.FieldCleared(dictentry.FieldDeletedBy) {
		fields = append(fields, dictentry.FieldDeletedBy)
	}
	if m.FieldCleared(dictentry.FieldDescription) {
		fields = append(fields, dictentry.FieldDescription)
	}
	if m.FieldCleared(dictentry.FieldSortOrder) {
		fields = append(fields, dictentry.FieldSortOrder)
	}
	if m.FieldCleared(dictentry.FieldIsEnabled) {
		fields = append(fields, dictentry.FieldIsEnabled)
	}
	if m.FieldCleared(dictentry.FieldTenantID) {
		fields = append(fields, dictentry.FieldTenantID)
	}
	if m.FieldCleared(dictentry.FieldEntryLabel) {
		fields = append(fields, dictentry.FieldEntryLabel)
	}
	if m.FieldCleared(dictentry.FieldEntryValue) {
		fields = append(fields, dictentry.FieldEntryValue)
	}
	if m.FieldCleared(dictentry.FieldNumericValue) {
		fields = append(fields, dictentry.FieldNumericValue)
	}
	if m.FieldCleared(dictentry.FieldLanguageCode) {
		fields = append(fields, dictentry.FieldLanguageCode)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DictEntryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DictEntryMutation) ClearField(name string) error {
	switch name {
	case dictentry.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case dictentry.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case dictentry.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case dictentry.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case dictentry.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case dictentry.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case dictentry.FieldDescription:
		m.ClearDescription()
		return nil
	case dictentry.FieldSortOrder:
		m.ClearSortOrder()
		return nil
	case dictentry.FieldIsEnabled:
		m.ClearIsEnabled()
		return nil
	case dictentry.FieldTenantID:
		m.ClearTenantID()
		return nil
	case dictentry.FieldEntryLabel:
		m.ClearEntryLabel()
		return nil
	case dictentry.FieldEntryValue:
		m.ClearEntryValue()
		return nil
	case dictentry.FieldNumericValue:
		m.ClearNumericValue()
		return nil
	case dictentry.FieldLanguageCode:
		m.ClearLanguageCode()
		return nil
	}
	return fmt.Errorf("unknown DictEntry nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DictEntryMutation) ResetField(name string) error {
	switch name {
	case dictentry.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case dictentry.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case dictentry.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case dictentry.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case dictentry.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case dictentry.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case dictentry.FieldDescription:
		m.ResetDescription()
		return nil
	case dictentry.FieldSortOrder:
		m.ResetSortOrder()
		return nil
	case dictentry.FieldIsEnabled:
		m.ResetIsEnabled()
		return nil
	case dictentry.FieldTenantID:
		m.ResetTenantID()
		return nil
	case dictentry.FieldEntryLabel:
		m.ResetEntryLabel()
		return nil
	case dictentry.FieldEntryValue:
		m.ResetEntryValue()
		return nil
	case dictentry.FieldNumericValue:
		m.ResetNumericValue()
		return nil
	case dictentry.FieldLanguageCode:
		m.ResetLanguageCode()
		return nil
	}
	return fmt.Errorf("unknown DictEntry field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DictEntryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.sys_dict_types != nil {
		edges = append(edges, dictentry.EdgeSysDictTypes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DictEntryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dictentry.EdgeSysDictTypes:
		if id := m.sys_dict_types; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DictEntryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DictEntryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DictEntryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsys_dict_types {
		edges = append(edges, dictentry.EdgeSysDictTypes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DictEntryMutation) EdgeCleared(name string) bool {
	switch name {
	case dictentry.EdgeSysDictTypes:
		return m.clearedsys_dict_types
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DictEntryMutation) ClearEdge(name string) error {
	switch name {
	case dictentry.EdgeSysDictTypes:
		m.ClearSysDictTypes()
		return nil
	}
	return fmt.Errorf("unknown DictEntry unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DictEntryMutation) ResetEdge(name string) error {
	switch name {
	case dictentry.EdgeSysDictTypes:
		m.ResetSysDictTypes()
		return nil
	}
	return fmt.Errorf("unknown DictEntry edge %s", name)
}

// DictTypeMutation represents an operation that mutates the DictType nodes in the graph.
type DictTypeMutation struct {
	config
	op             Op
	typ            string
	id             *uint32
	created_at     *time.Time
	updated_at     *time.Time
	deleted_at     *time.Time
	created_by     *uint32
	addcreated_by  *int32
	updated_by     *uint32
	addupdated_by  *int32
	deleted_by     *uint32
	adddeleted_by  *int32
	is_enabled     *bool
	sort_order     *int32
	addsort_order  *int32
	description    *string
	tenant_id      *uint32
	addtenant_id   *int32
	type_code      *string
	type_name      *string
	clearedFields  map[string]struct{}
	entries        map[uint32]struct{}
	removedentries map[uint32]struct{}
	clearedentries bool
	done           bool
	oldValue       func(context.Context) (*DictType, error)
	predicates     []predicate.DictType
}

var _ ent.Mutation = (*DictTypeMutation)(nil)

// dicttypeOption allows management of the mutation configuration using functional options.
type dicttypeOption func(*DictTypeMutation)

// newDictTypeMutation creates new mutation for the DictType entity.
func newDictTypeMutation(c config, op Op, opts ...dicttypeOption) *DictTypeMutation {
	m := &DictTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeDictType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDictTypeID sets the ID field of the mutation.
func withDictTypeID(id uint32) dicttypeOption {
	return func(m *DictTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *DictType
		)
		m.oldValue = func(ctx context.Context) (*DictType, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DictType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDictType sets the old DictType of the mutation.
func withDictType(node *DictType) dicttypeOption {
	return func(m *DictTypeMutation) {
		m.oldValue = func(context.Context) (*DictType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DictTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DictTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DictType entities.
func (m *DictTypeMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DictTypeMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DictTypeMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DictType.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DictTypeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DictTypeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DictType entity.
// If the DictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictTypeMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *DictTypeMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[dicttype.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *DictTypeMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[dicttype.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DictTypeMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, dicttype.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DictTypeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DictTypeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DictType entity.
// If the DictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictTypeMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *DictTypeMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[dicttype.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *DictTypeMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[dicttype.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DictTypeMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, dicttype.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *DictTypeMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *DictTypeMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the DictType entity.
// If the DictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictTypeMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *DictTypeMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[dicttype.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *DictTypeMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[dicttype.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *DictTypeMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, dicttype.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *DictTypeMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *DictTypeMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the DictType entity.
// If the DictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictTypeMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *DictTypeMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *DictTypeMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *DictTypeMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[dicttype.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *DictTypeMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[dicttype.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *DictTypeMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, dicttype.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *DictTypeMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *DictTypeMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the DictType entity.
// If the DictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictTypeMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *DictTypeMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *DictTypeMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *DictTypeMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[dicttype.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *DictTypeMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[dicttype.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *DictTypeMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, dicttype.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *DictTypeMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *DictTypeMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the DictType entity.
// If the DictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictTypeMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *DictTypeMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *DictTypeMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *DictTypeMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[dicttype.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *DictTypeMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[dicttype.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *DictTypeMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, dicttype.FieldDeletedBy)
}

// SetIsEnabled sets the "is_enabled" field.
func (m *DictTypeMutation) SetIsEnabled(b bool) {
	m.is_enabled = &b
}

// IsEnabled returns the value of the "is_enabled" field in the mutation.
func (m *DictTypeMutation) IsEnabled() (r bool, exists bool) {
	v := m.is_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnabled returns the old "is_enabled" field's value of the DictType entity.
// If the DictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictTypeMutation) OldIsEnabled(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnabled: %w", err)
	}
	return oldValue.IsEnabled, nil
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (m *DictTypeMutation) ClearIsEnabled() {
	m.is_enabled = nil
	m.clearedFields[dicttype.FieldIsEnabled] = struct{}{}
}

// IsEnabledCleared returns if the "is_enabled" field was cleared in this mutation.
func (m *DictTypeMutation) IsEnabledCleared() bool {
	_, ok := m.clearedFields[dicttype.FieldIsEnabled]
	return ok
}

// ResetIsEnabled resets all changes to the "is_enabled" field.
func (m *DictTypeMutation) ResetIsEnabled() {
	m.is_enabled = nil
	delete(m.clearedFields, dicttype.FieldIsEnabled)
}

// SetSortOrder sets the "sort_order" field.
func (m *DictTypeMutation) SetSortOrder(i int32) {
	m.sort_order = &i
	m.addsort_order = nil
}

// SortOrder returns the value of the "sort_order" field in the mutation.
func (m *DictTypeMutation) SortOrder() (r int32, exists bool) {
	v := m.sort_order
	if v == nil {
		return
	}
	return *v, true
}

// OldSortOrder returns the old "sort_order" field's value of the DictType entity.
// If the DictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictTypeMutation) OldSortOrder(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSortOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSortOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSortOrder: %w", err)
	}
	return oldValue.SortOrder, nil
}

// AddSortOrder adds i to the "sort_order" field.
func (m *DictTypeMutation) AddSortOrder(i int32) {
	if m.addsort_order != nil {
		*m.addsort_order += i
	} else {
		m.addsort_order = &i
	}
}

// AddedSortOrder returns the value that was added to the "sort_order" field in this mutation.
func (m *DictTypeMutation) AddedSortOrder() (r int32, exists bool) {
	v := m.addsort_order
	if v == nil {
		return
	}
	return *v, true
}

// ClearSortOrder clears the value of the "sort_order" field.
func (m *DictTypeMutation) ClearSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	m.clearedFields[dicttype.FieldSortOrder] = struct{}{}
}

// SortOrderCleared returns if the "sort_order" field was cleared in this mutation.
func (m *DictTypeMutation) SortOrderCleared() bool {
	_, ok := m.clearedFields[dicttype.FieldSortOrder]
	return ok
}

// ResetSortOrder resets all changes to the "sort_order" field.
func (m *DictTypeMutation) ResetSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	delete(m.clearedFields, dicttype.FieldSortOrder)
}

// SetDescription sets the "description" field.
func (m *DictTypeMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *DictTypeMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the DictType entity.
// If the DictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictTypeMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *DictTypeMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[dicttype.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *DictTypeMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[dicttype.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *DictTypeMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, dicttype.FieldDescription)
}

// SetTenantID sets the "tenant_id" field.
func (m *DictTypeMutation) SetTenantID(u uint32) {
	m.tenant_id = &u
	m.addtenant_id = nil
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *DictTypeMutation) TenantID() (r uint32, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the DictType entity.
// If the DictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictTypeMutation) OldTenantID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// AddTenantID adds u to the "tenant_id" field.
func (m *DictTypeMutation) AddTenantID(u int32) {
	if m.addtenant_id != nil {
		*m.addtenant_id += u
	} else {
		m.addtenant_id = &u
	}
}

// AddedTenantID returns the value that was added to the "tenant_id" field in this mutation.
func (m *DictTypeMutation) AddedTenantID() (r int32, exists bool) {
	v := m.addtenant_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTenantID clears the value of the "tenant_id" field.
func (m *DictTypeMutation) ClearTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	m.clearedFields[dicttype.FieldTenantID] = struct{}{}
}

// TenantIDCleared returns if the "tenant_id" field was cleared in this mutation.
func (m *DictTypeMutation) TenantIDCleared() bool {
	_, ok := m.clearedFields[dicttype.FieldTenantID]
	return ok
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *DictTypeMutation) ResetTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	delete(m.clearedFields, dicttype.FieldTenantID)
}

// SetTypeCode sets the "type_code" field.
func (m *DictTypeMutation) SetTypeCode(s string) {
	m.type_code = &s
}

// TypeCode returns the value of the "type_code" field in the mutation.
func (m *DictTypeMutation) TypeCode() (r string, exists bool) {
	v := m.type_code
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeCode returns the old "type_code" field's value of the DictType entity.
// If the DictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictTypeMutation) OldTypeCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTypeCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTypeCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeCode: %w", err)
	}
	return oldValue.TypeCode, nil
}

// ClearTypeCode clears the value of the "type_code" field.
func (m *DictTypeMutation) ClearTypeCode() {
	m.type_code = nil
	m.clearedFields[dicttype.FieldTypeCode] = struct{}{}
}

// TypeCodeCleared returns if the "type_code" field was cleared in this mutation.
func (m *DictTypeMutation) TypeCodeCleared() bool {
	_, ok := m.clearedFields[dicttype.FieldTypeCode]
	return ok
}

// ResetTypeCode resets all changes to the "type_code" field.
func (m *DictTypeMutation) ResetTypeCode() {
	m.type_code = nil
	delete(m.clearedFields, dicttype.FieldTypeCode)
}

// SetTypeName sets the "type_name" field.
func (m *DictTypeMutation) SetTypeName(s string) {
	m.type_name = &s
}

// TypeName returns the value of the "type_name" field in the mutation.
func (m *DictTypeMutation) TypeName() (r string, exists bool) {
	v := m.type_name
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeName returns the old "type_name" field's value of the DictType entity.
// If the DictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DictTypeMutation) OldTypeName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTypeName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTypeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeName: %w", err)
	}
	return oldValue.TypeName, nil
}

// ClearTypeName clears the value of the "type_name" field.
func (m *DictTypeMutation) ClearTypeName() {
	m.type_name = nil
	m.clearedFields[dicttype.FieldTypeName] = struct{}{}
}

// TypeNameCleared returns if the "type_name" field was cleared in this mutation.
func (m *DictTypeMutation) TypeNameCleared() bool {
	_, ok := m.clearedFields[dicttype.FieldTypeName]
	return ok
}

// ResetTypeName resets all changes to the "type_name" field.
func (m *DictTypeMutation) ResetTypeName() {
	m.type_name = nil
	delete(m.clearedFields, dicttype.FieldTypeName)
}

// AddEntryIDs adds the "entries" edge to the DictEntry entity by ids.
func (m *DictTypeMutation) AddEntryIDs(ids ...uint32) {
	if m.entries == nil {
		m.entries = make(map[uint32]struct{})
	}
	for i := range ids {
		m.entries[ids[i]] = struct{}{}
	}
}

// ClearEntries clears the "entries" edge to the DictEntry entity.
func (m *DictTypeMutation) ClearEntries() {
	m.clearedentries = true
}

// EntriesCleared reports if the "entries" edge to the DictEntry entity was cleared.
func (m *DictTypeMutation) EntriesCleared() bool {
	return m.clearedentries
}

// RemoveEntryIDs removes the "entries" edge to the DictEntry entity by IDs.
func (m *DictTypeMutation) RemoveEntryIDs(ids ...uint32) {
	if m.removedentries == nil {
		m.removedentries = make(map[uint32]struct{})
	}
	for i := range ids {
		delete(m.entries, ids[i])
		m.removedentries[ids[i]] = struct{}{}
	}
}

// RemovedEntries returns the removed IDs of the "entries" edge to the DictEntry entity.
func (m *DictTypeMutation) RemovedEntriesIDs() (ids []uint32) {
	for id := range m.removedentries {
		ids = append(ids, id)
	}
	return
}

// EntriesIDs returns the "entries" edge IDs in the mutation.
func (m *DictTypeMutation) EntriesIDs() (ids []uint32) {
	for id := range m.entries {
		ids = append(ids, id)
	}
	return
}

// ResetEntries resets all changes to the "entries" edge.
func (m *DictTypeMutation) ResetEntries() {
	m.entries = nil
	m.clearedentries = false
	m.removedentries = nil
}

// Where appends a list predicates to the DictTypeMutation builder.
func (m *DictTypeMutation) Where(ps ...predicate.DictType) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DictTypeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DictTypeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DictType, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DictTypeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DictTypeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DictType).
func (m *DictTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DictTypeMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, dicttype.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, dicttype.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, dicttype.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, dicttype.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, dicttype.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, dicttype.FieldDeletedBy)
	}
	if m.is_enabled != nil {
		fields = append(fields, dicttype.FieldIsEnabled)
	}
	if m.sort_order != nil {
		fields = append(fields, dicttype.FieldSortOrder)
	}
	if m.description != nil {
		fields = append(fields, dicttype.FieldDescription)
	}
	if m.tenant_id != nil {
		fields = append(fields, dicttype.FieldTenantID)
	}
	if m.type_code != nil {
		fields = append(fields, dicttype.FieldTypeCode)
	}
	if m.type_name != nil {
		fields = append(fields, dicttype.FieldTypeName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DictTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dicttype.FieldCreatedAt:
		return m.CreatedAt()
	case dicttype.FieldUpdatedAt:
		return m.UpdatedAt()
	case dicttype.FieldDeletedAt:
		return m.DeletedAt()
	case dicttype.FieldCreatedBy:
		return m.CreatedBy()
	case dicttype.FieldUpdatedBy:
		return m.UpdatedBy()
	case dicttype.FieldDeletedBy:
		return m.DeletedBy()
	case dicttype.FieldIsEnabled:
		return m.IsEnabled()
	case dicttype.FieldSortOrder:
		return m.SortOrder()
	case dicttype.FieldDescription:
		return m.Description()
	case dicttype.FieldTenantID:
		return m.TenantID()
	case dicttype.FieldTypeCode:
		return m.TypeCode()
	case dicttype.FieldTypeName:
		return m.TypeName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DictTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dicttype.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case dicttype.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case dicttype.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case dicttype.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case dicttype.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case dicttype.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case dicttype.FieldIsEnabled:
		return m.OldIsEnabled(ctx)
	case dicttype.FieldSortOrder:
		return m.OldSortOrder(ctx)
	case dicttype.FieldDescription:
		return m.OldDescription(ctx)
	case dicttype.FieldTenantID:
		return m.OldTenantID(ctx)
	case dicttype.FieldTypeCode:
		return m.OldTypeCode(ctx)
	case dicttype.FieldTypeName:
		return m.OldTypeName(ctx)
	}
	return nil, fmt.Errorf("unknown DictType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DictTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dicttype.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case dicttype.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case dicttype.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case dicttype.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case dicttype.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case dicttype.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case dicttype.FieldIsEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnabled(v)
		return nil
	case dicttype.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSortOrder(v)
		return nil
	case dicttype.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case dicttype.FieldTenantID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case dicttype.FieldTypeCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeCode(v)
		return nil
	case dicttype.FieldTypeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeName(v)
		return nil
	}
	return fmt.Errorf("unknown DictType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DictTypeMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, dicttype.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, dicttype.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, dicttype.FieldDeletedBy)
	}
	if m.addsort_order != nil {
		fields = append(fields, dicttype.FieldSortOrder)
	}
	if m.addtenant_id != nil {
		fields = append(fields, dicttype.FieldTenantID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DictTypeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case dicttype.FieldCreatedBy:
		return m.AddedCreatedBy()
	case dicttype.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case dicttype.FieldDeletedBy:
		return m.AddedDeletedBy()
	case dicttype.FieldSortOrder:
		return m.AddedSortOrder()
	case dicttype.FieldTenantID:
		return m.AddedTenantID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DictTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case dicttype.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case dicttype.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case dicttype.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case dicttype.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSortOrder(v)
		return nil
	case dicttype.FieldTenantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantID(v)
		return nil
	}
	return fmt.Errorf("unknown DictType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DictTypeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(dicttype.FieldCreatedAt) {
		fields = append(fields, dicttype.FieldCreatedAt)
	}
	if m.FieldCleared(dicttype.FieldUpdatedAt) {
		fields = append(fields, dicttype.FieldUpdatedAt)
	}
	if m.FieldCleared(dicttype.FieldDeletedAt) {
		fields = append(fields, dicttype.FieldDeletedAt)
	}
	if m.FieldCleared(dicttype.FieldCreatedBy) {
		fields = append(fields, dicttype.FieldCreatedBy)
	}
	if m.FieldCleared(dicttype.FieldUpdatedBy) {
		fields = append(fields, dicttype.FieldUpdatedBy)
	}
	if m.FieldCleared(dicttype.FieldDeletedBy) {
		fields = append(fields, dicttype.FieldDeletedBy)
	}
	if m.FieldCleared(dicttype.FieldIsEnabled) {
		fields = append(fields, dicttype.FieldIsEnabled)
	}
	if m.FieldCleared(dicttype.FieldSortOrder) {
		fields = append(fields, dicttype.FieldSortOrder)
	}
	if m.FieldCleared(dicttype.FieldDescription) {
		fields = append(fields, dicttype.FieldDescription)
	}
	if m.FieldCleared(dicttype.FieldTenantID) {
		fields = append(fields, dicttype.FieldTenantID)
	}
	if m.FieldCleared(dicttype.FieldTypeCode) {
		fields = append(fields, dicttype.FieldTypeCode)
	}
	if m.FieldCleared(dicttype.FieldTypeName) {
		fields = append(fields, dicttype.FieldTypeName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DictTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DictTypeMutation) ClearField(name string) error {
	switch name {
	case dicttype.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case dicttype.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case dicttype.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case dicttype.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case dicttype.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case dicttype.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case dicttype.FieldIsEnabled:
		m.ClearIsEnabled()
		return nil
	case dicttype.FieldSortOrder:
		m.ClearSortOrder()
		return nil
	case dicttype.FieldDescription:
		m.ClearDescription()
		return nil
	case dicttype.FieldTenantID:
		m.ClearTenantID()
		return nil
	case dicttype.FieldTypeCode:
		m.ClearTypeCode()
		return nil
	case dicttype.FieldTypeName:
		m.ClearTypeName()
		return nil
	}
	return fmt.Errorf("unknown DictType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DictTypeMutation) ResetField(name string) error {
	switch name {
	case dicttype.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case dicttype.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case dicttype.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case dicttype.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case dicttype.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case dicttype.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case dicttype.FieldIsEnabled:
		m.ResetIsEnabled()
		return nil
	case dicttype.FieldSortOrder:
		m.ResetSortOrder()
		return nil
	case dicttype.FieldDescription:
		m.ResetDescription()
		return nil
	case dicttype.FieldTenantID:
		m.ResetTenantID()
		return nil
	case dicttype.FieldTypeCode:
		m.ResetTypeCode()
		return nil
	case dicttype.FieldTypeName:
		m.ResetTypeName()
		return nil
	}
	return fmt.Errorf("unknown DictType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DictTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.entries != nil {
		edges = append(edges, dicttype.EdgeEntries)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DictTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dicttype.EdgeEntries:
		ids := make([]ent.Value, 0, len(m.entries))
		for id := range m.entries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DictTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedentries != nil {
		edges = append(edges, dicttype.EdgeEntries)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DictTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dicttype.EdgeEntries:
		ids := make([]ent.Value, 0, len(m.removedentries))
		for id := range m.removedentries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DictTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedentries {
		edges = append(edges, dicttype.EdgeEntries)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DictTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case dicttype.EdgeEntries:
		return m.clearedentries
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DictTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown DictType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DictTypeMutation) ResetEdge(name string) error {
	switch name {
	case dicttype.EdgeEntries:
		m.ResetEntries()
		return nil
	}
	return fmt.Errorf("unknown DictType edge %s", name)
}

// FileMutation represents an operation that mutates the File nodes in the graph.
type FileMutation struct {
	config
	op             Op
	typ            string
	id             *uint32
	created_at     *time.Time
	updated_at     *time.Time
	deleted_at     *time.Time
	created_by     *uint32
	addcreated_by  *int32
	updated_by     *uint32
	addupdated_by  *int32
	deleted_by     *uint32
	adddeleted_by  *int32
	remark         *string
	tenant_id      *uint32
	addtenant_id   *int32
	provider       *file.Provider
	bucket_name    *string
	file_directory *string
	file_guid      *string
	save_file_name *string
	file_name      *string
	extension      *string
	size           *uint64
	addsize        *int64
	size_format    *string
	link_url       *string
	md5            *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*File, error)
	predicates     []predicate.File
}

var _ ent.Mutation = (*FileMutation)(nil)

// fileOption allows management of the mutation configuration using functional options.
type fileOption func(*FileMutation)

// newFileMutation creates new mutation for the File entity.
func newFileMutation(c config, op Op, opts ...fileOption) *FileMutation {
	m := &FileMutation{
		config:        c,
		op:            op,
		typ:           TypeFile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileID sets the ID field of the mutation.
func withFileID(id uint32) fileOption {
	return func(m *FileMutation) {
		var (
			err   error
			once  sync.Once
			value *File
		)
		m.oldValue = func(ctx context.Context) (*File, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().File.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFile sets the old File of the mutation.
func withFile(node *File) fileOption {
	return func(m *FileMutation) {
		m.oldValue = func(context.Context) (*File, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of File entities.
func (m *FileMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FileMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FileMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().File.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *FileMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FileMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *FileMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[file.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *FileMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[file.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FileMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, file.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FileMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FileMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *FileMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[file.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *FileMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[file.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FileMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, file.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *FileMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *FileMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *FileMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[file.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *FileMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[file.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *FileMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, file.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *FileMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *FileMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *FileMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *FileMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *FileMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[file.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *FileMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[file.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *FileMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, file.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *FileMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *FileMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *FileMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *FileMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *FileMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[file.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *FileMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[file.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *FileMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, file.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *FileMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *FileMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *FileMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *FileMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *FileMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[file.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *FileMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[file.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *FileMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, file.FieldDeletedBy)
}

// SetRemark sets the "remark" field.
func (m *FileMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *FileMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *FileMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[file.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *FileMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[file.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *FileMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, file.FieldRemark)
}

// SetTenantID sets the "tenant_id" field.
func (m *FileMutation) SetTenantID(u uint32) {
	m.tenant_id = &u
	m.addtenant_id = nil
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *FileMutation) TenantID() (r uint32, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldTenantID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// AddTenantID adds u to the "tenant_id" field.
func (m *FileMutation) AddTenantID(u int32) {
	if m.addtenant_id != nil {
		*m.addtenant_id += u
	} else {
		m.addtenant_id = &u
	}
}

// AddedTenantID returns the value that was added to the "tenant_id" field in this mutation.
func (m *FileMutation) AddedTenantID() (r int32, exists bool) {
	v := m.addtenant_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTenantID clears the value of the "tenant_id" field.
func (m *FileMutation) ClearTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	m.clearedFields[file.FieldTenantID] = struct{}{}
}

// TenantIDCleared returns if the "tenant_id" field was cleared in this mutation.
func (m *FileMutation) TenantIDCleared() bool {
	_, ok := m.clearedFields[file.FieldTenantID]
	return ok
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *FileMutation) ResetTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	delete(m.clearedFields, file.FieldTenantID)
}

// SetProvider sets the "provider" field.
func (m *FileMutation) SetProvider(f file.Provider) {
	m.provider = &f
}

// Provider returns the value of the "provider" field in the mutation.
func (m *FileMutation) Provider() (r file.Provider, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProvider returns the old "provider" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldProvider(ctx context.Context) (v *file.Provider, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvider: %w", err)
	}
	return oldValue.Provider, nil
}

// ClearProvider clears the value of the "provider" field.
func (m *FileMutation) ClearProvider() {
	m.provider = nil
	m.clearedFields[file.FieldProvider] = struct{}{}
}

// ProviderCleared returns if the "provider" field was cleared in this mutation.
func (m *FileMutation) ProviderCleared() bool {
	_, ok := m.clearedFields[file.FieldProvider]
	return ok
}

// ResetProvider resets all changes to the "provider" field.
func (m *FileMutation) ResetProvider() {
	m.provider = nil
	delete(m.clearedFields, file.FieldProvider)
}

// SetBucketName sets the "bucket_name" field.
func (m *FileMutation) SetBucketName(s string) {
	m.bucket_name = &s
}

// BucketName returns the value of the "bucket_name" field in the mutation.
func (m *FileMutation) BucketName() (r string, exists bool) {
	v := m.bucket_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBucketName returns the old "bucket_name" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldBucketName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBucketName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBucketName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBucketName: %w", err)
	}
	return oldValue.BucketName, nil
}

// ClearBucketName clears the value of the "bucket_name" field.
func (m *FileMutation) ClearBucketName() {
	m.bucket_name = nil
	m.clearedFields[file.FieldBucketName] = struct{}{}
}

// BucketNameCleared returns if the "bucket_name" field was cleared in this mutation.
func (m *FileMutation) BucketNameCleared() bool {
	_, ok := m.clearedFields[file.FieldBucketName]
	return ok
}

// ResetBucketName resets all changes to the "bucket_name" field.
func (m *FileMutation) ResetBucketName() {
	m.bucket_name = nil
	delete(m.clearedFields, file.FieldBucketName)
}

// SetFileDirectory sets the "file_directory" field.
func (m *FileMutation) SetFileDirectory(s string) {
	m.file_directory = &s
}

// FileDirectory returns the value of the "file_directory" field in the mutation.
func (m *FileMutation) FileDirectory() (r string, exists bool) {
	v := m.file_directory
	if v == nil {
		return
	}
	return *v, true
}

// OldFileDirectory returns the old "file_directory" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldFileDirectory(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileDirectory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileDirectory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileDirectory: %w", err)
	}
	return oldValue.FileDirectory, nil
}

// ClearFileDirectory clears the value of the "file_directory" field.
func (m *FileMutation) ClearFileDirectory() {
	m.file_directory = nil
	m.clearedFields[file.FieldFileDirectory] = struct{}{}
}

// FileDirectoryCleared returns if the "file_directory" field was cleared in this mutation.
func (m *FileMutation) FileDirectoryCleared() bool {
	_, ok := m.clearedFields[file.FieldFileDirectory]
	return ok
}

// ResetFileDirectory resets all changes to the "file_directory" field.
func (m *FileMutation) ResetFileDirectory() {
	m.file_directory = nil
	delete(m.clearedFields, file.FieldFileDirectory)
}

// SetFileGUID sets the "file_guid" field.
func (m *FileMutation) SetFileGUID(s string) {
	m.file_guid = &s
}

// FileGUID returns the value of the "file_guid" field in the mutation.
func (m *FileMutation) FileGUID() (r string, exists bool) {
	v := m.file_guid
	if v == nil {
		return
	}
	return *v, true
}

// OldFileGUID returns the old "file_guid" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldFileGUID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileGUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileGUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileGUID: %w", err)
	}
	return oldValue.FileGUID, nil
}

// ClearFileGUID clears the value of the "file_guid" field.
func (m *FileMutation) ClearFileGUID() {
	m.file_guid = nil
	m.clearedFields[file.FieldFileGUID] = struct{}{}
}

// FileGUIDCleared returns if the "file_guid" field was cleared in this mutation.
func (m *FileMutation) FileGUIDCleared() bool {
	_, ok := m.clearedFields[file.FieldFileGUID]
	return ok
}

// ResetFileGUID resets all changes to the "file_guid" field.
func (m *FileMutation) ResetFileGUID() {
	m.file_guid = nil
	delete(m.clearedFields, file.FieldFileGUID)
}

// SetSaveFileName sets the "save_file_name" field.
func (m *FileMutation) SetSaveFileName(s string) {
	m.save_file_name = &s
}

// SaveFileName returns the value of the "save_file_name" field in the mutation.
func (m *FileMutation) SaveFileName() (r string, exists bool) {
	v := m.save_file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldSaveFileName returns the old "save_file_name" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldSaveFileName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSaveFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSaveFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSaveFileName: %w", err)
	}
	return oldValue.SaveFileName, nil
}

// ClearSaveFileName clears the value of the "save_file_name" field.
func (m *FileMutation) ClearSaveFileName() {
	m.save_file_name = nil
	m.clearedFields[file.FieldSaveFileName] = struct{}{}
}

// SaveFileNameCleared returns if the "save_file_name" field was cleared in this mutation.
func (m *FileMutation) SaveFileNameCleared() bool {
	_, ok := m.clearedFields[file.FieldSaveFileName]
	return ok
}

// ResetSaveFileName resets all changes to the "save_file_name" field.
func (m *FileMutation) ResetSaveFileName() {
	m.save_file_name = nil
	delete(m.clearedFields, file.FieldSaveFileName)
}

// SetFileName sets the "file_name" field.
func (m *FileMutation) SetFileName(s string) {
	m.file_name = &s
}

// FileName returns the value of the "file_name" field in the mutation.
func (m *FileMutation) FileName() (r string, exists bool) {
	v := m.file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "file_name" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldFileName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ClearFileName clears the value of the "file_name" field.
func (m *FileMutation) ClearFileName() {
	m.file_name = nil
	m.clearedFields[file.FieldFileName] = struct{}{}
}

// FileNameCleared returns if the "file_name" field was cleared in this mutation.
func (m *FileMutation) FileNameCleared() bool {
	_, ok := m.clearedFields[file.FieldFileName]
	return ok
}

// ResetFileName resets all changes to the "file_name" field.
func (m *FileMutation) ResetFileName() {
	m.file_name = nil
	delete(m.clearedFields, file.FieldFileName)
}

// SetExtension sets the "extension" field.
func (m *FileMutation) SetExtension(s string) {
	m.extension = &s
}

// Extension returns the value of the "extension" field in the mutation.
func (m *FileMutation) Extension() (r string, exists bool) {
	v := m.extension
	if v == nil {
		return
	}
	return *v, true
}

// OldExtension returns the old "extension" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldExtension(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtension is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtension requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtension: %w", err)
	}
	return oldValue.Extension, nil
}

// ClearExtension clears the value of the "extension" field.
func (m *FileMutation) ClearExtension() {
	m.extension = nil
	m.clearedFields[file.FieldExtension] = struct{}{}
}

// ExtensionCleared returns if the "extension" field was cleared in this mutation.
func (m *FileMutation) ExtensionCleared() bool {
	_, ok := m.clearedFields[file.FieldExtension]
	return ok
}

// ResetExtension resets all changes to the "extension" field.
func (m *FileMutation) ResetExtension() {
	m.extension = nil
	delete(m.clearedFields, file.FieldExtension)
}

// SetSize sets the "size" field.
func (m *FileMutation) SetSize(u uint64) {
	m.size = &u
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *FileMutation) Size() (r uint64, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldSize(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds u to the "size" field.
func (m *FileMutation) AddSize(u int64) {
	if m.addsize != nil {
		*m.addsize += u
	} else {
		m.addsize = &u
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *FileMutation) AddedSize() (r int64, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ClearSize clears the value of the "size" field.
func (m *FileMutation) ClearSize() {
	m.size = nil
	m.addsize = nil
	m.clearedFields[file.FieldSize] = struct{}{}
}

// SizeCleared returns if the "size" field was cleared in this mutation.
func (m *FileMutation) SizeCleared() bool {
	_, ok := m.clearedFields[file.FieldSize]
	return ok
}

// ResetSize resets all changes to the "size" field.
func (m *FileMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
	delete(m.clearedFields, file.FieldSize)
}

// SetSizeFormat sets the "size_format" field.
func (m *FileMutation) SetSizeFormat(s string) {
	m.size_format = &s
}

// SizeFormat returns the value of the "size_format" field in the mutation.
func (m *FileMutation) SizeFormat() (r string, exists bool) {
	v := m.size_format
	if v == nil {
		return
	}
	return *v, true
}

// OldSizeFormat returns the old "size_format" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldSizeFormat(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSizeFormat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSizeFormat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSizeFormat: %w", err)
	}
	return oldValue.SizeFormat, nil
}

// ClearSizeFormat clears the value of the "size_format" field.
func (m *FileMutation) ClearSizeFormat() {
	m.size_format = nil
	m.clearedFields[file.FieldSizeFormat] = struct{}{}
}

// SizeFormatCleared returns if the "size_format" field was cleared in this mutation.
func (m *FileMutation) SizeFormatCleared() bool {
	_, ok := m.clearedFields[file.FieldSizeFormat]
	return ok
}

// ResetSizeFormat resets all changes to the "size_format" field.
func (m *FileMutation) ResetSizeFormat() {
	m.size_format = nil
	delete(m.clearedFields, file.FieldSizeFormat)
}

// SetLinkURL sets the "link_url" field.
func (m *FileMutation) SetLinkURL(s string) {
	m.link_url = &s
}

// LinkURL returns the value of the "link_url" field in the mutation.
func (m *FileMutation) LinkURL() (r string, exists bool) {
	v := m.link_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLinkURL returns the old "link_url" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldLinkURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLinkURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLinkURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinkURL: %w", err)
	}
	return oldValue.LinkURL, nil
}

// ClearLinkURL clears the value of the "link_url" field.
func (m *FileMutation) ClearLinkURL() {
	m.link_url = nil
	m.clearedFields[file.FieldLinkURL] = struct{}{}
}

// LinkURLCleared returns if the "link_url" field was cleared in this mutation.
func (m *FileMutation) LinkURLCleared() bool {
	_, ok := m.clearedFields[file.FieldLinkURL]
	return ok
}

// ResetLinkURL resets all changes to the "link_url" field.
func (m *FileMutation) ResetLinkURL() {
	m.link_url = nil
	delete(m.clearedFields, file.FieldLinkURL)
}

// SetMd5 sets the "md5" field.
func (m *FileMutation) SetMd5(s string) {
	m.md5 = &s
}

// Md5 returns the value of the "md5" field in the mutation.
func (m *FileMutation) Md5() (r string, exists bool) {
	v := m.md5
	if v == nil {
		return
	}
	return *v, true
}

// OldMd5 returns the old "md5" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldMd5(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMd5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMd5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMd5: %w", err)
	}
	return oldValue.Md5, nil
}

// ClearMd5 clears the value of the "md5" field.
func (m *FileMutation) ClearMd5() {
	m.md5 = nil
	m.clearedFields[file.FieldMd5] = struct{}{}
}

// Md5Cleared returns if the "md5" field was cleared in this mutation.
func (m *FileMutation) Md5Cleared() bool {
	_, ok := m.clearedFields[file.FieldMd5]
	return ok
}

// ResetMd5 resets all changes to the "md5" field.
func (m *FileMutation) ResetMd5() {
	m.md5 = nil
	delete(m.clearedFields, file.FieldMd5)
}

// Where appends a list predicates to the FileMutation builder.
func (m *FileMutation) Where(ps ...predicate.File) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.File, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (File).
func (m *FileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileMutation) Fields() []string {
	fields := make([]string, 0, 19)
	if m.created_at != nil {
		fields = append(fields, file.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, file.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, file.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, file.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, file.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, file.FieldDeletedBy)
	}
	if m.remark != nil {
		fields = append(fields, file.FieldRemark)
	}
	if m.tenant_id != nil {
		fields = append(fields, file.FieldTenantID)
	}
	if m.provider != nil {
		fields = append(fields, file.FieldProvider)
	}
	if m.bucket_name != nil {
		fields = append(fields, file.FieldBucketName)
	}
	if m.file_directory != nil {
		fields = append(fields, file.FieldFileDirectory)
	}
	if m.file_guid != nil {
		fields = append(fields, file.FieldFileGUID)
	}
	if m.save_file_name != nil {
		fields = append(fields, file.FieldSaveFileName)
	}
	if m.file_name != nil {
		fields = append(fields, file.FieldFileName)
	}
	if m.extension != nil {
		fields = append(fields, file.FieldExtension)
	}
	if m.size != nil {
		fields = append(fields, file.FieldSize)
	}
	if m.size_format != nil {
		fields = append(fields, file.FieldSizeFormat)
	}
	if m.link_url != nil {
		fields = append(fields, file.FieldLinkURL)
	}
	if m.md5 != nil {
		fields = append(fields, file.FieldMd5)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case file.FieldCreatedAt:
		return m.CreatedAt()
	case file.FieldUpdatedAt:
		return m.UpdatedAt()
	case file.FieldDeletedAt:
		return m.DeletedAt()
	case file.FieldCreatedBy:
		return m.CreatedBy()
	case file.FieldUpdatedBy:
		return m.UpdatedBy()
	case file.FieldDeletedBy:
		return m.DeletedBy()
	case file.FieldRemark:
		return m.Remark()
	case file.FieldTenantID:
		return m.TenantID()
	case file.FieldProvider:
		return m.Provider()
	case file.FieldBucketName:
		return m.BucketName()
	case file.FieldFileDirectory:
		return m.FileDirectory()
	case file.FieldFileGUID:
		return m.FileGUID()
	case file.FieldSaveFileName:
		return m.SaveFileName()
	case file.FieldFileName:
		return m.FileName()
	case file.FieldExtension:
		return m.Extension()
	case file.FieldSize:
		return m.Size()
	case file.FieldSizeFormat:
		return m.SizeFormat()
	case file.FieldLinkURL:
		return m.LinkURL()
	case file.FieldMd5:
		return m.Md5()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case file.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case file.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case file.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case file.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case file.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case file.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case file.FieldRemark:
		return m.OldRemark(ctx)
	case file.FieldTenantID:
		return m.OldTenantID(ctx)
	case file.FieldProvider:
		return m.OldProvider(ctx)
	case file.FieldBucketName:
		return m.OldBucketName(ctx)
	case file.FieldFileDirectory:
		return m.OldFileDirectory(ctx)
	case file.FieldFileGUID:
		return m.OldFileGUID(ctx)
	case file.FieldSaveFileName:
		return m.OldSaveFileName(ctx)
	case file.FieldFileName:
		return m.OldFileName(ctx)
	case file.FieldExtension:
		return m.OldExtension(ctx)
	case file.FieldSize:
		return m.OldSize(ctx)
	case file.FieldSizeFormat:
		return m.OldSizeFormat(ctx)
	case file.FieldLinkURL:
		return m.OldLinkURL(ctx)
	case file.FieldMd5:
		return m.OldMd5(ctx)
	}
	return nil, fmt.Errorf("unknown File field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case file.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case file.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case file.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case file.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case file.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case file.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case file.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case file.FieldTenantID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case file.FieldProvider:
		v, ok := value.(file.Provider)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvider(v)
		return nil
	case file.FieldBucketName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBucketName(v)
		return nil
	case file.FieldFileDirectory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileDirectory(v)
		return nil
	case file.FieldFileGUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileGUID(v)
		return nil
	case file.FieldSaveFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSaveFileName(v)
		return nil
	case file.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case file.FieldExtension:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtension(v)
		return nil
	case file.FieldSize:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case file.FieldSizeFormat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSizeFormat(v)
		return nil
	case file.FieldLinkURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinkURL(v)
		return nil
	case file.FieldMd5:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMd5(v)
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, file.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, file.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, file.FieldDeletedBy)
	}
	if m.addtenant_id != nil {
		fields = append(fields, file.FieldTenantID)
	}
	if m.addsize != nil {
		fields = append(fields, file.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case file.FieldCreatedBy:
		return m.AddedCreatedBy()
	case file.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case file.FieldDeletedBy:
		return m.AddedDeletedBy()
	case file.FieldTenantID:
		return m.AddedTenantID()
	case file.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case file.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case file.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case file.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case file.FieldTenantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantID(v)
		return nil
	case file.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown File numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(file.FieldCreatedAt) {
		fields = append(fields, file.FieldCreatedAt)
	}
	if m.FieldCleared(file.FieldUpdatedAt) {
		fields = append(fields, file.FieldUpdatedAt)
	}
	if m.FieldCleared(file.FieldDeletedAt) {
		fields = append(fields, file.FieldDeletedAt)
	}
	if m.FieldCleared(file.FieldCreatedBy) {
		fields = append(fields, file.FieldCreatedBy)
	}
	if m.FieldCleared(file.FieldUpdatedBy) {
		fields = append(fields, file.FieldUpdatedBy)
	}
	if m.FieldCleared(file.FieldDeletedBy) {
		fields = append(fields, file.FieldDeletedBy)
	}
	if m.FieldCleared(file.FieldRemark) {
		fields = append(fields, file.FieldRemark)
	}
	if m.FieldCleared(file.FieldTenantID) {
		fields = append(fields, file.FieldTenantID)
	}
	if m.FieldCleared(file.FieldProvider) {
		fields = append(fields, file.FieldProvider)
	}
	if m.FieldCleared(file.FieldBucketName) {
		fields = append(fields, file.FieldBucketName)
	}
	if m.FieldCleared(file.FieldFileDirectory) {
		fields = append(fields, file.FieldFileDirectory)
	}
	if m.FieldCleared(file.FieldFileGUID) {
		fields = append(fields, file.FieldFileGUID)
	}
	if m.FieldCleared(file.FieldSaveFileName) {
		fields = append(fields, file.FieldSaveFileName)
	}
	if m.FieldCleared(file.FieldFileName) {
		fields = append(fields, file.FieldFileName)
	}
	if m.FieldCleared(file.FieldExtension) {
		fields = append(fields, file.FieldExtension)
	}
	if m.FieldCleared(file.FieldSize) {
		fields = append(fields, file.FieldSize)
	}
	if m.FieldCleared(file.FieldSizeFormat) {
		fields = append(fields, file.FieldSizeFormat)
	}
	if m.FieldCleared(file.FieldLinkURL) {
		fields = append(fields, file.FieldLinkURL)
	}
	if m.FieldCleared(file.FieldMd5) {
		fields = append(fields, file.FieldMd5)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileMutation) ClearField(name string) error {
	switch name {
	case file.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case file.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case file.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case file.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case file.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case file.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case file.FieldRemark:
		m.ClearRemark()
		return nil
	case file.FieldTenantID:
		m.ClearTenantID()
		return nil
	case file.FieldProvider:
		m.ClearProvider()
		return nil
	case file.FieldBucketName:
		m.ClearBucketName()
		return nil
	case file.FieldFileDirectory:
		m.ClearFileDirectory()
		return nil
	case file.FieldFileGUID:
		m.ClearFileGUID()
		return nil
	case file.FieldSaveFileName:
		m.ClearSaveFileName()
		return nil
	case file.FieldFileName:
		m.ClearFileName()
		return nil
	case file.FieldExtension:
		m.ClearExtension()
		return nil
	case file.FieldSize:
		m.ClearSize()
		return nil
	case file.FieldSizeFormat:
		m.ClearSizeFormat()
		return nil
	case file.FieldLinkURL:
		m.ClearLinkURL()
		return nil
	case file.FieldMd5:
		m.ClearMd5()
		return nil
	}
	return fmt.Errorf("unknown File nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileMutation) ResetField(name string) error {
	switch name {
	case file.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case file.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case file.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case file.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case file.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case file.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case file.FieldRemark:
		m.ResetRemark()
		return nil
	case file.FieldTenantID:
		m.ResetTenantID()
		return nil
	case file.FieldProvider:
		m.ResetProvider()
		return nil
	case file.FieldBucketName:
		m.ResetBucketName()
		return nil
	case file.FieldFileDirectory:
		m.ResetFileDirectory()
		return nil
	case file.FieldFileGUID:
		m.ResetFileGUID()
		return nil
	case file.FieldSaveFileName:
		m.ResetSaveFileName()
		return nil
	case file.FieldFileName:
		m.ResetFileName()
		return nil
	case file.FieldExtension:
		m.ResetExtension()
		return nil
	case file.FieldSize:
		m.ResetSize()
		return nil
	case file.FieldSizeFormat:
		m.ResetSizeFormat()
		return nil
	case file.FieldLinkURL:
		m.ResetLinkURL()
		return nil
	case file.FieldMd5:
		m.ResetMd5()
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown File unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown File edge %s", name)
}

// LanguageMutation represents an operation that mutates the Language nodes in the graph.
type LanguageMutation struct {
	config
	op            Op
	typ           string
	id            *uint32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	created_by    *uint32
	addcreated_by *int32
	updated_by    *uint32
	addupdated_by *int32
	deleted_by    *uint32
	adddeleted_by *int32
	sort_order    *int32
	addsort_order *int32
	is_enabled    *bool
	language_code *string
	language_name *string
	native_name   *string
	is_default    *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Language, error)
	predicates    []predicate.Language
}

var _ ent.Mutation = (*LanguageMutation)(nil)

// languageOption allows management of the mutation configuration using functional options.
type languageOption func(*LanguageMutation)

// newLanguageMutation creates new mutation for the Language entity.
func newLanguageMutation(c config, op Op, opts ...languageOption) *LanguageMutation {
	m := &LanguageMutation{
		config:        c,
		op:            op,
		typ:           TypeLanguage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLanguageID sets the ID field of the mutation.
func withLanguageID(id uint32) languageOption {
	return func(m *LanguageMutation) {
		var (
			err   error
			once  sync.Once
			value *Language
		)
		m.oldValue = func(ctx context.Context) (*Language, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Language.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLanguage sets the old Language of the mutation.
func withLanguage(node *Language) languageOption {
	return func(m *LanguageMutation) {
		m.oldValue = func(context.Context) (*Language, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LanguageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LanguageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Language entities.
func (m *LanguageMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LanguageMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LanguageMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Language.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *LanguageMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LanguageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *LanguageMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[language.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *LanguageMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[language.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LanguageMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, language.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LanguageMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LanguageMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *LanguageMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[language.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *LanguageMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[language.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LanguageMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, language.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *LanguageMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *LanguageMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *LanguageMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[language.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *LanguageMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[language.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *LanguageMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, language.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *LanguageMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *LanguageMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *LanguageMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *LanguageMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *LanguageMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[language.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *LanguageMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[language.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *LanguageMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, language.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *LanguageMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *LanguageMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *LanguageMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *LanguageMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *LanguageMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[language.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *LanguageMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[language.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *LanguageMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, language.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *LanguageMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *LanguageMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *LanguageMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *LanguageMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *LanguageMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[language.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *LanguageMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[language.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *LanguageMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, language.FieldDeletedBy)
}

// SetSortOrder sets the "sort_order" field.
func (m *LanguageMutation) SetSortOrder(i int32) {
	m.sort_order = &i
	m.addsort_order = nil
}

// SortOrder returns the value of the "sort_order" field in the mutation.
func (m *LanguageMutation) SortOrder() (r int32, exists bool) {
	v := m.sort_order
	if v == nil {
		return
	}
	return *v, true
}

// OldSortOrder returns the old "sort_order" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldSortOrder(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSortOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSortOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSortOrder: %w", err)
	}
	return oldValue.SortOrder, nil
}

// AddSortOrder adds i to the "sort_order" field.
func (m *LanguageMutation) AddSortOrder(i int32) {
	if m.addsort_order != nil {
		*m.addsort_order += i
	} else {
		m.addsort_order = &i
	}
}

// AddedSortOrder returns the value that was added to the "sort_order" field in this mutation.
func (m *LanguageMutation) AddedSortOrder() (r int32, exists bool) {
	v := m.addsort_order
	if v == nil {
		return
	}
	return *v, true
}

// ClearSortOrder clears the value of the "sort_order" field.
func (m *LanguageMutation) ClearSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	m.clearedFields[language.FieldSortOrder] = struct{}{}
}

// SortOrderCleared returns if the "sort_order" field was cleared in this mutation.
func (m *LanguageMutation) SortOrderCleared() bool {
	_, ok := m.clearedFields[language.FieldSortOrder]
	return ok
}

// ResetSortOrder resets all changes to the "sort_order" field.
func (m *LanguageMutation) ResetSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	delete(m.clearedFields, language.FieldSortOrder)
}

// SetIsEnabled sets the "is_enabled" field.
func (m *LanguageMutation) SetIsEnabled(b bool) {
	m.is_enabled = &b
}

// IsEnabled returns the value of the "is_enabled" field in the mutation.
func (m *LanguageMutation) IsEnabled() (r bool, exists bool) {
	v := m.is_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnabled returns the old "is_enabled" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldIsEnabled(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnabled: %w", err)
	}
	return oldValue.IsEnabled, nil
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (m *LanguageMutation) ClearIsEnabled() {
	m.is_enabled = nil
	m.clearedFields[language.FieldIsEnabled] = struct{}{}
}

// IsEnabledCleared returns if the "is_enabled" field was cleared in this mutation.
func (m *LanguageMutation) IsEnabledCleared() bool {
	_, ok := m.clearedFields[language.FieldIsEnabled]
	return ok
}

// ResetIsEnabled resets all changes to the "is_enabled" field.
func (m *LanguageMutation) ResetIsEnabled() {
	m.is_enabled = nil
	delete(m.clearedFields, language.FieldIsEnabled)
}

// SetLanguageCode sets the "language_code" field.
func (m *LanguageMutation) SetLanguageCode(s string) {
	m.language_code = &s
}

// LanguageCode returns the value of the "language_code" field in the mutation.
func (m *LanguageMutation) LanguageCode() (r string, exists bool) {
	v := m.language_code
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguageCode returns the old "language_code" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldLanguageCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguageCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguageCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguageCode: %w", err)
	}
	return oldValue.LanguageCode, nil
}

// ClearLanguageCode clears the value of the "language_code" field.
func (m *LanguageMutation) ClearLanguageCode() {
	m.language_code = nil
	m.clearedFields[language.FieldLanguageCode] = struct{}{}
}

// LanguageCodeCleared returns if the "language_code" field was cleared in this mutation.
func (m *LanguageMutation) LanguageCodeCleared() bool {
	_, ok := m.clearedFields[language.FieldLanguageCode]
	return ok
}

// ResetLanguageCode resets all changes to the "language_code" field.
func (m *LanguageMutation) ResetLanguageCode() {
	m.language_code = nil
	delete(m.clearedFields, language.FieldLanguageCode)
}

// SetLanguageName sets the "language_name" field.
func (m *LanguageMutation) SetLanguageName(s string) {
	m.language_name = &s
}

// LanguageName returns the value of the "language_name" field in the mutation.
func (m *LanguageMutation) LanguageName() (r string, exists bool) {
	v := m.language_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguageName returns the old "language_name" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldLanguageName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguageName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguageName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguageName: %w", err)
	}
	return oldValue.LanguageName, nil
}

// ClearLanguageName clears the value of the "language_name" field.
func (m *LanguageMutation) ClearLanguageName() {
	m.language_name = nil
	m.clearedFields[language.FieldLanguageName] = struct{}{}
}

// LanguageNameCleared returns if the "language_name" field was cleared in this mutation.
func (m *LanguageMutation) LanguageNameCleared() bool {
	_, ok := m.clearedFields[language.FieldLanguageName]
	return ok
}

// ResetLanguageName resets all changes to the "language_name" field.
func (m *LanguageMutation) ResetLanguageName() {
	m.language_name = nil
	delete(m.clearedFields, language.FieldLanguageName)
}

// SetNativeName sets the "native_name" field.
func (m *LanguageMutation) SetNativeName(s string) {
	m.native_name = &s
}

// NativeName returns the value of the "native_name" field in the mutation.
func (m *LanguageMutation) NativeName() (r string, exists bool) {
	v := m.native_name
	if v == nil {
		return
	}
	return *v, true
}

// OldNativeName returns the old "native_name" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldNativeName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNativeName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNativeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNativeName: %w", err)
	}
	return oldValue.NativeName, nil
}

// ClearNativeName clears the value of the "native_name" field.
func (m *LanguageMutation) ClearNativeName() {
	m.native_name = nil
	m.clearedFields[language.FieldNativeName] = struct{}{}
}

// NativeNameCleared returns if the "native_name" field was cleared in this mutation.
func (m *LanguageMutation) NativeNameCleared() bool {
	_, ok := m.clearedFields[language.FieldNativeName]
	return ok
}

// ResetNativeName resets all changes to the "native_name" field.
func (m *LanguageMutation) ResetNativeName() {
	m.native_name = nil
	delete(m.clearedFields, language.FieldNativeName)
}

// SetIsDefault sets the "is_default" field.
func (m *LanguageMutation) SetIsDefault(b bool) {
	m.is_default = &b
}

// IsDefault returns the value of the "is_default" field in the mutation.
func (m *LanguageMutation) IsDefault() (r bool, exists bool) {
	v := m.is_default
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDefault returns the old "is_default" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldIsDefault(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDefault is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDefault requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDefault: %w", err)
	}
	return oldValue.IsDefault, nil
}

// ClearIsDefault clears the value of the "is_default" field.
func (m *LanguageMutation) ClearIsDefault() {
	m.is_default = nil
	m.clearedFields[language.FieldIsDefault] = struct{}{}
}

// IsDefaultCleared returns if the "is_default" field was cleared in this mutation.
func (m *LanguageMutation) IsDefaultCleared() bool {
	_, ok := m.clearedFields[language.FieldIsDefault]
	return ok
}

// ResetIsDefault resets all changes to the "is_default" field.
func (m *LanguageMutation) ResetIsDefault() {
	m.is_default = nil
	delete(m.clearedFields, language.FieldIsDefault)
}

// Where appends a list predicates to the LanguageMutation builder.
func (m *LanguageMutation) Where(ps ...predicate.Language) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LanguageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LanguageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Language, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LanguageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LanguageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Language).
func (m *LanguageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LanguageMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, language.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, language.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, language.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, language.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, language.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, language.FieldDeletedBy)
	}
	if m.sort_order != nil {
		fields = append(fields, language.FieldSortOrder)
	}
	if m.is_enabled != nil {
		fields = append(fields, language.FieldIsEnabled)
	}
	if m.language_code != nil {
		fields = append(fields, language.FieldLanguageCode)
	}
	if m.language_name != nil {
		fields = append(fields, language.FieldLanguageName)
	}
	if m.native_name != nil {
		fields = append(fields, language.FieldNativeName)
	}
	if m.is_default != nil {
		fields = append(fields, language.FieldIsDefault)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LanguageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case language.FieldCreatedAt:
		return m.CreatedAt()
	case language.FieldUpdatedAt:
		return m.UpdatedAt()
	case language.FieldDeletedAt:
		return m.DeletedAt()
	case language.FieldCreatedBy:
		return m.CreatedBy()
	case language.FieldUpdatedBy:
		return m.UpdatedBy()
	case language.FieldDeletedBy:
		return m.DeletedBy()
	case language.FieldSortOrder:
		return m.SortOrder()
	case language.FieldIsEnabled:
		return m.IsEnabled()
	case language.FieldLanguageCode:
		return m.LanguageCode()
	case language.FieldLanguageName:
		return m.LanguageName()
	case language.FieldNativeName:
		return m.NativeName()
	case language.FieldIsDefault:
		return m.IsDefault()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LanguageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case language.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case language.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case language.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case language.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case language.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case language.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case language.FieldSortOrder:
		return m.OldSortOrder(ctx)
	case language.FieldIsEnabled:
		return m.OldIsEnabled(ctx)
	case language.FieldLanguageCode:
		return m.OldLanguageCode(ctx)
	case language.FieldLanguageName:
		return m.OldLanguageName(ctx)
	case language.FieldNativeName:
		return m.OldNativeName(ctx)
	case language.FieldIsDefault:
		return m.OldIsDefault(ctx)
	}
	return nil, fmt.Errorf("unknown Language field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LanguageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case language.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case language.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case language.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case language.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case language.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case language.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case language.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSortOrder(v)
		return nil
	case language.FieldIsEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnabled(v)
		return nil
	case language.FieldLanguageCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguageCode(v)
		return nil
	case language.FieldLanguageName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguageName(v)
		return nil
	case language.FieldNativeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNativeName(v)
		return nil
	case language.FieldIsDefault:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDefault(v)
		return nil
	}
	return fmt.Errorf("unknown Language field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LanguageMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, language.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, language.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, language.FieldDeletedBy)
	}
	if m.addsort_order != nil {
		fields = append(fields, language.FieldSortOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LanguageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case language.FieldCreatedBy:
		return m.AddedCreatedBy()
	case language.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case language.FieldDeletedBy:
		return m.AddedDeletedBy()
	case language.FieldSortOrder:
		return m.AddedSortOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LanguageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case language.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case language.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case language.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case language.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSortOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Language numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LanguageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(language.FieldCreatedAt) {
		fields = append(fields, language.FieldCreatedAt)
	}
	if m.FieldCleared(language.FieldUpdatedAt) {
		fields = append(fields, language.FieldUpdatedAt)
	}
	if m.FieldCleared(language.FieldDeletedAt) {
		fields = append(fields, language.FieldDeletedAt)
	}
	if m.FieldCleared(language.FieldCreatedBy) {
		fields = append(fields, language.FieldCreatedBy)
	}
	if m.FieldCleared(language.FieldUpdatedBy) {
		fields = append(fields, language.FieldUpdatedBy)
	}
	if m.FieldCleared(language.FieldDeletedBy) {
		fields = append(fields, language.FieldDeletedBy)
	}
	if m.FieldCleared(language.FieldSortOrder) {
		fields = append(fields, language.FieldSortOrder)
	}
	if m.FieldCleared(language.FieldIsEnabled) {
		fields = append(fields, language.FieldIsEnabled)
	}
	if m.FieldCleared(language.FieldLanguageCode) {
		fields = append(fields, language.FieldLanguageCode)
	}
	if m.FieldCleared(language.FieldLanguageName) {
		fields = append(fields, language.FieldLanguageName)
	}
	if m.FieldCleared(language.FieldNativeName) {
		fields = append(fields, language.FieldNativeName)
	}
	if m.FieldCleared(language.FieldIsDefault) {
		fields = append(fields, language.FieldIsDefault)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LanguageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LanguageMutation) ClearField(name string) error {
	switch name {
	case language.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case language.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case language.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case language.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case language.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case language.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case language.FieldSortOrder:
		m.ClearSortOrder()
		return nil
	case language.FieldIsEnabled:
		m.ClearIsEnabled()
		return nil
	case language.FieldLanguageCode:
		m.ClearLanguageCode()
		return nil
	case language.FieldLanguageName:
		m.ClearLanguageName()
		return nil
	case language.FieldNativeName:
		m.ClearNativeName()
		return nil
	case language.FieldIsDefault:
		m.ClearIsDefault()
		return nil
	}
	return fmt.Errorf("unknown Language nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LanguageMutation) ResetField(name string) error {
	switch name {
	case language.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case language.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case language.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case language.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case language.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case language.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case language.FieldSortOrder:
		m.ResetSortOrder()
		return nil
	case language.FieldIsEnabled:
		m.ResetIsEnabled()
		return nil
	case language.FieldLanguageCode:
		m.ResetLanguageCode()
		return nil
	case language.FieldLanguageName:
		m.ResetLanguageName()
		return nil
	case language.FieldNativeName:
		m.ResetNativeName()
		return nil
	case language.FieldIsDefault:
		m.ResetIsDefault()
		return nil
	}
	return fmt.Errorf("unknown Language field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LanguageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LanguageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LanguageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LanguageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LanguageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LanguageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LanguageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Language unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LanguageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Language edge %s", name)
}

// MenuMutation represents an operation that mutates the Menu nodes in the graph.
type MenuMutation struct {
	config
	op              Op
	typ             string
	id              *uint32
	created_at      *time.Time
	updated_at      *time.Time
	deleted_at      *time.Time
	created_by      *uint32
	addcreated_by   *int32
	updated_by      *uint32
	addupdated_by   *int32
	deleted_by      *uint32
	adddeleted_by   *int32
	remark          *string
	status          *menu.Status
	_type           *menu.Type
	_path           *string
	redirect        *string
	alias           *string
	name            *string
	component       *string
	meta            **servicev1.RouteMeta
	clearedFields   map[string]struct{}
	parent          *uint32
	clearedparent   bool
	children        map[uint32]struct{}
	removedchildren map[uint32]struct{}
	clearedchildren bool
	done            bool
	oldValue        func(context.Context) (*Menu, error)
	predicates      []predicate.Menu
}

var _ ent.Mutation = (*MenuMutation)(nil)

// menuOption allows management of the mutation configuration using functional options.
type menuOption func(*MenuMutation)

// newMenuMutation creates new mutation for the Menu entity.
func newMenuMutation(c config, op Op, opts ...menuOption) *MenuMutation {
	m := &MenuMutation{
		config:        c,
		op:            op,
		typ:           TypeMenu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMenuID sets the ID field of the mutation.
func withMenuID(id uint32) menuOption {
	return func(m *MenuMutation) {
		var (
			err   error
			once  sync.Once
			value *Menu
		)
		m.oldValue = func(ctx context.Context) (*Menu, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Menu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMenu sets the old Menu of the mutation.
func withMenu(node *Menu) menuOption {
	return func(m *MenuMutation) {
		m.oldValue = func(context.Context) (*Menu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Menu entities.
func (m *MenuMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MenuMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MenuMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Menu.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MenuMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MenuMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *MenuMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[menu.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *MenuMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[menu.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MenuMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, menu.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MenuMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MenuMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *MenuMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[menu.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *MenuMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[menu.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MenuMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, menu.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *MenuMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *MenuMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *MenuMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[menu.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *MenuMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[menu.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *MenuMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, menu.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *MenuMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *MenuMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *MenuMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *MenuMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *MenuMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[menu.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *MenuMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[menu.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *MenuMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, menu.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *MenuMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *MenuMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *MenuMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *MenuMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *MenuMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[menu.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *MenuMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[menu.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *MenuMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, menu.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *MenuMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *MenuMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *MenuMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *MenuMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *MenuMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[menu.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *MenuMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[menu.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *MenuMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, menu.FieldDeletedBy)
}

// SetRemark sets the "remark" field.
func (m *MenuMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *MenuMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *MenuMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[menu.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *MenuMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[menu.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *MenuMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, menu.FieldRemark)
}

// SetParentID sets the "parent_id" field.
func (m *MenuMutation) SetParentID(u uint32) {
	m.parent = &u
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *MenuMutation) ParentID() (r uint32, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldParentID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *MenuMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[menu.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *MenuMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[menu.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *MenuMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, menu.FieldParentID)
}

// SetStatus sets the "status" field.
func (m *MenuMutation) SetStatus(value menu.Status) {
	m.status = &value
}

// Status returns the value of the "status" field in the mutation.
func (m *MenuMutation) Status() (r menu.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldStatus(ctx context.Context) (v *menu.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *MenuMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[menu.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *MenuMutation) StatusCleared() bool {
	_, ok := m.clearedFields[menu.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *MenuMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, menu.FieldStatus)
}

// SetType sets the "type" field.
func (m *MenuMutation) SetType(value menu.Type) {
	m._type = &value
}

// GetType returns the value of the "type" field in the mutation.
func (m *MenuMutation) GetType() (r menu.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldType(ctx context.Context) (v *menu.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *MenuMutation) ClearType() {
	m._type = nil
	m.clearedFields[menu.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *MenuMutation) TypeCleared() bool {
	_, ok := m.clearedFields[menu.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *MenuMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, menu.FieldType)
}

// SetPath sets the "path" field.
func (m *MenuMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *MenuMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldPath(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ClearPath clears the value of the "path" field.
func (m *MenuMutation) ClearPath() {
	m._path = nil
	m.clearedFields[menu.FieldPath] = struct{}{}
}

// PathCleared returns if the "path" field was cleared in this mutation.
func (m *MenuMutation) PathCleared() bool {
	_, ok := m.clearedFields[menu.FieldPath]
	return ok
}

// ResetPath resets all changes to the "path" field.
func (m *MenuMutation) ResetPath() {
	m._path = nil
	delete(m.clearedFields, menu.FieldPath)
}

// SetRedirect sets the "redirect" field.
func (m *MenuMutation) SetRedirect(s string) {
	m.redirect = &s
}

// Redirect returns the value of the "redirect" field in the mutation.
func (m *MenuMutation) Redirect() (r string, exists bool) {
	v := m.redirect
	if v == nil {
		return
	}
	return *v, true
}

// OldRedirect returns the old "redirect" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldRedirect(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRedirect is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRedirect requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRedirect: %w", err)
	}
	return oldValue.Redirect, nil
}

// ClearRedirect clears the value of the "redirect" field.
func (m *MenuMutation) ClearRedirect() {
	m.redirect = nil
	m.clearedFields[menu.FieldRedirect] = struct{}{}
}

// RedirectCleared returns if the "redirect" field was cleared in this mutation.
func (m *MenuMutation) RedirectCleared() bool {
	_, ok := m.clearedFields[menu.FieldRedirect]
	return ok
}

// ResetRedirect resets all changes to the "redirect" field.
func (m *MenuMutation) ResetRedirect() {
	m.redirect = nil
	delete(m.clearedFields, menu.FieldRedirect)
}

// SetAlias sets the "alias" field.
func (m *MenuMutation) SetAlias(s string) {
	m.alias = &s
}

// Alias returns the value of the "alias" field in the mutation.
func (m *MenuMutation) Alias() (r string, exists bool) {
	v := m.alias
	if v == nil {
		return
	}
	return *v, true
}

// OldAlias returns the old "alias" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldAlias(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlias is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlias requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlias: %w", err)
	}
	return oldValue.Alias, nil
}

// ClearAlias clears the value of the "alias" field.
func (m *MenuMutation) ClearAlias() {
	m.alias = nil
	m.clearedFields[menu.FieldAlias] = struct{}{}
}

// AliasCleared returns if the "alias" field was cleared in this mutation.
func (m *MenuMutation) AliasCleared() bool {
	_, ok := m.clearedFields[menu.FieldAlias]
	return ok
}

// ResetAlias resets all changes to the "alias" field.
func (m *MenuMutation) ResetAlias() {
	m.alias = nil
	delete(m.clearedFields, menu.FieldAlias)
}

// SetName sets the "name" field.
func (m *MenuMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MenuMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *MenuMutation) ClearName() {
	m.name = nil
	m.clearedFields[menu.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *MenuMutation) NameCleared() bool {
	_, ok := m.clearedFields[menu.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *MenuMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, menu.FieldName)
}

// SetComponent sets the "component" field.
func (m *MenuMutation) SetComponent(s string) {
	m.component = &s
}

// Component returns the value of the "component" field in the mutation.
func (m *MenuMutation) Component() (r string, exists bool) {
	v := m.component
	if v == nil {
		return
	}
	return *v, true
}

// OldComponent returns the old "component" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldComponent(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComponent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComponent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComponent: %w", err)
	}
	return oldValue.Component, nil
}

// ClearComponent clears the value of the "component" field.
func (m *MenuMutation) ClearComponent() {
	m.component = nil
	m.clearedFields[menu.FieldComponent] = struct{}{}
}

// ComponentCleared returns if the "component" field was cleared in this mutation.
func (m *MenuMutation) ComponentCleared() bool {
	_, ok := m.clearedFields[menu.FieldComponent]
	return ok
}

// ResetComponent resets all changes to the "component" field.
func (m *MenuMutation) ResetComponent() {
	m.component = nil
	delete(m.clearedFields, menu.FieldComponent)
}

// SetMeta sets the "meta" field.
func (m *MenuMutation) SetMeta(sm *servicev1.RouteMeta) {
	m.meta = &sm
}

// Meta returns the value of the "meta" field in the mutation.
func (m *MenuMutation) Meta() (r *servicev1.RouteMeta, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldMeta(ctx context.Context) (v *servicev1.RouteMeta, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ClearMeta clears the value of the "meta" field.
func (m *MenuMutation) ClearMeta() {
	m.meta = nil
	m.clearedFields[menu.FieldMeta] = struct{}{}
}

// MetaCleared returns if the "meta" field was cleared in this mutation.
func (m *MenuMutation) MetaCleared() bool {
	_, ok := m.clearedFields[menu.FieldMeta]
	return ok
}

// ResetMeta resets all changes to the "meta" field.
func (m *MenuMutation) ResetMeta() {
	m.meta = nil
	delete(m.clearedFields, menu.FieldMeta)
}

// ClearParent clears the "parent" edge to the Menu entity.
func (m *MenuMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[menu.FieldParentID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the Menu entity was cleared.
func (m *MenuMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *MenuMutation) ParentIDs() (ids []uint32) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *MenuMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Menu entity by ids.
func (m *MenuMutation) AddChildIDs(ids ...uint32) {
	if m.children == nil {
		m.children = make(map[uint32]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Menu entity.
func (m *MenuMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Menu entity was cleared.
func (m *MenuMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Menu entity by IDs.
func (m *MenuMutation) RemoveChildIDs(ids ...uint32) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[uint32]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Menu entity.
func (m *MenuMutation) RemovedChildrenIDs() (ids []uint32) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *MenuMutation) ChildrenIDs() (ids []uint32) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *MenuMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Where appends a list predicates to the MenuMutation builder.
func (m *MenuMutation) Where(ps ...predicate.Menu) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MenuMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MenuMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Menu, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MenuMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MenuMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Menu).
func (m *MenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MenuMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.created_at != nil {
		fields = append(fields, menu.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, menu.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, menu.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, menu.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, menu.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, menu.FieldDeletedBy)
	}
	if m.remark != nil {
		fields = append(fields, menu.FieldRemark)
	}
	if m.parent != nil {
		fields = append(fields, menu.FieldParentID)
	}
	if m.status != nil {
		fields = append(fields, menu.FieldStatus)
	}
	if m._type != nil {
		fields = append(fields, menu.FieldType)
	}
	if m._path != nil {
		fields = append(fields, menu.FieldPath)
	}
	if m.redirect != nil {
		fields = append(fields, menu.FieldRedirect)
	}
	if m.alias != nil {
		fields = append(fields, menu.FieldAlias)
	}
	if m.name != nil {
		fields = append(fields, menu.FieldName)
	}
	if m.component != nil {
		fields = append(fields, menu.FieldComponent)
	}
	if m.meta != nil {
		fields = append(fields, menu.FieldMeta)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case menu.FieldCreatedAt:
		return m.CreatedAt()
	case menu.FieldUpdatedAt:
		return m.UpdatedAt()
	case menu.FieldDeletedAt:
		return m.DeletedAt()
	case menu.FieldCreatedBy:
		return m.CreatedBy()
	case menu.FieldUpdatedBy:
		return m.UpdatedBy()
	case menu.FieldDeletedBy:
		return m.DeletedBy()
	case menu.FieldRemark:
		return m.Remark()
	case menu.FieldParentID:
		return m.ParentID()
	case menu.FieldStatus:
		return m.Status()
	case menu.FieldType:
		return m.GetType()
	case menu.FieldPath:
		return m.Path()
	case menu.FieldRedirect:
		return m.Redirect()
	case menu.FieldAlias:
		return m.Alias()
	case menu.FieldName:
		return m.Name()
	case menu.FieldComponent:
		return m.Component()
	case menu.FieldMeta:
		return m.Meta()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MenuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case menu.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case menu.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case menu.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case menu.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case menu.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case menu.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case menu.FieldRemark:
		return m.OldRemark(ctx)
	case menu.FieldParentID:
		return m.OldParentID(ctx)
	case menu.FieldStatus:
		return m.OldStatus(ctx)
	case menu.FieldType:
		return m.OldType(ctx)
	case menu.FieldPath:
		return m.OldPath(ctx)
	case menu.FieldRedirect:
		return m.OldRedirect(ctx)
	case menu.FieldAlias:
		return m.OldAlias(ctx)
	case menu.FieldName:
		return m.OldName(ctx)
	case menu.FieldComponent:
		return m.OldComponent(ctx)
	case menu.FieldMeta:
		return m.OldMeta(ctx)
	}
	return nil, fmt.Errorf("unknown Menu field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case menu.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case menu.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case menu.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case menu.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case menu.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case menu.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case menu.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case menu.FieldParentID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case menu.FieldStatus:
		v, ok := value.(menu.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case menu.FieldType:
		v, ok := value.(menu.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case menu.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case menu.FieldRedirect:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedirect(v)
		return nil
	case menu.FieldAlias:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlias(v)
		return nil
	case menu.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case menu.FieldComponent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComponent(v)
		return nil
	case menu.FieldMeta:
		v, ok := value.(*servicev1.RouteMeta)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	}
	return fmt.Errorf("unknown Menu field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MenuMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, menu.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, menu.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, menu.FieldDeletedBy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MenuMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case menu.FieldCreatedBy:
		return m.AddedCreatedBy()
	case menu.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case menu.FieldDeletedBy:
		return m.AddedDeletedBy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	case menu.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case menu.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case menu.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	}
	return fmt.Errorf("unknown Menu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MenuMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(menu.FieldCreatedAt) {
		fields = append(fields, menu.FieldCreatedAt)
	}
	if m.FieldCleared(menu.FieldUpdatedAt) {
		fields = append(fields, menu.FieldUpdatedAt)
	}
	if m.FieldCleared(menu.FieldDeletedAt) {
		fields = append(fields, menu.FieldDeletedAt)
	}
	if m.FieldCleared(menu.FieldCreatedBy) {
		fields = append(fields, menu.FieldCreatedBy)
	}
	if m.FieldCleared(menu.FieldUpdatedBy) {
		fields = append(fields, menu.FieldUpdatedBy)
	}
	if m.FieldCleared(menu.FieldDeletedBy) {
		fields = append(fields, menu.FieldDeletedBy)
	}
	if m.FieldCleared(menu.FieldRemark) {
		fields = append(fields, menu.FieldRemark)
	}
	if m.FieldCleared(menu.FieldParentID) {
		fields = append(fields, menu.FieldParentID)
	}
	if m.FieldCleared(menu.FieldStatus) {
		fields = append(fields, menu.FieldStatus)
	}
	if m.FieldCleared(menu.FieldType) {
		fields = append(fields, menu.FieldType)
	}
	if m.FieldCleared(menu.FieldPath) {
		fields = append(fields, menu.FieldPath)
	}
	if m.FieldCleared(menu.FieldRedirect) {
		fields = append(fields, menu.FieldRedirect)
	}
	if m.FieldCleared(menu.FieldAlias) {
		fields = append(fields, menu.FieldAlias)
	}
	if m.FieldCleared(menu.FieldName) {
		fields = append(fields, menu.FieldName)
	}
	if m.FieldCleared(menu.FieldComponent) {
		fields = append(fields, menu.FieldComponent)
	}
	if m.FieldCleared(menu.FieldMeta) {
		fields = append(fields, menu.FieldMeta)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MenuMutation) ClearField(name string) error {
	switch name {
	case menu.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case menu.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case menu.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case menu.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case menu.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case menu.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case menu.FieldRemark:
		m.ClearRemark()
		return nil
	case menu.FieldParentID:
		m.ClearParentID()
		return nil
	case menu.FieldStatus:
		m.ClearStatus()
		return nil
	case menu.FieldType:
		m.ClearType()
		return nil
	case menu.FieldPath:
		m.ClearPath()
		return nil
	case menu.FieldRedirect:
		m.ClearRedirect()
		return nil
	case menu.FieldAlias:
		m.ClearAlias()
		return nil
	case menu.FieldName:
		m.ClearName()
		return nil
	case menu.FieldComponent:
		m.ClearComponent()
		return nil
	case menu.FieldMeta:
		m.ClearMeta()
		return nil
	}
	return fmt.Errorf("unknown Menu nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MenuMutation) ResetField(name string) error {
	switch name {
	case menu.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case menu.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case menu.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case menu.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case menu.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case menu.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case menu.FieldRemark:
		m.ResetRemark()
		return nil
	case menu.FieldParentID:
		m.ResetParentID()
		return nil
	case menu.FieldStatus:
		m.ResetStatus()
		return nil
	case menu.FieldType:
		m.ResetType()
		return nil
	case menu.FieldPath:
		m.ResetPath()
		return nil
	case menu.FieldRedirect:
		m.ResetRedirect()
		return nil
	case menu.FieldAlias:
		m.ResetAlias()
		return nil
	case menu.FieldName:
		m.ResetName()
		return nil
	case menu.FieldComponent:
		m.ResetComponent()
		return nil
	case menu.FieldMeta:
		m.ResetMeta()
		return nil
	}
	return fmt.Errorf("unknown Menu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parent != nil {
		edges = append(edges, menu.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, menu.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MenuMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case menu.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case menu.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, menu.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MenuMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case menu.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparent {
		edges = append(edges, menu.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, menu.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MenuMutation) EdgeCleared(name string) bool {
	switch name {
	case menu.EdgeParent:
		return m.clearedparent
	case menu.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MenuMutation) ClearEdge(name string) error {
	switch name {
	case menu.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Menu unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MenuMutation) ResetEdge(name string) error {
	switch name {
	case menu.EdgeParent:
		m.ResetParent()
		return nil
	case menu.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown Menu edge %s", name)
}

// NotificationMessageMutation represents an operation that mutates the NotificationMessage nodes in the graph.
type NotificationMessageMutation struct {
	config
	op             Op
	typ            string
	id             *uint32
	created_at     *time.Time
	updated_at     *time.Time
	deleted_at     *time.Time
	created_by     *uint32
	addcreated_by  *int32
	updated_by     *uint32
	addupdated_by  *int32
	deleted_by     *uint32
	adddeleted_by  *int32
	tenant_id      *uint32
	addtenant_id   *int32
	subject        *string
	content        *string
	category_id    *uint32
	addcategory_id *int32
	status         *notificationmessage.Status
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*NotificationMessage, error)
	predicates     []predicate.NotificationMessage
}

var _ ent.Mutation = (*NotificationMessageMutation)(nil)

// notificationmessageOption allows management of the mutation configuration using functional options.
type notificationmessageOption func(*NotificationMessageMutation)

// newNotificationMessageMutation creates new mutation for the NotificationMessage entity.
func newNotificationMessageMutation(c config, op Op, opts ...notificationmessageOption) *NotificationMessageMutation {
	m := &NotificationMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeNotificationMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationMessageID sets the ID field of the mutation.
func withNotificationMessageID(id uint32) notificationmessageOption {
	return func(m *NotificationMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *NotificationMessage
		)
		m.oldValue = func(ctx context.Context) (*NotificationMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NotificationMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotificationMessage sets the old NotificationMessage of the mutation.
func withNotificationMessage(node *NotificationMessage) notificationmessageOption {
	return func(m *NotificationMessageMutation) {
		m.oldValue = func(context.Context) (*NotificationMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NotificationMessage entities.
func (m *NotificationMessageMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotificationMessageMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotificationMessageMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NotificationMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *NotificationMessageMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NotificationMessageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the NotificationMessage entity.
// If the NotificationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *NotificationMessageMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[notificationmessage.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *NotificationMessageMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[notificationmessage.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NotificationMessageMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, notificationmessage.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NotificationMessageMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NotificationMessageMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the NotificationMessage entity.
// If the NotificationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *NotificationMessageMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[notificationmessage.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *NotificationMessageMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[notificationmessage.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NotificationMessageMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, notificationmessage.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *NotificationMessageMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *NotificationMessageMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the NotificationMessage entity.
// If the NotificationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *NotificationMessageMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[notificationmessage.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *NotificationMessageMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[notificationmessage.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *NotificationMessageMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, notificationmessage.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *NotificationMessageMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *NotificationMessageMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the NotificationMessage entity.
// If the NotificationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *NotificationMessageMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *NotificationMessageMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *NotificationMessageMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[notificationmessage.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *NotificationMessageMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[notificationmessage.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *NotificationMessageMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, notificationmessage.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *NotificationMessageMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *NotificationMessageMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the NotificationMessage entity.
// If the NotificationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *NotificationMessageMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *NotificationMessageMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *NotificationMessageMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[notificationmessage.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *NotificationMessageMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[notificationmessage.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *NotificationMessageMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, notificationmessage.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *NotificationMessageMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *NotificationMessageMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the NotificationMessage entity.
// If the NotificationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *NotificationMessageMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *NotificationMessageMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *NotificationMessageMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[notificationmessage.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *NotificationMessageMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[notificationmessage.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *NotificationMessageMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, notificationmessage.FieldDeletedBy)
}

// SetTenantID sets the "tenant_id" field.
func (m *NotificationMessageMutation) SetTenantID(u uint32) {
	m.tenant_id = &u
	m.addtenant_id = nil
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *NotificationMessageMutation) TenantID() (r uint32, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the NotificationMessage entity.
// If the NotificationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageMutation) OldTenantID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// AddTenantID adds u to the "tenant_id" field.
func (m *NotificationMessageMutation) AddTenantID(u int32) {
	if m.addtenant_id != nil {
		*m.addtenant_id += u
	} else {
		m.addtenant_id = &u
	}
}

// AddedTenantID returns the value that was added to the "tenant_id" field in this mutation.
func (m *NotificationMessageMutation) AddedTenantID() (r int32, exists bool) {
	v := m.addtenant_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTenantID clears the value of the "tenant_id" field.
func (m *NotificationMessageMutation) ClearTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	m.clearedFields[notificationmessage.FieldTenantID] = struct{}{}
}

// TenantIDCleared returns if the "tenant_id" field was cleared in this mutation.
func (m *NotificationMessageMutation) TenantIDCleared() bool {
	_, ok := m.clearedFields[notificationmessage.FieldTenantID]
	return ok
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *NotificationMessageMutation) ResetTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	delete(m.clearedFields, notificationmessage.FieldTenantID)
}

// SetSubject sets the "subject" field.
func (m *NotificationMessageMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *NotificationMessageMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the NotificationMessage entity.
// If the NotificationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageMutation) OldSubject(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ClearSubject clears the value of the "subject" field.
func (m *NotificationMessageMutation) ClearSubject() {
	m.subject = nil
	m.clearedFields[notificationmessage.FieldSubject] = struct{}{}
}

// SubjectCleared returns if the "subject" field was cleared in this mutation.
func (m *NotificationMessageMutation) SubjectCleared() bool {
	_, ok := m.clearedFields[notificationmessage.FieldSubject]
	return ok
}

// ResetSubject resets all changes to the "subject" field.
func (m *NotificationMessageMutation) ResetSubject() {
	m.subject = nil
	delete(m.clearedFields, notificationmessage.FieldSubject)
}

// SetContent sets the "content" field.
func (m *NotificationMessageMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *NotificationMessageMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the NotificationMessage entity.
// If the NotificationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageMutation) OldContent(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *NotificationMessageMutation) ClearContent() {
	m.content = nil
	m.clearedFields[notificationmessage.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *NotificationMessageMutation) ContentCleared() bool {
	_, ok := m.clearedFields[notificationmessage.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *NotificationMessageMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, notificationmessage.FieldContent)
}

// SetCategoryID sets the "category_id" field.
func (m *NotificationMessageMutation) SetCategoryID(u uint32) {
	m.category_id = &u
	m.addcategory_id = nil
}

// CategoryID returns the value of the "category_id" field in the mutation.
func (m *NotificationMessageMutation) CategoryID() (r uint32, exists bool) {
	v := m.category_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryID returns the old "category_id" field's value of the NotificationMessage entity.
// If the NotificationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageMutation) OldCategoryID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryID: %w", err)
	}
	return oldValue.CategoryID, nil
}

// AddCategoryID adds u to the "category_id" field.
func (m *NotificationMessageMutation) AddCategoryID(u int32) {
	if m.addcategory_id != nil {
		*m.addcategory_id += u
	} else {
		m.addcategory_id = &u
	}
}

// AddedCategoryID returns the value that was added to the "category_id" field in this mutation.
func (m *NotificationMessageMutation) AddedCategoryID() (r int32, exists bool) {
	v := m.addcategory_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCategoryID clears the value of the "category_id" field.
func (m *NotificationMessageMutation) ClearCategoryID() {
	m.category_id = nil
	m.addcategory_id = nil
	m.clearedFields[notificationmessage.FieldCategoryID] = struct{}{}
}

// CategoryIDCleared returns if the "category_id" field was cleared in this mutation.
func (m *NotificationMessageMutation) CategoryIDCleared() bool {
	_, ok := m.clearedFields[notificationmessage.FieldCategoryID]
	return ok
}

// ResetCategoryID resets all changes to the "category_id" field.
func (m *NotificationMessageMutation) ResetCategoryID() {
	m.category_id = nil
	m.addcategory_id = nil
	delete(m.clearedFields, notificationmessage.FieldCategoryID)
}

// SetStatus sets the "status" field.
func (m *NotificationMessageMutation) SetStatus(n notificationmessage.Status) {
	m.status = &n
}

// Status returns the value of the "status" field in the mutation.
func (m *NotificationMessageMutation) Status() (r notificationmessage.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the NotificationMessage entity.
// If the NotificationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageMutation) OldStatus(ctx context.Context) (v *notificationmessage.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *NotificationMessageMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[notificationmessage.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *NotificationMessageMutation) StatusCleared() bool {
	_, ok := m.clearedFields[notificationmessage.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *NotificationMessageMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, notificationmessage.FieldStatus)
}

// Where appends a list predicates to the NotificationMessageMutation builder.
func (m *NotificationMessageMutation) Where(ps ...predicate.NotificationMessage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NotificationMessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NotificationMessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NotificationMessage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NotificationMessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NotificationMessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NotificationMessage).
func (m *NotificationMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationMessageMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, notificationmessage.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, notificationmessage.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, notificationmessage.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, notificationmessage.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, notificationmessage.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, notificationmessage.FieldDeletedBy)
	}
	if m.tenant_id != nil {
		fields = append(fields, notificationmessage.FieldTenantID)
	}
	if m.subject != nil {
		fields = append(fields, notificationmessage.FieldSubject)
	}
	if m.content != nil {
		fields = append(fields, notificationmessage.FieldContent)
	}
	if m.category_id != nil {
		fields = append(fields, notificationmessage.FieldCategoryID)
	}
	if m.status != nil {
		fields = append(fields, notificationmessage.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notificationmessage.FieldCreatedAt:
		return m.CreatedAt()
	case notificationmessage.FieldUpdatedAt:
		return m.UpdatedAt()
	case notificationmessage.FieldDeletedAt:
		return m.DeletedAt()
	case notificationmessage.FieldCreatedBy:
		return m.CreatedBy()
	case notificationmessage.FieldUpdatedBy:
		return m.UpdatedBy()
	case notificationmessage.FieldDeletedBy:
		return m.DeletedBy()
	case notificationmessage.FieldTenantID:
		return m.TenantID()
	case notificationmessage.FieldSubject:
		return m.Subject()
	case notificationmessage.FieldContent:
		return m.Content()
	case notificationmessage.FieldCategoryID:
		return m.CategoryID()
	case notificationmessage.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notificationmessage.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case notificationmessage.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case notificationmessage.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case notificationmessage.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case notificationmessage.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case notificationmessage.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case notificationmessage.FieldTenantID:
		return m.OldTenantID(ctx)
	case notificationmessage.FieldSubject:
		return m.OldSubject(ctx)
	case notificationmessage.FieldContent:
		return m.OldContent(ctx)
	case notificationmessage.FieldCategoryID:
		return m.OldCategoryID(ctx)
	case notificationmessage.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown NotificationMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notificationmessage.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case notificationmessage.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case notificationmessage.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case notificationmessage.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case notificationmessage.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case notificationmessage.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case notificationmessage.FieldTenantID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case notificationmessage.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case notificationmessage.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case notificationmessage.FieldCategoryID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryID(v)
		return nil
	case notificationmessage.FieldStatus:
		v, ok := value.(notificationmessage.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown NotificationMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationMessageMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, notificationmessage.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, notificationmessage.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, notificationmessage.FieldDeletedBy)
	}
	if m.addtenant_id != nil {
		fields = append(fields, notificationmessage.FieldTenantID)
	}
	if m.addcategory_id != nil {
		fields = append(fields, notificationmessage.FieldCategoryID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationMessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case notificationmessage.FieldCreatedBy:
		return m.AddedCreatedBy()
	case notificationmessage.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case notificationmessage.FieldDeletedBy:
		return m.AddedDeletedBy()
	case notificationmessage.FieldTenantID:
		return m.AddedTenantID()
	case notificationmessage.FieldCategoryID:
		return m.AddedCategoryID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case notificationmessage.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case notificationmessage.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case notificationmessage.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case notificationmessage.FieldTenantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantID(v)
		return nil
	case notificationmessage.FieldCategoryID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCategoryID(v)
		return nil
	}
	return fmt.Errorf("unknown NotificationMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationMessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notificationmessage.FieldCreatedAt) {
		fields = append(fields, notificationmessage.FieldCreatedAt)
	}
	if m.FieldCleared(notificationmessage.FieldUpdatedAt) {
		fields = append(fields, notificationmessage.FieldUpdatedAt)
	}
	if m.FieldCleared(notificationmessage.FieldDeletedAt) {
		fields = append(fields, notificationmessage.FieldDeletedAt)
	}
	if m.FieldCleared(notificationmessage.FieldCreatedBy) {
		fields = append(fields, notificationmessage.FieldCreatedBy)
	}
	if m.FieldCleared(notificationmessage.FieldUpdatedBy) {
		fields = append(fields, notificationmessage.FieldUpdatedBy)
	}
	if m.FieldCleared(notificationmessage.FieldDeletedBy) {
		fields = append(fields, notificationmessage.FieldDeletedBy)
	}
	if m.FieldCleared(notificationmessage.FieldTenantID) {
		fields = append(fields, notificationmessage.FieldTenantID)
	}
	if m.FieldCleared(notificationmessage.FieldSubject) {
		fields = append(fields, notificationmessage.FieldSubject)
	}
	if m.FieldCleared(notificationmessage.FieldContent) {
		fields = append(fields, notificationmessage.FieldContent)
	}
	if m.FieldCleared(notificationmessage.FieldCategoryID) {
		fields = append(fields, notificationmessage.FieldCategoryID)
	}
	if m.FieldCleared(notificationmessage.FieldStatus) {
		fields = append(fields, notificationmessage.FieldStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationMessageMutation) ClearField(name string) error {
	switch name {
	case notificationmessage.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case notificationmessage.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case notificationmessage.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case notificationmessage.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case notificationmessage.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case notificationmessage.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case notificationmessage.FieldTenantID:
		m.ClearTenantID()
		return nil
	case notificationmessage.FieldSubject:
		m.ClearSubject()
		return nil
	case notificationmessage.FieldContent:
		m.ClearContent()
		return nil
	case notificationmessage.FieldCategoryID:
		m.ClearCategoryID()
		return nil
	case notificationmessage.FieldStatus:
		m.ClearStatus()
		return nil
	}
	return fmt.Errorf("unknown NotificationMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationMessageMutation) ResetField(name string) error {
	switch name {
	case notificationmessage.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case notificationmessage.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case notificationmessage.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case notificationmessage.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case notificationmessage.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case notificationmessage.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case notificationmessage.FieldTenantID:
		m.ResetTenantID()
		return nil
	case notificationmessage.FieldSubject:
		m.ResetSubject()
		return nil
	case notificationmessage.FieldContent:
		m.ResetContent()
		return nil
	case notificationmessage.FieldCategoryID:
		m.ResetCategoryID()
		return nil
	case notificationmessage.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown NotificationMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationMessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationMessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationMessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NotificationMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationMessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NotificationMessage edge %s", name)
}

// NotificationMessageCategoryMutation represents an operation that mutates the NotificationMessageCategory nodes in the graph.
type NotificationMessageCategoryMutation struct {
	config
	op              Op
	typ             string
	id              *uint32
	created_at      *time.Time
	updated_at      *time.Time
	deleted_at      *time.Time
	created_by      *uint32
	addcreated_by   *int32
	updated_by      *uint32
	addupdated_by   *int32
	deleted_by      *uint32
	adddeleted_by   *int32
	remark          *string
	tenant_id       *uint32
	addtenant_id    *int32
	name            *string
	code            *string
	sort_order      *int32
	addsort_order   *int32
	enable          *bool
	clearedFields   map[string]struct{}
	parent          *uint32
	clearedparent   bool
	children        map[uint32]struct{}
	removedchildren map[uint32]struct{}
	clearedchildren bool
	done            bool
	oldValue        func(context.Context) (*NotificationMessageCategory, error)
	predicates      []predicate.NotificationMessageCategory
}

var _ ent.Mutation = (*NotificationMessageCategoryMutation)(nil)

// notificationmessagecategoryOption allows management of the mutation configuration using functional options.
type notificationmessagecategoryOption func(*NotificationMessageCategoryMutation)

// newNotificationMessageCategoryMutation creates new mutation for the NotificationMessageCategory entity.
func newNotificationMessageCategoryMutation(c config, op Op, opts ...notificationmessagecategoryOption) *NotificationMessageCategoryMutation {
	m := &NotificationMessageCategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeNotificationMessageCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationMessageCategoryID sets the ID field of the mutation.
func withNotificationMessageCategoryID(id uint32) notificationmessagecategoryOption {
	return func(m *NotificationMessageCategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *NotificationMessageCategory
		)
		m.oldValue = func(ctx context.Context) (*NotificationMessageCategory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NotificationMessageCategory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotificationMessageCategory sets the old NotificationMessageCategory of the mutation.
func withNotificationMessageCategory(node *NotificationMessageCategory) notificationmessagecategoryOption {
	return func(m *NotificationMessageCategoryMutation) {
		m.oldValue = func(context.Context) (*NotificationMessageCategory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationMessageCategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationMessageCategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NotificationMessageCategory entities.
func (m *NotificationMessageCategoryMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotificationMessageCategoryMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotificationMessageCategoryMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NotificationMessageCategory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *NotificationMessageCategoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NotificationMessageCategoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the NotificationMessageCategory entity.
// If the NotificationMessageCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageCategoryMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *NotificationMessageCategoryMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[notificationmessagecategory.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *NotificationMessageCategoryMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[notificationmessagecategory.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NotificationMessageCategoryMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, notificationmessagecategory.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NotificationMessageCategoryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NotificationMessageCategoryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the NotificationMessageCategory entity.
// If the NotificationMessageCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageCategoryMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *NotificationMessageCategoryMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[notificationmessagecategory.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *NotificationMessageCategoryMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[notificationmessagecategory.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NotificationMessageCategoryMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, notificationmessagecategory.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *NotificationMessageCategoryMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *NotificationMessageCategoryMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the NotificationMessageCategory entity.
// If the NotificationMessageCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageCategoryMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *NotificationMessageCategoryMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[notificationmessagecategory.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *NotificationMessageCategoryMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[notificationmessagecategory.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *NotificationMessageCategoryMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, notificationmessagecategory.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *NotificationMessageCategoryMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *NotificationMessageCategoryMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the NotificationMessageCategory entity.
// If the NotificationMessageCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageCategoryMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *NotificationMessageCategoryMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *NotificationMessageCategoryMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *NotificationMessageCategoryMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[notificationmessagecategory.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *NotificationMessageCategoryMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[notificationmessagecategory.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *NotificationMessageCategoryMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, notificationmessagecategory.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *NotificationMessageCategoryMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *NotificationMessageCategoryMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the NotificationMessageCategory entity.
// If the NotificationMessageCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageCategoryMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *NotificationMessageCategoryMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *NotificationMessageCategoryMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *NotificationMessageCategoryMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[notificationmessagecategory.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *NotificationMessageCategoryMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[notificationmessagecategory.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *NotificationMessageCategoryMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, notificationmessagecategory.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *NotificationMessageCategoryMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *NotificationMessageCategoryMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the NotificationMessageCategory entity.
// If the NotificationMessageCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageCategoryMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *NotificationMessageCategoryMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *NotificationMessageCategoryMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *NotificationMessageCategoryMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[notificationmessagecategory.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *NotificationMessageCategoryMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[notificationmessagecategory.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *NotificationMessageCategoryMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, notificationmessagecategory.FieldDeletedBy)
}

// SetRemark sets the "remark" field.
func (m *NotificationMessageCategoryMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *NotificationMessageCategoryMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the NotificationMessageCategory entity.
// If the NotificationMessageCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageCategoryMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *NotificationMessageCategoryMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[notificationmessagecategory.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *NotificationMessageCategoryMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[notificationmessagecategory.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *NotificationMessageCategoryMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, notificationmessagecategory.FieldRemark)
}

// SetTenantID sets the "tenant_id" field.
func (m *NotificationMessageCategoryMutation) SetTenantID(u uint32) {
	m.tenant_id = &u
	m.addtenant_id = nil
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *NotificationMessageCategoryMutation) TenantID() (r uint32, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the NotificationMessageCategory entity.
// If the NotificationMessageCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageCategoryMutation) OldTenantID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// AddTenantID adds u to the "tenant_id" field.
func (m *NotificationMessageCategoryMutation) AddTenantID(u int32) {
	if m.addtenant_id != nil {
		*m.addtenant_id += u
	} else {
		m.addtenant_id = &u
	}
}

// AddedTenantID returns the value that was added to the "tenant_id" field in this mutation.
func (m *NotificationMessageCategoryMutation) AddedTenantID() (r int32, exists bool) {
	v := m.addtenant_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTenantID clears the value of the "tenant_id" field.
func (m *NotificationMessageCategoryMutation) ClearTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	m.clearedFields[notificationmessagecategory.FieldTenantID] = struct{}{}
}

// TenantIDCleared returns if the "tenant_id" field was cleared in this mutation.
func (m *NotificationMessageCategoryMutation) TenantIDCleared() bool {
	_, ok := m.clearedFields[notificationmessagecategory.FieldTenantID]
	return ok
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *NotificationMessageCategoryMutation) ResetTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	delete(m.clearedFields, notificationmessagecategory.FieldTenantID)
}

// SetName sets the "name" field.
func (m *NotificationMessageCategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *NotificationMessageCategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the NotificationMessageCategory entity.
// If the NotificationMessageCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageCategoryMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *NotificationMessageCategoryMutation) ClearName() {
	m.name = nil
	m.clearedFields[notificationmessagecategory.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *NotificationMessageCategoryMutation) NameCleared() bool {
	_, ok := m.clearedFields[notificationmessagecategory.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *NotificationMessageCategoryMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, notificationmessagecategory.FieldName)
}

// SetCode sets the "code" field.
func (m *NotificationMessageCategoryMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *NotificationMessageCategoryMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the NotificationMessageCategory entity.
// If the NotificationMessageCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageCategoryMutation) OldCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ClearCode clears the value of the "code" field.
func (m *NotificationMessageCategoryMutation) ClearCode() {
	m.code = nil
	m.clearedFields[notificationmessagecategory.FieldCode] = struct{}{}
}

// CodeCleared returns if the "code" field was cleared in this mutation.
func (m *NotificationMessageCategoryMutation) CodeCleared() bool {
	_, ok := m.clearedFields[notificationmessagecategory.FieldCode]
	return ok
}

// ResetCode resets all changes to the "code" field.
func (m *NotificationMessageCategoryMutation) ResetCode() {
	m.code = nil
	delete(m.clearedFields, notificationmessagecategory.FieldCode)
}

// SetSortOrder sets the "sort_order" field.
func (m *NotificationMessageCategoryMutation) SetSortOrder(i int32) {
	m.sort_order = &i
	m.addsort_order = nil
}

// SortOrder returns the value of the "sort_order" field in the mutation.
func (m *NotificationMessageCategoryMutation) SortOrder() (r int32, exists bool) {
	v := m.sort_order
	if v == nil {
		return
	}
	return *v, true
}

// OldSortOrder returns the old "sort_order" field's value of the NotificationMessageCategory entity.
// If the NotificationMessageCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageCategoryMutation) OldSortOrder(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSortOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSortOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSortOrder: %w", err)
	}
	return oldValue.SortOrder, nil
}

// AddSortOrder adds i to the "sort_order" field.
func (m *NotificationMessageCategoryMutation) AddSortOrder(i int32) {
	if m.addsort_order != nil {
		*m.addsort_order += i
	} else {
		m.addsort_order = &i
	}
}

// AddedSortOrder returns the value that was added to the "sort_order" field in this mutation.
func (m *NotificationMessageCategoryMutation) AddedSortOrder() (r int32, exists bool) {
	v := m.addsort_order
	if v == nil {
		return
	}
	return *v, true
}

// ClearSortOrder clears the value of the "sort_order" field.
func (m *NotificationMessageCategoryMutation) ClearSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	m.clearedFields[notificationmessagecategory.FieldSortOrder] = struct{}{}
}

// SortOrderCleared returns if the "sort_order" field was cleared in this mutation.
func (m *NotificationMessageCategoryMutation) SortOrderCleared() bool {
	_, ok := m.clearedFields[notificationmessagecategory.FieldSortOrder]
	return ok
}

// ResetSortOrder resets all changes to the "sort_order" field.
func (m *NotificationMessageCategoryMutation) ResetSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	delete(m.clearedFields, notificationmessagecategory.FieldSortOrder)
}

// SetEnable sets the "enable" field.
func (m *NotificationMessageCategoryMutation) SetEnable(b bool) {
	m.enable = &b
}

// Enable returns the value of the "enable" field in the mutation.
func (m *NotificationMessageCategoryMutation) Enable() (r bool, exists bool) {
	v := m.enable
	if v == nil {
		return
	}
	return *v, true
}

// OldEnable returns the old "enable" field's value of the NotificationMessageCategory entity.
// If the NotificationMessageCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageCategoryMutation) OldEnable(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnable: %w", err)
	}
	return oldValue.Enable, nil
}

// ClearEnable clears the value of the "enable" field.
func (m *NotificationMessageCategoryMutation) ClearEnable() {
	m.enable = nil
	m.clearedFields[notificationmessagecategory.FieldEnable] = struct{}{}
}

// EnableCleared returns if the "enable" field was cleared in this mutation.
func (m *NotificationMessageCategoryMutation) EnableCleared() bool {
	_, ok := m.clearedFields[notificationmessagecategory.FieldEnable]
	return ok
}

// ResetEnable resets all changes to the "enable" field.
func (m *NotificationMessageCategoryMutation) ResetEnable() {
	m.enable = nil
	delete(m.clearedFields, notificationmessagecategory.FieldEnable)
}

// SetParentID sets the "parent_id" field.
func (m *NotificationMessageCategoryMutation) SetParentID(u uint32) {
	m.parent = &u
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *NotificationMessageCategoryMutation) ParentID() (r uint32, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the NotificationMessageCategory entity.
// If the NotificationMessageCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageCategoryMutation) OldParentID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *NotificationMessageCategoryMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[notificationmessagecategory.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *NotificationMessageCategoryMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[notificationmessagecategory.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *NotificationMessageCategoryMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, notificationmessagecategory.FieldParentID)
}

// ClearParent clears the "parent" edge to the NotificationMessageCategory entity.
func (m *NotificationMessageCategoryMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[notificationmessagecategory.FieldParentID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the NotificationMessageCategory entity was cleared.
func (m *NotificationMessageCategoryMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *NotificationMessageCategoryMutation) ParentIDs() (ids []uint32) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *NotificationMessageCategoryMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the NotificationMessageCategory entity by ids.
func (m *NotificationMessageCategoryMutation) AddChildIDs(ids ...uint32) {
	if m.children == nil {
		m.children = make(map[uint32]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the NotificationMessageCategory entity.
func (m *NotificationMessageCategoryMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the NotificationMessageCategory entity was cleared.
func (m *NotificationMessageCategoryMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the NotificationMessageCategory entity by IDs.
func (m *NotificationMessageCategoryMutation) RemoveChildIDs(ids ...uint32) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[uint32]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the NotificationMessageCategory entity.
func (m *NotificationMessageCategoryMutation) RemovedChildrenIDs() (ids []uint32) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *NotificationMessageCategoryMutation) ChildrenIDs() (ids []uint32) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *NotificationMessageCategoryMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Where appends a list predicates to the NotificationMessageCategoryMutation builder.
func (m *NotificationMessageCategoryMutation) Where(ps ...predicate.NotificationMessageCategory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NotificationMessageCategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NotificationMessageCategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NotificationMessageCategory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NotificationMessageCategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NotificationMessageCategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NotificationMessageCategory).
func (m *NotificationMessageCategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationMessageCategoryMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, notificationmessagecategory.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, notificationmessagecategory.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, notificationmessagecategory.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, notificationmessagecategory.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, notificationmessagecategory.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, notificationmessagecategory.FieldDeletedBy)
	}
	if m.remark != nil {
		fields = append(fields, notificationmessagecategory.FieldRemark)
	}
	if m.tenant_id != nil {
		fields = append(fields, notificationmessagecategory.FieldTenantID)
	}
	if m.name != nil {
		fields = append(fields, notificationmessagecategory.FieldName)
	}
	if m.code != nil {
		fields = append(fields, notificationmessagecategory.FieldCode)
	}
	if m.sort_order != nil {
		fields = append(fields, notificationmessagecategory.FieldSortOrder)
	}
	if m.enable != nil {
		fields = append(fields, notificationmessagecategory.FieldEnable)
	}
	if m.parent != nil {
		fields = append(fields, notificationmessagecategory.FieldParentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationMessageCategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notificationmessagecategory.FieldCreatedAt:
		return m.CreatedAt()
	case notificationmessagecategory.FieldUpdatedAt:
		return m.UpdatedAt()
	case notificationmessagecategory.FieldDeletedAt:
		return m.DeletedAt()
	case notificationmessagecategory.FieldCreatedBy:
		return m.CreatedBy()
	case notificationmessagecategory.FieldUpdatedBy:
		return m.UpdatedBy()
	case notificationmessagecategory.FieldDeletedBy:
		return m.DeletedBy()
	case notificationmessagecategory.FieldRemark:
		return m.Remark()
	case notificationmessagecategory.FieldTenantID:
		return m.TenantID()
	case notificationmessagecategory.FieldName:
		return m.Name()
	case notificationmessagecategory.FieldCode:
		return m.Code()
	case notificationmessagecategory.FieldSortOrder:
		return m.SortOrder()
	case notificationmessagecategory.FieldEnable:
		return m.Enable()
	case notificationmessagecategory.FieldParentID:
		return m.ParentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationMessageCategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notificationmessagecategory.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case notificationmessagecategory.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case notificationmessagecategory.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case notificationmessagecategory.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case notificationmessagecategory.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case notificationmessagecategory.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case notificationmessagecategory.FieldRemark:
		return m.OldRemark(ctx)
	case notificationmessagecategory.FieldTenantID:
		return m.OldTenantID(ctx)
	case notificationmessagecategory.FieldName:
		return m.OldName(ctx)
	case notificationmessagecategory.FieldCode:
		return m.OldCode(ctx)
	case notificationmessagecategory.FieldSortOrder:
		return m.OldSortOrder(ctx)
	case notificationmessagecategory.FieldEnable:
		return m.OldEnable(ctx)
	case notificationmessagecategory.FieldParentID:
		return m.OldParentID(ctx)
	}
	return nil, fmt.Errorf("unknown NotificationMessageCategory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMessageCategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notificationmessagecategory.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case notificationmessagecategory.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case notificationmessagecategory.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case notificationmessagecategory.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case notificationmessagecategory.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case notificationmessagecategory.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case notificationmessagecategory.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case notificationmessagecategory.FieldTenantID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case notificationmessagecategory.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case notificationmessagecategory.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case notificationmessagecategory.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSortOrder(v)
		return nil
	case notificationmessagecategory.FieldEnable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnable(v)
		return nil
	case notificationmessagecategory.FieldParentID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	}
	return fmt.Errorf("unknown NotificationMessageCategory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationMessageCategoryMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, notificationmessagecategory.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, notificationmessagecategory.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, notificationmessagecategory.FieldDeletedBy)
	}
	if m.addtenant_id != nil {
		fields = append(fields, notificationmessagecategory.FieldTenantID)
	}
	if m.addsort_order != nil {
		fields = append(fields, notificationmessagecategory.FieldSortOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationMessageCategoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case notificationmessagecategory.FieldCreatedBy:
		return m.AddedCreatedBy()
	case notificationmessagecategory.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case notificationmessagecategory.FieldDeletedBy:
		return m.AddedDeletedBy()
	case notificationmessagecategory.FieldTenantID:
		return m.AddedTenantID()
	case notificationmessagecategory.FieldSortOrder:
		return m.AddedSortOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMessageCategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case notificationmessagecategory.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case notificationmessagecategory.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case notificationmessagecategory.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case notificationmessagecategory.FieldTenantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantID(v)
		return nil
	case notificationmessagecategory.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSortOrder(v)
		return nil
	}
	return fmt.Errorf("unknown NotificationMessageCategory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationMessageCategoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notificationmessagecategory.FieldCreatedAt) {
		fields = append(fields, notificationmessagecategory.FieldCreatedAt)
	}
	if m.FieldCleared(notificationmessagecategory.FieldUpdatedAt) {
		fields = append(fields, notificationmessagecategory.FieldUpdatedAt)
	}
	if m.FieldCleared(notificationmessagecategory.FieldDeletedAt) {
		fields = append(fields, notificationmessagecategory.FieldDeletedAt)
	}
	if m.FieldCleared(notificationmessagecategory.FieldCreatedBy) {
		fields = append(fields, notificationmessagecategory.FieldCreatedBy)
	}
	if m.FieldCleared(notificationmessagecategory.FieldUpdatedBy) {
		fields = append(fields, notificationmessagecategory.FieldUpdatedBy)
	}
	if m.FieldCleared(notificationmessagecategory.FieldDeletedBy) {
		fields = append(fields, notificationmessagecategory.FieldDeletedBy)
	}
	if m.FieldCleared(notificationmessagecategory.FieldRemark) {
		fields = append(fields, notificationmessagecategory.FieldRemark)
	}
	if m.FieldCleared(notificationmessagecategory.FieldTenantID) {
		fields = append(fields, notificationmessagecategory.FieldTenantID)
	}
	if m.FieldCleared(notificationmessagecategory.FieldName) {
		fields = append(fields, notificationmessagecategory.FieldName)
	}
	if m.FieldCleared(notificationmessagecategory.FieldCode) {
		fields = append(fields, notificationmessagecategory.FieldCode)
	}
	if m.FieldCleared(notificationmessagecategory.FieldSortOrder) {
		fields = append(fields, notificationmessagecategory.FieldSortOrder)
	}
	if m.FieldCleared(notificationmessagecategory.FieldEnable) {
		fields = append(fields, notificationmessagecategory.FieldEnable)
	}
	if m.FieldCleared(notificationmessagecategory.FieldParentID) {
		fields = append(fields, notificationmessagecategory.FieldParentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationMessageCategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationMessageCategoryMutation) ClearField(name string) error {
	switch name {
	case notificationmessagecategory.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case notificationmessagecategory.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case notificationmessagecategory.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case notificationmessagecategory.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case notificationmessagecategory.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case notificationmessagecategory.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case notificationmessagecategory.FieldRemark:
		m.ClearRemark()
		return nil
	case notificationmessagecategory.FieldTenantID:
		m.ClearTenantID()
		return nil
	case notificationmessagecategory.FieldName:
		m.ClearName()
		return nil
	case notificationmessagecategory.FieldCode:
		m.ClearCode()
		return nil
	case notificationmessagecategory.FieldSortOrder:
		m.ClearSortOrder()
		return nil
	case notificationmessagecategory.FieldEnable:
		m.ClearEnable()
		return nil
	case notificationmessagecategory.FieldParentID:
		m.ClearParentID()
		return nil
	}
	return fmt.Errorf("unknown NotificationMessageCategory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationMessageCategoryMutation) ResetField(name string) error {
	switch name {
	case notificationmessagecategory.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case notificationmessagecategory.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case notificationmessagecategory.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case notificationmessagecategory.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case notificationmessagecategory.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case notificationmessagecategory.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case notificationmessagecategory.FieldRemark:
		m.ResetRemark()
		return nil
	case notificationmessagecategory.FieldTenantID:
		m.ResetTenantID()
		return nil
	case notificationmessagecategory.FieldName:
		m.ResetName()
		return nil
	case notificationmessagecategory.FieldCode:
		m.ResetCode()
		return nil
	case notificationmessagecategory.FieldSortOrder:
		m.ResetSortOrder()
		return nil
	case notificationmessagecategory.FieldEnable:
		m.ResetEnable()
		return nil
	case notificationmessagecategory.FieldParentID:
		m.ResetParentID()
		return nil
	}
	return fmt.Errorf("unknown NotificationMessageCategory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationMessageCategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parent != nil {
		edges = append(edges, notificationmessagecategory.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, notificationmessagecategory.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationMessageCategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case notificationmessagecategory.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case notificationmessagecategory.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationMessageCategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, notificationmessagecategory.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationMessageCategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case notificationmessagecategory.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationMessageCategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparent {
		edges = append(edges, notificationmessagecategory.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, notificationmessagecategory.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationMessageCategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case notificationmessagecategory.EdgeParent:
		return m.clearedparent
	case notificationmessagecategory.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationMessageCategoryMutation) ClearEdge(name string) error {
	switch name {
	case notificationmessagecategory.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown NotificationMessageCategory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationMessageCategoryMutation) ResetEdge(name string) error {
	switch name {
	case notificationmessagecategory.EdgeParent:
		m.ResetParent()
		return nil
	case notificationmessagecategory.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown NotificationMessageCategory edge %s", name)
}

// NotificationMessageRecipientMutation represents an operation that mutates the NotificationMessageRecipient nodes in the graph.
type NotificationMessageRecipientMutation struct {
	config
	op              Op
	typ             string
	id              *uint32
	created_at      *time.Time
	updated_at      *time.Time
	deleted_at      *time.Time
	tenant_id       *uint32
	addtenant_id    *int32
	message_id      *uint32
	addmessage_id   *int32
	recipient_id    *uint32
	addrecipient_id *int32
	status          *notificationmessagerecipient.Status
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*NotificationMessageRecipient, error)
	predicates      []predicate.NotificationMessageRecipient
}

var _ ent.Mutation = (*NotificationMessageRecipientMutation)(nil)

// notificationmessagerecipientOption allows management of the mutation configuration using functional options.
type notificationmessagerecipientOption func(*NotificationMessageRecipientMutation)

// newNotificationMessageRecipientMutation creates new mutation for the NotificationMessageRecipient entity.
func newNotificationMessageRecipientMutation(c config, op Op, opts ...notificationmessagerecipientOption) *NotificationMessageRecipientMutation {
	m := &NotificationMessageRecipientMutation{
		config:        c,
		op:            op,
		typ:           TypeNotificationMessageRecipient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationMessageRecipientID sets the ID field of the mutation.
func withNotificationMessageRecipientID(id uint32) notificationmessagerecipientOption {
	return func(m *NotificationMessageRecipientMutation) {
		var (
			err   error
			once  sync.Once
			value *NotificationMessageRecipient
		)
		m.oldValue = func(ctx context.Context) (*NotificationMessageRecipient, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NotificationMessageRecipient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotificationMessageRecipient sets the old NotificationMessageRecipient of the mutation.
func withNotificationMessageRecipient(node *NotificationMessageRecipient) notificationmessagerecipientOption {
	return func(m *NotificationMessageRecipientMutation) {
		m.oldValue = func(context.Context) (*NotificationMessageRecipient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationMessageRecipientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationMessageRecipientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NotificationMessageRecipient entities.
func (m *NotificationMessageRecipientMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotificationMessageRecipientMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotificationMessageRecipientMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NotificationMessageRecipient.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *NotificationMessageRecipientMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NotificationMessageRecipientMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the NotificationMessageRecipient entity.
// If the NotificationMessageRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageRecipientMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *NotificationMessageRecipientMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[notificationmessagerecipient.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *NotificationMessageRecipientMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[notificationmessagerecipient.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NotificationMessageRecipientMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, notificationmessagerecipient.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NotificationMessageRecipientMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NotificationMessageRecipientMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the NotificationMessageRecipient entity.
// If the NotificationMessageRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageRecipientMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *NotificationMessageRecipientMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[notificationmessagerecipient.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *NotificationMessageRecipientMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[notificationmessagerecipient.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NotificationMessageRecipientMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, notificationmessagerecipient.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *NotificationMessageRecipientMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *NotificationMessageRecipientMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the NotificationMessageRecipient entity.
// If the NotificationMessageRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageRecipientMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *NotificationMessageRecipientMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[notificationmessagerecipient.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *NotificationMessageRecipientMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[notificationmessagerecipient.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *NotificationMessageRecipientMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, notificationmessagerecipient.FieldDeletedAt)
}

// SetTenantID sets the "tenant_id" field.
func (m *NotificationMessageRecipientMutation) SetTenantID(u uint32) {
	m.tenant_id = &u
	m.addtenant_id = nil
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *NotificationMessageRecipientMutation) TenantID() (r uint32, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the NotificationMessageRecipient entity.
// If the NotificationMessageRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageRecipientMutation) OldTenantID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// AddTenantID adds u to the "tenant_id" field.
func (m *NotificationMessageRecipientMutation) AddTenantID(u int32) {
	if m.addtenant_id != nil {
		*m.addtenant_id += u
	} else {
		m.addtenant_id = &u
	}
}

// AddedTenantID returns the value that was added to the "tenant_id" field in this mutation.
func (m *NotificationMessageRecipientMutation) AddedTenantID() (r int32, exists bool) {
	v := m.addtenant_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTenantID clears the value of the "tenant_id" field.
func (m *NotificationMessageRecipientMutation) ClearTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	m.clearedFields[notificationmessagerecipient.FieldTenantID] = struct{}{}
}

// TenantIDCleared returns if the "tenant_id" field was cleared in this mutation.
func (m *NotificationMessageRecipientMutation) TenantIDCleared() bool {
	_, ok := m.clearedFields[notificationmessagerecipient.FieldTenantID]
	return ok
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *NotificationMessageRecipientMutation) ResetTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	delete(m.clearedFields, notificationmessagerecipient.FieldTenantID)
}

// SetMessageID sets the "message_id" field.
func (m *NotificationMessageRecipientMutation) SetMessageID(u uint32) {
	m.message_id = &u
	m.addmessage_id = nil
}

// MessageID returns the value of the "message_id" field in the mutation.
func (m *NotificationMessageRecipientMutation) MessageID() (r uint32, exists bool) {
	v := m.message_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMessageID returns the old "message_id" field's value of the NotificationMessageRecipient entity.
// If the NotificationMessageRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageRecipientMutation) OldMessageID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessageID: %w", err)
	}
	return oldValue.MessageID, nil
}

// AddMessageID adds u to the "message_id" field.
func (m *NotificationMessageRecipientMutation) AddMessageID(u int32) {
	if m.addmessage_id != nil {
		*m.addmessage_id += u
	} else {
		m.addmessage_id = &u
	}
}

// AddedMessageID returns the value that was added to the "message_id" field in this mutation.
func (m *NotificationMessageRecipientMutation) AddedMessageID() (r int32, exists bool) {
	v := m.addmessage_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearMessageID clears the value of the "message_id" field.
func (m *NotificationMessageRecipientMutation) ClearMessageID() {
	m.message_id = nil
	m.addmessage_id = nil
	m.clearedFields[notificationmessagerecipient.FieldMessageID] = struct{}{}
}

// MessageIDCleared returns if the "message_id" field was cleared in this mutation.
func (m *NotificationMessageRecipientMutation) MessageIDCleared() bool {
	_, ok := m.clearedFields[notificationmessagerecipient.FieldMessageID]
	return ok
}

// ResetMessageID resets all changes to the "message_id" field.
func (m *NotificationMessageRecipientMutation) ResetMessageID() {
	m.message_id = nil
	m.addmessage_id = nil
	delete(m.clearedFields, notificationmessagerecipient.FieldMessageID)
}

// SetRecipientID sets the "recipient_id" field.
func (m *NotificationMessageRecipientMutation) SetRecipientID(u uint32) {
	m.recipient_id = &u
	m.addrecipient_id = nil
}

// RecipientID returns the value of the "recipient_id" field in the mutation.
func (m *NotificationMessageRecipientMutation) RecipientID() (r uint32, exists bool) {
	v := m.recipient_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRecipientID returns the old "recipient_id" field's value of the NotificationMessageRecipient entity.
// If the NotificationMessageRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageRecipientMutation) OldRecipientID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecipientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecipientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecipientID: %w", err)
	}
	return oldValue.RecipientID, nil
}

// AddRecipientID adds u to the "recipient_id" field.
func (m *NotificationMessageRecipientMutation) AddRecipientID(u int32) {
	if m.addrecipient_id != nil {
		*m.addrecipient_id += u
	} else {
		m.addrecipient_id = &u
	}
}

// AddedRecipientID returns the value that was added to the "recipient_id" field in this mutation.
func (m *NotificationMessageRecipientMutation) AddedRecipientID() (r int32, exists bool) {
	v := m.addrecipient_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearRecipientID clears the value of the "recipient_id" field.
func (m *NotificationMessageRecipientMutation) ClearRecipientID() {
	m.recipient_id = nil
	m.addrecipient_id = nil
	m.clearedFields[notificationmessagerecipient.FieldRecipientID] = struct{}{}
}

// RecipientIDCleared returns if the "recipient_id" field was cleared in this mutation.
func (m *NotificationMessageRecipientMutation) RecipientIDCleared() bool {
	_, ok := m.clearedFields[notificationmessagerecipient.FieldRecipientID]
	return ok
}

// ResetRecipientID resets all changes to the "recipient_id" field.
func (m *NotificationMessageRecipientMutation) ResetRecipientID() {
	m.recipient_id = nil
	m.addrecipient_id = nil
	delete(m.clearedFields, notificationmessagerecipient.FieldRecipientID)
}

// SetStatus sets the "status" field.
func (m *NotificationMessageRecipientMutation) SetStatus(n notificationmessagerecipient.Status) {
	m.status = &n
}

// Status returns the value of the "status" field in the mutation.
func (m *NotificationMessageRecipientMutation) Status() (r notificationmessagerecipient.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the NotificationMessageRecipient entity.
// If the NotificationMessageRecipient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMessageRecipientMutation) OldStatus(ctx context.Context) (v *notificationmessagerecipient.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *NotificationMessageRecipientMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[notificationmessagerecipient.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *NotificationMessageRecipientMutation) StatusCleared() bool {
	_, ok := m.clearedFields[notificationmessagerecipient.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *NotificationMessageRecipientMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, notificationmessagerecipient.FieldStatus)
}

// Where appends a list predicates to the NotificationMessageRecipientMutation builder.
func (m *NotificationMessageRecipientMutation) Where(ps ...predicate.NotificationMessageRecipient) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NotificationMessageRecipientMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NotificationMessageRecipientMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NotificationMessageRecipient, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NotificationMessageRecipientMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NotificationMessageRecipientMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NotificationMessageRecipient).
func (m *NotificationMessageRecipientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationMessageRecipientMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, notificationmessagerecipient.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, notificationmessagerecipient.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, notificationmessagerecipient.FieldDeletedAt)
	}
	if m.tenant_id != nil {
		fields = append(fields, notificationmessagerecipient.FieldTenantID)
	}
	if m.message_id != nil {
		fields = append(fields, notificationmessagerecipient.FieldMessageID)
	}
	if m.recipient_id != nil {
		fields = append(fields, notificationmessagerecipient.FieldRecipientID)
	}
	if m.status != nil {
		fields = append(fields, notificationmessagerecipient.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationMessageRecipientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notificationmessagerecipient.FieldCreatedAt:
		return m.CreatedAt()
	case notificationmessagerecipient.FieldUpdatedAt:
		return m.UpdatedAt()
	case notificationmessagerecipient.FieldDeletedAt:
		return m.DeletedAt()
	case notificationmessagerecipient.FieldTenantID:
		return m.TenantID()
	case notificationmessagerecipient.FieldMessageID:
		return m.MessageID()
	case notificationmessagerecipient.FieldRecipientID:
		return m.RecipientID()
	case notificationmessagerecipient.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationMessageRecipientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notificationmessagerecipient.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case notificationmessagerecipient.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case notificationmessagerecipient.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case notificationmessagerecipient.FieldTenantID:
		return m.OldTenantID(ctx)
	case notificationmessagerecipient.FieldMessageID:
		return m.OldMessageID(ctx)
	case notificationmessagerecipient.FieldRecipientID:
		return m.OldRecipientID(ctx)
	case notificationmessagerecipient.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown NotificationMessageRecipient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMessageRecipientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notificationmessagerecipient.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case notificationmessagerecipient.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case notificationmessagerecipient.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case notificationmessagerecipient.FieldTenantID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case notificationmessagerecipient.FieldMessageID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessageID(v)
		return nil
	case notificationmessagerecipient.FieldRecipientID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecipientID(v)
		return nil
	case notificationmessagerecipient.FieldStatus:
		v, ok := value.(notificationmessagerecipient.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown NotificationMessageRecipient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationMessageRecipientMutation) AddedFields() []string {
	var fields []string
	if m.addtenant_id != nil {
		fields = append(fields, notificationmessagerecipient.FieldTenantID)
	}
	if m.addmessage_id != nil {
		fields = append(fields, notificationmessagerecipient.FieldMessageID)
	}
	if m.addrecipient_id != nil {
		fields = append(fields, notificationmessagerecipient.FieldRecipientID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationMessageRecipientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case notificationmessagerecipient.FieldTenantID:
		return m.AddedTenantID()
	case notificationmessagerecipient.FieldMessageID:
		return m.AddedMessageID()
	case notificationmessagerecipient.FieldRecipientID:
		return m.AddedRecipientID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMessageRecipientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case notificationmessagerecipient.FieldTenantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantID(v)
		return nil
	case notificationmessagerecipient.FieldMessageID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMessageID(v)
		return nil
	case notificationmessagerecipient.FieldRecipientID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRecipientID(v)
		return nil
	}
	return fmt.Errorf("unknown NotificationMessageRecipient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationMessageRecipientMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notificationmessagerecipient.FieldCreatedAt) {
		fields = append(fields, notificationmessagerecipient.FieldCreatedAt)
	}
	if m.FieldCleared(notificationmessagerecipient.FieldUpdatedAt) {
		fields = append(fields, notificationmessagerecipient.FieldUpdatedAt)
	}
	if m.FieldCleared(notificationmessagerecipient.FieldDeletedAt) {
		fields = append(fields, notificationmessagerecipient.FieldDeletedAt)
	}
	if m.FieldCleared(notificationmessagerecipient.FieldTenantID) {
		fields = append(fields, notificationmessagerecipient.FieldTenantID)
	}
	if m.FieldCleared(notificationmessagerecipient.FieldMessageID) {
		fields = append(fields, notificationmessagerecipient.FieldMessageID)
	}
	if m.FieldCleared(notificationmessagerecipient.FieldRecipientID) {
		fields = append(fields, notificationmessagerecipient.FieldRecipientID)
	}
	if m.FieldCleared(notificationmessagerecipient.FieldStatus) {
		fields = append(fields, notificationmessagerecipient.FieldStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationMessageRecipientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationMessageRecipientMutation) ClearField(name string) error {
	switch name {
	case notificationmessagerecipient.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case notificationmessagerecipient.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case notificationmessagerecipient.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case notificationmessagerecipient.FieldTenantID:
		m.ClearTenantID()
		return nil
	case notificationmessagerecipient.FieldMessageID:
		m.ClearMessageID()
		return nil
	case notificationmessagerecipient.FieldRecipientID:
		m.ClearRecipientID()
		return nil
	case notificationmessagerecipient.FieldStatus:
		m.ClearStatus()
		return nil
	}
	return fmt.Errorf("unknown NotificationMessageRecipient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationMessageRecipientMutation) ResetField(name string) error {
	switch name {
	case notificationmessagerecipient.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case notificationmessagerecipient.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case notificationmessagerecipient.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case notificationmessagerecipient.FieldTenantID:
		m.ResetTenantID()
		return nil
	case notificationmessagerecipient.FieldMessageID:
		m.ResetMessageID()
		return nil
	case notificationmessagerecipient.FieldRecipientID:
		m.ResetRecipientID()
		return nil
	case notificationmessagerecipient.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown NotificationMessageRecipient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationMessageRecipientMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationMessageRecipientMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationMessageRecipientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationMessageRecipientMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationMessageRecipientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationMessageRecipientMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationMessageRecipientMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NotificationMessageRecipient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationMessageRecipientMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NotificationMessageRecipient edge %s", name)
}

// OrganizationMutation represents an operation that mutates the Organization nodes in the graph.
type OrganizationMutation struct {
	config
	op                Op
	typ               string
	id                *uint32
	created_at        *time.Time
	updated_at        *time.Time
	deleted_at        *time.Time
	created_by        *uint32
	addcreated_by     *int32
	updated_by        *uint32
	addupdated_by     *int32
	deleted_by        *uint32
	adddeleted_by     *int32
	remark            *string
	tenant_id         *uint32
	addtenant_id      *int32
	name              *string
	sort_order        *int32
	addsort_order     *int32
	status            *organization.Status
	organization_type *organization.OrganizationType
	credit_code       *string
	address           *string
	business_scope    *string
	is_legal_entity   *bool
	manager_id        *uint32
	addmanager_id     *int32
	clearedFields     map[string]struct{}
	parent            *uint32
	clearedparent     bool
	children          map[uint32]struct{}
	removedchildren   map[uint32]struct{}
	clearedchildren   bool
	done              bool
	oldValue          func(context.Context) (*Organization, error)
	predicates        []predicate.Organization
}

var _ ent.Mutation = (*OrganizationMutation)(nil)

// organizationOption allows management of the mutation configuration using functional options.
type organizationOption func(*OrganizationMutation)

// newOrganizationMutation creates new mutation for the Organization entity.
func newOrganizationMutation(c config, op Op, opts ...organizationOption) *OrganizationMutation {
	m := &OrganizationMutation{
		config:        c,
		op:            op,
		typ:           TypeOrganization,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrganizationID sets the ID field of the mutation.
func withOrganizationID(id uint32) organizationOption {
	return func(m *OrganizationMutation) {
		var (
			err   error
			once  sync.Once
			value *Organization
		)
		m.oldValue = func(ctx context.Context) (*Organization, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Organization.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrganization sets the old Organization of the mutation.
func withOrganization(node *Organization) organizationOption {
	return func(m *OrganizationMutation) {
		m.oldValue = func(context.Context) (*Organization, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrganizationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrganizationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Organization entities.
func (m *OrganizationMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrganizationMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrganizationMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Organization.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrganizationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrganizationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *OrganizationMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[organization.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *OrganizationMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[organization.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrganizationMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, organization.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrganizationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrganizationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *OrganizationMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[organization.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *OrganizationMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[organization.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrganizationMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, organization.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrganizationMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrganizationMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *OrganizationMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[organization.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *OrganizationMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[organization.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrganizationMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, organization.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *OrganizationMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *OrganizationMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *OrganizationMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *OrganizationMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *OrganizationMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[organization.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *OrganizationMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[organization.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *OrganizationMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, organization.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *OrganizationMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *OrganizationMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *OrganizationMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *OrganizationMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *OrganizationMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[organization.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *OrganizationMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[organization.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *OrganizationMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, organization.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *OrganizationMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *OrganizationMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *OrganizationMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *OrganizationMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *OrganizationMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[organization.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *OrganizationMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[organization.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *OrganizationMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, organization.FieldDeletedBy)
}

// SetRemark sets the "remark" field.
func (m *OrganizationMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *OrganizationMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *OrganizationMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[organization.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *OrganizationMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[organization.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *OrganizationMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, organization.FieldRemark)
}

// SetTenantID sets the "tenant_id" field.
func (m *OrganizationMutation) SetTenantID(u uint32) {
	m.tenant_id = &u
	m.addtenant_id = nil
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *OrganizationMutation) TenantID() (r uint32, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldTenantID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// AddTenantID adds u to the "tenant_id" field.
func (m *OrganizationMutation) AddTenantID(u int32) {
	if m.addtenant_id != nil {
		*m.addtenant_id += u
	} else {
		m.addtenant_id = &u
	}
}

// AddedTenantID returns the value that was added to the "tenant_id" field in this mutation.
func (m *OrganizationMutation) AddedTenantID() (r int32, exists bool) {
	v := m.addtenant_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTenantID clears the value of the "tenant_id" field.
func (m *OrganizationMutation) ClearTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	m.clearedFields[organization.FieldTenantID] = struct{}{}
}

// TenantIDCleared returns if the "tenant_id" field was cleared in this mutation.
func (m *OrganizationMutation) TenantIDCleared() bool {
	_, ok := m.clearedFields[organization.FieldTenantID]
	return ok
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *OrganizationMutation) ResetTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	delete(m.clearedFields, organization.FieldTenantID)
}

// SetName sets the "name" field.
func (m *OrganizationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OrganizationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *OrganizationMutation) ClearName() {
	m.name = nil
	m.clearedFields[organization.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *OrganizationMutation) NameCleared() bool {
	_, ok := m.clearedFields[organization.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *OrganizationMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, organization.FieldName)
}

// SetParentID sets the "parent_id" field.
func (m *OrganizationMutation) SetParentID(u uint32) {
	m.parent = &u
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *OrganizationMutation) ParentID() (r uint32, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldParentID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *OrganizationMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[organization.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *OrganizationMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[organization.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *OrganizationMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, organization.FieldParentID)
}

// SetSortOrder sets the "sort_order" field.
func (m *OrganizationMutation) SetSortOrder(i int32) {
	m.sort_order = &i
	m.addsort_order = nil
}

// SortOrder returns the value of the "sort_order" field in the mutation.
func (m *OrganizationMutation) SortOrder() (r int32, exists bool) {
	v := m.sort_order
	if v == nil {
		return
	}
	return *v, true
}

// OldSortOrder returns the old "sort_order" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldSortOrder(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSortOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSortOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSortOrder: %w", err)
	}
	return oldValue.SortOrder, nil
}

// AddSortOrder adds i to the "sort_order" field.
func (m *OrganizationMutation) AddSortOrder(i int32) {
	if m.addsort_order != nil {
		*m.addsort_order += i
	} else {
		m.addsort_order = &i
	}
}

// AddedSortOrder returns the value that was added to the "sort_order" field in this mutation.
func (m *OrganizationMutation) AddedSortOrder() (r int32, exists bool) {
	v := m.addsort_order
	if v == nil {
		return
	}
	return *v, true
}

// ClearSortOrder clears the value of the "sort_order" field.
func (m *OrganizationMutation) ClearSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	m.clearedFields[organization.FieldSortOrder] = struct{}{}
}

// SortOrderCleared returns if the "sort_order" field was cleared in this mutation.
func (m *OrganizationMutation) SortOrderCleared() bool {
	_, ok := m.clearedFields[organization.FieldSortOrder]
	return ok
}

// ResetSortOrder resets all changes to the "sort_order" field.
func (m *OrganizationMutation) ResetSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	delete(m.clearedFields, organization.FieldSortOrder)
}

// SetStatus sets the "status" field.
func (m *OrganizationMutation) SetStatus(o organization.Status) {
	m.status = &o
}

// Status returns the value of the "status" field in the mutation.
func (m *OrganizationMutation) Status() (r organization.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldStatus(ctx context.Context) (v *organization.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *OrganizationMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[organization.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *OrganizationMutation) StatusCleared() bool {
	_, ok := m.clearedFields[organization.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *OrganizationMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, organization.FieldStatus)
}

// SetOrganizationType sets the "organization_type" field.
func (m *OrganizationMutation) SetOrganizationType(ot organization.OrganizationType) {
	m.organization_type = &ot
}

// OrganizationType returns the value of the "organization_type" field in the mutation.
func (m *OrganizationMutation) OrganizationType() (r organization.OrganizationType, exists bool) {
	v := m.organization_type
	if v == nil {
		return
	}
	return *v, true
}

// OldOrganizationType returns the old "organization_type" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldOrganizationType(ctx context.Context) (v *organization.OrganizationType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrganizationType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrganizationType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrganizationType: %w", err)
	}
	return oldValue.OrganizationType, nil
}

// ClearOrganizationType clears the value of the "organization_type" field.
func (m *OrganizationMutation) ClearOrganizationType() {
	m.organization_type = nil
	m.clearedFields[organization.FieldOrganizationType] = struct{}{}
}

// OrganizationTypeCleared returns if the "organization_type" field was cleared in this mutation.
func (m *OrganizationMutation) OrganizationTypeCleared() bool {
	_, ok := m.clearedFields[organization.FieldOrganizationType]
	return ok
}

// ResetOrganizationType resets all changes to the "organization_type" field.
func (m *OrganizationMutation) ResetOrganizationType() {
	m.organization_type = nil
	delete(m.clearedFields, organization.FieldOrganizationType)
}

// SetCreditCode sets the "credit_code" field.
func (m *OrganizationMutation) SetCreditCode(s string) {
	m.credit_code = &s
}

// CreditCode returns the value of the "credit_code" field in the mutation.
func (m *OrganizationMutation) CreditCode() (r string, exists bool) {
	v := m.credit_code
	if v == nil {
		return
	}
	return *v, true
}

// OldCreditCode returns the old "credit_code" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldCreditCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreditCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreditCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreditCode: %w", err)
	}
	return oldValue.CreditCode, nil
}

// ClearCreditCode clears the value of the "credit_code" field.
func (m *OrganizationMutation) ClearCreditCode() {
	m.credit_code = nil
	m.clearedFields[organization.FieldCreditCode] = struct{}{}
}

// CreditCodeCleared returns if the "credit_code" field was cleared in this mutation.
func (m *OrganizationMutation) CreditCodeCleared() bool {
	_, ok := m.clearedFields[organization.FieldCreditCode]
	return ok
}

// ResetCreditCode resets all changes to the "credit_code" field.
func (m *OrganizationMutation) ResetCreditCode() {
	m.credit_code = nil
	delete(m.clearedFields, organization.FieldCreditCode)
}

// SetAddress sets the "address" field.
func (m *OrganizationMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *OrganizationMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldAddress(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *OrganizationMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[organization.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *OrganizationMutation) AddressCleared() bool {
	_, ok := m.clearedFields[organization.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *OrganizationMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, organization.FieldAddress)
}

// SetBusinessScope sets the "business_scope" field.
func (m *OrganizationMutation) SetBusinessScope(s string) {
	m.business_scope = &s
}

// BusinessScope returns the value of the "business_scope" field in the mutation.
func (m *OrganizationMutation) BusinessScope() (r string, exists bool) {
	v := m.business_scope
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessScope returns the old "business_scope" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldBusinessScope(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBusinessScope is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBusinessScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessScope: %w", err)
	}
	return oldValue.BusinessScope, nil
}

// ClearBusinessScope clears the value of the "business_scope" field.
func (m *OrganizationMutation) ClearBusinessScope() {
	m.business_scope = nil
	m.clearedFields[organization.FieldBusinessScope] = struct{}{}
}

// BusinessScopeCleared returns if the "business_scope" field was cleared in this mutation.
func (m *OrganizationMutation) BusinessScopeCleared() bool {
	_, ok := m.clearedFields[organization.FieldBusinessScope]
	return ok
}

// ResetBusinessScope resets all changes to the "business_scope" field.
func (m *OrganizationMutation) ResetBusinessScope() {
	m.business_scope = nil
	delete(m.clearedFields, organization.FieldBusinessScope)
}

// SetIsLegalEntity sets the "is_legal_entity" field.
func (m *OrganizationMutation) SetIsLegalEntity(b bool) {
	m.is_legal_entity = &b
}

// IsLegalEntity returns the value of the "is_legal_entity" field in the mutation.
func (m *OrganizationMutation) IsLegalEntity() (r bool, exists bool) {
	v := m.is_legal_entity
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLegalEntity returns the old "is_legal_entity" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldIsLegalEntity(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLegalEntity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLegalEntity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLegalEntity: %w", err)
	}
	return oldValue.IsLegalEntity, nil
}

// ClearIsLegalEntity clears the value of the "is_legal_entity" field.
func (m *OrganizationMutation) ClearIsLegalEntity() {
	m.is_legal_entity = nil
	m.clearedFields[organization.FieldIsLegalEntity] = struct{}{}
}

// IsLegalEntityCleared returns if the "is_legal_entity" field was cleared in this mutation.
func (m *OrganizationMutation) IsLegalEntityCleared() bool {
	_, ok := m.clearedFields[organization.FieldIsLegalEntity]
	return ok
}

// ResetIsLegalEntity resets all changes to the "is_legal_entity" field.
func (m *OrganizationMutation) ResetIsLegalEntity() {
	m.is_legal_entity = nil
	delete(m.clearedFields, organization.FieldIsLegalEntity)
}

// SetManagerID sets the "manager_id" field.
func (m *OrganizationMutation) SetManagerID(u uint32) {
	m.manager_id = &u
	m.addmanager_id = nil
}

// ManagerID returns the value of the "manager_id" field in the mutation.
func (m *OrganizationMutation) ManagerID() (r uint32, exists bool) {
	v := m.manager_id
	if v == nil {
		return
	}
	return *v, true
}

// OldManagerID returns the old "manager_id" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldManagerID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldManagerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldManagerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManagerID: %w", err)
	}
	return oldValue.ManagerID, nil
}

// AddManagerID adds u to the "manager_id" field.
func (m *OrganizationMutation) AddManagerID(u int32) {
	if m.addmanager_id != nil {
		*m.addmanager_id += u
	} else {
		m.addmanager_id = &u
	}
}

// AddedManagerID returns the value that was added to the "manager_id" field in this mutation.
func (m *OrganizationMutation) AddedManagerID() (r int32, exists bool) {
	v := m.addmanager_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearManagerID clears the value of the "manager_id" field.
func (m *OrganizationMutation) ClearManagerID() {
	m.manager_id = nil
	m.addmanager_id = nil
	m.clearedFields[organization.FieldManagerID] = struct{}{}
}

// ManagerIDCleared returns if the "manager_id" field was cleared in this mutation.
func (m *OrganizationMutation) ManagerIDCleared() bool {
	_, ok := m.clearedFields[organization.FieldManagerID]
	return ok
}

// ResetManagerID resets all changes to the "manager_id" field.
func (m *OrganizationMutation) ResetManagerID() {
	m.manager_id = nil
	m.addmanager_id = nil
	delete(m.clearedFields, organization.FieldManagerID)
}

// ClearParent clears the "parent" edge to the Organization entity.
func (m *OrganizationMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[organization.FieldParentID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the Organization entity was cleared.
func (m *OrganizationMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *OrganizationMutation) ParentIDs() (ids []uint32) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *OrganizationMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Organization entity by ids.
func (m *OrganizationMutation) AddChildIDs(ids ...uint32) {
	if m.children == nil {
		m.children = make(map[uint32]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Organization entity.
func (m *OrganizationMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Organization entity was cleared.
func (m *OrganizationMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Organization entity by IDs.
func (m *OrganizationMutation) RemoveChildIDs(ids ...uint32) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[uint32]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Organization entity.
func (m *OrganizationMutation) RemovedChildrenIDs() (ids []uint32) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *OrganizationMutation) ChildrenIDs() (ids []uint32) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *OrganizationMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Where appends a list predicates to the OrganizationMutation builder.
func (m *OrganizationMutation) Where(ps ...predicate.Organization) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrganizationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrganizationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Organization, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrganizationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrganizationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Organization).
func (m *OrganizationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrganizationMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.created_at != nil {
		fields = append(fields, organization.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, organization.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, organization.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, organization.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, organization.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, organization.FieldDeletedBy)
	}
	if m.remark != nil {
		fields = append(fields, organization.FieldRemark)
	}
	if m.tenant_id != nil {
		fields = append(fields, organization.FieldTenantID)
	}
	if m.name != nil {
		fields = append(fields, organization.FieldName)
	}
	if m.parent != nil {
		fields = append(fields, organization.FieldParentID)
	}
	if m.sort_order != nil {
		fields = append(fields, organization.FieldSortOrder)
	}
	if m.status != nil {
		fields = append(fields, organization.FieldStatus)
	}
	if m.organization_type != nil {
		fields = append(fields, organization.FieldOrganizationType)
	}
	if m.credit_code != nil {
		fields = append(fields, organization.FieldCreditCode)
	}
	if m.address != nil {
		fields = append(fields, organization.FieldAddress)
	}
	if m.business_scope != nil {
		fields = append(fields, organization.FieldBusinessScope)
	}
	if m.is_legal_entity != nil {
		fields = append(fields, organization.FieldIsLegalEntity)
	}
	if m.manager_id != nil {
		fields = append(fields, organization.FieldManagerID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrganizationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case organization.FieldCreatedAt:
		return m.CreatedAt()
	case organization.FieldUpdatedAt:
		return m.UpdatedAt()
	case organization.FieldDeletedAt:
		return m.DeletedAt()
	case organization.FieldCreatedBy:
		return m.CreatedBy()
	case organization.FieldUpdatedBy:
		return m.UpdatedBy()
	case organization.FieldDeletedBy:
		return m.DeletedBy()
	case organization.FieldRemark:
		return m.Remark()
	case organization.FieldTenantID:
		return m.TenantID()
	case organization.FieldName:
		return m.Name()
	case organization.FieldParentID:
		return m.ParentID()
	case organization.FieldSortOrder:
		return m.SortOrder()
	case organization.FieldStatus:
		return m.Status()
	case organization.FieldOrganizationType:
		return m.OrganizationType()
	case organization.FieldCreditCode:
		return m.CreditCode()
	case organization.FieldAddress:
		return m.Address()
	case organization.FieldBusinessScope:
		return m.BusinessScope()
	case organization.FieldIsLegalEntity:
		return m.IsLegalEntity()
	case organization.FieldManagerID:
		return m.ManagerID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrganizationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case organization.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case organization.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case organization.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case organization.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case organization.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case organization.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case organization.FieldRemark:
		return m.OldRemark(ctx)
	case organization.FieldTenantID:
		return m.OldTenantID(ctx)
	case organization.FieldName:
		return m.OldName(ctx)
	case organization.FieldParentID:
		return m.OldParentID(ctx)
	case organization.FieldSortOrder:
		return m.OldSortOrder(ctx)
	case organization.FieldStatus:
		return m.OldStatus(ctx)
	case organization.FieldOrganizationType:
		return m.OldOrganizationType(ctx)
	case organization.FieldCreditCode:
		return m.OldCreditCode(ctx)
	case organization.FieldAddress:
		return m.OldAddress(ctx)
	case organization.FieldBusinessScope:
		return m.OldBusinessScope(ctx)
	case organization.FieldIsLegalEntity:
		return m.OldIsLegalEntity(ctx)
	case organization.FieldManagerID:
		return m.OldManagerID(ctx)
	}
	return nil, fmt.Errorf("unknown Organization field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case organization.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case organization.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case organization.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case organization.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case organization.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case organization.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case organization.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case organization.FieldTenantID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case organization.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case organization.FieldParentID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case organization.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSortOrder(v)
		return nil
	case organization.FieldStatus:
		v, ok := value.(organization.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case organization.FieldOrganizationType:
		v, ok := value.(organization.OrganizationType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrganizationType(v)
		return nil
	case organization.FieldCreditCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreditCode(v)
		return nil
	case organization.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case organization.FieldBusinessScope:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessScope(v)
		return nil
	case organization.FieldIsLegalEntity:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLegalEntity(v)
		return nil
	case organization.FieldManagerID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManagerID(v)
		return nil
	}
	return fmt.Errorf("unknown Organization field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrganizationMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, organization.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, organization.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, organization.FieldDeletedBy)
	}
	if m.addtenant_id != nil {
		fields = append(fields, organization.FieldTenantID)
	}
	if m.addsort_order != nil {
		fields = append(fields, organization.FieldSortOrder)
	}
	if m.addmanager_id != nil {
		fields = append(fields, organization.FieldManagerID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrganizationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case organization.FieldCreatedBy:
		return m.AddedCreatedBy()
	case organization.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case organization.FieldDeletedBy:
		return m.AddedDeletedBy()
	case organization.FieldTenantID:
		return m.AddedTenantID()
	case organization.FieldSortOrder:
		return m.AddedSortOrder()
	case organization.FieldManagerID:
		return m.AddedManagerID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case organization.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case organization.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case organization.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case organization.FieldTenantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantID(v)
		return nil
	case organization.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSortOrder(v)
		return nil
	case organization.FieldManagerID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddManagerID(v)
		return nil
	}
	return fmt.Errorf("unknown Organization numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrganizationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(organization.FieldCreatedAt) {
		fields = append(fields, organization.FieldCreatedAt)
	}
	if m.FieldCleared(organization.FieldUpdatedAt) {
		fields = append(fields, organization.FieldUpdatedAt)
	}
	if m.FieldCleared(organization.FieldDeletedAt) {
		fields = append(fields, organization.FieldDeletedAt)
	}
	if m.FieldCleared(organization.FieldCreatedBy) {
		fields = append(fields, organization.FieldCreatedBy)
	}
	if m.FieldCleared(organization.FieldUpdatedBy) {
		fields = append(fields, organization.FieldUpdatedBy)
	}
	if m.FieldCleared(organization.FieldDeletedBy) {
		fields = append(fields, organization.FieldDeletedBy)
	}
	if m.FieldCleared(organization.FieldRemark) {
		fields = append(fields, organization.FieldRemark)
	}
	if m.FieldCleared(organization.FieldTenantID) {
		fields = append(fields, organization.FieldTenantID)
	}
	if m.FieldCleared(organization.FieldName) {
		fields = append(fields, organization.FieldName)
	}
	if m.FieldCleared(organization.FieldParentID) {
		fields = append(fields, organization.FieldParentID)
	}
	if m.FieldCleared(organization.FieldSortOrder) {
		fields = append(fields, organization.FieldSortOrder)
	}
	if m.FieldCleared(organization.FieldStatus) {
		fields = append(fields, organization.FieldStatus)
	}
	if m.FieldCleared(organization.FieldOrganizationType) {
		fields = append(fields, organization.FieldOrganizationType)
	}
	if m.FieldCleared(organization.FieldCreditCode) {
		fields = append(fields, organization.FieldCreditCode)
	}
	if m.FieldCleared(organization.FieldAddress) {
		fields = append(fields, organization.FieldAddress)
	}
	if m.FieldCleared(organization.FieldBusinessScope) {
		fields = append(fields, organization.FieldBusinessScope)
	}
	if m.FieldCleared(organization.FieldIsLegalEntity) {
		fields = append(fields, organization.FieldIsLegalEntity)
	}
	if m.FieldCleared(organization.FieldManagerID) {
		fields = append(fields, organization.FieldManagerID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrganizationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrganizationMutation) ClearField(name string) error {
	switch name {
	case organization.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case organization.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case organization.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case organization.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case organization.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case organization.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case organization.FieldRemark:
		m.ClearRemark()
		return nil
	case organization.FieldTenantID:
		m.ClearTenantID()
		return nil
	case organization.FieldName:
		m.ClearName()
		return nil
	case organization.FieldParentID:
		m.ClearParentID()
		return nil
	case organization.FieldSortOrder:
		m.ClearSortOrder()
		return nil
	case organization.FieldStatus:
		m.ClearStatus()
		return nil
	case organization.FieldOrganizationType:
		m.ClearOrganizationType()
		return nil
	case organization.FieldCreditCode:
		m.ClearCreditCode()
		return nil
	case organization.FieldAddress:
		m.ClearAddress()
		return nil
	case organization.FieldBusinessScope:
		m.ClearBusinessScope()
		return nil
	case organization.FieldIsLegalEntity:
		m.ClearIsLegalEntity()
		return nil
	case organization.FieldManagerID:
		m.ClearManagerID()
		return nil
	}
	return fmt.Errorf("unknown Organization nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrganizationMutation) ResetField(name string) error {
	switch name {
	case organization.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case organization.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case organization.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case organization.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case organization.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case organization.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case organization.FieldRemark:
		m.ResetRemark()
		return nil
	case organization.FieldTenantID:
		m.ResetTenantID()
		return nil
	case organization.FieldName:
		m.ResetName()
		return nil
	case organization.FieldParentID:
		m.ResetParentID()
		return nil
	case organization.FieldSortOrder:
		m.ResetSortOrder()
		return nil
	case organization.FieldStatus:
		m.ResetStatus()
		return nil
	case organization.FieldOrganizationType:
		m.ResetOrganizationType()
		return nil
	case organization.FieldCreditCode:
		m.ResetCreditCode()
		return nil
	case organization.FieldAddress:
		m.ResetAddress()
		return nil
	case organization.FieldBusinessScope:
		m.ResetBusinessScope()
		return nil
	case organization.FieldIsLegalEntity:
		m.ResetIsLegalEntity()
		return nil
	case organization.FieldManagerID:
		m.ResetManagerID()
		return nil
	}
	return fmt.Errorf("unknown Organization field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrganizationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parent != nil {
		edges = append(edges, organization.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, organization.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrganizationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case organization.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case organization.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrganizationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, organization.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrganizationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case organization.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrganizationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparent {
		edges = append(edges, organization.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, organization.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrganizationMutation) EdgeCleared(name string) bool {
	switch name {
	case organization.EdgeParent:
		return m.clearedparent
	case organization.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrganizationMutation) ClearEdge(name string) error {
	switch name {
	case organization.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Organization unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrganizationMutation) ResetEdge(name string) error {
	switch name {
	case organization.EdgeParent:
		m.ResetParent()
		return nil
	case organization.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown Organization edge %s", name)
}

// PositionMutation represents an operation that mutates the Position nodes in the graph.
type PositionMutation struct {
	config
	op                 Op
	typ                string
	id                 *uint32
	created_at         *time.Time
	updated_at         *time.Time
	deleted_at         *time.Time
	created_by         *uint32
	addcreated_by      *int32
	updated_by         *uint32
	addupdated_by      *int32
	deleted_by         *uint32
	adddeleted_by      *int32
	remark             *string
	tenant_id          *uint32
	addtenant_id       *int32
	name               *string
	code               *string
	sort_order         *int32
	addsort_order      *int32
	organization_id    *uint32
	addorganization_id *int32
	department_id      *uint32
	adddepartment_id   *int32
	status             *position.Status
	description        *string
	quota              *uint32
	addquota           *int32
	clearedFields      map[string]struct{}
	parent             *uint32
	clearedparent      bool
	children           map[uint32]struct{}
	removedchildren    map[uint32]struct{}
	clearedchildren    bool
	done               bool
	oldValue           func(context.Context) (*Position, error)
	predicates         []predicate.Position
}

var _ ent.Mutation = (*PositionMutation)(nil)

// positionOption allows management of the mutation configuration using functional options.
type positionOption func(*PositionMutation)

// newPositionMutation creates new mutation for the Position entity.
func newPositionMutation(c config, op Op, opts ...positionOption) *PositionMutation {
	m := &PositionMutation{
		config:        c,
		op:            op,
		typ:           TypePosition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPositionID sets the ID field of the mutation.
func withPositionID(id uint32) positionOption {
	return func(m *PositionMutation) {
		var (
			err   error
			once  sync.Once
			value *Position
		)
		m.oldValue = func(ctx context.Context) (*Position, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Position.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPosition sets the old Position of the mutation.
func withPosition(node *Position) positionOption {
	return func(m *PositionMutation) {
		m.oldValue = func(context.Context) (*Position, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PositionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PositionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Position entities.
func (m *PositionMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PositionMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PositionMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Position.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PositionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PositionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *PositionMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[position.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *PositionMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[position.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PositionMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, position.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PositionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PositionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *PositionMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[position.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *PositionMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[position.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PositionMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, position.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PositionMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PositionMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *PositionMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[position.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *PositionMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[position.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PositionMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, position.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *PositionMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *PositionMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *PositionMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *PositionMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *PositionMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[position.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *PositionMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[position.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *PositionMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, position.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *PositionMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *PositionMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *PositionMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *PositionMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *PositionMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[position.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *PositionMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[position.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *PositionMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, position.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *PositionMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *PositionMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *PositionMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *PositionMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *PositionMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[position.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *PositionMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[position.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *PositionMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, position.FieldDeletedBy)
}

// SetRemark sets the "remark" field.
func (m *PositionMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *PositionMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *PositionMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[position.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *PositionMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[position.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *PositionMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, position.FieldRemark)
}

// SetTenantID sets the "tenant_id" field.
func (m *PositionMutation) SetTenantID(u uint32) {
	m.tenant_id = &u
	m.addtenant_id = nil
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *PositionMutation) TenantID() (r uint32, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldTenantID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// AddTenantID adds u to the "tenant_id" field.
func (m *PositionMutation) AddTenantID(u int32) {
	if m.addtenant_id != nil {
		*m.addtenant_id += u
	} else {
		m.addtenant_id = &u
	}
}

// AddedTenantID returns the value that was added to the "tenant_id" field in this mutation.
func (m *PositionMutation) AddedTenantID() (r int32, exists bool) {
	v := m.addtenant_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTenantID clears the value of the "tenant_id" field.
func (m *PositionMutation) ClearTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	m.clearedFields[position.FieldTenantID] = struct{}{}
}

// TenantIDCleared returns if the "tenant_id" field was cleared in this mutation.
func (m *PositionMutation) TenantIDCleared() bool {
	_, ok := m.clearedFields[position.FieldTenantID]
	return ok
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *PositionMutation) ResetTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	delete(m.clearedFields, position.FieldTenantID)
}

// SetName sets the "name" field.
func (m *PositionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PositionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *PositionMutation) ClearName() {
	m.name = nil
	m.clearedFields[position.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *PositionMutation) NameCleared() bool {
	_, ok := m.clearedFields[position.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *PositionMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, position.FieldName)
}

// SetCode sets the "code" field.
func (m *PositionMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *PositionMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ClearCode clears the value of the "code" field.
func (m *PositionMutation) ClearCode() {
	m.code = nil
	m.clearedFields[position.FieldCode] = struct{}{}
}

// CodeCleared returns if the "code" field was cleared in this mutation.
func (m *PositionMutation) CodeCleared() bool {
	_, ok := m.clearedFields[position.FieldCode]
	return ok
}

// ResetCode resets all changes to the "code" field.
func (m *PositionMutation) ResetCode() {
	m.code = nil
	delete(m.clearedFields, position.FieldCode)
}

// SetParentID sets the "parent_id" field.
func (m *PositionMutation) SetParentID(u uint32) {
	m.parent = &u
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *PositionMutation) ParentID() (r uint32, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldParentID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *PositionMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[position.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *PositionMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[position.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *PositionMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, position.FieldParentID)
}

// SetSortOrder sets the "sort_order" field.
func (m *PositionMutation) SetSortOrder(i int32) {
	m.sort_order = &i
	m.addsort_order = nil
}

// SortOrder returns the value of the "sort_order" field in the mutation.
func (m *PositionMutation) SortOrder() (r int32, exists bool) {
	v := m.sort_order
	if v == nil {
		return
	}
	return *v, true
}

// OldSortOrder returns the old "sort_order" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldSortOrder(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSortOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSortOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSortOrder: %w", err)
	}
	return oldValue.SortOrder, nil
}

// AddSortOrder adds i to the "sort_order" field.
func (m *PositionMutation) AddSortOrder(i int32) {
	if m.addsort_order != nil {
		*m.addsort_order += i
	} else {
		m.addsort_order = &i
	}
}

// AddedSortOrder returns the value that was added to the "sort_order" field in this mutation.
func (m *PositionMutation) AddedSortOrder() (r int32, exists bool) {
	v := m.addsort_order
	if v == nil {
		return
	}
	return *v, true
}

// ClearSortOrder clears the value of the "sort_order" field.
func (m *PositionMutation) ClearSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	m.clearedFields[position.FieldSortOrder] = struct{}{}
}

// SortOrderCleared returns if the "sort_order" field was cleared in this mutation.
func (m *PositionMutation) SortOrderCleared() bool {
	_, ok := m.clearedFields[position.FieldSortOrder]
	return ok
}

// ResetSortOrder resets all changes to the "sort_order" field.
func (m *PositionMutation) ResetSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	delete(m.clearedFields, position.FieldSortOrder)
}

// SetOrganizationID sets the "organization_id" field.
func (m *PositionMutation) SetOrganizationID(u uint32) {
	m.organization_id = &u
	m.addorganization_id = nil
}

// OrganizationID returns the value of the "organization_id" field in the mutation.
func (m *PositionMutation) OrganizationID() (r uint32, exists bool) {
	v := m.organization_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrganizationID returns the old "organization_id" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldOrganizationID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrganizationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrganizationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrganizationID: %w", err)
	}
	return oldValue.OrganizationID, nil
}

// AddOrganizationID adds u to the "organization_id" field.
func (m *PositionMutation) AddOrganizationID(u int32) {
	if m.addorganization_id != nil {
		*m.addorganization_id += u
	} else {
		m.addorganization_id = &u
	}
}

// AddedOrganizationID returns the value that was added to the "organization_id" field in this mutation.
func (m *PositionMutation) AddedOrganizationID() (r int32, exists bool) {
	v := m.addorganization_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrganizationID resets all changes to the "organization_id" field.
func (m *PositionMutation) ResetOrganizationID() {
	m.organization_id = nil
	m.addorganization_id = nil
}

// SetDepartmentID sets the "department_id" field.
func (m *PositionMutation) SetDepartmentID(u uint32) {
	m.department_id = &u
	m.adddepartment_id = nil
}

// DepartmentID returns the value of the "department_id" field in the mutation.
func (m *PositionMutation) DepartmentID() (r uint32, exists bool) {
	v := m.department_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartmentID returns the old "department_id" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldDepartmentID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartmentID: %w", err)
	}
	return oldValue.DepartmentID, nil
}

// AddDepartmentID adds u to the "department_id" field.
func (m *PositionMutation) AddDepartmentID(u int32) {
	if m.adddepartment_id != nil {
		*m.adddepartment_id += u
	} else {
		m.adddepartment_id = &u
	}
}

// AddedDepartmentID returns the value that was added to the "department_id" field in this mutation.
func (m *PositionMutation) AddedDepartmentID() (r int32, exists bool) {
	v := m.adddepartment_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetDepartmentID resets all changes to the "department_id" field.
func (m *PositionMutation) ResetDepartmentID() {
	m.department_id = nil
	m.adddepartment_id = nil
}

// SetStatus sets the "status" field.
func (m *PositionMutation) SetStatus(po position.Status) {
	m.status = &po
}

// Status returns the value of the "status" field in the mutation.
func (m *PositionMutation) Status() (r position.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldStatus(ctx context.Context) (v *position.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *PositionMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[position.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *PositionMutation) StatusCleared() bool {
	_, ok := m.clearedFields[position.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *PositionMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, position.FieldStatus)
}

// SetDescription sets the "description" field.
func (m *PositionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PositionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *PositionMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[position.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *PositionMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[position.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *PositionMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, position.FieldDescription)
}

// SetQuota sets the "quota" field.
func (m *PositionMutation) SetQuota(u uint32) {
	m.quota = &u
	m.addquota = nil
}

// Quota returns the value of the "quota" field in the mutation.
func (m *PositionMutation) Quota() (r uint32, exists bool) {
	v := m.quota
	if v == nil {
		return
	}
	return *v, true
}

// OldQuota returns the old "quota" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldQuota(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuota is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuota requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuota: %w", err)
	}
	return oldValue.Quota, nil
}

// AddQuota adds u to the "quota" field.
func (m *PositionMutation) AddQuota(u int32) {
	if m.addquota != nil {
		*m.addquota += u
	} else {
		m.addquota = &u
	}
}

// AddedQuota returns the value that was added to the "quota" field in this mutation.
func (m *PositionMutation) AddedQuota() (r int32, exists bool) {
	v := m.addquota
	if v == nil {
		return
	}
	return *v, true
}

// ClearQuota clears the value of the "quota" field.
func (m *PositionMutation) ClearQuota() {
	m.quota = nil
	m.addquota = nil
	m.clearedFields[position.FieldQuota] = struct{}{}
}

// QuotaCleared returns if the "quota" field was cleared in this mutation.
func (m *PositionMutation) QuotaCleared() bool {
	_, ok := m.clearedFields[position.FieldQuota]
	return ok
}

// ResetQuota resets all changes to the "quota" field.
func (m *PositionMutation) ResetQuota() {
	m.quota = nil
	m.addquota = nil
	delete(m.clearedFields, position.FieldQuota)
}

// ClearParent clears the "parent" edge to the Position entity.
func (m *PositionMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[position.FieldParentID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the Position entity was cleared.
func (m *PositionMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *PositionMutation) ParentIDs() (ids []uint32) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *PositionMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Position entity by ids.
func (m *PositionMutation) AddChildIDs(ids ...uint32) {
	if m.children == nil {
		m.children = make(map[uint32]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Position entity.
func (m *PositionMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Position entity was cleared.
func (m *PositionMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Position entity by IDs.
func (m *PositionMutation) RemoveChildIDs(ids ...uint32) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[uint32]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Position entity.
func (m *PositionMutation) RemovedChildrenIDs() (ids []uint32) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *PositionMutation) ChildrenIDs() (ids []uint32) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *PositionMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Where appends a list predicates to the PositionMutation builder.
func (m *PositionMutation) Where(ps ...predicate.Position) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PositionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PositionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Position, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PositionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PositionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Position).
func (m *PositionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PositionMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.created_at != nil {
		fields = append(fields, position.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, position.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, position.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, position.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, position.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, position.FieldDeletedBy)
	}
	if m.remark != nil {
		fields = append(fields, position.FieldRemark)
	}
	if m.tenant_id != nil {
		fields = append(fields, position.FieldTenantID)
	}
	if m.name != nil {
		fields = append(fields, position.FieldName)
	}
	if m.code != nil {
		fields = append(fields, position.FieldCode)
	}
	if m.parent != nil {
		fields = append(fields, position.FieldParentID)
	}
	if m.sort_order != nil {
		fields = append(fields, position.FieldSortOrder)
	}
	if m.organization_id != nil {
		fields = append(fields, position.FieldOrganizationID)
	}
	if m.department_id != nil {
		fields = append(fields, position.FieldDepartmentID)
	}
	if m.status != nil {
		fields = append(fields, position.FieldStatus)
	}
	if m.description != nil {
		fields = append(fields, position.FieldDescription)
	}
	if m.quota != nil {
		fields = append(fields, position.FieldQuota)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PositionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case position.FieldCreatedAt:
		return m.CreatedAt()
	case position.FieldUpdatedAt:
		return m.UpdatedAt()
	case position.FieldDeletedAt:
		return m.DeletedAt()
	case position.FieldCreatedBy:
		return m.CreatedBy()
	case position.FieldUpdatedBy:
		return m.UpdatedBy()
	case position.FieldDeletedBy:
		return m.DeletedBy()
	case position.FieldRemark:
		return m.Remark()
	case position.FieldTenantID:
		return m.TenantID()
	case position.FieldName:
		return m.Name()
	case position.FieldCode:
		return m.Code()
	case position.FieldParentID:
		return m.ParentID()
	case position.FieldSortOrder:
		return m.SortOrder()
	case position.FieldOrganizationID:
		return m.OrganizationID()
	case position.FieldDepartmentID:
		return m.DepartmentID()
	case position.FieldStatus:
		return m.Status()
	case position.FieldDescription:
		return m.Description()
	case position.FieldQuota:
		return m.Quota()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PositionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case position.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case position.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case position.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case position.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case position.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case position.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case position.FieldRemark:
		return m.OldRemark(ctx)
	case position.FieldTenantID:
		return m.OldTenantID(ctx)
	case position.FieldName:
		return m.OldName(ctx)
	case position.FieldCode:
		return m.OldCode(ctx)
	case position.FieldParentID:
		return m.OldParentID(ctx)
	case position.FieldSortOrder:
		return m.OldSortOrder(ctx)
	case position.FieldOrganizationID:
		return m.OldOrganizationID(ctx)
	case position.FieldDepartmentID:
		return m.OldDepartmentID(ctx)
	case position.FieldStatus:
		return m.OldStatus(ctx)
	case position.FieldDescription:
		return m.OldDescription(ctx)
	case position.FieldQuota:
		return m.OldQuota(ctx)
	}
	return nil, fmt.Errorf("unknown Position field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PositionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case position.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case position.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case position.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case position.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case position.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case position.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case position.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case position.FieldTenantID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case position.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case position.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case position.FieldParentID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case position.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSortOrder(v)
		return nil
	case position.FieldOrganizationID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrganizationID(v)
		return nil
	case position.FieldDepartmentID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartmentID(v)
		return nil
	case position.FieldStatus:
		v, ok := value.(position.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case position.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case position.FieldQuota:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuota(v)
		return nil
	}
	return fmt.Errorf("unknown Position field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PositionMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, position.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, position.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, position.FieldDeletedBy)
	}
	if m.addtenant_id != nil {
		fields = append(fields, position.FieldTenantID)
	}
	if m.addsort_order != nil {
		fields = append(fields, position.FieldSortOrder)
	}
	if m.addorganization_id != nil {
		fields = append(fields, position.FieldOrganizationID)
	}
	if m.adddepartment_id != nil {
		fields = append(fields, position.FieldDepartmentID)
	}
	if m.addquota != nil {
		fields = append(fields, position.FieldQuota)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PositionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case position.FieldCreatedBy:
		return m.AddedCreatedBy()
	case position.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case position.FieldDeletedBy:
		return m.AddedDeletedBy()
	case position.FieldTenantID:
		return m.AddedTenantID()
	case position.FieldSortOrder:
		return m.AddedSortOrder()
	case position.FieldOrganizationID:
		return m.AddedOrganizationID()
	case position.FieldDepartmentID:
		return m.AddedDepartmentID()
	case position.FieldQuota:
		return m.AddedQuota()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PositionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case position.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case position.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case position.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case position.FieldTenantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantID(v)
		return nil
	case position.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSortOrder(v)
		return nil
	case position.FieldOrganizationID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrganizationID(v)
		return nil
	case position.FieldDepartmentID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDepartmentID(v)
		return nil
	case position.FieldQuota:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuota(v)
		return nil
	}
	return fmt.Errorf("unknown Position numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PositionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(position.FieldCreatedAt) {
		fields = append(fields, position.FieldCreatedAt)
	}
	if m.FieldCleared(position.FieldUpdatedAt) {
		fields = append(fields, position.FieldUpdatedAt)
	}
	if m.FieldCleared(position.FieldDeletedAt) {
		fields = append(fields, position.FieldDeletedAt)
	}
	if m.FieldCleared(position.FieldCreatedBy) {
		fields = append(fields, position.FieldCreatedBy)
	}
	if m.FieldCleared(position.FieldUpdatedBy) {
		fields = append(fields, position.FieldUpdatedBy)
	}
	if m.FieldCleared(position.FieldDeletedBy) {
		fields = append(fields, position.FieldDeletedBy)
	}
	if m.FieldCleared(position.FieldRemark) {
		fields = append(fields, position.FieldRemark)
	}
	if m.FieldCleared(position.FieldTenantID) {
		fields = append(fields, position.FieldTenantID)
	}
	if m.FieldCleared(position.FieldName) {
		fields = append(fields, position.FieldName)
	}
	if m.FieldCleared(position.FieldCode) {
		fields = append(fields, position.FieldCode)
	}
	if m.FieldCleared(position.FieldParentID) {
		fields = append(fields, position.FieldParentID)
	}
	if m.FieldCleared(position.FieldSortOrder) {
		fields = append(fields, position.FieldSortOrder)
	}
	if m.FieldCleared(position.FieldStatus) {
		fields = append(fields, position.FieldStatus)
	}
	if m.FieldCleared(position.FieldDescription) {
		fields = append(fields, position.FieldDescription)
	}
	if m.FieldCleared(position.FieldQuota) {
		fields = append(fields, position.FieldQuota)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PositionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PositionMutation) ClearField(name string) error {
	switch name {
	case position.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case position.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case position.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case position.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case position.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case position.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case position.FieldRemark:
		m.ClearRemark()
		return nil
	case position.FieldTenantID:
		m.ClearTenantID()
		return nil
	case position.FieldName:
		m.ClearName()
		return nil
	case position.FieldCode:
		m.ClearCode()
		return nil
	case position.FieldParentID:
		m.ClearParentID()
		return nil
	case position.FieldSortOrder:
		m.ClearSortOrder()
		return nil
	case position.FieldStatus:
		m.ClearStatus()
		return nil
	case position.FieldDescription:
		m.ClearDescription()
		return nil
	case position.FieldQuota:
		m.ClearQuota()
		return nil
	}
	return fmt.Errorf("unknown Position nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PositionMutation) ResetField(name string) error {
	switch name {
	case position.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case position.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case position.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case position.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case position.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case position.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case position.FieldRemark:
		m.ResetRemark()
		return nil
	case position.FieldTenantID:
		m.ResetTenantID()
		return nil
	case position.FieldName:
		m.ResetName()
		return nil
	case position.FieldCode:
		m.ResetCode()
		return nil
	case position.FieldParentID:
		m.ResetParentID()
		return nil
	case position.FieldSortOrder:
		m.ResetSortOrder()
		return nil
	case position.FieldOrganizationID:
		m.ResetOrganizationID()
		return nil
	case position.FieldDepartmentID:
		m.ResetDepartmentID()
		return nil
	case position.FieldStatus:
		m.ResetStatus()
		return nil
	case position.FieldDescription:
		m.ResetDescription()
		return nil
	case position.FieldQuota:
		m.ResetQuota()
		return nil
	}
	return fmt.Errorf("unknown Position field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PositionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parent != nil {
		edges = append(edges, position.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, position.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PositionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case position.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case position.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PositionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, position.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PositionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case position.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PositionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparent {
		edges = append(edges, position.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, position.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PositionMutation) EdgeCleared(name string) bool {
	switch name {
	case position.EdgeParent:
		return m.clearedparent
	case position.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PositionMutation) ClearEdge(name string) error {
	switch name {
	case position.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Position unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PositionMutation) ResetEdge(name string) error {
	switch name {
	case position.EdgeParent:
		m.ResetParent()
		return nil
	case position.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown Position edge %s", name)
}

// PrivateMessageMutation represents an operation that mutates the PrivateMessage nodes in the graph.
type PrivateMessageMutation struct {
	config
	op             Op
	typ            string
	id             *uint32
	created_at     *time.Time
	updated_at     *time.Time
	deleted_at     *time.Time
	tenant_id      *uint32
	addtenant_id   *int32
	subject        *string
	content        *string
	status         *privatemessage.Status
	sender_id      *uint32
	addsender_id   *int32
	receiver_id    *uint32
	addreceiver_id *int32
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*PrivateMessage, error)
	predicates     []predicate.PrivateMessage
}

var _ ent.Mutation = (*PrivateMessageMutation)(nil)

// privatemessageOption allows management of the mutation configuration using functional options.
type privatemessageOption func(*PrivateMessageMutation)

// newPrivateMessageMutation creates new mutation for the PrivateMessage entity.
func newPrivateMessageMutation(c config, op Op, opts ...privatemessageOption) *PrivateMessageMutation {
	m := &PrivateMessageMutation{
		config:        c,
		op:            op,
		typ:           TypePrivateMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPrivateMessageID sets the ID field of the mutation.
func withPrivateMessageID(id uint32) privatemessageOption {
	return func(m *PrivateMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *PrivateMessage
		)
		m.oldValue = func(ctx context.Context) (*PrivateMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PrivateMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPrivateMessage sets the old PrivateMessage of the mutation.
func withPrivateMessage(node *PrivateMessage) privatemessageOption {
	return func(m *PrivateMessageMutation) {
		m.oldValue = func(context.Context) (*PrivateMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PrivateMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PrivateMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PrivateMessage entities.
func (m *PrivateMessageMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PrivateMessageMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PrivateMessageMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PrivateMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PrivateMessageMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PrivateMessageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PrivateMessage entity.
// If the PrivateMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateMessageMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *PrivateMessageMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[privatemessage.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *PrivateMessageMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[privatemessage.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PrivateMessageMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, privatemessage.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PrivateMessageMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PrivateMessageMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PrivateMessage entity.
// If the PrivateMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateMessageMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *PrivateMessageMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[privatemessage.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *PrivateMessageMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[privatemessage.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PrivateMessageMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, privatemessage.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PrivateMessageMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PrivateMessageMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the PrivateMessage entity.
// If the PrivateMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateMessageMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *PrivateMessageMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[privatemessage.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *PrivateMessageMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[privatemessage.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PrivateMessageMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, privatemessage.FieldDeletedAt)
}

// SetTenantID sets the "tenant_id" field.
func (m *PrivateMessageMutation) SetTenantID(u uint32) {
	m.tenant_id = &u
	m.addtenant_id = nil
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *PrivateMessageMutation) TenantID() (r uint32, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the PrivateMessage entity.
// If the PrivateMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateMessageMutation) OldTenantID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// AddTenantID adds u to the "tenant_id" field.
func (m *PrivateMessageMutation) AddTenantID(u int32) {
	if m.addtenant_id != nil {
		*m.addtenant_id += u
	} else {
		m.addtenant_id = &u
	}
}

// AddedTenantID returns the value that was added to the "tenant_id" field in this mutation.
func (m *PrivateMessageMutation) AddedTenantID() (r int32, exists bool) {
	v := m.addtenant_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTenantID clears the value of the "tenant_id" field.
func (m *PrivateMessageMutation) ClearTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	m.clearedFields[privatemessage.FieldTenantID] = struct{}{}
}

// TenantIDCleared returns if the "tenant_id" field was cleared in this mutation.
func (m *PrivateMessageMutation) TenantIDCleared() bool {
	_, ok := m.clearedFields[privatemessage.FieldTenantID]
	return ok
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *PrivateMessageMutation) ResetTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	delete(m.clearedFields, privatemessage.FieldTenantID)
}

// SetSubject sets the "subject" field.
func (m *PrivateMessageMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *PrivateMessageMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the PrivateMessage entity.
// If the PrivateMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateMessageMutation) OldSubject(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ClearSubject clears the value of the "subject" field.
func (m *PrivateMessageMutation) ClearSubject() {
	m.subject = nil
	m.clearedFields[privatemessage.FieldSubject] = struct{}{}
}

// SubjectCleared returns if the "subject" field was cleared in this mutation.
func (m *PrivateMessageMutation) SubjectCleared() bool {
	_, ok := m.clearedFields[privatemessage.FieldSubject]
	return ok
}

// ResetSubject resets all changes to the "subject" field.
func (m *PrivateMessageMutation) ResetSubject() {
	m.subject = nil
	delete(m.clearedFields, privatemessage.FieldSubject)
}

// SetContent sets the "content" field.
func (m *PrivateMessageMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *PrivateMessageMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the PrivateMessage entity.
// If the PrivateMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateMessageMutation) OldContent(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *PrivateMessageMutation) ClearContent() {
	m.content = nil
	m.clearedFields[privatemessage.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *PrivateMessageMutation) ContentCleared() bool {
	_, ok := m.clearedFields[privatemessage.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *PrivateMessageMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, privatemessage.FieldContent)
}

// SetStatus sets the "status" field.
func (m *PrivateMessageMutation) SetStatus(pr privatemessage.Status) {
	m.status = &pr
}

// Status returns the value of the "status" field in the mutation.
func (m *PrivateMessageMutation) Status() (r privatemessage.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the PrivateMessage entity.
// If the PrivateMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateMessageMutation) OldStatus(ctx context.Context) (v *privatemessage.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *PrivateMessageMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[privatemessage.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *PrivateMessageMutation) StatusCleared() bool {
	_, ok := m.clearedFields[privatemessage.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *PrivateMessageMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, privatemessage.FieldStatus)
}

// SetSenderID sets the "sender_id" field.
func (m *PrivateMessageMutation) SetSenderID(u uint32) {
	m.sender_id = &u
	m.addsender_id = nil
}

// SenderID returns the value of the "sender_id" field in the mutation.
func (m *PrivateMessageMutation) SenderID() (r uint32, exists bool) {
	v := m.sender_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSenderID returns the old "sender_id" field's value of the PrivateMessage entity.
// If the PrivateMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateMessageMutation) OldSenderID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSenderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSenderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSenderID: %w", err)
	}
	return oldValue.SenderID, nil
}

// AddSenderID adds u to the "sender_id" field.
func (m *PrivateMessageMutation) AddSenderID(u int32) {
	if m.addsender_id != nil {
		*m.addsender_id += u
	} else {
		m.addsender_id = &u
	}
}

// AddedSenderID returns the value that was added to the "sender_id" field in this mutation.
func (m *PrivateMessageMutation) AddedSenderID() (r int32, exists bool) {
	v := m.addsender_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearSenderID clears the value of the "sender_id" field.
func (m *PrivateMessageMutation) ClearSenderID() {
	m.sender_id = nil
	m.addsender_id = nil
	m.clearedFields[privatemessage.FieldSenderID] = struct{}{}
}

// SenderIDCleared returns if the "sender_id" field was cleared in this mutation.
func (m *PrivateMessageMutation) SenderIDCleared() bool {
	_, ok := m.clearedFields[privatemessage.FieldSenderID]
	return ok
}

// ResetSenderID resets all changes to the "sender_id" field.
func (m *PrivateMessageMutation) ResetSenderID() {
	m.sender_id = nil
	m.addsender_id = nil
	delete(m.clearedFields, privatemessage.FieldSenderID)
}

// SetReceiverID sets the "receiver_id" field.
func (m *PrivateMessageMutation) SetReceiverID(u uint32) {
	m.receiver_id = &u
	m.addreceiver_id = nil
}

// ReceiverID returns the value of the "receiver_id" field in the mutation.
func (m *PrivateMessageMutation) ReceiverID() (r uint32, exists bool) {
	v := m.receiver_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReceiverID returns the old "receiver_id" field's value of the PrivateMessage entity.
// If the PrivateMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateMessageMutation) OldReceiverID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReceiverID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReceiverID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReceiverID: %w", err)
	}
	return oldValue.ReceiverID, nil
}

// AddReceiverID adds u to the "receiver_id" field.
func (m *PrivateMessageMutation) AddReceiverID(u int32) {
	if m.addreceiver_id != nil {
		*m.addreceiver_id += u
	} else {
		m.addreceiver_id = &u
	}
}

// AddedReceiverID returns the value that was added to the "receiver_id" field in this mutation.
func (m *PrivateMessageMutation) AddedReceiverID() (r int32, exists bool) {
	v := m.addreceiver_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearReceiverID clears the value of the "receiver_id" field.
func (m *PrivateMessageMutation) ClearReceiverID() {
	m.receiver_id = nil
	m.addreceiver_id = nil
	m.clearedFields[privatemessage.FieldReceiverID] = struct{}{}
}

// ReceiverIDCleared returns if the "receiver_id" field was cleared in this mutation.
func (m *PrivateMessageMutation) ReceiverIDCleared() bool {
	_, ok := m.clearedFields[privatemessage.FieldReceiverID]
	return ok
}

// ResetReceiverID resets all changes to the "receiver_id" field.
func (m *PrivateMessageMutation) ResetReceiverID() {
	m.receiver_id = nil
	m.addreceiver_id = nil
	delete(m.clearedFields, privatemessage.FieldReceiverID)
}

// Where appends a list predicates to the PrivateMessageMutation builder.
func (m *PrivateMessageMutation) Where(ps ...predicate.PrivateMessage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PrivateMessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PrivateMessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PrivateMessage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PrivateMessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PrivateMessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PrivateMessage).
func (m *PrivateMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PrivateMessageMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, privatemessage.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, privatemessage.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, privatemessage.FieldDeletedAt)
	}
	if m.tenant_id != nil {
		fields = append(fields, privatemessage.FieldTenantID)
	}
	if m.subject != nil {
		fields = append(fields, privatemessage.FieldSubject)
	}
	if m.content != nil {
		fields = append(fields, privatemessage.FieldContent)
	}
	if m.status != nil {
		fields = append(fields, privatemessage.FieldStatus)
	}
	if m.sender_id != nil {
		fields = append(fields, privatemessage.FieldSenderID)
	}
	if m.receiver_id != nil {
		fields = append(fields, privatemessage.FieldReceiverID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PrivateMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case privatemessage.FieldCreatedAt:
		return m.CreatedAt()
	case privatemessage.FieldUpdatedAt:
		return m.UpdatedAt()
	case privatemessage.FieldDeletedAt:
		return m.DeletedAt()
	case privatemessage.FieldTenantID:
		return m.TenantID()
	case privatemessage.FieldSubject:
		return m.Subject()
	case privatemessage.FieldContent:
		return m.Content()
	case privatemessage.FieldStatus:
		return m.Status()
	case privatemessage.FieldSenderID:
		return m.SenderID()
	case privatemessage.FieldReceiverID:
		return m.ReceiverID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PrivateMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case privatemessage.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case privatemessage.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case privatemessage.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case privatemessage.FieldTenantID:
		return m.OldTenantID(ctx)
	case privatemessage.FieldSubject:
		return m.OldSubject(ctx)
	case privatemessage.FieldContent:
		return m.OldContent(ctx)
	case privatemessage.FieldStatus:
		return m.OldStatus(ctx)
	case privatemessage.FieldSenderID:
		return m.OldSenderID(ctx)
	case privatemessage.FieldReceiverID:
		return m.OldReceiverID(ctx)
	}
	return nil, fmt.Errorf("unknown PrivateMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrivateMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case privatemessage.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case privatemessage.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case privatemessage.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case privatemessage.FieldTenantID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case privatemessage.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case privatemessage.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case privatemessage.FieldStatus:
		v, ok := value.(privatemessage.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case privatemessage.FieldSenderID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSenderID(v)
		return nil
	case privatemessage.FieldReceiverID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReceiverID(v)
		return nil
	}
	return fmt.Errorf("unknown PrivateMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PrivateMessageMutation) AddedFields() []string {
	var fields []string
	if m.addtenant_id != nil {
		fields = append(fields, privatemessage.FieldTenantID)
	}
	if m.addsender_id != nil {
		fields = append(fields, privatemessage.FieldSenderID)
	}
	if m.addreceiver_id != nil {
		fields = append(fields, privatemessage.FieldReceiverID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PrivateMessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case privatemessage.FieldTenantID:
		return m.AddedTenantID()
	case privatemessage.FieldSenderID:
		return m.AddedSenderID()
	case privatemessage.FieldReceiverID:
		return m.AddedReceiverID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrivateMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case privatemessage.FieldTenantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantID(v)
		return nil
	case privatemessage.FieldSenderID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSenderID(v)
		return nil
	case privatemessage.FieldReceiverID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReceiverID(v)
		return nil
	}
	return fmt.Errorf("unknown PrivateMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PrivateMessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(privatemessage.FieldCreatedAt) {
		fields = append(fields, privatemessage.FieldCreatedAt)
	}
	if m.FieldCleared(privatemessage.FieldUpdatedAt) {
		fields = append(fields, privatemessage.FieldUpdatedAt)
	}
	if m.FieldCleared(privatemessage.FieldDeletedAt) {
		fields = append(fields, privatemessage.FieldDeletedAt)
	}
	if m.FieldCleared(privatemessage.FieldTenantID) {
		fields = append(fields, privatemessage.FieldTenantID)
	}
	if m.FieldCleared(privatemessage.FieldSubject) {
		fields = append(fields, privatemessage.FieldSubject)
	}
	if m.FieldCleared(privatemessage.FieldContent) {
		fields = append(fields, privatemessage.FieldContent)
	}
	if m.FieldCleared(privatemessage.FieldStatus) {
		fields = append(fields, privatemessage.FieldStatus)
	}
	if m.FieldCleared(privatemessage.FieldSenderID) {
		fields = append(fields, privatemessage.FieldSenderID)
	}
	if m.FieldCleared(privatemessage.FieldReceiverID) {
		fields = append(fields, privatemessage.FieldReceiverID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PrivateMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PrivateMessageMutation) ClearField(name string) error {
	switch name {
	case privatemessage.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case privatemessage.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case privatemessage.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case privatemessage.FieldTenantID:
		m.ClearTenantID()
		return nil
	case privatemessage.FieldSubject:
		m.ClearSubject()
		return nil
	case privatemessage.FieldContent:
		m.ClearContent()
		return nil
	case privatemessage.FieldStatus:
		m.ClearStatus()
		return nil
	case privatemessage.FieldSenderID:
		m.ClearSenderID()
		return nil
	case privatemessage.FieldReceiverID:
		m.ClearReceiverID()
		return nil
	}
	return fmt.Errorf("unknown PrivateMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PrivateMessageMutation) ResetField(name string) error {
	switch name {
	case privatemessage.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case privatemessage.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case privatemessage.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case privatemessage.FieldTenantID:
		m.ResetTenantID()
		return nil
	case privatemessage.FieldSubject:
		m.ResetSubject()
		return nil
	case privatemessage.FieldContent:
		m.ResetContent()
		return nil
	case privatemessage.FieldStatus:
		m.ResetStatus()
		return nil
	case privatemessage.FieldSenderID:
		m.ResetSenderID()
		return nil
	case privatemessage.FieldReceiverID:
		m.ResetReceiverID()
		return nil
	}
	return fmt.Errorf("unknown PrivateMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PrivateMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PrivateMessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PrivateMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PrivateMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PrivateMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PrivateMessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PrivateMessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PrivateMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PrivateMessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PrivateMessage edge %s", name)
}

// RoleMutation represents an operation that mutates the Role nodes in the graph.
type RoleMutation struct {
	config
	op              Op
	typ             string
	id              *uint32
	created_at      *time.Time
	updated_at      *time.Time
	deleted_at      *time.Time
	created_by      *uint32
	addcreated_by   *int32
	updated_by      *uint32
	addupdated_by   *int32
	deleted_by      *uint32
	adddeleted_by   *int32
	remark          *string
	tenant_id       *uint32
	addtenant_id    *int32
	name            *string
	code            *string
	sort_order      *int32
	addsort_order   *int32
	menus           *[]uint32
	appendmenus     []uint32
	apis            *[]uint32
	appendapis      []uint32
	data_scope      *role.DataScope
	status          *role.Status
	clearedFields   map[string]struct{}
	parent          *uint32
	clearedparent   bool
	children        map[uint32]struct{}
	removedchildren map[uint32]struct{}
	clearedchildren bool
	done            bool
	oldValue        func(context.Context) (*Role, error)
	predicates      []predicate.Role
}

var _ ent.Mutation = (*RoleMutation)(nil)

// roleOption allows management of the mutation configuration using functional options.
type roleOption func(*RoleMutation)

// newRoleMutation creates new mutation for the Role entity.
func newRoleMutation(c config, op Op, opts ...roleOption) *RoleMutation {
	m := &RoleMutation{
		config:        c,
		op:            op,
		typ:           TypeRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoleID sets the ID field of the mutation.
func withRoleID(id uint32) roleOption {
	return func(m *RoleMutation) {
		var (
			err   error
			once  sync.Once
			value *Role
		)
		m.oldValue = func(ctx context.Context) (*Role, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Role.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRole sets the old Role of the mutation.
func withRole(node *Role) roleOption {
	return func(m *RoleMutation) {
		m.oldValue = func(context.Context) (*Role, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Role entities.
func (m *RoleMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoleMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoleMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Role.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RoleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RoleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *RoleMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[role.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *RoleMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[role.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RoleMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, role.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RoleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RoleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *RoleMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[role.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *RoleMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[role.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RoleMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, role.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RoleMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RoleMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *RoleMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[role.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *RoleMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[role.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RoleMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, role.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *RoleMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *RoleMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *RoleMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *RoleMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *RoleMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[role.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *RoleMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[role.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *RoleMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, role.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *RoleMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *RoleMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *RoleMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *RoleMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *RoleMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[role.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *RoleMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[role.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *RoleMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, role.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *RoleMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *RoleMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *RoleMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *RoleMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *RoleMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[role.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *RoleMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[role.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *RoleMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, role.FieldDeletedBy)
}

// SetRemark sets the "remark" field.
func (m *RoleMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *RoleMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *RoleMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[role.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *RoleMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[role.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *RoleMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, role.FieldRemark)
}

// SetTenantID sets the "tenant_id" field.
func (m *RoleMutation) SetTenantID(u uint32) {
	m.tenant_id = &u
	m.addtenant_id = nil
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *RoleMutation) TenantID() (r uint32, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldTenantID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// AddTenantID adds u to the "tenant_id" field.
func (m *RoleMutation) AddTenantID(u int32) {
	if m.addtenant_id != nil {
		*m.addtenant_id += u
	} else {
		m.addtenant_id = &u
	}
}

// AddedTenantID returns the value that was added to the "tenant_id" field in this mutation.
func (m *RoleMutation) AddedTenantID() (r int32, exists bool) {
	v := m.addtenant_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTenantID clears the value of the "tenant_id" field.
func (m *RoleMutation) ClearTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	m.clearedFields[role.FieldTenantID] = struct{}{}
}

// TenantIDCleared returns if the "tenant_id" field was cleared in this mutation.
func (m *RoleMutation) TenantIDCleared() bool {
	_, ok := m.clearedFields[role.FieldTenantID]
	return ok
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *RoleMutation) ResetTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	delete(m.clearedFields, role.FieldTenantID)
}

// SetName sets the "name" field.
func (m *RoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *RoleMutation) ClearName() {
	m.name = nil
	m.clearedFields[role.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *RoleMutation) NameCleared() bool {
	_, ok := m.clearedFields[role.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *RoleMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, role.FieldName)
}

// SetCode sets the "code" field.
func (m *RoleMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *RoleMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ClearCode clears the value of the "code" field.
func (m *RoleMutation) ClearCode() {
	m.code = nil
	m.clearedFields[role.FieldCode] = struct{}{}
}

// CodeCleared returns if the "code" field was cleared in this mutation.
func (m *RoleMutation) CodeCleared() bool {
	_, ok := m.clearedFields[role.FieldCode]
	return ok
}

// ResetCode resets all changes to the "code" field.
func (m *RoleMutation) ResetCode() {
	m.code = nil
	delete(m.clearedFields, role.FieldCode)
}

// SetParentID sets the "parent_id" field.
func (m *RoleMutation) SetParentID(u uint32) {
	m.parent = &u
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *RoleMutation) ParentID() (r uint32, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldParentID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *RoleMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[role.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *RoleMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[role.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *RoleMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, role.FieldParentID)
}

// SetSortOrder sets the "sort_order" field.
func (m *RoleMutation) SetSortOrder(i int32) {
	m.sort_order = &i
	m.addsort_order = nil
}

// SortOrder returns the value of the "sort_order" field in the mutation.
func (m *RoleMutation) SortOrder() (r int32, exists bool) {
	v := m.sort_order
	if v == nil {
		return
	}
	return *v, true
}

// OldSortOrder returns the old "sort_order" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldSortOrder(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSortOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSortOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSortOrder: %w", err)
	}
	return oldValue.SortOrder, nil
}

// AddSortOrder adds i to the "sort_order" field.
func (m *RoleMutation) AddSortOrder(i int32) {
	if m.addsort_order != nil {
		*m.addsort_order += i
	} else {
		m.addsort_order = &i
	}
}

// AddedSortOrder returns the value that was added to the "sort_order" field in this mutation.
func (m *RoleMutation) AddedSortOrder() (r int32, exists bool) {
	v := m.addsort_order
	if v == nil {
		return
	}
	return *v, true
}

// ClearSortOrder clears the value of the "sort_order" field.
func (m *RoleMutation) ClearSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	m.clearedFields[role.FieldSortOrder] = struct{}{}
}

// SortOrderCleared returns if the "sort_order" field was cleared in this mutation.
func (m *RoleMutation) SortOrderCleared() bool {
	_, ok := m.clearedFields[role.FieldSortOrder]
	return ok
}

// ResetSortOrder resets all changes to the "sort_order" field.
func (m *RoleMutation) ResetSortOrder() {
	m.sort_order = nil
	m.addsort_order = nil
	delete(m.clearedFields, role.FieldSortOrder)
}

// SetMenus sets the "menus" field.
func (m *RoleMutation) SetMenus(u []uint32) {
	m.menus = &u
	m.appendmenus = nil
}

// Menus returns the value of the "menus" field in the mutation.
func (m *RoleMutation) Menus() (r []uint32, exists bool) {
	v := m.menus
	if v == nil {
		return
	}
	return *v, true
}

// OldMenus returns the old "menus" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldMenus(ctx context.Context) (v []uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMenus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMenus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenus: %w", err)
	}
	return oldValue.Menus, nil
}

// AppendMenus adds u to the "menus" field.
func (m *RoleMutation) AppendMenus(u []uint32) {
	m.appendmenus = append(m.appendmenus, u...)
}

// AppendedMenus returns the list of values that were appended to the "menus" field in this mutation.
func (m *RoleMutation) AppendedMenus() ([]uint32, bool) {
	if len(m.appendmenus) == 0 {
		return nil, false
	}
	return m.appendmenus, true
}

// ClearMenus clears the value of the "menus" field.
func (m *RoleMutation) ClearMenus() {
	m.menus = nil
	m.appendmenus = nil
	m.clearedFields[role.FieldMenus] = struct{}{}
}

// MenusCleared returns if the "menus" field was cleared in this mutation.
func (m *RoleMutation) MenusCleared() bool {
	_, ok := m.clearedFields[role.FieldMenus]
	return ok
}

// ResetMenus resets all changes to the "menus" field.
func (m *RoleMutation) ResetMenus() {
	m.menus = nil
	m.appendmenus = nil
	delete(m.clearedFields, role.FieldMenus)
}

// SetApis sets the "apis" field.
func (m *RoleMutation) SetApis(u []uint32) {
	m.apis = &u
	m.appendapis = nil
}

// Apis returns the value of the "apis" field in the mutation.
func (m *RoleMutation) Apis() (r []uint32, exists bool) {
	v := m.apis
	if v == nil {
		return
	}
	return *v, true
}

// OldApis returns the old "apis" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldApis(ctx context.Context) (v []uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApis is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApis requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApis: %w", err)
	}
	return oldValue.Apis, nil
}

// AppendApis adds u to the "apis" field.
func (m *RoleMutation) AppendApis(u []uint32) {
	m.appendapis = append(m.appendapis, u...)
}

// AppendedApis returns the list of values that were appended to the "apis" field in this mutation.
func (m *RoleMutation) AppendedApis() ([]uint32, bool) {
	if len(m.appendapis) == 0 {
		return nil, false
	}
	return m.appendapis, true
}

// ClearApis clears the value of the "apis" field.
func (m *RoleMutation) ClearApis() {
	m.apis = nil
	m.appendapis = nil
	m.clearedFields[role.FieldApis] = struct{}{}
}

// ApisCleared returns if the "apis" field was cleared in this mutation.
func (m *RoleMutation) ApisCleared() bool {
	_, ok := m.clearedFields[role.FieldApis]
	return ok
}

// ResetApis resets all changes to the "apis" field.
func (m *RoleMutation) ResetApis() {
	m.apis = nil
	m.appendapis = nil
	delete(m.clearedFields, role.FieldApis)
}

// SetDataScope sets the "data_scope" field.
func (m *RoleMutation) SetDataScope(rs role.DataScope) {
	m.data_scope = &rs
}

// DataScope returns the value of the "data_scope" field in the mutation.
func (m *RoleMutation) DataScope() (r role.DataScope, exists bool) {
	v := m.data_scope
	if v == nil {
		return
	}
	return *v, true
}

// OldDataScope returns the old "data_scope" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldDataScope(ctx context.Context) (v *role.DataScope, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataScope is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataScope: %w", err)
	}
	return oldValue.DataScope, nil
}

// ClearDataScope clears the value of the "data_scope" field.
func (m *RoleMutation) ClearDataScope() {
	m.data_scope = nil
	m.clearedFields[role.FieldDataScope] = struct{}{}
}

// DataScopeCleared returns if the "data_scope" field was cleared in this mutation.
func (m *RoleMutation) DataScopeCleared() bool {
	_, ok := m.clearedFields[role.FieldDataScope]
	return ok
}

// ResetDataScope resets all changes to the "data_scope" field.
func (m *RoleMutation) ResetDataScope() {
	m.data_scope = nil
	delete(m.clearedFields, role.FieldDataScope)
}

// SetStatus sets the "status" field.
func (m *RoleMutation) SetStatus(r role.Status) {
	m.status = &r
}

// Status returns the value of the "status" field in the mutation.
func (m *RoleMutation) Status() (r role.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldStatus(ctx context.Context) (v *role.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *RoleMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[role.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *RoleMutation) StatusCleared() bool {
	_, ok := m.clearedFields[role.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *RoleMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, role.FieldStatus)
}

// ClearParent clears the "parent" edge to the Role entity.
func (m *RoleMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[role.FieldParentID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the Role entity was cleared.
func (m *RoleMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *RoleMutation) ParentIDs() (ids []uint32) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *RoleMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Role entity by ids.
func (m *RoleMutation) AddChildIDs(ids ...uint32) {
	if m.children == nil {
		m.children = make(map[uint32]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Role entity.
func (m *RoleMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Role entity was cleared.
func (m *RoleMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Role entity by IDs.
func (m *RoleMutation) RemoveChildIDs(ids ...uint32) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[uint32]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Role entity.
func (m *RoleMutation) RemovedChildrenIDs() (ids []uint32) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *RoleMutation) ChildrenIDs() (ids []uint32) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *RoleMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Where appends a list predicates to the RoleMutation builder.
func (m *RoleMutation) Where(ps ...predicate.Role) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Role, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Role).
func (m *RoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoleMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.created_at != nil {
		fields = append(fields, role.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, role.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, role.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, role.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, role.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, role.FieldDeletedBy)
	}
	if m.remark != nil {
		fields = append(fields, role.FieldRemark)
	}
	if m.tenant_id != nil {
		fields = append(fields, role.FieldTenantID)
	}
	if m.name != nil {
		fields = append(fields, role.FieldName)
	}
	if m.code != nil {
		fields = append(fields, role.FieldCode)
	}
	if m.parent != nil {
		fields = append(fields, role.FieldParentID)
	}
	if m.sort_order != nil {
		fields = append(fields, role.FieldSortOrder)
	}
	if m.menus != nil {
		fields = append(fields, role.FieldMenus)
	}
	if m.apis != nil {
		fields = append(fields, role.FieldApis)
	}
	if m.data_scope != nil {
		fields = append(fields, role.FieldDataScope)
	}
	if m.status != nil {
		fields = append(fields, role.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case role.FieldCreatedAt:
		return m.CreatedAt()
	case role.FieldUpdatedAt:
		return m.UpdatedAt()
	case role.FieldDeletedAt:
		return m.DeletedAt()
	case role.FieldCreatedBy:
		return m.CreatedBy()
	case role.FieldUpdatedBy:
		return m.UpdatedBy()
	case role.FieldDeletedBy:
		return m.DeletedBy()
	case role.FieldRemark:
		return m.Remark()
	case role.FieldTenantID:
		return m.TenantID()
	case role.FieldName:
		return m.Name()
	case role.FieldCode:
		return m.Code()
	case role.FieldParentID:
		return m.ParentID()
	case role.FieldSortOrder:
		return m.SortOrder()
	case role.FieldMenus:
		return m.Menus()
	case role.FieldApis:
		return m.Apis()
	case role.FieldDataScope:
		return m.DataScope()
	case role.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case role.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case role.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case role.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case role.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case role.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case role.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case role.FieldRemark:
		return m.OldRemark(ctx)
	case role.FieldTenantID:
		return m.OldTenantID(ctx)
	case role.FieldName:
		return m.OldName(ctx)
	case role.FieldCode:
		return m.OldCode(ctx)
	case role.FieldParentID:
		return m.OldParentID(ctx)
	case role.FieldSortOrder:
		return m.OldSortOrder(ctx)
	case role.FieldMenus:
		return m.OldMenus(ctx)
	case role.FieldApis:
		return m.OldApis(ctx)
	case role.FieldDataScope:
		return m.OldDataScope(ctx)
	case role.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Role field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case role.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case role.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case role.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case role.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case role.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case role.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case role.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case role.FieldTenantID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case role.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case role.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case role.FieldParentID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case role.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSortOrder(v)
		return nil
	case role.FieldMenus:
		v, ok := value.([]uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenus(v)
		return nil
	case role.FieldApis:
		v, ok := value.([]uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApis(v)
		return nil
	case role.FieldDataScope:
		v, ok := value.(role.DataScope)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataScope(v)
		return nil
	case role.FieldStatus:
		v, ok := value.(role.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoleMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, role.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, role.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, role.FieldDeletedBy)
	}
	if m.addtenant_id != nil {
		fields = append(fields, role.FieldTenantID)
	}
	if m.addsort_order != nil {
		fields = append(fields, role.FieldSortOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case role.FieldCreatedBy:
		return m.AddedCreatedBy()
	case role.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case role.FieldDeletedBy:
		return m.AddedDeletedBy()
	case role.FieldTenantID:
		return m.AddedTenantID()
	case role.FieldSortOrder:
		return m.AddedSortOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case role.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case role.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case role.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case role.FieldTenantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantID(v)
		return nil
	case role.FieldSortOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSortOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Role numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(role.FieldCreatedAt) {
		fields = append(fields, role.FieldCreatedAt)
	}
	if m.FieldCleared(role.FieldUpdatedAt) {
		fields = append(fields, role.FieldUpdatedAt)
	}
	if m.FieldCleared(role.FieldDeletedAt) {
		fields = append(fields, role.FieldDeletedAt)
	}
	if m.FieldCleared(role.FieldCreatedBy) {
		fields = append(fields, role.FieldCreatedBy)
	}
	if m.FieldCleared(role.FieldUpdatedBy) {
		fields = append(fields, role.FieldUpdatedBy)
	}
	if m.FieldCleared(role.FieldDeletedBy) {
		fields = append(fields, role.FieldDeletedBy)
	}
	if m.FieldCleared(role.FieldRemark) {
		fields = append(fields, role.FieldRemark)
	}
	if m.FieldCleared(role.FieldTenantID) {
		fields = append(fields, role.FieldTenantID)
	}
	if m.FieldCleared(role.FieldName) {
		fields = append(fields, role.FieldName)
	}
	if m.FieldCleared(role.FieldCode) {
		fields = append(fields, role.FieldCode)
	}
	if m.FieldCleared(role.FieldParentID) {
		fields = append(fields, role.FieldParentID)
	}
	if m.FieldCleared(role.FieldSortOrder) {
		fields = append(fields, role.FieldSortOrder)
	}
	if m.FieldCleared(role.FieldMenus) {
		fields = append(fields, role.FieldMenus)
	}
	if m.FieldCleared(role.FieldApis) {
		fields = append(fields, role.FieldApis)
	}
	if m.FieldCleared(role.FieldDataScope) {
		fields = append(fields, role.FieldDataScope)
	}
	if m.FieldCleared(role.FieldStatus) {
		fields = append(fields, role.FieldStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleMutation) ClearField(name string) error {
	switch name {
	case role.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case role.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case role.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case role.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case role.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case role.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case role.FieldRemark:
		m.ClearRemark()
		return nil
	case role.FieldTenantID:
		m.ClearTenantID()
		return nil
	case role.FieldName:
		m.ClearName()
		return nil
	case role.FieldCode:
		m.ClearCode()
		return nil
	case role.FieldParentID:
		m.ClearParentID()
		return nil
	case role.FieldSortOrder:
		m.ClearSortOrder()
		return nil
	case role.FieldMenus:
		m.ClearMenus()
		return nil
	case role.FieldApis:
		m.ClearApis()
		return nil
	case role.FieldDataScope:
		m.ClearDataScope()
		return nil
	case role.FieldStatus:
		m.ClearStatus()
		return nil
	}
	return fmt.Errorf("unknown Role nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoleMutation) ResetField(name string) error {
	switch name {
	case role.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case role.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case role.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case role.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case role.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case role.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case role.FieldRemark:
		m.ResetRemark()
		return nil
	case role.FieldTenantID:
		m.ResetTenantID()
		return nil
	case role.FieldName:
		m.ResetName()
		return nil
	case role.FieldCode:
		m.ResetCode()
		return nil
	case role.FieldParentID:
		m.ResetParentID()
		return nil
	case role.FieldSortOrder:
		m.ResetSortOrder()
		return nil
	case role.FieldMenus:
		m.ResetMenus()
		return nil
	case role.FieldApis:
		m.ResetApis()
		return nil
	case role.FieldDataScope:
		m.ResetDataScope()
		return nil
	case role.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parent != nil {
		edges = append(edges, role.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, role.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case role.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, role.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparent {
		edges = append(edges, role.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, role.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoleMutation) EdgeCleared(name string) bool {
	switch name {
	case role.EdgeParent:
		return m.clearedparent
	case role.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoleMutation) ClearEdge(name string) error {
	switch name {
	case role.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Role unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoleMutation) ResetEdge(name string) error {
	switch name {
	case role.EdgeParent:
		m.ResetParent()
		return nil
	case role.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown Role edge %s", name)
}

// RoleApiMutation represents an operation that mutates the RoleApi nodes in the graph.
type RoleApiMutation struct {
	config
	op            Op
	typ           string
	id            *uint32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	created_by    *uint32
	addcreated_by *int32
	updated_by    *uint32
	addupdated_by *int32
	deleted_by    *uint32
	adddeleted_by *int32
	role_id       *uint32
	addrole_id    *int32
	api_id        *uint32
	addapi_id     *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RoleApi, error)
	predicates    []predicate.RoleApi
}

var _ ent.Mutation = (*RoleApiMutation)(nil)

// roleapiOption allows management of the mutation configuration using functional options.
type roleapiOption func(*RoleApiMutation)

// newRoleApiMutation creates new mutation for the RoleApi entity.
func newRoleApiMutation(c config, op Op, opts ...roleapiOption) *RoleApiMutation {
	m := &RoleApiMutation{
		config:        c,
		op:            op,
		typ:           TypeRoleApi,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoleApiID sets the ID field of the mutation.
func withRoleApiID(id uint32) roleapiOption {
	return func(m *RoleApiMutation) {
		var (
			err   error
			once  sync.Once
			value *RoleApi
		)
		m.oldValue = func(ctx context.Context) (*RoleApi, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoleApi.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoleApi sets the old RoleApi of the mutation.
func withRoleApi(node *RoleApi) roleapiOption {
	return func(m *RoleApiMutation) {
		m.oldValue = func(context.Context) (*RoleApi, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleApiMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleApiMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RoleApi entities.
func (m *RoleApiMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoleApiMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoleApiMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RoleApi.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RoleApiMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RoleApiMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RoleApi entity.
// If the RoleApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleApiMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *RoleApiMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[roleapi.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *RoleApiMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[roleapi.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RoleApiMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, roleapi.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RoleApiMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RoleApiMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the RoleApi entity.
// If the RoleApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleApiMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *RoleApiMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[roleapi.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *RoleApiMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[roleapi.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RoleApiMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, roleapi.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RoleApiMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RoleApiMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the RoleApi entity.
// If the RoleApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleApiMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *RoleApiMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[roleapi.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *RoleApiMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[roleapi.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RoleApiMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, roleapi.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *RoleApiMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *RoleApiMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the RoleApi entity.
// If the RoleApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleApiMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *RoleApiMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *RoleApiMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *RoleApiMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[roleapi.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *RoleApiMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[roleapi.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *RoleApiMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, roleapi.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *RoleApiMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *RoleApiMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the RoleApi entity.
// If the RoleApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleApiMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *RoleApiMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *RoleApiMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *RoleApiMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[roleapi.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *RoleApiMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[roleapi.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *RoleApiMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, roleapi.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *RoleApiMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *RoleApiMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the RoleApi entity.
// If the RoleApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleApiMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *RoleApiMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *RoleApiMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *RoleApiMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[roleapi.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *RoleApiMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[roleapi.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *RoleApiMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, roleapi.FieldDeletedBy)
}

// SetRoleID sets the "role_id" field.
func (m *RoleApiMutation) SetRoleID(u uint32) {
	m.role_id = &u
	m.addrole_id = nil
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *RoleApiMutation) RoleID() (r uint32, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the RoleApi entity.
// If the RoleApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleApiMutation) OldRoleID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// AddRoleID adds u to the "role_id" field.
func (m *RoleApiMutation) AddRoleID(u int32) {
	if m.addrole_id != nil {
		*m.addrole_id += u
	} else {
		m.addrole_id = &u
	}
}

// AddedRoleID returns the value that was added to the "role_id" field in this mutation.
func (m *RoleApiMutation) AddedRoleID() (r int32, exists bool) {
	v := m.addrole_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *RoleApiMutation) ResetRoleID() {
	m.role_id = nil
	m.addrole_id = nil
}

// SetAPIID sets the "api_id" field.
func (m *RoleApiMutation) SetAPIID(u uint32) {
	m.api_id = &u
	m.addapi_id = nil
}

// APIID returns the value of the "api_id" field in the mutation.
func (m *RoleApiMutation) APIID() (r uint32, exists bool) {
	v := m.api_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAPIID returns the old "api_id" field's value of the RoleApi entity.
// If the RoleApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleApiMutation) OldAPIID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAPIID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAPIID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAPIID: %w", err)
	}
	return oldValue.APIID, nil
}

// AddAPIID adds u to the "api_id" field.
func (m *RoleApiMutation) AddAPIID(u int32) {
	if m.addapi_id != nil {
		*m.addapi_id += u
	} else {
		m.addapi_id = &u
	}
}

// AddedAPIID returns the value that was added to the "api_id" field in this mutation.
func (m *RoleApiMutation) AddedAPIID() (r int32, exists bool) {
	v := m.addapi_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetAPIID resets all changes to the "api_id" field.
func (m *RoleApiMutation) ResetAPIID() {
	m.api_id = nil
	m.addapi_id = nil
}

// Where appends a list predicates to the RoleApiMutation builder.
func (m *RoleApiMutation) Where(ps ...predicate.RoleApi) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoleApiMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoleApiMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RoleApi, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoleApiMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoleApiMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RoleApi).
func (m *RoleApiMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoleApiMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, roleapi.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, roleapi.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, roleapi.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, roleapi.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, roleapi.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, roleapi.FieldDeletedBy)
	}
	if m.role_id != nil {
		fields = append(fields, roleapi.FieldRoleID)
	}
	if m.api_id != nil {
		fields = append(fields, roleapi.FieldAPIID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoleApiMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roleapi.FieldCreatedAt:
		return m.CreatedAt()
	case roleapi.FieldUpdatedAt:
		return m.UpdatedAt()
	case roleapi.FieldDeletedAt:
		return m.DeletedAt()
	case roleapi.FieldCreatedBy:
		return m.CreatedBy()
	case roleapi.FieldUpdatedBy:
		return m.UpdatedBy()
	case roleapi.FieldDeletedBy:
		return m.DeletedBy()
	case roleapi.FieldRoleID:
		return m.RoleID()
	case roleapi.FieldAPIID:
		return m.APIID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoleApiMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roleapi.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case roleapi.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case roleapi.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case roleapi.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case roleapi.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case roleapi.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case roleapi.FieldRoleID:
		return m.OldRoleID(ctx)
	case roleapi.FieldAPIID:
		return m.OldAPIID(ctx)
	}
	return nil, fmt.Errorf("unknown RoleApi field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleApiMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roleapi.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case roleapi.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case roleapi.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case roleapi.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case roleapi.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case roleapi.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case roleapi.FieldRoleID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	case roleapi.FieldAPIID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAPIID(v)
		return nil
	}
	return fmt.Errorf("unknown RoleApi field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoleApiMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, roleapi.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, roleapi.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, roleapi.FieldDeletedBy)
	}
	if m.addrole_id != nil {
		fields = append(fields, roleapi.FieldRoleID)
	}
	if m.addapi_id != nil {
		fields = append(fields, roleapi.FieldAPIID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoleApiMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case roleapi.FieldCreatedBy:
		return m.AddedCreatedBy()
	case roleapi.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case roleapi.FieldDeletedBy:
		return m.AddedDeletedBy()
	case roleapi.FieldRoleID:
		return m.AddedRoleID()
	case roleapi.FieldAPIID:
		return m.AddedAPIID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleApiMutation) AddField(name string, value ent.Value) error {
	switch name {
	case roleapi.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case roleapi.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case roleapi.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case roleapi.FieldRoleID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoleID(v)
		return nil
	case roleapi.FieldAPIID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAPIID(v)
		return nil
	}
	return fmt.Errorf("unknown RoleApi numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoleApiMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(roleapi.FieldCreatedAt) {
		fields = append(fields, roleapi.FieldCreatedAt)
	}
	if m.FieldCleared(roleapi.FieldUpdatedAt) {
		fields = append(fields, roleapi.FieldUpdatedAt)
	}
	if m.FieldCleared(roleapi.FieldDeletedAt) {
		fields = append(fields, roleapi.FieldDeletedAt)
	}
	if m.FieldCleared(roleapi.FieldCreatedBy) {
		fields = append(fields, roleapi.FieldCreatedBy)
	}
	if m.FieldCleared(roleapi.FieldUpdatedBy) {
		fields = append(fields, roleapi.FieldUpdatedBy)
	}
	if m.FieldCleared(roleapi.FieldDeletedBy) {
		fields = append(fields, roleapi.FieldDeletedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoleApiMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleApiMutation) ClearField(name string) error {
	switch name {
	case roleapi.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case roleapi.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case roleapi.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case roleapi.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case roleapi.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case roleapi.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	}
	return fmt.Errorf("unknown RoleApi nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoleApiMutation) ResetField(name string) error {
	switch name {
	case roleapi.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case roleapi.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case roleapi.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case roleapi.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case roleapi.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case roleapi.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case roleapi.FieldRoleID:
		m.ResetRoleID()
		return nil
	case roleapi.FieldAPIID:
		m.ResetAPIID()
		return nil
	}
	return fmt.Errorf("unknown RoleApi field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoleApiMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoleApiMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoleApiMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoleApiMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoleApiMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoleApiMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoleApiMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RoleApi unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoleApiMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RoleApi edge %s", name)
}

// RoleDeptMutation represents an operation that mutates the RoleDept nodes in the graph.
type RoleDeptMutation struct {
	config
	op            Op
	typ           string
	id            *uint32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	created_by    *uint32
	addcreated_by *int32
	updated_by    *uint32
	addupdated_by *int32
	deleted_by    *uint32
	adddeleted_by *int32
	role_id       *uint32
	addrole_id    *int32
	dept_id       *uint32
	adddept_id    *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RoleDept, error)
	predicates    []predicate.RoleDept
}

var _ ent.Mutation = (*RoleDeptMutation)(nil)

// roledeptOption allows management of the mutation configuration using functional options.
type roledeptOption func(*RoleDeptMutation)

// newRoleDeptMutation creates new mutation for the RoleDept entity.
func newRoleDeptMutation(c config, op Op, opts ...roledeptOption) *RoleDeptMutation {
	m := &RoleDeptMutation{
		config:        c,
		op:            op,
		typ:           TypeRoleDept,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoleDeptID sets the ID field of the mutation.
func withRoleDeptID(id uint32) roledeptOption {
	return func(m *RoleDeptMutation) {
		var (
			err   error
			once  sync.Once
			value *RoleDept
		)
		m.oldValue = func(ctx context.Context) (*RoleDept, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoleDept.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoleDept sets the old RoleDept of the mutation.
func withRoleDept(node *RoleDept) roledeptOption {
	return func(m *RoleDeptMutation) {
		m.oldValue = func(context.Context) (*RoleDept, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleDeptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleDeptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RoleDept entities.
func (m *RoleDeptMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoleDeptMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoleDeptMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RoleDept.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RoleDeptMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RoleDeptMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RoleDept entity.
// If the RoleDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleDeptMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *RoleDeptMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[roledept.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *RoleDeptMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[roledept.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RoleDeptMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, roledept.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RoleDeptMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RoleDeptMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the RoleDept entity.
// If the RoleDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleDeptMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *RoleDeptMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[roledept.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *RoleDeptMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[roledept.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RoleDeptMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, roledept.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RoleDeptMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RoleDeptMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the RoleDept entity.
// If the RoleDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleDeptMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *RoleDeptMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[roledept.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *RoleDeptMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[roledept.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RoleDeptMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, roledept.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *RoleDeptMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *RoleDeptMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the RoleDept entity.
// If the RoleDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleDeptMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *RoleDeptMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *RoleDeptMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *RoleDeptMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[roledept.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *RoleDeptMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[roledept.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *RoleDeptMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, roledept.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *RoleDeptMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *RoleDeptMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the RoleDept entity.
// If the RoleDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleDeptMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *RoleDeptMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *RoleDeptMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *RoleDeptMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[roledept.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *RoleDeptMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[roledept.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *RoleDeptMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, roledept.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *RoleDeptMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *RoleDeptMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the RoleDept entity.
// If the RoleDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleDeptMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *RoleDeptMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *RoleDeptMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *RoleDeptMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[roledept.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *RoleDeptMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[roledept.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *RoleDeptMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, roledept.FieldDeletedBy)
}

// SetRoleID sets the "role_id" field.
func (m *RoleDeptMutation) SetRoleID(u uint32) {
	m.role_id = &u
	m.addrole_id = nil
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *RoleDeptMutation) RoleID() (r uint32, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the RoleDept entity.
// If the RoleDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleDeptMutation) OldRoleID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// AddRoleID adds u to the "role_id" field.
func (m *RoleDeptMutation) AddRoleID(u int32) {
	if m.addrole_id != nil {
		*m.addrole_id += u
	} else {
		m.addrole_id = &u
	}
}

// AddedRoleID returns the value that was added to the "role_id" field in this mutation.
func (m *RoleDeptMutation) AddedRoleID() (r int32, exists bool) {
	v := m.addrole_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *RoleDeptMutation) ResetRoleID() {
	m.role_id = nil
	m.addrole_id = nil
}

// SetDeptID sets the "dept_id" field.
func (m *RoleDeptMutation) SetDeptID(u uint32) {
	m.dept_id = &u
	m.adddept_id = nil
}

// DeptID returns the value of the "dept_id" field in the mutation.
func (m *RoleDeptMutation) DeptID() (r uint32, exists bool) {
	v := m.dept_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDeptID returns the old "dept_id" field's value of the RoleDept entity.
// If the RoleDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleDeptMutation) OldDeptID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeptID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeptID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeptID: %w", err)
	}
	return oldValue.DeptID, nil
}

// AddDeptID adds u to the "dept_id" field.
func (m *RoleDeptMutation) AddDeptID(u int32) {
	if m.adddept_id != nil {
		*m.adddept_id += u
	} else {
		m.adddept_id = &u
	}
}

// AddedDeptID returns the value that was added to the "dept_id" field in this mutation.
func (m *RoleDeptMutation) AddedDeptID() (r int32, exists bool) {
	v := m.adddept_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeptID resets all changes to the "dept_id" field.
func (m *RoleDeptMutation) ResetDeptID() {
	m.dept_id = nil
	m.adddept_id = nil
}

// Where appends a list predicates to the RoleDeptMutation builder.
func (m *RoleDeptMutation) Where(ps ...predicate.RoleDept) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoleDeptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoleDeptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RoleDept, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoleDeptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoleDeptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RoleDept).
func (m *RoleDeptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoleDeptMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, roledept.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, roledept.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, roledept.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, roledept.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, roledept.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, roledept.FieldDeletedBy)
	}
	if m.role_id != nil {
		fields = append(fields, roledept.FieldRoleID)
	}
	if m.dept_id != nil {
		fields = append(fields, roledept.FieldDeptID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoleDeptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roledept.FieldCreatedAt:
		return m.CreatedAt()
	case roledept.FieldUpdatedAt:
		return m.UpdatedAt()
	case roledept.FieldDeletedAt:
		return m.DeletedAt()
	case roledept.FieldCreatedBy:
		return m.CreatedBy()
	case roledept.FieldUpdatedBy:
		return m.UpdatedBy()
	case roledept.FieldDeletedBy:
		return m.DeletedBy()
	case roledept.FieldRoleID:
		return m.RoleID()
	case roledept.FieldDeptID:
		return m.DeptID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoleDeptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roledept.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case roledept.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case roledept.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case roledept.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case roledept.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case roledept.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case roledept.FieldRoleID:
		return m.OldRoleID(ctx)
	case roledept.FieldDeptID:
		return m.OldDeptID(ctx)
	}
	return nil, fmt.Errorf("unknown RoleDept field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleDeptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roledept.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case roledept.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case roledept.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case roledept.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case roledept.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case roledept.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case roledept.FieldRoleID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	case roledept.FieldDeptID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeptID(v)
		return nil
	}
	return fmt.Errorf("unknown RoleDept field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoleDeptMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, roledept.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, roledept.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, roledept.FieldDeletedBy)
	}
	if m.addrole_id != nil {
		fields = append(fields, roledept.FieldRoleID)
	}
	if m.adddept_id != nil {
		fields = append(fields, roledept.FieldDeptID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoleDeptMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case roledept.FieldCreatedBy:
		return m.AddedCreatedBy()
	case roledept.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case roledept.FieldDeletedBy:
		return m.AddedDeletedBy()
	case roledept.FieldRoleID:
		return m.AddedRoleID()
	case roledept.FieldDeptID:
		return m.AddedDeptID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleDeptMutation) AddField(name string, value ent.Value) error {
	switch name {
	case roledept.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case roledept.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case roledept.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case roledept.FieldRoleID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoleID(v)
		return nil
	case roledept.FieldDeptID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeptID(v)
		return nil
	}
	return fmt.Errorf("unknown RoleDept numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoleDeptMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(roledept.FieldCreatedAt) {
		fields = append(fields, roledept.FieldCreatedAt)
	}
	if m.FieldCleared(roledept.FieldUpdatedAt) {
		fields = append(fields, roledept.FieldUpdatedAt)
	}
	if m.FieldCleared(roledept.FieldDeletedAt) {
		fields = append(fields, roledept.FieldDeletedAt)
	}
	if m.FieldCleared(roledept.FieldCreatedBy) {
		fields = append(fields, roledept.FieldCreatedBy)
	}
	if m.FieldCleared(roledept.FieldUpdatedBy) {
		fields = append(fields, roledept.FieldUpdatedBy)
	}
	if m.FieldCleared(roledept.FieldDeletedBy) {
		fields = append(fields, roledept.FieldDeletedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoleDeptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleDeptMutation) ClearField(name string) error {
	switch name {
	case roledept.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case roledept.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case roledept.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case roledept.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case roledept.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case roledept.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	}
	return fmt.Errorf("unknown RoleDept nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoleDeptMutation) ResetField(name string) error {
	switch name {
	case roledept.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case roledept.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case roledept.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case roledept.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case roledept.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case roledept.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case roledept.FieldRoleID:
		m.ResetRoleID()
		return nil
	case roledept.FieldDeptID:
		m.ResetDeptID()
		return nil
	}
	return fmt.Errorf("unknown RoleDept field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoleDeptMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoleDeptMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoleDeptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoleDeptMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoleDeptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoleDeptMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoleDeptMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RoleDept unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoleDeptMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RoleDept edge %s", name)
}

// RoleMenuMutation represents an operation that mutates the RoleMenu nodes in the graph.
type RoleMenuMutation struct {
	config
	op            Op
	typ           string
	id            *uint32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	created_by    *uint32
	addcreated_by *int32
	updated_by    *uint32
	addupdated_by *int32
	deleted_by    *uint32
	adddeleted_by *int32
	role_id       *uint32
	addrole_id    *int32
	menu_id       *uint32
	addmenu_id    *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RoleMenu, error)
	predicates    []predicate.RoleMenu
}

var _ ent.Mutation = (*RoleMenuMutation)(nil)

// rolemenuOption allows management of the mutation configuration using functional options.
type rolemenuOption func(*RoleMenuMutation)

// newRoleMenuMutation creates new mutation for the RoleMenu entity.
func newRoleMenuMutation(c config, op Op, opts ...rolemenuOption) *RoleMenuMutation {
	m := &RoleMenuMutation{
		config:        c,
		op:            op,
		typ:           TypeRoleMenu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoleMenuID sets the ID field of the mutation.
func withRoleMenuID(id uint32) rolemenuOption {
	return func(m *RoleMenuMutation) {
		var (
			err   error
			once  sync.Once
			value *RoleMenu
		)
		m.oldValue = func(ctx context.Context) (*RoleMenu, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoleMenu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoleMenu sets the old RoleMenu of the mutation.
func withRoleMenu(node *RoleMenu) rolemenuOption {
	return func(m *RoleMenuMutation) {
		m.oldValue = func(context.Context) (*RoleMenu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleMenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleMenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RoleMenu entities.
func (m *RoleMenuMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoleMenuMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoleMenuMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RoleMenu.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RoleMenuMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RoleMenuMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RoleMenu entity.
// If the RoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMenuMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *RoleMenuMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[rolemenu.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *RoleMenuMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[rolemenu.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RoleMenuMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, rolemenu.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RoleMenuMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RoleMenuMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the RoleMenu entity.
// If the RoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMenuMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *RoleMenuMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[rolemenu.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *RoleMenuMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[rolemenu.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RoleMenuMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, rolemenu.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RoleMenuMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RoleMenuMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the RoleMenu entity.
// If the RoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMenuMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *RoleMenuMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[rolemenu.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *RoleMenuMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[rolemenu.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RoleMenuMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, rolemenu.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *RoleMenuMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *RoleMenuMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the RoleMenu entity.
// If the RoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMenuMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *RoleMenuMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *RoleMenuMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *RoleMenuMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[rolemenu.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *RoleMenuMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[rolemenu.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *RoleMenuMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, rolemenu.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *RoleMenuMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *RoleMenuMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the RoleMenu entity.
// If the RoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMenuMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *RoleMenuMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *RoleMenuMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *RoleMenuMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[rolemenu.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *RoleMenuMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[rolemenu.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *RoleMenuMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, rolemenu.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *RoleMenuMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *RoleMenuMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the RoleMenu entity.
// If the RoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMenuMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *RoleMenuMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *RoleMenuMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *RoleMenuMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[rolemenu.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *RoleMenuMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[rolemenu.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *RoleMenuMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, rolemenu.FieldDeletedBy)
}

// SetRoleID sets the "role_id" field.
func (m *RoleMenuMutation) SetRoleID(u uint32) {
	m.role_id = &u
	m.addrole_id = nil
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *RoleMenuMutation) RoleID() (r uint32, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the RoleMenu entity.
// If the RoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMenuMutation) OldRoleID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// AddRoleID adds u to the "role_id" field.
func (m *RoleMenuMutation) AddRoleID(u int32) {
	if m.addrole_id != nil {
		*m.addrole_id += u
	} else {
		m.addrole_id = &u
	}
}

// AddedRoleID returns the value that was added to the "role_id" field in this mutation.
func (m *RoleMenuMutation) AddedRoleID() (r int32, exists bool) {
	v := m.addrole_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *RoleMenuMutation) ResetRoleID() {
	m.role_id = nil
	m.addrole_id = nil
}

// SetMenuID sets the "menu_id" field.
func (m *RoleMenuMutation) SetMenuID(u uint32) {
	m.menu_id = &u
	m.addmenu_id = nil
}

// MenuID returns the value of the "menu_id" field in the mutation.
func (m *RoleMenuMutation) MenuID() (r uint32, exists bool) {
	v := m.menu_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMenuID returns the old "menu_id" field's value of the RoleMenu entity.
// If the RoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMenuMutation) OldMenuID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMenuID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMenuID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenuID: %w", err)
	}
	return oldValue.MenuID, nil
}

// AddMenuID adds u to the "menu_id" field.
func (m *RoleMenuMutation) AddMenuID(u int32) {
	if m.addmenu_id != nil {
		*m.addmenu_id += u
	} else {
		m.addmenu_id = &u
	}
}

// AddedMenuID returns the value that was added to the "menu_id" field in this mutation.
func (m *RoleMenuMutation) AddedMenuID() (r int32, exists bool) {
	v := m.addmenu_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMenuID resets all changes to the "menu_id" field.
func (m *RoleMenuMutation) ResetMenuID() {
	m.menu_id = nil
	m.addmenu_id = nil
}

// Where appends a list predicates to the RoleMenuMutation builder.
func (m *RoleMenuMutation) Where(ps ...predicate.RoleMenu) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoleMenuMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoleMenuMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RoleMenu, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoleMenuMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoleMenuMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RoleMenu).
func (m *RoleMenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoleMenuMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, rolemenu.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, rolemenu.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, rolemenu.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, rolemenu.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, rolemenu.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, rolemenu.FieldDeletedBy)
	}
	if m.role_id != nil {
		fields = append(fields, rolemenu.FieldRoleID)
	}
	if m.menu_id != nil {
		fields = append(fields, rolemenu.FieldMenuID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoleMenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rolemenu.FieldCreatedAt:
		return m.CreatedAt()
	case rolemenu.FieldUpdatedAt:
		return m.UpdatedAt()
	case rolemenu.FieldDeletedAt:
		return m.DeletedAt()
	case rolemenu.FieldCreatedBy:
		return m.CreatedBy()
	case rolemenu.FieldUpdatedBy:
		return m.UpdatedBy()
	case rolemenu.FieldDeletedBy:
		return m.DeletedBy()
	case rolemenu.FieldRoleID:
		return m.RoleID()
	case rolemenu.FieldMenuID:
		return m.MenuID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoleMenuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rolemenu.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case rolemenu.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case rolemenu.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case rolemenu.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case rolemenu.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case rolemenu.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case rolemenu.FieldRoleID:
		return m.OldRoleID(ctx)
	case rolemenu.FieldMenuID:
		return m.OldMenuID(ctx)
	}
	return nil, fmt.Errorf("unknown RoleMenu field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rolemenu.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case rolemenu.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case rolemenu.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case rolemenu.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case rolemenu.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case rolemenu.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case rolemenu.FieldRoleID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	case rolemenu.FieldMenuID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenuID(v)
		return nil
	}
	return fmt.Errorf("unknown RoleMenu field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoleMenuMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, rolemenu.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, rolemenu.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, rolemenu.FieldDeletedBy)
	}
	if m.addrole_id != nil {
		fields = append(fields, rolemenu.FieldRoleID)
	}
	if m.addmenu_id != nil {
		fields = append(fields, rolemenu.FieldMenuID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoleMenuMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rolemenu.FieldCreatedBy:
		return m.AddedCreatedBy()
	case rolemenu.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case rolemenu.FieldDeletedBy:
		return m.AddedDeletedBy()
	case rolemenu.FieldRoleID:
		return m.AddedRoleID()
	case rolemenu.FieldMenuID:
		return m.AddedMenuID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rolemenu.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case rolemenu.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case rolemenu.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case rolemenu.FieldRoleID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoleID(v)
		return nil
	case rolemenu.FieldMenuID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMenuID(v)
		return nil
	}
	return fmt.Errorf("unknown RoleMenu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoleMenuMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(rolemenu.FieldCreatedAt) {
		fields = append(fields, rolemenu.FieldCreatedAt)
	}
	if m.FieldCleared(rolemenu.FieldUpdatedAt) {
		fields = append(fields, rolemenu.FieldUpdatedAt)
	}
	if m.FieldCleared(rolemenu.FieldDeletedAt) {
		fields = append(fields, rolemenu.FieldDeletedAt)
	}
	if m.FieldCleared(rolemenu.FieldCreatedBy) {
		fields = append(fields, rolemenu.FieldCreatedBy)
	}
	if m.FieldCleared(rolemenu.FieldUpdatedBy) {
		fields = append(fields, rolemenu.FieldUpdatedBy)
	}
	if m.FieldCleared(rolemenu.FieldDeletedBy) {
		fields = append(fields, rolemenu.FieldDeletedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoleMenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleMenuMutation) ClearField(name string) error {
	switch name {
	case rolemenu.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case rolemenu.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case rolemenu.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case rolemenu.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case rolemenu.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case rolemenu.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	}
	return fmt.Errorf("unknown RoleMenu nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoleMenuMutation) ResetField(name string) error {
	switch name {
	case rolemenu.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case rolemenu.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case rolemenu.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case rolemenu.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case rolemenu.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case rolemenu.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case rolemenu.FieldRoleID:
		m.ResetRoleID()
		return nil
	case rolemenu.FieldMenuID:
		m.ResetMenuID()
		return nil
	}
	return fmt.Errorf("unknown RoleMenu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoleMenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoleMenuMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoleMenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoleMenuMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoleMenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoleMenuMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoleMenuMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RoleMenu unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoleMenuMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RoleMenu edge %s", name)
}

// RoleOrgMutation represents an operation that mutates the RoleOrg nodes in the graph.
type RoleOrgMutation struct {
	config
	op            Op
	typ           string
	id            *uint32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	created_by    *uint32
	addcreated_by *int32
	updated_by    *uint32
	addupdated_by *int32
	deleted_by    *uint32
	adddeleted_by *int32
	role_id       *uint32
	addrole_id    *int32
	org_id        *uint32
	addorg_id     *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RoleOrg, error)
	predicates    []predicate.RoleOrg
}

var _ ent.Mutation = (*RoleOrgMutation)(nil)

// roleorgOption allows management of the mutation configuration using functional options.
type roleorgOption func(*RoleOrgMutation)

// newRoleOrgMutation creates new mutation for the RoleOrg entity.
func newRoleOrgMutation(c config, op Op, opts ...roleorgOption) *RoleOrgMutation {
	m := &RoleOrgMutation{
		config:        c,
		op:            op,
		typ:           TypeRoleOrg,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoleOrgID sets the ID field of the mutation.
func withRoleOrgID(id uint32) roleorgOption {
	return func(m *RoleOrgMutation) {
		var (
			err   error
			once  sync.Once
			value *RoleOrg
		)
		m.oldValue = func(ctx context.Context) (*RoleOrg, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoleOrg.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoleOrg sets the old RoleOrg of the mutation.
func withRoleOrg(node *RoleOrg) roleorgOption {
	return func(m *RoleOrgMutation) {
		m.oldValue = func(context.Context) (*RoleOrg, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleOrgMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleOrgMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RoleOrg entities.
func (m *RoleOrgMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoleOrgMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoleOrgMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RoleOrg.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RoleOrgMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RoleOrgMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RoleOrg entity.
// If the RoleOrg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleOrgMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *RoleOrgMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[roleorg.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *RoleOrgMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[roleorg.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RoleOrgMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, roleorg.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RoleOrgMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RoleOrgMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the RoleOrg entity.
// If the RoleOrg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleOrgMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *RoleOrgMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[roleorg.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *RoleOrgMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[roleorg.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RoleOrgMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, roleorg.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RoleOrgMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RoleOrgMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the RoleOrg entity.
// If the RoleOrg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleOrgMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *RoleOrgMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[roleorg.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *RoleOrgMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[roleorg.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RoleOrgMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, roleorg.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *RoleOrgMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *RoleOrgMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the RoleOrg entity.
// If the RoleOrg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleOrgMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *RoleOrgMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *RoleOrgMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *RoleOrgMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[roleorg.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *RoleOrgMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[roleorg.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *RoleOrgMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, roleorg.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *RoleOrgMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *RoleOrgMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the RoleOrg entity.
// If the RoleOrg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleOrgMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *RoleOrgMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *RoleOrgMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *RoleOrgMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[roleorg.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *RoleOrgMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[roleorg.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *RoleOrgMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, roleorg.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *RoleOrgMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *RoleOrgMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the RoleOrg entity.
// If the RoleOrg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleOrgMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *RoleOrgMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *RoleOrgMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *RoleOrgMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[roleorg.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *RoleOrgMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[roleorg.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *RoleOrgMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, roleorg.FieldDeletedBy)
}

// SetRoleID sets the "role_id" field.
func (m *RoleOrgMutation) SetRoleID(u uint32) {
	m.role_id = &u
	m.addrole_id = nil
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *RoleOrgMutation) RoleID() (r uint32, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the RoleOrg entity.
// If the RoleOrg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleOrgMutation) OldRoleID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// AddRoleID adds u to the "role_id" field.
func (m *RoleOrgMutation) AddRoleID(u int32) {
	if m.addrole_id != nil {
		*m.addrole_id += u
	} else {
		m.addrole_id = &u
	}
}

// AddedRoleID returns the value that was added to the "role_id" field in this mutation.
func (m *RoleOrgMutation) AddedRoleID() (r int32, exists bool) {
	v := m.addrole_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *RoleOrgMutation) ResetRoleID() {
	m.role_id = nil
	m.addrole_id = nil
}

// SetOrgID sets the "org_id" field.
func (m *RoleOrgMutation) SetOrgID(u uint32) {
	m.org_id = &u
	m.addorg_id = nil
}

// OrgID returns the value of the "org_id" field in the mutation.
func (m *RoleOrgMutation) OrgID() (r uint32, exists bool) {
	v := m.org_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgID returns the old "org_id" field's value of the RoleOrg entity.
// If the RoleOrg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleOrgMutation) OldOrgID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgID: %w", err)
	}
	return oldValue.OrgID, nil
}

// AddOrgID adds u to the "org_id" field.
func (m *RoleOrgMutation) AddOrgID(u int32) {
	if m.addorg_id != nil {
		*m.addorg_id += u
	} else {
		m.addorg_id = &u
	}
}

// AddedOrgID returns the value that was added to the "org_id" field in this mutation.
func (m *RoleOrgMutation) AddedOrgID() (r int32, exists bool) {
	v := m.addorg_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrgID resets all changes to the "org_id" field.
func (m *RoleOrgMutation) ResetOrgID() {
	m.org_id = nil
	m.addorg_id = nil
}

// Where appends a list predicates to the RoleOrgMutation builder.
func (m *RoleOrgMutation) Where(ps ...predicate.RoleOrg) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoleOrgMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoleOrgMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RoleOrg, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoleOrgMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoleOrgMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RoleOrg).
func (m *RoleOrgMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoleOrgMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, roleorg.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, roleorg.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, roleorg.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, roleorg.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, roleorg.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, roleorg.FieldDeletedBy)
	}
	if m.role_id != nil {
		fields = append(fields, roleorg.FieldRoleID)
	}
	if m.org_id != nil {
		fields = append(fields, roleorg.FieldOrgID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoleOrgMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roleorg.FieldCreatedAt:
		return m.CreatedAt()
	case roleorg.FieldUpdatedAt:
		return m.UpdatedAt()
	case roleorg.FieldDeletedAt:
		return m.DeletedAt()
	case roleorg.FieldCreatedBy:
		return m.CreatedBy()
	case roleorg.FieldUpdatedBy:
		return m.UpdatedBy()
	case roleorg.FieldDeletedBy:
		return m.DeletedBy()
	case roleorg.FieldRoleID:
		return m.RoleID()
	case roleorg.FieldOrgID:
		return m.OrgID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoleOrgMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roleorg.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case roleorg.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case roleorg.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case roleorg.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case roleorg.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case roleorg.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case roleorg.FieldRoleID:
		return m.OldRoleID(ctx)
	case roleorg.FieldOrgID:
		return m.OldOrgID(ctx)
	}
	return nil, fmt.Errorf("unknown RoleOrg field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleOrgMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roleorg.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case roleorg.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case roleorg.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case roleorg.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case roleorg.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case roleorg.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case roleorg.FieldRoleID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	case roleorg.FieldOrgID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgID(v)
		return nil
	}
	return fmt.Errorf("unknown RoleOrg field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoleOrgMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, roleorg.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, roleorg.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, roleorg.FieldDeletedBy)
	}
	if m.addrole_id != nil {
		fields = append(fields, roleorg.FieldRoleID)
	}
	if m.addorg_id != nil {
		fields = append(fields, roleorg.FieldOrgID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoleOrgMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case roleorg.FieldCreatedBy:
		return m.AddedCreatedBy()
	case roleorg.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case roleorg.FieldDeletedBy:
		return m.AddedDeletedBy()
	case roleorg.FieldRoleID:
		return m.AddedRoleID()
	case roleorg.FieldOrgID:
		return m.AddedOrgID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleOrgMutation) AddField(name string, value ent.Value) error {
	switch name {
	case roleorg.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case roleorg.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case roleorg.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case roleorg.FieldRoleID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoleID(v)
		return nil
	case roleorg.FieldOrgID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrgID(v)
		return nil
	}
	return fmt.Errorf("unknown RoleOrg numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoleOrgMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(roleorg.FieldCreatedAt) {
		fields = append(fields, roleorg.FieldCreatedAt)
	}
	if m.FieldCleared(roleorg.FieldUpdatedAt) {
		fields = append(fields, roleorg.FieldUpdatedAt)
	}
	if m.FieldCleared(roleorg.FieldDeletedAt) {
		fields = append(fields, roleorg.FieldDeletedAt)
	}
	if m.FieldCleared(roleorg.FieldCreatedBy) {
		fields = append(fields, roleorg.FieldCreatedBy)
	}
	if m.FieldCleared(roleorg.FieldUpdatedBy) {
		fields = append(fields, roleorg.FieldUpdatedBy)
	}
	if m.FieldCleared(roleorg.FieldDeletedBy) {
		fields = append(fields, roleorg.FieldDeletedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoleOrgMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleOrgMutation) ClearField(name string) error {
	switch name {
	case roleorg.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case roleorg.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case roleorg.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case roleorg.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case roleorg.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case roleorg.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	}
	return fmt.Errorf("unknown RoleOrg nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoleOrgMutation) ResetField(name string) error {
	switch name {
	case roleorg.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case roleorg.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case roleorg.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case roleorg.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case roleorg.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case roleorg.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case roleorg.FieldRoleID:
		m.ResetRoleID()
		return nil
	case roleorg.FieldOrgID:
		m.ResetOrgID()
		return nil
	}
	return fmt.Errorf("unknown RoleOrg field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoleOrgMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoleOrgMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoleOrgMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoleOrgMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoleOrgMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoleOrgMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoleOrgMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RoleOrg unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoleOrgMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RoleOrg edge %s", name)
}

// RolePositionMutation represents an operation that mutates the RolePosition nodes in the graph.
type RolePositionMutation struct {
	config
	op             Op
	typ            string
	id             *uint32
	created_at     *time.Time
	updated_at     *time.Time
	deleted_at     *time.Time
	created_by     *uint32
	addcreated_by  *int32
	updated_by     *uint32
	addupdated_by  *int32
	deleted_by     *uint32
	adddeleted_by  *int32
	role_id        *uint32
	addrole_id     *int32
	position_id    *uint32
	addposition_id *int32
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*RolePosition, error)
	predicates     []predicate.RolePosition
}

var _ ent.Mutation = (*RolePositionMutation)(nil)

// rolepositionOption allows management of the mutation configuration using functional options.
type rolepositionOption func(*RolePositionMutation)

// newRolePositionMutation creates new mutation for the RolePosition entity.
func newRolePositionMutation(c config, op Op, opts ...rolepositionOption) *RolePositionMutation {
	m := &RolePositionMutation{
		config:        c,
		op:            op,
		typ:           TypeRolePosition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRolePositionID sets the ID field of the mutation.
func withRolePositionID(id uint32) rolepositionOption {
	return func(m *RolePositionMutation) {
		var (
			err   error
			once  sync.Once
			value *RolePosition
		)
		m.oldValue = func(ctx context.Context) (*RolePosition, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RolePosition.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRolePosition sets the old RolePosition of the mutation.
func withRolePosition(node *RolePosition) rolepositionOption {
	return func(m *RolePositionMutation) {
		m.oldValue = func(context.Context) (*RolePosition, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RolePositionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RolePositionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RolePosition entities.
func (m *RolePositionMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RolePositionMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RolePositionMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RolePosition.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RolePositionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RolePositionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RolePosition entity.
// If the RolePosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePositionMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *RolePositionMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[roleposition.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *RolePositionMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[roleposition.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RolePositionMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, roleposition.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RolePositionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RolePositionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the RolePosition entity.
// If the RolePosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePositionMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *RolePositionMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[roleposition.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *RolePositionMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[roleposition.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RolePositionMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, roleposition.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RolePositionMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RolePositionMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the RolePosition entity.
// If the RolePosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePositionMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *RolePositionMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[roleposition.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *RolePositionMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[roleposition.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RolePositionMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, roleposition.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *RolePositionMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *RolePositionMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the RolePosition entity.
// If the RolePosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePositionMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *RolePositionMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *RolePositionMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *RolePositionMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[roleposition.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *RolePositionMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[roleposition.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *RolePositionMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, roleposition.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *RolePositionMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *RolePositionMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the RolePosition entity.
// If the RolePosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePositionMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *RolePositionMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *RolePositionMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *RolePositionMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[roleposition.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *RolePositionMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[roleposition.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *RolePositionMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, roleposition.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *RolePositionMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *RolePositionMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the RolePosition entity.
// If the RolePosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePositionMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *RolePositionMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *RolePositionMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *RolePositionMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[roleposition.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *RolePositionMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[roleposition.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *RolePositionMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, roleposition.FieldDeletedBy)
}

// SetRoleID sets the "role_id" field.
func (m *RolePositionMutation) SetRoleID(u uint32) {
	m.role_id = &u
	m.addrole_id = nil
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *RolePositionMutation) RoleID() (r uint32, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the RolePosition entity.
// If the RolePosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePositionMutation) OldRoleID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// AddRoleID adds u to the "role_id" field.
func (m *RolePositionMutation) AddRoleID(u int32) {
	if m.addrole_id != nil {
		*m.addrole_id += u
	} else {
		m.addrole_id = &u
	}
}

// AddedRoleID returns the value that was added to the "role_id" field in this mutation.
func (m *RolePositionMutation) AddedRoleID() (r int32, exists bool) {
	v := m.addrole_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *RolePositionMutation) ResetRoleID() {
	m.role_id = nil
	m.addrole_id = nil
}

// SetPositionID sets the "position_id" field.
func (m *RolePositionMutation) SetPositionID(u uint32) {
	m.position_id = &u
	m.addposition_id = nil
}

// PositionID returns the value of the "position_id" field in the mutation.
func (m *RolePositionMutation) PositionID() (r uint32, exists bool) {
	v := m.position_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPositionID returns the old "position_id" field's value of the RolePosition entity.
// If the RolePosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePositionMutation) OldPositionID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPositionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPositionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPositionID: %w", err)
	}
	return oldValue.PositionID, nil
}

// AddPositionID adds u to the "position_id" field.
func (m *RolePositionMutation) AddPositionID(u int32) {
	if m.addposition_id != nil {
		*m.addposition_id += u
	} else {
		m.addposition_id = &u
	}
}

// AddedPositionID returns the value that was added to the "position_id" field in this mutation.
func (m *RolePositionMutation) AddedPositionID() (r int32, exists bool) {
	v := m.addposition_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPositionID resets all changes to the "position_id" field.
func (m *RolePositionMutation) ResetPositionID() {
	m.position_id = nil
	m.addposition_id = nil
}

// Where appends a list predicates to the RolePositionMutation builder.
func (m *RolePositionMutation) Where(ps ...predicate.RolePosition) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RolePositionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RolePositionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RolePosition, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RolePositionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RolePositionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RolePosition).
func (m *RolePositionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RolePositionMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, roleposition.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, roleposition.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, roleposition.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, roleposition.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, roleposition.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, roleposition.FieldDeletedBy)
	}
	if m.role_id != nil {
		fields = append(fields, roleposition.FieldRoleID)
	}
	if m.position_id != nil {
		fields = append(fields, roleposition.FieldPositionID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RolePositionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roleposition.FieldCreatedAt:
		return m.CreatedAt()
	case roleposition.FieldUpdatedAt:
		return m.UpdatedAt()
	case roleposition.FieldDeletedAt:
		return m.DeletedAt()
	case roleposition.FieldCreatedBy:
		return m.CreatedBy()
	case roleposition.FieldUpdatedBy:
		return m.UpdatedBy()
	case roleposition.FieldDeletedBy:
		return m.DeletedBy()
	case roleposition.FieldRoleID:
		return m.RoleID()
	case roleposition.FieldPositionID:
		return m.PositionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RolePositionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roleposition.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case roleposition.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case roleposition.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case roleposition.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case roleposition.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case roleposition.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case roleposition.FieldRoleID:
		return m.OldRoleID(ctx)
	case roleposition.FieldPositionID:
		return m.OldPositionID(ctx)
	}
	return nil, fmt.Errorf("unknown RolePosition field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RolePositionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roleposition.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case roleposition.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case roleposition.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case roleposition.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case roleposition.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case roleposition.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case roleposition.FieldRoleID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	case roleposition.FieldPositionID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPositionID(v)
		return nil
	}
	return fmt.Errorf("unknown RolePosition field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RolePositionMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, roleposition.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, roleposition.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, roleposition.FieldDeletedBy)
	}
	if m.addrole_id != nil {
		fields = append(fields, roleposition.FieldRoleID)
	}
	if m.addposition_id != nil {
		fields = append(fields, roleposition.FieldPositionID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RolePositionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case roleposition.FieldCreatedBy:
		return m.AddedCreatedBy()
	case roleposition.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case roleposition.FieldDeletedBy:
		return m.AddedDeletedBy()
	case roleposition.FieldRoleID:
		return m.AddedRoleID()
	case roleposition.FieldPositionID:
		return m.AddedPositionID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RolePositionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case roleposition.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case roleposition.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case roleposition.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case roleposition.FieldRoleID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoleID(v)
		return nil
	case roleposition.FieldPositionID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPositionID(v)
		return nil
	}
	return fmt.Errorf("unknown RolePosition numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RolePositionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(roleposition.FieldCreatedAt) {
		fields = append(fields, roleposition.FieldCreatedAt)
	}
	if m.FieldCleared(roleposition.FieldUpdatedAt) {
		fields = append(fields, roleposition.FieldUpdatedAt)
	}
	if m.FieldCleared(roleposition.FieldDeletedAt) {
		fields = append(fields, roleposition.FieldDeletedAt)
	}
	if m.FieldCleared(roleposition.FieldCreatedBy) {
		fields = append(fields, roleposition.FieldCreatedBy)
	}
	if m.FieldCleared(roleposition.FieldUpdatedBy) {
		fields = append(fields, roleposition.FieldUpdatedBy)
	}
	if m.FieldCleared(roleposition.FieldDeletedBy) {
		fields = append(fields, roleposition.FieldDeletedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RolePositionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RolePositionMutation) ClearField(name string) error {
	switch name {
	case roleposition.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case roleposition.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case roleposition.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case roleposition.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case roleposition.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case roleposition.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	}
	return fmt.Errorf("unknown RolePosition nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RolePositionMutation) ResetField(name string) error {
	switch name {
	case roleposition.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case roleposition.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case roleposition.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case roleposition.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case roleposition.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case roleposition.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case roleposition.FieldRoleID:
		m.ResetRoleID()
		return nil
	case roleposition.FieldPositionID:
		m.ResetPositionID()
		return nil
	}
	return fmt.Errorf("unknown RolePosition field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RolePositionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RolePositionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RolePositionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RolePositionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RolePositionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RolePositionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RolePositionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RolePosition unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RolePositionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RolePosition edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op            Op
	typ           string
	id            *uint32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	created_by    *uint32
	addcreated_by *int32
	updated_by    *uint32
	addupdated_by *int32
	deleted_by    *uint32
	adddeleted_by *int32
	remark        *string
	tenant_id     *uint32
	addtenant_id  *int32
	_type         *task.Type
	type_name     *string
	task_payload  *string
	cron_spec     *string
	task_options  **servicev1.TaskOption
	enable        *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Task, error)
	predicates    []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id uint32) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Task entities.
func (m *TaskMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *TaskMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[task.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *TaskMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[task.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, task.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TaskMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TaskMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *TaskMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[task.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *TaskMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[task.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TaskMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, task.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TaskMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TaskMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *TaskMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[task.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *TaskMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[task.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TaskMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, task.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *TaskMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *TaskMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *TaskMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *TaskMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *TaskMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[task.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *TaskMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[task.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *TaskMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, task.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *TaskMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *TaskMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *TaskMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *TaskMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *TaskMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[task.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *TaskMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[task.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *TaskMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, task.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *TaskMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *TaskMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *TaskMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *TaskMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *TaskMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[task.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *TaskMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[task.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *TaskMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, task.FieldDeletedBy)
}

// SetRemark sets the "remark" field.
func (m *TaskMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *TaskMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *TaskMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[task.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *TaskMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[task.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *TaskMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, task.FieldRemark)
}

// SetTenantID sets the "tenant_id" field.
func (m *TaskMutation) SetTenantID(u uint32) {
	m.tenant_id = &u
	m.addtenant_id = nil
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *TaskMutation) TenantID() (r uint32, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTenantID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// AddTenantID adds u to the "tenant_id" field.
func (m *TaskMutation) AddTenantID(u int32) {
	if m.addtenant_id != nil {
		*m.addtenant_id += u
	} else {
		m.addtenant_id = &u
	}
}

// AddedTenantID returns the value that was added to the "tenant_id" field in this mutation.
func (m *TaskMutation) AddedTenantID() (r int32, exists bool) {
	v := m.addtenant_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTenantID clears the value of the "tenant_id" field.
func (m *TaskMutation) ClearTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	m.clearedFields[task.FieldTenantID] = struct{}{}
}

// TenantIDCleared returns if the "tenant_id" field was cleared in this mutation.
func (m *TaskMutation) TenantIDCleared() bool {
	_, ok := m.clearedFields[task.FieldTenantID]
	return ok
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *TaskMutation) ResetTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	delete(m.clearedFields, task.FieldTenantID)
}

// SetType sets the "type" field.
func (m *TaskMutation) SetType(t task.Type) {
	m._type = &t
}

// GetType returns the value of the "type" field in the mutation.
func (m *TaskMutation) GetType() (r task.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldType(ctx context.Context) (v *task.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *TaskMutation) ClearType() {
	m._type = nil
	m.clearedFields[task.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *TaskMutation) TypeCleared() bool {
	_, ok := m.clearedFields[task.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *TaskMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, task.FieldType)
}

// SetTypeName sets the "type_name" field.
func (m *TaskMutation) SetTypeName(s string) {
	m.type_name = &s
}

// TypeName returns the value of the "type_name" field in the mutation.
func (m *TaskMutation) TypeName() (r string, exists bool) {
	v := m.type_name
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeName returns the old "type_name" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTypeName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTypeName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTypeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeName: %w", err)
	}
	return oldValue.TypeName, nil
}

// ClearTypeName clears the value of the "type_name" field.
func (m *TaskMutation) ClearTypeName() {
	m.type_name = nil
	m.clearedFields[task.FieldTypeName] = struct{}{}
}

// TypeNameCleared returns if the "type_name" field was cleared in this mutation.
func (m *TaskMutation) TypeNameCleared() bool {
	_, ok := m.clearedFields[task.FieldTypeName]
	return ok
}

// ResetTypeName resets all changes to the "type_name" field.
func (m *TaskMutation) ResetTypeName() {
	m.type_name = nil
	delete(m.clearedFields, task.FieldTypeName)
}

// SetTaskPayload sets the "task_payload" field.
func (m *TaskMutation) SetTaskPayload(s string) {
	m.task_payload = &s
}

// TaskPayload returns the value of the "task_payload" field in the mutation.
func (m *TaskMutation) TaskPayload() (r string, exists bool) {
	v := m.task_payload
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskPayload returns the old "task_payload" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTaskPayload(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskPayload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskPayload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskPayload: %w", err)
	}
	return oldValue.TaskPayload, nil
}

// ClearTaskPayload clears the value of the "task_payload" field.
func (m *TaskMutation) ClearTaskPayload() {
	m.task_payload = nil
	m.clearedFields[task.FieldTaskPayload] = struct{}{}
}

// TaskPayloadCleared returns if the "task_payload" field was cleared in this mutation.
func (m *TaskMutation) TaskPayloadCleared() bool {
	_, ok := m.clearedFields[task.FieldTaskPayload]
	return ok
}

// ResetTaskPayload resets all changes to the "task_payload" field.
func (m *TaskMutation) ResetTaskPayload() {
	m.task_payload = nil
	delete(m.clearedFields, task.FieldTaskPayload)
}

// SetCronSpec sets the "cron_spec" field.
func (m *TaskMutation) SetCronSpec(s string) {
	m.cron_spec = &s
}

// CronSpec returns the value of the "cron_spec" field in the mutation.
func (m *TaskMutation) CronSpec() (r string, exists bool) {
	v := m.cron_spec
	if v == nil {
		return
	}
	return *v, true
}

// OldCronSpec returns the old "cron_spec" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCronSpec(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCronSpec is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCronSpec requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCronSpec: %w", err)
	}
	return oldValue.CronSpec, nil
}

// ClearCronSpec clears the value of the "cron_spec" field.
func (m *TaskMutation) ClearCronSpec() {
	m.cron_spec = nil
	m.clearedFields[task.FieldCronSpec] = struct{}{}
}

// CronSpecCleared returns if the "cron_spec" field was cleared in this mutation.
func (m *TaskMutation) CronSpecCleared() bool {
	_, ok := m.clearedFields[task.FieldCronSpec]
	return ok
}

// ResetCronSpec resets all changes to the "cron_spec" field.
func (m *TaskMutation) ResetCronSpec() {
	m.cron_spec = nil
	delete(m.clearedFields, task.FieldCronSpec)
}

// SetTaskOptions sets the "task_options" field.
func (m *TaskMutation) SetTaskOptions(so *servicev1.TaskOption) {
	m.task_options = &so
}

// TaskOptions returns the value of the "task_options" field in the mutation.
func (m *TaskMutation) TaskOptions() (r *servicev1.TaskOption, exists bool) {
	v := m.task_options
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskOptions returns the old "task_options" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTaskOptions(ctx context.Context) (v *servicev1.TaskOption, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskOptions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskOptions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskOptions: %w", err)
	}
	return oldValue.TaskOptions, nil
}

// ClearTaskOptions clears the value of the "task_options" field.
func (m *TaskMutation) ClearTaskOptions() {
	m.task_options = nil
	m.clearedFields[task.FieldTaskOptions] = struct{}{}
}

// TaskOptionsCleared returns if the "task_options" field was cleared in this mutation.
func (m *TaskMutation) TaskOptionsCleared() bool {
	_, ok := m.clearedFields[task.FieldTaskOptions]
	return ok
}

// ResetTaskOptions resets all changes to the "task_options" field.
func (m *TaskMutation) ResetTaskOptions() {
	m.task_options = nil
	delete(m.clearedFields, task.FieldTaskOptions)
}

// SetEnable sets the "enable" field.
func (m *TaskMutation) SetEnable(b bool) {
	m.enable = &b
}

// Enable returns the value of the "enable" field in the mutation.
func (m *TaskMutation) Enable() (r bool, exists bool) {
	v := m.enable
	if v == nil {
		return
	}
	return *v, true
}

// OldEnable returns the old "enable" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldEnable(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnable: %w", err)
	}
	return oldValue.Enable, nil
}

// ClearEnable clears the value of the "enable" field.
func (m *TaskMutation) ClearEnable() {
	m.enable = nil
	m.clearedFields[task.FieldEnable] = struct{}{}
}

// EnableCleared returns if the "enable" field was cleared in this mutation.
func (m *TaskMutation) EnableCleared() bool {
	_, ok := m.clearedFields[task.FieldEnable]
	return ok
}

// ResetEnable resets all changes to the "enable" field.
func (m *TaskMutation) ResetEnable() {
	m.enable = nil
	delete(m.clearedFields, task.FieldEnable)
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Task, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.created_at != nil {
		fields = append(fields, task.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, task.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, task.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, task.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, task.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, task.FieldDeletedBy)
	}
	if m.remark != nil {
		fields = append(fields, task.FieldRemark)
	}
	if m.tenant_id != nil {
		fields = append(fields, task.FieldTenantID)
	}
	if m._type != nil {
		fields = append(fields, task.FieldType)
	}
	if m.type_name != nil {
		fields = append(fields, task.FieldTypeName)
	}
	if m.task_payload != nil {
		fields = append(fields, task.FieldTaskPayload)
	}
	if m.cron_spec != nil {
		fields = append(fields, task.FieldCronSpec)
	}
	if m.task_options != nil {
		fields = append(fields, task.FieldTaskOptions)
	}
	if m.enable != nil {
		fields = append(fields, task.FieldEnable)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldCreatedAt:
		return m.CreatedAt()
	case task.FieldUpdatedAt:
		return m.UpdatedAt()
	case task.FieldDeletedAt:
		return m.DeletedAt()
	case task.FieldCreatedBy:
		return m.CreatedBy()
	case task.FieldUpdatedBy:
		return m.UpdatedBy()
	case task.FieldDeletedBy:
		return m.DeletedBy()
	case task.FieldRemark:
		return m.Remark()
	case task.FieldTenantID:
		return m.TenantID()
	case task.FieldType:
		return m.GetType()
	case task.FieldTypeName:
		return m.TypeName()
	case task.FieldTaskPayload:
		return m.TaskPayload()
	case task.FieldCronSpec:
		return m.CronSpec()
	case task.FieldTaskOptions:
		return m.TaskOptions()
	case task.FieldEnable:
		return m.Enable()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case task.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case task.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case task.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case task.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case task.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case task.FieldRemark:
		return m.OldRemark(ctx)
	case task.FieldTenantID:
		return m.OldTenantID(ctx)
	case task.FieldType:
		return m.OldType(ctx)
	case task.FieldTypeName:
		return m.OldTypeName(ctx)
	case task.FieldTaskPayload:
		return m.OldTaskPayload(ctx)
	case task.FieldCronSpec:
		return m.OldCronSpec(ctx)
	case task.FieldTaskOptions:
		return m.OldTaskOptions(ctx)
	case task.FieldEnable:
		return m.OldEnable(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case task.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case task.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case task.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case task.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case task.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case task.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case task.FieldTenantID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case task.FieldType:
		v, ok := value.(task.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case task.FieldTypeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeName(v)
		return nil
	case task.FieldTaskPayload:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskPayload(v)
		return nil
	case task.FieldCronSpec:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCronSpec(v)
		return nil
	case task.FieldTaskOptions:
		v, ok := value.(*servicev1.TaskOption)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskOptions(v)
		return nil
	case task.FieldEnable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnable(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, task.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, task.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, task.FieldDeletedBy)
	}
	if m.addtenant_id != nil {
		fields = append(fields, task.FieldTenantID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case task.FieldCreatedBy:
		return m.AddedCreatedBy()
	case task.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case task.FieldDeletedBy:
		return m.AddedDeletedBy()
	case task.FieldTenantID:
		return m.AddedTenantID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case task.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case task.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case task.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case task.FieldTenantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantID(v)
		return nil
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldCreatedAt) {
		fields = append(fields, task.FieldCreatedAt)
	}
	if m.FieldCleared(task.FieldUpdatedAt) {
		fields = append(fields, task.FieldUpdatedAt)
	}
	if m.FieldCleared(task.FieldDeletedAt) {
		fields = append(fields, task.FieldDeletedAt)
	}
	if m.FieldCleared(task.FieldCreatedBy) {
		fields = append(fields, task.FieldCreatedBy)
	}
	if m.FieldCleared(task.FieldUpdatedBy) {
		fields = append(fields, task.FieldUpdatedBy)
	}
	if m.FieldCleared(task.FieldDeletedBy) {
		fields = append(fields, task.FieldDeletedBy)
	}
	if m.FieldCleared(task.FieldRemark) {
		fields = append(fields, task.FieldRemark)
	}
	if m.FieldCleared(task.FieldTenantID) {
		fields = append(fields, task.FieldTenantID)
	}
	if m.FieldCleared(task.FieldType) {
		fields = append(fields, task.FieldType)
	}
	if m.FieldCleared(task.FieldTypeName) {
		fields = append(fields, task.FieldTypeName)
	}
	if m.FieldCleared(task.FieldTaskPayload) {
		fields = append(fields, task.FieldTaskPayload)
	}
	if m.FieldCleared(task.FieldCronSpec) {
		fields = append(fields, task.FieldCronSpec)
	}
	if m.FieldCleared(task.FieldTaskOptions) {
		fields = append(fields, task.FieldTaskOptions)
	}
	if m.FieldCleared(task.FieldEnable) {
		fields = append(fields, task.FieldEnable)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case task.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case task.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case task.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case task.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case task.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case task.FieldRemark:
		m.ClearRemark()
		return nil
	case task.FieldTenantID:
		m.ClearTenantID()
		return nil
	case task.FieldType:
		m.ClearType()
		return nil
	case task.FieldTypeName:
		m.ClearTypeName()
		return nil
	case task.FieldTaskPayload:
		m.ClearTaskPayload()
		return nil
	case task.FieldCronSpec:
		m.ClearCronSpec()
		return nil
	case task.FieldTaskOptions:
		m.ClearTaskOptions()
		return nil
	case task.FieldEnable:
		m.ClearEnable()
		return nil
	}
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case task.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case task.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case task.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case task.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case task.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case task.FieldRemark:
		m.ResetRemark()
		return nil
	case task.FieldTenantID:
		m.ResetTenantID()
		return nil
	case task.FieldType:
		m.ResetType()
		return nil
	case task.FieldTypeName:
		m.ResetTypeName()
		return nil
	case task.FieldTaskPayload:
		m.ResetTaskPayload()
		return nil
	case task.FieldCronSpec:
		m.ResetCronSpec()
		return nil
	case task.FieldTaskOptions:
		m.ResetTaskOptions()
		return nil
	case task.FieldEnable:
		m.ResetEnable()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Task edge %s", name)
}

// TenantMutation represents an operation that mutates the Tenant nodes in the graph.
type TenantMutation struct {
	config
	op                Op
	typ               string
	id                *uint32
	created_at        *time.Time
	updated_at        *time.Time
	deleted_at        *time.Time
	created_by        *uint32
	addcreated_by     *int32
	updated_by        *uint32
	addupdated_by     *int32
	deleted_by        *uint32
	adddeleted_by     *int32
	remark            *string
	name              *string
	code              *string
	logo_url          *string
	industry          *string
	admin_user_id     *uint32
	addadmin_user_id  *int32
	status            *tenant.Status
	_type             *tenant.Type
	audit_status      *tenant.AuditStatus
	subscription_at   *time.Time
	unsubscribe_at    *time.Time
	subscription_plan *string
	expired_at        *time.Time
	last_login_time   *time.Time
	last_login_ip     *string
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Tenant, error)
	predicates        []predicate.Tenant
}

var _ ent.Mutation = (*TenantMutation)(nil)

// tenantOption allows management of the mutation configuration using functional options.
type tenantOption func(*TenantMutation)

// newTenantMutation creates new mutation for the Tenant entity.
func newTenantMutation(c config, op Op, opts ...tenantOption) *TenantMutation {
	m := &TenantMutation{
		config:        c,
		op:            op,
		typ:           TypeTenant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTenantID sets the ID field of the mutation.
func withTenantID(id uint32) tenantOption {
	return func(m *TenantMutation) {
		var (
			err   error
			once  sync.Once
			value *Tenant
		)
		m.oldValue = func(ctx context.Context) (*Tenant, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tenant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTenant sets the old Tenant of the mutation.
func withTenant(node *Tenant) tenantOption {
	return func(m *TenantMutation) {
		m.oldValue = func(context.Context) (*Tenant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TenantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TenantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Tenant entities.
func (m *TenantMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TenantMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TenantMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tenant.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TenantMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TenantMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *TenantMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[tenant.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *TenantMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[tenant.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TenantMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, tenant.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TenantMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TenantMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *TenantMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[tenant.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *TenantMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[tenant.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TenantMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, tenant.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TenantMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TenantMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *TenantMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[tenant.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *TenantMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[tenant.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TenantMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, tenant.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *TenantMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *TenantMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *TenantMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *TenantMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *TenantMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[tenant.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *TenantMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[tenant.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *TenantMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, tenant.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *TenantMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *TenantMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *TenantMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *TenantMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *TenantMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[tenant.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *TenantMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[tenant.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *TenantMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, tenant.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *TenantMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *TenantMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *TenantMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *TenantMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *TenantMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[tenant.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *TenantMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[tenant.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *TenantMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, tenant.FieldDeletedBy)
}

// SetRemark sets the "remark" field.
func (m *TenantMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *TenantMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *TenantMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[tenant.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *TenantMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[tenant.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *TenantMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, tenant.FieldRemark)
}

// SetName sets the "name" field.
func (m *TenantMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TenantMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *TenantMutation) ClearName() {
	m.name = nil
	m.clearedFields[tenant.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *TenantMutation) NameCleared() bool {
	_, ok := m.clearedFields[tenant.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *TenantMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, tenant.FieldName)
}

// SetCode sets the "code" field.
func (m *TenantMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *TenantMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ClearCode clears the value of the "code" field.
func (m *TenantMutation) ClearCode() {
	m.code = nil
	m.clearedFields[tenant.FieldCode] = struct{}{}
}

// CodeCleared returns if the "code" field was cleared in this mutation.
func (m *TenantMutation) CodeCleared() bool {
	_, ok := m.clearedFields[tenant.FieldCode]
	return ok
}

// ResetCode resets all changes to the "code" field.
func (m *TenantMutation) ResetCode() {
	m.code = nil
	delete(m.clearedFields, tenant.FieldCode)
}

// SetLogoURL sets the "logo_url" field.
func (m *TenantMutation) SetLogoURL(s string) {
	m.logo_url = &s
}

// LogoURL returns the value of the "logo_url" field in the mutation.
func (m *TenantMutation) LogoURL() (r string, exists bool) {
	v := m.logo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoURL returns the old "logo_url" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldLogoURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoURL: %w", err)
	}
	return oldValue.LogoURL, nil
}

// ClearLogoURL clears the value of the "logo_url" field.
func (m *TenantMutation) ClearLogoURL() {
	m.logo_url = nil
	m.clearedFields[tenant.FieldLogoURL] = struct{}{}
}

// LogoURLCleared returns if the "logo_url" field was cleared in this mutation.
func (m *TenantMutation) LogoURLCleared() bool {
	_, ok := m.clearedFields[tenant.FieldLogoURL]
	return ok
}

// ResetLogoURL resets all changes to the "logo_url" field.
func (m *TenantMutation) ResetLogoURL() {
	m.logo_url = nil
	delete(m.clearedFields, tenant.FieldLogoURL)
}

// SetIndustry sets the "industry" field.
func (m *TenantMutation) SetIndustry(s string) {
	m.industry = &s
}

// Industry returns the value of the "industry" field in the mutation.
func (m *TenantMutation) Industry() (r string, exists bool) {
	v := m.industry
	if v == nil {
		return
	}
	return *v, true
}

// OldIndustry returns the old "industry" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldIndustry(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndustry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndustry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndustry: %w", err)
	}
	return oldValue.Industry, nil
}

// ClearIndustry clears the value of the "industry" field.
func (m *TenantMutation) ClearIndustry() {
	m.industry = nil
	m.clearedFields[tenant.FieldIndustry] = struct{}{}
}

// IndustryCleared returns if the "industry" field was cleared in this mutation.
func (m *TenantMutation) IndustryCleared() bool {
	_, ok := m.clearedFields[tenant.FieldIndustry]
	return ok
}

// ResetIndustry resets all changes to the "industry" field.
func (m *TenantMutation) ResetIndustry() {
	m.industry = nil
	delete(m.clearedFields, tenant.FieldIndustry)
}

// SetAdminUserID sets the "admin_user_id" field.
func (m *TenantMutation) SetAdminUserID(u uint32) {
	m.admin_user_id = &u
	m.addadmin_user_id = nil
}

// AdminUserID returns the value of the "admin_user_id" field in the mutation.
func (m *TenantMutation) AdminUserID() (r uint32, exists bool) {
	v := m.admin_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAdminUserID returns the old "admin_user_id" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldAdminUserID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdminUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdminUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdminUserID: %w", err)
	}
	return oldValue.AdminUserID, nil
}

// AddAdminUserID adds u to the "admin_user_id" field.
func (m *TenantMutation) AddAdminUserID(u int32) {
	if m.addadmin_user_id != nil {
		*m.addadmin_user_id += u
	} else {
		m.addadmin_user_id = &u
	}
}

// AddedAdminUserID returns the value that was added to the "admin_user_id" field in this mutation.
func (m *TenantMutation) AddedAdminUserID() (r int32, exists bool) {
	v := m.addadmin_user_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearAdminUserID clears the value of the "admin_user_id" field.
func (m *TenantMutation) ClearAdminUserID() {
	m.admin_user_id = nil
	m.addadmin_user_id = nil
	m.clearedFields[tenant.FieldAdminUserID] = struct{}{}
}

// AdminUserIDCleared returns if the "admin_user_id" field was cleared in this mutation.
func (m *TenantMutation) AdminUserIDCleared() bool {
	_, ok := m.clearedFields[tenant.FieldAdminUserID]
	return ok
}

// ResetAdminUserID resets all changes to the "admin_user_id" field.
func (m *TenantMutation) ResetAdminUserID() {
	m.admin_user_id = nil
	m.addadmin_user_id = nil
	delete(m.clearedFields, tenant.FieldAdminUserID)
}

// SetStatus sets the "status" field.
func (m *TenantMutation) SetStatus(t tenant.Status) {
	m.status = &t
}

// Status returns the value of the "status" field in the mutation.
func (m *TenantMutation) Status() (r tenant.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldStatus(ctx context.Context) (v *tenant.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *TenantMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[tenant.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *TenantMutation) StatusCleared() bool {
	_, ok := m.clearedFields[tenant.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *TenantMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, tenant.FieldStatus)
}

// SetType sets the "type" field.
func (m *TenantMutation) SetType(t tenant.Type) {
	m._type = &t
}

// GetType returns the value of the "type" field in the mutation.
func (m *TenantMutation) GetType() (r tenant.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldType(ctx context.Context) (v *tenant.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *TenantMutation) ClearType() {
	m._type = nil
	m.clearedFields[tenant.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *TenantMutation) TypeCleared() bool {
	_, ok := m.clearedFields[tenant.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *TenantMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, tenant.FieldType)
}

// SetAuditStatus sets the "audit_status" field.
func (m *TenantMutation) SetAuditStatus(ts tenant.AuditStatus) {
	m.audit_status = &ts
}

// AuditStatus returns the value of the "audit_status" field in the mutation.
func (m *TenantMutation) AuditStatus() (r tenant.AuditStatus, exists bool) {
	v := m.audit_status
	if v == nil {
		return
	}
	return *v, true
}

// OldAuditStatus returns the old "audit_status" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldAuditStatus(ctx context.Context) (v *tenant.AuditStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuditStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuditStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuditStatus: %w", err)
	}
	return oldValue.AuditStatus, nil
}

// ClearAuditStatus clears the value of the "audit_status" field.
func (m *TenantMutation) ClearAuditStatus() {
	m.audit_status = nil
	m.clearedFields[tenant.FieldAuditStatus] = struct{}{}
}

// AuditStatusCleared returns if the "audit_status" field was cleared in this mutation.
func (m *TenantMutation) AuditStatusCleared() bool {
	_, ok := m.clearedFields[tenant.FieldAuditStatus]
	return ok
}

// ResetAuditStatus resets all changes to the "audit_status" field.
func (m *TenantMutation) ResetAuditStatus() {
	m.audit_status = nil
	delete(m.clearedFields, tenant.FieldAuditStatus)
}

// SetSubscriptionAt sets the "subscription_at" field.
func (m *TenantMutation) SetSubscriptionAt(t time.Time) {
	m.subscription_at = &t
}

// SubscriptionAt returns the value of the "subscription_at" field in the mutation.
func (m *TenantMutation) SubscriptionAt() (r time.Time, exists bool) {
	v := m.subscription_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionAt returns the old "subscription_at" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldSubscriptionAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionAt: %w", err)
	}
	return oldValue.SubscriptionAt, nil
}

// ClearSubscriptionAt clears the value of the "subscription_at" field.
func (m *TenantMutation) ClearSubscriptionAt() {
	m.subscription_at = nil
	m.clearedFields[tenant.FieldSubscriptionAt] = struct{}{}
}

// SubscriptionAtCleared returns if the "subscription_at" field was cleared in this mutation.
func (m *TenantMutation) SubscriptionAtCleared() bool {
	_, ok := m.clearedFields[tenant.FieldSubscriptionAt]
	return ok
}

// ResetSubscriptionAt resets all changes to the "subscription_at" field.
func (m *TenantMutation) ResetSubscriptionAt() {
	m.subscription_at = nil
	delete(m.clearedFields, tenant.FieldSubscriptionAt)
}

// SetUnsubscribeAt sets the "unsubscribe_at" field.
func (m *TenantMutation) SetUnsubscribeAt(t time.Time) {
	m.unsubscribe_at = &t
}

// UnsubscribeAt returns the value of the "unsubscribe_at" field in the mutation.
func (m *TenantMutation) UnsubscribeAt() (r time.Time, exists bool) {
	v := m.unsubscribe_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUnsubscribeAt returns the old "unsubscribe_at" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldUnsubscribeAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnsubscribeAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnsubscribeAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnsubscribeAt: %w", err)
	}
	return oldValue.UnsubscribeAt, nil
}

// ClearUnsubscribeAt clears the value of the "unsubscribe_at" field.
func (m *TenantMutation) ClearUnsubscribeAt() {
	m.unsubscribe_at = nil
	m.clearedFields[tenant.FieldUnsubscribeAt] = struct{}{}
}

// UnsubscribeAtCleared returns if the "unsubscribe_at" field was cleared in this mutation.
func (m *TenantMutation) UnsubscribeAtCleared() bool {
	_, ok := m.clearedFields[tenant.FieldUnsubscribeAt]
	return ok
}

// ResetUnsubscribeAt resets all changes to the "unsubscribe_at" field.
func (m *TenantMutation) ResetUnsubscribeAt() {
	m.unsubscribe_at = nil
	delete(m.clearedFields, tenant.FieldUnsubscribeAt)
}

// SetSubscriptionPlan sets the "subscription_plan" field.
func (m *TenantMutation) SetSubscriptionPlan(s string) {
	m.subscription_plan = &s
}

// SubscriptionPlan returns the value of the "subscription_plan" field in the mutation.
func (m *TenantMutation) SubscriptionPlan() (r string, exists bool) {
	v := m.subscription_plan
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionPlan returns the old "subscription_plan" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldSubscriptionPlan(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionPlan is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionPlan requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionPlan: %w", err)
	}
	return oldValue.SubscriptionPlan, nil
}

// ClearSubscriptionPlan clears the value of the "subscription_plan" field.
func (m *TenantMutation) ClearSubscriptionPlan() {
	m.subscription_plan = nil
	m.clearedFields[tenant.FieldSubscriptionPlan] = struct{}{}
}

// SubscriptionPlanCleared returns if the "subscription_plan" field was cleared in this mutation.
func (m *TenantMutation) SubscriptionPlanCleared() bool {
	_, ok := m.clearedFields[tenant.FieldSubscriptionPlan]
	return ok
}

// ResetSubscriptionPlan resets all changes to the "subscription_plan" field.
func (m *TenantMutation) ResetSubscriptionPlan() {
	m.subscription_plan = nil
	delete(m.clearedFields, tenant.FieldSubscriptionPlan)
}

// SetExpiredAt sets the "expired_at" field.
func (m *TenantMutation) SetExpiredAt(t time.Time) {
	m.expired_at = &t
}

// ExpiredAt returns the value of the "expired_at" field in the mutation.
func (m *TenantMutation) ExpiredAt() (r time.Time, exists bool) {
	v := m.expired_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiredAt returns the old "expired_at" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldExpiredAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiredAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiredAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiredAt: %w", err)
	}
	return oldValue.ExpiredAt, nil
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (m *TenantMutation) ClearExpiredAt() {
	m.expired_at = nil
	m.clearedFields[tenant.FieldExpiredAt] = struct{}{}
}

// ExpiredAtCleared returns if the "expired_at" field was cleared in this mutation.
func (m *TenantMutation) ExpiredAtCleared() bool {
	_, ok := m.clearedFields[tenant.FieldExpiredAt]
	return ok
}

// ResetExpiredAt resets all changes to the "expired_at" field.
func (m *TenantMutation) ResetExpiredAt() {
	m.expired_at = nil
	delete(m.clearedFields, tenant.FieldExpiredAt)
}

// SetLastLoginTime sets the "last_login_time" field.
func (m *TenantMutation) SetLastLoginTime(t time.Time) {
	m.last_login_time = &t
}

// LastLoginTime returns the value of the "last_login_time" field in the mutation.
func (m *TenantMutation) LastLoginTime() (r time.Time, exists bool) {
	v := m.last_login_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginTime returns the old "last_login_time" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldLastLoginTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginTime: %w", err)
	}
	return oldValue.LastLoginTime, nil
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (m *TenantMutation) ClearLastLoginTime() {
	m.last_login_time = nil
	m.clearedFields[tenant.FieldLastLoginTime] = struct{}{}
}

// LastLoginTimeCleared returns if the "last_login_time" field was cleared in this mutation.
func (m *TenantMutation) LastLoginTimeCleared() bool {
	_, ok := m.clearedFields[tenant.FieldLastLoginTime]
	return ok
}

// ResetLastLoginTime resets all changes to the "last_login_time" field.
func (m *TenantMutation) ResetLastLoginTime() {
	m.last_login_time = nil
	delete(m.clearedFields, tenant.FieldLastLoginTime)
}

// SetLastLoginIP sets the "last_login_ip" field.
func (m *TenantMutation) SetLastLoginIP(s string) {
	m.last_login_ip = &s
}

// LastLoginIP returns the value of the "last_login_ip" field in the mutation.
func (m *TenantMutation) LastLoginIP() (r string, exists bool) {
	v := m.last_login_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginIP returns the old "last_login_ip" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldLastLoginIP(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginIP: %w", err)
	}
	return oldValue.LastLoginIP, nil
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (m *TenantMutation) ClearLastLoginIP() {
	m.last_login_ip = nil
	m.clearedFields[tenant.FieldLastLoginIP] = struct{}{}
}

// LastLoginIPCleared returns if the "last_login_ip" field was cleared in this mutation.
func (m *TenantMutation) LastLoginIPCleared() bool {
	_, ok := m.clearedFields[tenant.FieldLastLoginIP]
	return ok
}

// ResetLastLoginIP resets all changes to the "last_login_ip" field.
func (m *TenantMutation) ResetLastLoginIP() {
	m.last_login_ip = nil
	delete(m.clearedFields, tenant.FieldLastLoginIP)
}

// Where appends a list predicates to the TenantMutation builder.
func (m *TenantMutation) Where(ps ...predicate.Tenant) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TenantMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TenantMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tenant, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TenantMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TenantMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tenant).
func (m *TenantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TenantMutation) Fields() []string {
	fields := make([]string, 0, 21)
	if m.created_at != nil {
		fields = append(fields, tenant.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, tenant.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, tenant.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, tenant.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, tenant.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, tenant.FieldDeletedBy)
	}
	if m.remark != nil {
		fields = append(fields, tenant.FieldRemark)
	}
	if m.name != nil {
		fields = append(fields, tenant.FieldName)
	}
	if m.code != nil {
		fields = append(fields, tenant.FieldCode)
	}
	if m.logo_url != nil {
		fields = append(fields, tenant.FieldLogoURL)
	}
	if m.industry != nil {
		fields = append(fields, tenant.FieldIndustry)
	}
	if m.admin_user_id != nil {
		fields = append(fields, tenant.FieldAdminUserID)
	}
	if m.status != nil {
		fields = append(fields, tenant.FieldStatus)
	}
	if m._type != nil {
		fields = append(fields, tenant.FieldType)
	}
	if m.audit_status != nil {
		fields = append(fields, tenant.FieldAuditStatus)
	}
	if m.subscription_at != nil {
		fields = append(fields, tenant.FieldSubscriptionAt)
	}
	if m.unsubscribe_at != nil {
		fields = append(fields, tenant.FieldUnsubscribeAt)
	}
	if m.subscription_plan != nil {
		fields = append(fields, tenant.FieldSubscriptionPlan)
	}
	if m.expired_at != nil {
		fields = append(fields, tenant.FieldExpiredAt)
	}
	if m.last_login_time != nil {
		fields = append(fields, tenant.FieldLastLoginTime)
	}
	if m.last_login_ip != nil {
		fields = append(fields, tenant.FieldLastLoginIP)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TenantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tenant.FieldCreatedAt:
		return m.CreatedAt()
	case tenant.FieldUpdatedAt:
		return m.UpdatedAt()
	case tenant.FieldDeletedAt:
		return m.DeletedAt()
	case tenant.FieldCreatedBy:
		return m.CreatedBy()
	case tenant.FieldUpdatedBy:
		return m.UpdatedBy()
	case tenant.FieldDeletedBy:
		return m.DeletedBy()
	case tenant.FieldRemark:
		return m.Remark()
	case tenant.FieldName:
		return m.Name()
	case tenant.FieldCode:
		return m.Code()
	case tenant.FieldLogoURL:
		return m.LogoURL()
	case tenant.FieldIndustry:
		return m.Industry()
	case tenant.FieldAdminUserID:
		return m.AdminUserID()
	case tenant.FieldStatus:
		return m.Status()
	case tenant.FieldType:
		return m.GetType()
	case tenant.FieldAuditStatus:
		return m.AuditStatus()
	case tenant.FieldSubscriptionAt:
		return m.SubscriptionAt()
	case tenant.FieldUnsubscribeAt:
		return m.UnsubscribeAt()
	case tenant.FieldSubscriptionPlan:
		return m.SubscriptionPlan()
	case tenant.FieldExpiredAt:
		return m.ExpiredAt()
	case tenant.FieldLastLoginTime:
		return m.LastLoginTime()
	case tenant.FieldLastLoginIP:
		return m.LastLoginIP()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TenantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tenant.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tenant.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case tenant.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case tenant.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case tenant.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case tenant.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case tenant.FieldRemark:
		return m.OldRemark(ctx)
	case tenant.FieldName:
		return m.OldName(ctx)
	case tenant.FieldCode:
		return m.OldCode(ctx)
	case tenant.FieldLogoURL:
		return m.OldLogoURL(ctx)
	case tenant.FieldIndustry:
		return m.OldIndustry(ctx)
	case tenant.FieldAdminUserID:
		return m.OldAdminUserID(ctx)
	case tenant.FieldStatus:
		return m.OldStatus(ctx)
	case tenant.FieldType:
		return m.OldType(ctx)
	case tenant.FieldAuditStatus:
		return m.OldAuditStatus(ctx)
	case tenant.FieldSubscriptionAt:
		return m.OldSubscriptionAt(ctx)
	case tenant.FieldUnsubscribeAt:
		return m.OldUnsubscribeAt(ctx)
	case tenant.FieldSubscriptionPlan:
		return m.OldSubscriptionPlan(ctx)
	case tenant.FieldExpiredAt:
		return m.OldExpiredAt(ctx)
	case tenant.FieldLastLoginTime:
		return m.OldLastLoginTime(ctx)
	case tenant.FieldLastLoginIP:
		return m.OldLastLoginIP(ctx)
	}
	return nil, fmt.Errorf("unknown Tenant field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TenantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tenant.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tenant.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case tenant.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case tenant.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case tenant.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case tenant.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case tenant.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case tenant.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tenant.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case tenant.FieldLogoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoURL(v)
		return nil
	case tenant.FieldIndustry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndustry(v)
		return nil
	case tenant.FieldAdminUserID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdminUserID(v)
		return nil
	case tenant.FieldStatus:
		v, ok := value.(tenant.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case tenant.FieldType:
		v, ok := value.(tenant.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case tenant.FieldAuditStatus:
		v, ok := value.(tenant.AuditStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuditStatus(v)
		return nil
	case tenant.FieldSubscriptionAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionAt(v)
		return nil
	case tenant.FieldUnsubscribeAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnsubscribeAt(v)
		return nil
	case tenant.FieldSubscriptionPlan:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionPlan(v)
		return nil
	case tenant.FieldExpiredAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiredAt(v)
		return nil
	case tenant.FieldLastLoginTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginTime(v)
		return nil
	case tenant.FieldLastLoginIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginIP(v)
		return nil
	}
	return fmt.Errorf("unknown Tenant field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TenantMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, tenant.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, tenant.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, tenant.FieldDeletedBy)
	}
	if m.addadmin_user_id != nil {
		fields = append(fields, tenant.FieldAdminUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TenantMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tenant.FieldCreatedBy:
		return m.AddedCreatedBy()
	case tenant.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case tenant.FieldDeletedBy:
		return m.AddedDeletedBy()
	case tenant.FieldAdminUserID:
		return m.AddedAdminUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TenantMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tenant.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case tenant.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case tenant.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case tenant.FieldAdminUserID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAdminUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Tenant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TenantMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tenant.FieldCreatedAt) {
		fields = append(fields, tenant.FieldCreatedAt)
	}
	if m.FieldCleared(tenant.FieldUpdatedAt) {
		fields = append(fields, tenant.FieldUpdatedAt)
	}
	if m.FieldCleared(tenant.FieldDeletedAt) {
		fields = append(fields, tenant.FieldDeletedAt)
	}
	if m.FieldCleared(tenant.FieldCreatedBy) {
		fields = append(fields, tenant.FieldCreatedBy)
	}
	if m.FieldCleared(tenant.FieldUpdatedBy) {
		fields = append(fields, tenant.FieldUpdatedBy)
	}
	if m.FieldCleared(tenant.FieldDeletedBy) {
		fields = append(fields, tenant.FieldDeletedBy)
	}
	if m.FieldCleared(tenant.FieldRemark) {
		fields = append(fields, tenant.FieldRemark)
	}
	if m.FieldCleared(tenant.FieldName) {
		fields = append(fields, tenant.FieldName)
	}
	if m.FieldCleared(tenant.FieldCode) {
		fields = append(fields, tenant.FieldCode)
	}
	if m.FieldCleared(tenant.FieldLogoURL) {
		fields = append(fields, tenant.FieldLogoURL)
	}
	if m.FieldCleared(tenant.FieldIndustry) {
		fields = append(fields, tenant.FieldIndustry)
	}
	if m.FieldCleared(tenant.FieldAdminUserID) {
		fields = append(fields, tenant.FieldAdminUserID)
	}
	if m.FieldCleared(tenant.FieldStatus) {
		fields = append(fields, tenant.FieldStatus)
	}
	if m.FieldCleared(tenant.FieldType) {
		fields = append(fields, tenant.FieldType)
	}
	if m.FieldCleared(tenant.FieldAuditStatus) {
		fields = append(fields, tenant.FieldAuditStatus)
	}
	if m.FieldCleared(tenant.FieldSubscriptionAt) {
		fields = append(fields, tenant.FieldSubscriptionAt)
	}
	if m.FieldCleared(tenant.FieldUnsubscribeAt) {
		fields = append(fields, tenant.FieldUnsubscribeAt)
	}
	if m.FieldCleared(tenant.FieldSubscriptionPlan) {
		fields = append(fields, tenant.FieldSubscriptionPlan)
	}
	if m.FieldCleared(tenant.FieldExpiredAt) {
		fields = append(fields, tenant.FieldExpiredAt)
	}
	if m.FieldCleared(tenant.FieldLastLoginTime) {
		fields = append(fields, tenant.FieldLastLoginTime)
	}
	if m.FieldCleared(tenant.FieldLastLoginIP) {
		fields = append(fields, tenant.FieldLastLoginIP)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TenantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TenantMutation) ClearField(name string) error {
	switch name {
	case tenant.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case tenant.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case tenant.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case tenant.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case tenant.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case tenant.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case tenant.FieldRemark:
		m.ClearRemark()
		return nil
	case tenant.FieldName:
		m.ClearName()
		return nil
	case tenant.FieldCode:
		m.ClearCode()
		return nil
	case tenant.FieldLogoURL:
		m.ClearLogoURL()
		return nil
	case tenant.FieldIndustry:
		m.ClearIndustry()
		return nil
	case tenant.FieldAdminUserID:
		m.ClearAdminUserID()
		return nil
	case tenant.FieldStatus:
		m.ClearStatus()
		return nil
	case tenant.FieldType:
		m.ClearType()
		return nil
	case tenant.FieldAuditStatus:
		m.ClearAuditStatus()
		return nil
	case tenant.FieldSubscriptionAt:
		m.ClearSubscriptionAt()
		return nil
	case tenant.FieldUnsubscribeAt:
		m.ClearUnsubscribeAt()
		return nil
	case tenant.FieldSubscriptionPlan:
		m.ClearSubscriptionPlan()
		return nil
	case tenant.FieldExpiredAt:
		m.ClearExpiredAt()
		return nil
	case tenant.FieldLastLoginTime:
		m.ClearLastLoginTime()
		return nil
	case tenant.FieldLastLoginIP:
		m.ClearLastLoginIP()
		return nil
	}
	return fmt.Errorf("unknown Tenant nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TenantMutation) ResetField(name string) error {
	switch name {
	case tenant.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tenant.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case tenant.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case tenant.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case tenant.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case tenant.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case tenant.FieldRemark:
		m.ResetRemark()
		return nil
	case tenant.FieldName:
		m.ResetName()
		return nil
	case tenant.FieldCode:
		m.ResetCode()
		return nil
	case tenant.FieldLogoURL:
		m.ResetLogoURL()
		return nil
	case tenant.FieldIndustry:
		m.ResetIndustry()
		return nil
	case tenant.FieldAdminUserID:
		m.ResetAdminUserID()
		return nil
	case tenant.FieldStatus:
		m.ResetStatus()
		return nil
	case tenant.FieldType:
		m.ResetType()
		return nil
	case tenant.FieldAuditStatus:
		m.ResetAuditStatus()
		return nil
	case tenant.FieldSubscriptionAt:
		m.ResetSubscriptionAt()
		return nil
	case tenant.FieldUnsubscribeAt:
		m.ResetUnsubscribeAt()
		return nil
	case tenant.FieldSubscriptionPlan:
		m.ResetSubscriptionPlan()
		return nil
	case tenant.FieldExpiredAt:
		m.ResetExpiredAt()
		return nil
	case tenant.FieldLastLoginTime:
		m.ResetLastLoginTime()
		return nil
	case tenant.FieldLastLoginIP:
		m.ResetLastLoginIP()
		return nil
	}
	return fmt.Errorf("unknown Tenant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TenantMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TenantMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TenantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TenantMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TenantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TenantMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TenantMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Tenant unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TenantMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Tenant edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op               Op
	typ              string
	id               *uint32
	created_by       *uint32
	addcreated_by    *int32
	updated_by       *uint32
	addupdated_by    *int32
	deleted_by       *uint32
	adddeleted_by    *int32
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	remark           *string
	tenant_id        *uint32
	addtenant_id     *int32
	username         *string
	nickname         *string
	realname         *string
	email            *string
	mobile           *string
	telephone        *string
	avatar           *string
	address          *string
	region           *string
	description      *string
	gender           *user.Gender
	authority        *user.Authority
	status           *user.Status
	last_login_time  *time.Time
	last_login_ip    *string
	org_id           *uint32
	addorg_id        *int32
	department_id    *uint32
	adddepartment_id *int32
	position_id      *uint32
	addposition_id   *int32
	work_id          *uint32
	addwork_id       *int32
	role_ids         *[]int
	appendrole_ids   []int
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*User, error)
	predicates       []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uint32) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedBy sets the "created_by" field.
func (m *UserMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *UserMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *UserMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *UserMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *UserMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[user.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *UserMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[user.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *UserMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, user.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *UserMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *UserMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *UserMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *UserMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *UserMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[user.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *UserMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[user.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *UserMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, user.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *UserMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *UserMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *UserMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *UserMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *UserMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[user.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *UserMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *UserMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, user.FieldDeletedBy)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *UserMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[user.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *UserMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, user.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *UserMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[user.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *UserMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, user.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[user.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, user.FieldDeletedAt)
}

// SetRemark sets the "remark" field.
func (m *UserMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *UserMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *UserMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[user.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *UserMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[user.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *UserMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, user.FieldRemark)
}

// SetTenantID sets the "tenant_id" field.
func (m *UserMutation) SetTenantID(u uint32) {
	m.tenant_id = &u
	m.addtenant_id = nil
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *UserMutation) TenantID() (r uint32, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTenantID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// AddTenantID adds u to the "tenant_id" field.
func (m *UserMutation) AddTenantID(u int32) {
	if m.addtenant_id != nil {
		*m.addtenant_id += u
	} else {
		m.addtenant_id = &u
	}
}

// AddedTenantID returns the value that was added to the "tenant_id" field in this mutation.
func (m *UserMutation) AddedTenantID() (r int32, exists bool) {
	v := m.addtenant_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTenantID clears the value of the "tenant_id" field.
func (m *UserMutation) ClearTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	m.clearedFields[user.FieldTenantID] = struct{}{}
}

// TenantIDCleared returns if the "tenant_id" field was cleared in this mutation.
func (m *UserMutation) TenantIDCleared() bool {
	_, ok := m.clearedFields[user.FieldTenantID]
	return ok
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *UserMutation) ResetTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	delete(m.clearedFields, user.FieldTenantID)
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *UserMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[user.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *UserMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[user.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, user.FieldUsername)
}

// SetNickname sets the "nickname" field.
func (m *UserMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *UserMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNickname(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ClearNickname clears the value of the "nickname" field.
func (m *UserMutation) ClearNickname() {
	m.nickname = nil
	m.clearedFields[user.FieldNickname] = struct{}{}
}

// NicknameCleared returns if the "nickname" field was cleared in this mutation.
func (m *UserMutation) NicknameCleared() bool {
	_, ok := m.clearedFields[user.FieldNickname]
	return ok
}

// ResetNickname resets all changes to the "nickname" field.
func (m *UserMutation) ResetNickname() {
	m.nickname = nil
	delete(m.clearedFields, user.FieldNickname)
}

// SetRealname sets the "realname" field.
func (m *UserMutation) SetRealname(s string) {
	m.realname = &s
}

// Realname returns the value of the "realname" field in the mutation.
func (m *UserMutation) Realname() (r string, exists bool) {
	v := m.realname
	if v == nil {
		return
	}
	return *v, true
}

// OldRealname returns the old "realname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRealname(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRealname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRealname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRealname: %w", err)
	}
	return oldValue.Realname, nil
}

// ClearRealname clears the value of the "realname" field.
func (m *UserMutation) ClearRealname() {
	m.realname = nil
	m.clearedFields[user.FieldRealname] = struct{}{}
}

// RealnameCleared returns if the "realname" field was cleared in this mutation.
func (m *UserMutation) RealnameCleared() bool {
	_, ok := m.clearedFields[user.FieldRealname]
	return ok
}

// ResetRealname resets all changes to the "realname" field.
func (m *UserMutation) ResetRealname() {
	m.realname = nil
	delete(m.clearedFields, user.FieldRealname)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetMobile sets the "mobile" field.
func (m *UserMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *UserMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMobile(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ClearMobile clears the value of the "mobile" field.
func (m *UserMutation) ClearMobile() {
	m.mobile = nil
	m.clearedFields[user.FieldMobile] = struct{}{}
}

// MobileCleared returns if the "mobile" field was cleared in this mutation.
func (m *UserMutation) MobileCleared() bool {
	_, ok := m.clearedFields[user.FieldMobile]
	return ok
}

// ResetMobile resets all changes to the "mobile" field.
func (m *UserMutation) ResetMobile() {
	m.mobile = nil
	delete(m.clearedFields, user.FieldMobile)
}

// SetTelephone sets the "telephone" field.
func (m *UserMutation) SetTelephone(s string) {
	m.telephone = &s
}

// Telephone returns the value of the "telephone" field in the mutation.
func (m *UserMutation) Telephone() (r string, exists bool) {
	v := m.telephone
	if v == nil {
		return
	}
	return *v, true
}

// OldTelephone returns the old "telephone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTelephone(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTelephone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTelephone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTelephone: %w", err)
	}
	return oldValue.Telephone, nil
}

// ClearTelephone clears the value of the "telephone" field.
func (m *UserMutation) ClearTelephone() {
	m.telephone = nil
	m.clearedFields[user.FieldTelephone] = struct{}{}
}

// TelephoneCleared returns if the "telephone" field was cleared in this mutation.
func (m *UserMutation) TelephoneCleared() bool {
	_, ok := m.clearedFields[user.FieldTelephone]
	return ok
}

// ResetTelephone resets all changes to the "telephone" field.
func (m *UserMutation) ResetTelephone() {
	m.telephone = nil
	delete(m.clearedFields, user.FieldTelephone)
}

// SetAvatar sets the "avatar" field.
func (m *UserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *UserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatar(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *UserMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[user.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *UserMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *UserMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, user.FieldAvatar)
}

// SetAddress sets the "address" field.
func (m *UserMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *UserMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAddress(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *UserMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[user.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *UserMutation) AddressCleared() bool {
	_, ok := m.clearedFields[user.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *UserMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, user.FieldAddress)
}

// SetRegion sets the "region" field.
func (m *UserMutation) SetRegion(s string) {
	m.region = &s
}

// Region returns the value of the "region" field in the mutation.
func (m *UserMutation) Region() (r string, exists bool) {
	v := m.region
	if v == nil {
		return
	}
	return *v, true
}

// OldRegion returns the old "region" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRegion(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegion: %w", err)
	}
	return oldValue.Region, nil
}

// ClearRegion clears the value of the "region" field.
func (m *UserMutation) ClearRegion() {
	m.region = nil
	m.clearedFields[user.FieldRegion] = struct{}{}
}

// RegionCleared returns if the "region" field was cleared in this mutation.
func (m *UserMutation) RegionCleared() bool {
	_, ok := m.clearedFields[user.FieldRegion]
	return ok
}

// ResetRegion resets all changes to the "region" field.
func (m *UserMutation) ResetRegion() {
	m.region = nil
	delete(m.clearedFields, user.FieldRegion)
}

// SetDescription sets the "description" field.
func (m *UserMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *UserMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *UserMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[user.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *UserMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[user.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *UserMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, user.FieldDescription)
}

// SetGender sets the "gender" field.
func (m *UserMutation) SetGender(u user.Gender) {
	m.gender = &u
}

// Gender returns the value of the "gender" field in the mutation.
func (m *UserMutation) Gender() (r user.Gender, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGender(ctx context.Context) (v *user.Gender, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ClearGender clears the value of the "gender" field.
func (m *UserMutation) ClearGender() {
	m.gender = nil
	m.clearedFields[user.FieldGender] = struct{}{}
}

// GenderCleared returns if the "gender" field was cleared in this mutation.
func (m *UserMutation) GenderCleared() bool {
	_, ok := m.clearedFields[user.FieldGender]
	return ok
}

// ResetGender resets all changes to the "gender" field.
func (m *UserMutation) ResetGender() {
	m.gender = nil
	delete(m.clearedFields, user.FieldGender)
}

// SetAuthority sets the "authority" field.
func (m *UserMutation) SetAuthority(u user.Authority) {
	m.authority = &u
}

// Authority returns the value of the "authority" field in the mutation.
func (m *UserMutation) Authority() (r user.Authority, exists bool) {
	v := m.authority
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthority returns the old "authority" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAuthority(ctx context.Context) (v *user.Authority, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthority: %w", err)
	}
	return oldValue.Authority, nil
}

// ResetAuthority resets all changes to the "authority" field.
func (m *UserMutation) ResetAuthority() {
	m.authority = nil
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(u user.Status) {
	m.status = &u
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r user.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v *user.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *UserMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[user.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *UserMutation) StatusCleared() bool {
	_, ok := m.clearedFields[user.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, user.FieldStatus)
}

// SetLastLoginTime sets the "last_login_time" field.
func (m *UserMutation) SetLastLoginTime(t time.Time) {
	m.last_login_time = &t
}

// LastLoginTime returns the value of the "last_login_time" field in the mutation.
func (m *UserMutation) LastLoginTime() (r time.Time, exists bool) {
	v := m.last_login_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginTime returns the old "last_login_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLoginTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginTime: %w", err)
	}
	return oldValue.LastLoginTime, nil
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (m *UserMutation) ClearLastLoginTime() {
	m.last_login_time = nil
	m.clearedFields[user.FieldLastLoginTime] = struct{}{}
}

// LastLoginTimeCleared returns if the "last_login_time" field was cleared in this mutation.
func (m *UserMutation) LastLoginTimeCleared() bool {
	_, ok := m.clearedFields[user.FieldLastLoginTime]
	return ok
}

// ResetLastLoginTime resets all changes to the "last_login_time" field.
func (m *UserMutation) ResetLastLoginTime() {
	m.last_login_time = nil
	delete(m.clearedFields, user.FieldLastLoginTime)
}

// SetLastLoginIP sets the "last_login_ip" field.
func (m *UserMutation) SetLastLoginIP(s string) {
	m.last_login_ip = &s
}

// LastLoginIP returns the value of the "last_login_ip" field in the mutation.
func (m *UserMutation) LastLoginIP() (r string, exists bool) {
	v := m.last_login_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginIP returns the old "last_login_ip" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLoginIP(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginIP: %w", err)
	}
	return oldValue.LastLoginIP, nil
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (m *UserMutation) ClearLastLoginIP() {
	m.last_login_ip = nil
	m.clearedFields[user.FieldLastLoginIP] = struct{}{}
}

// LastLoginIPCleared returns if the "last_login_ip" field was cleared in this mutation.
func (m *UserMutation) LastLoginIPCleared() bool {
	_, ok := m.clearedFields[user.FieldLastLoginIP]
	return ok
}

// ResetLastLoginIP resets all changes to the "last_login_ip" field.
func (m *UserMutation) ResetLastLoginIP() {
	m.last_login_ip = nil
	delete(m.clearedFields, user.FieldLastLoginIP)
}

// SetOrgID sets the "org_id" field.
func (m *UserMutation) SetOrgID(u uint32) {
	m.org_id = &u
	m.addorg_id = nil
}

// OrgID returns the value of the "org_id" field in the mutation.
func (m *UserMutation) OrgID() (r uint32, exists bool) {
	v := m.org_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgID returns the old "org_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldOrgID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgID: %w", err)
	}
	return oldValue.OrgID, nil
}

// AddOrgID adds u to the "org_id" field.
func (m *UserMutation) AddOrgID(u int32) {
	if m.addorg_id != nil {
		*m.addorg_id += u
	} else {
		m.addorg_id = &u
	}
}

// AddedOrgID returns the value that was added to the "org_id" field in this mutation.
func (m *UserMutation) AddedOrgID() (r int32, exists bool) {
	v := m.addorg_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOrgID clears the value of the "org_id" field.
func (m *UserMutation) ClearOrgID() {
	m.org_id = nil
	m.addorg_id = nil
	m.clearedFields[user.FieldOrgID] = struct{}{}
}

// OrgIDCleared returns if the "org_id" field was cleared in this mutation.
func (m *UserMutation) OrgIDCleared() bool {
	_, ok := m.clearedFields[user.FieldOrgID]
	return ok
}

// ResetOrgID resets all changes to the "org_id" field.
func (m *UserMutation) ResetOrgID() {
	m.org_id = nil
	m.addorg_id = nil
	delete(m.clearedFields, user.FieldOrgID)
}

// SetDepartmentID sets the "department_id" field.
func (m *UserMutation) SetDepartmentID(u uint32) {
	m.department_id = &u
	m.adddepartment_id = nil
}

// DepartmentID returns the value of the "department_id" field in the mutation.
func (m *UserMutation) DepartmentID() (r uint32, exists bool) {
	v := m.department_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartmentID returns the old "department_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDepartmentID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartmentID: %w", err)
	}
	return oldValue.DepartmentID, nil
}

// AddDepartmentID adds u to the "department_id" field.
func (m *UserMutation) AddDepartmentID(u int32) {
	if m.adddepartment_id != nil {
		*m.adddepartment_id += u
	} else {
		m.adddepartment_id = &u
	}
}

// AddedDepartmentID returns the value that was added to the "department_id" field in this mutation.
func (m *UserMutation) AddedDepartmentID() (r int32, exists bool) {
	v := m.adddepartment_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearDepartmentID clears the value of the "department_id" field.
func (m *UserMutation) ClearDepartmentID() {
	m.department_id = nil
	m.adddepartment_id = nil
	m.clearedFields[user.FieldDepartmentID] = struct{}{}
}

// DepartmentIDCleared returns if the "department_id" field was cleared in this mutation.
func (m *UserMutation) DepartmentIDCleared() bool {
	_, ok := m.clearedFields[user.FieldDepartmentID]
	return ok
}

// ResetDepartmentID resets all changes to the "department_id" field.
func (m *UserMutation) ResetDepartmentID() {
	m.department_id = nil
	m.adddepartment_id = nil
	delete(m.clearedFields, user.FieldDepartmentID)
}

// SetPositionID sets the "position_id" field.
func (m *UserMutation) SetPositionID(u uint32) {
	m.position_id = &u
	m.addposition_id = nil
}

// PositionID returns the value of the "position_id" field in the mutation.
func (m *UserMutation) PositionID() (r uint32, exists bool) {
	v := m.position_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPositionID returns the old "position_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPositionID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPositionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPositionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPositionID: %w", err)
	}
	return oldValue.PositionID, nil
}

// AddPositionID adds u to the "position_id" field.
func (m *UserMutation) AddPositionID(u int32) {
	if m.addposition_id != nil {
		*m.addposition_id += u
	} else {
		m.addposition_id = &u
	}
}

// AddedPositionID returns the value that was added to the "position_id" field in this mutation.
func (m *UserMutation) AddedPositionID() (r int32, exists bool) {
	v := m.addposition_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearPositionID clears the value of the "position_id" field.
func (m *UserMutation) ClearPositionID() {
	m.position_id = nil
	m.addposition_id = nil
	m.clearedFields[user.FieldPositionID] = struct{}{}
}

// PositionIDCleared returns if the "position_id" field was cleared in this mutation.
func (m *UserMutation) PositionIDCleared() bool {
	_, ok := m.clearedFields[user.FieldPositionID]
	return ok
}

// ResetPositionID resets all changes to the "position_id" field.
func (m *UserMutation) ResetPositionID() {
	m.position_id = nil
	m.addposition_id = nil
	delete(m.clearedFields, user.FieldPositionID)
}

// SetWorkID sets the "work_id" field.
func (m *UserMutation) SetWorkID(u uint32) {
	m.work_id = &u
	m.addwork_id = nil
}

// WorkID returns the value of the "work_id" field in the mutation.
func (m *UserMutation) WorkID() (r uint32, exists bool) {
	v := m.work_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkID returns the old "work_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWorkID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkID: %w", err)
	}
	return oldValue.WorkID, nil
}

// AddWorkID adds u to the "work_id" field.
func (m *UserMutation) AddWorkID(u int32) {
	if m.addwork_id != nil {
		*m.addwork_id += u
	} else {
		m.addwork_id = &u
	}
}

// AddedWorkID returns the value that was added to the "work_id" field in this mutation.
func (m *UserMutation) AddedWorkID() (r int32, exists bool) {
	v := m.addwork_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearWorkID clears the value of the "work_id" field.
func (m *UserMutation) ClearWorkID() {
	m.work_id = nil
	m.addwork_id = nil
	m.clearedFields[user.FieldWorkID] = struct{}{}
}

// WorkIDCleared returns if the "work_id" field was cleared in this mutation.
func (m *UserMutation) WorkIDCleared() bool {
	_, ok := m.clearedFields[user.FieldWorkID]
	return ok
}

// ResetWorkID resets all changes to the "work_id" field.
func (m *UserMutation) ResetWorkID() {
	m.work_id = nil
	m.addwork_id = nil
	delete(m.clearedFields, user.FieldWorkID)
}

// SetRoleIds sets the "role_ids" field.
func (m *UserMutation) SetRoleIds(i []int) {
	m.role_ids = &i
	m.appendrole_ids = nil
}

// RoleIds returns the value of the "role_ids" field in the mutation.
func (m *UserMutation) RoleIds() (r []int, exists bool) {
	v := m.role_ids
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleIds returns the old "role_ids" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRoleIds(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleIds: %w", err)
	}
	return oldValue.RoleIds, nil
}

// AppendRoleIds adds i to the "role_ids" field.
func (m *UserMutation) AppendRoleIds(i []int) {
	m.appendrole_ids = append(m.appendrole_ids, i...)
}

// AppendedRoleIds returns the list of values that were appended to the "role_ids" field in this mutation.
func (m *UserMutation) AppendedRoleIds() ([]int, bool) {
	if len(m.appendrole_ids) == 0 {
		return nil, false
	}
	return m.appendrole_ids, true
}

// ClearRoleIds clears the value of the "role_ids" field.
func (m *UserMutation) ClearRoleIds() {
	m.role_ids = nil
	m.appendrole_ids = nil
	m.clearedFields[user.FieldRoleIds] = struct{}{}
}

// RoleIdsCleared returns if the "role_ids" field was cleared in this mutation.
func (m *UserMutation) RoleIdsCleared() bool {
	_, ok := m.clearedFields[user.FieldRoleIds]
	return ok
}

// ResetRoleIds resets all changes to the "role_ids" field.
func (m *UserMutation) ResetRoleIds() {
	m.role_ids = nil
	m.appendrole_ids = nil
	delete(m.clearedFields, user.FieldRoleIds)
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 28)
	if m.created_by != nil {
		fields = append(fields, user.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, user.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, user.FieldDeletedBy)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, user.FieldDeletedAt)
	}
	if m.remark != nil {
		fields = append(fields, user.FieldRemark)
	}
	if m.tenant_id != nil {
		fields = append(fields, user.FieldTenantID)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.nickname != nil {
		fields = append(fields, user.FieldNickname)
	}
	if m.realname != nil {
		fields = append(fields, user.FieldRealname)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.mobile != nil {
		fields = append(fields, user.FieldMobile)
	}
	if m.telephone != nil {
		fields = append(fields, user.FieldTelephone)
	}
	if m.avatar != nil {
		fields = append(fields, user.FieldAvatar)
	}
	if m.address != nil {
		fields = append(fields, user.FieldAddress)
	}
	if m.region != nil {
		fields = append(fields, user.FieldRegion)
	}
	if m.description != nil {
		fields = append(fields, user.FieldDescription)
	}
	if m.gender != nil {
		fields = append(fields, user.FieldGender)
	}
	if m.authority != nil {
		fields = append(fields, user.FieldAuthority)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.last_login_time != nil {
		fields = append(fields, user.FieldLastLoginTime)
	}
	if m.last_login_ip != nil {
		fields = append(fields, user.FieldLastLoginIP)
	}
	if m.org_id != nil {
		fields = append(fields, user.FieldOrgID)
	}
	if m.department_id != nil {
		fields = append(fields, user.FieldDepartmentID)
	}
	if m.position_id != nil {
		fields = append(fields, user.FieldPositionID)
	}
	if m.work_id != nil {
		fields = append(fields, user.FieldWorkID)
	}
	if m.role_ids != nil {
		fields = append(fields, user.FieldRoleIds)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedBy:
		return m.CreatedBy()
	case user.FieldUpdatedBy:
		return m.UpdatedBy()
	case user.FieldDeletedBy:
		return m.DeletedBy()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldDeletedAt:
		return m.DeletedAt()
	case user.FieldRemark:
		return m.Remark()
	case user.FieldTenantID:
		return m.TenantID()
	case user.FieldUsername:
		return m.Username()
	case user.FieldNickname:
		return m.Nickname()
	case user.FieldRealname:
		return m.Realname()
	case user.FieldEmail:
		return m.Email()
	case user.FieldMobile:
		return m.Mobile()
	case user.FieldTelephone:
		return m.Telephone()
	case user.FieldAvatar:
		return m.Avatar()
	case user.FieldAddress:
		return m.Address()
	case user.FieldRegion:
		return m.Region()
	case user.FieldDescription:
		return m.Description()
	case user.FieldGender:
		return m.Gender()
	case user.FieldAuthority:
		return m.Authority()
	case user.FieldStatus:
		return m.Status()
	case user.FieldLastLoginTime:
		return m.LastLoginTime()
	case user.FieldLastLoginIP:
		return m.LastLoginIP()
	case user.FieldOrgID:
		return m.OrgID()
	case user.FieldDepartmentID:
		return m.DepartmentID()
	case user.FieldPositionID:
		return m.PositionID()
	case user.FieldWorkID:
		return m.WorkID()
	case user.FieldRoleIds:
		return m.RoleIds()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case user.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case user.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case user.FieldRemark:
		return m.OldRemark(ctx)
	case user.FieldTenantID:
		return m.OldTenantID(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldNickname:
		return m.OldNickname(ctx)
	case user.FieldRealname:
		return m.OldRealname(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldMobile:
		return m.OldMobile(ctx)
	case user.FieldTelephone:
		return m.OldTelephone(ctx)
	case user.FieldAvatar:
		return m.OldAvatar(ctx)
	case user.FieldAddress:
		return m.OldAddress(ctx)
	case user.FieldRegion:
		return m.OldRegion(ctx)
	case user.FieldDescription:
		return m.OldDescription(ctx)
	case user.FieldGender:
		return m.OldGender(ctx)
	case user.FieldAuthority:
		return m.OldAuthority(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	case user.FieldLastLoginTime:
		return m.OldLastLoginTime(ctx)
	case user.FieldLastLoginIP:
		return m.OldLastLoginIP(ctx)
	case user.FieldOrgID:
		return m.OldOrgID(ctx)
	case user.FieldDepartmentID:
		return m.OldDepartmentID(ctx)
	case user.FieldPositionID:
		return m.OldPositionID(ctx)
	case user.FieldWorkID:
		return m.OldWorkID(ctx)
	case user.FieldRoleIds:
		return m.OldRoleIds(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case user.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case user.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case user.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case user.FieldTenantID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case user.FieldRealname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRealname(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case user.FieldTelephone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelephone(v)
		return nil
	case user.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case user.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case user.FieldRegion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegion(v)
		return nil
	case user.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case user.FieldGender:
		v, ok := value.(user.Gender)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case user.FieldAuthority:
		v, ok := value.(user.Authority)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthority(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(user.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldLastLoginTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginTime(v)
		return nil
	case user.FieldLastLoginIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginIP(v)
		return nil
	case user.FieldOrgID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgID(v)
		return nil
	case user.FieldDepartmentID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartmentID(v)
		return nil
	case user.FieldPositionID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPositionID(v)
		return nil
	case user.FieldWorkID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkID(v)
		return nil
	case user.FieldRoleIds:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleIds(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, user.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, user.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, user.FieldDeletedBy)
	}
	if m.addtenant_id != nil {
		fields = append(fields, user.FieldTenantID)
	}
	if m.addorg_id != nil {
		fields = append(fields, user.FieldOrgID)
	}
	if m.adddepartment_id != nil {
		fields = append(fields, user.FieldDepartmentID)
	}
	if m.addposition_id != nil {
		fields = append(fields, user.FieldPositionID)
	}
	if m.addwork_id != nil {
		fields = append(fields, user.FieldWorkID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedBy:
		return m.AddedCreatedBy()
	case user.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case user.FieldDeletedBy:
		return m.AddedDeletedBy()
	case user.FieldTenantID:
		return m.AddedTenantID()
	case user.FieldOrgID:
		return m.AddedOrgID()
	case user.FieldDepartmentID:
		return m.AddedDepartmentID()
	case user.FieldPositionID:
		return m.AddedPositionID()
	case user.FieldWorkID:
		return m.AddedWorkID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case user.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case user.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case user.FieldTenantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantID(v)
		return nil
	case user.FieldOrgID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrgID(v)
		return nil
	case user.FieldDepartmentID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDepartmentID(v)
		return nil
	case user.FieldPositionID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPositionID(v)
		return nil
	case user.FieldWorkID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWorkID(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldCreatedBy) {
		fields = append(fields, user.FieldCreatedBy)
	}
	if m.FieldCleared(user.FieldUpdatedBy) {
		fields = append(fields, user.FieldUpdatedBy)
	}
	if m.FieldCleared(user.FieldDeletedBy) {
		fields = append(fields, user.FieldDeletedBy)
	}
	if m.FieldCleared(user.FieldCreatedAt) {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.FieldCleared(user.FieldUpdatedAt) {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.FieldCleared(user.FieldDeletedAt) {
		fields = append(fields, user.FieldDeletedAt)
	}
	if m.FieldCleared(user.FieldRemark) {
		fields = append(fields, user.FieldRemark)
	}
	if m.FieldCleared(user.FieldTenantID) {
		fields = append(fields, user.FieldTenantID)
	}
	if m.FieldCleared(user.FieldUsername) {
		fields = append(fields, user.FieldUsername)
	}
	if m.FieldCleared(user.FieldNickname) {
		fields = append(fields, user.FieldNickname)
	}
	if m.FieldCleared(user.FieldRealname) {
		fields = append(fields, user.FieldRealname)
	}
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	if m.FieldCleared(user.FieldMobile) {
		fields = append(fields, user.FieldMobile)
	}
	if m.FieldCleared(user.FieldTelephone) {
		fields = append(fields, user.FieldTelephone)
	}
	if m.FieldCleared(user.FieldAvatar) {
		fields = append(fields, user.FieldAvatar)
	}
	if m.FieldCleared(user.FieldAddress) {
		fields = append(fields, user.FieldAddress)
	}
	if m.FieldCleared(user.FieldRegion) {
		fields = append(fields, user.FieldRegion)
	}
	if m.FieldCleared(user.FieldDescription) {
		fields = append(fields, user.FieldDescription)
	}
	if m.FieldCleared(user.FieldGender) {
		fields = append(fields, user.FieldGender)
	}
	if m.FieldCleared(user.FieldStatus) {
		fields = append(fields, user.FieldStatus)
	}
	if m.FieldCleared(user.FieldLastLoginTime) {
		fields = append(fields, user.FieldLastLoginTime)
	}
	if m.FieldCleared(user.FieldLastLoginIP) {
		fields = append(fields, user.FieldLastLoginIP)
	}
	if m.FieldCleared(user.FieldOrgID) {
		fields = append(fields, user.FieldOrgID)
	}
	if m.FieldCleared(user.FieldDepartmentID) {
		fields = append(fields, user.FieldDepartmentID)
	}
	if m.FieldCleared(user.FieldPositionID) {
		fields = append(fields, user.FieldPositionID)
	}
	if m.FieldCleared(user.FieldWorkID) {
		fields = append(fields, user.FieldWorkID)
	}
	if m.FieldCleared(user.FieldRoleIds) {
		fields = append(fields, user.FieldRoleIds)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case user.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case user.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case user.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case user.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case user.FieldRemark:
		m.ClearRemark()
		return nil
	case user.FieldTenantID:
		m.ClearTenantID()
		return nil
	case user.FieldUsername:
		m.ClearUsername()
		return nil
	case user.FieldNickname:
		m.ClearNickname()
		return nil
	case user.FieldRealname:
		m.ClearRealname()
		return nil
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	case user.FieldMobile:
		m.ClearMobile()
		return nil
	case user.FieldTelephone:
		m.ClearTelephone()
		return nil
	case user.FieldAvatar:
		m.ClearAvatar()
		return nil
	case user.FieldAddress:
		m.ClearAddress()
		return nil
	case user.FieldRegion:
		m.ClearRegion()
		return nil
	case user.FieldDescription:
		m.ClearDescription()
		return nil
	case user.FieldGender:
		m.ClearGender()
		return nil
	case user.FieldStatus:
		m.ClearStatus()
		return nil
	case user.FieldLastLoginTime:
		m.ClearLastLoginTime()
		return nil
	case user.FieldLastLoginIP:
		m.ClearLastLoginIP()
		return nil
	case user.FieldOrgID:
		m.ClearOrgID()
		return nil
	case user.FieldDepartmentID:
		m.ClearDepartmentID()
		return nil
	case user.FieldPositionID:
		m.ClearPositionID()
		return nil
	case user.FieldWorkID:
		m.ClearWorkID()
		return nil
	case user.FieldRoleIds:
		m.ClearRoleIds()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case user.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case user.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case user.FieldRemark:
		m.ResetRemark()
		return nil
	case user.FieldTenantID:
		m.ResetTenantID()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldNickname:
		m.ResetNickname()
		return nil
	case user.FieldRealname:
		m.ResetRealname()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldMobile:
		m.ResetMobile()
		return nil
	case user.FieldTelephone:
		m.ResetTelephone()
		return nil
	case user.FieldAvatar:
		m.ResetAvatar()
		return nil
	case user.FieldAddress:
		m.ResetAddress()
		return nil
	case user.FieldRegion:
		m.ResetRegion()
		return nil
	case user.FieldDescription:
		m.ResetDescription()
		return nil
	case user.FieldGender:
		m.ResetGender()
		return nil
	case user.FieldAuthority:
		m.ResetAuthority()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldLastLoginTime:
		m.ResetLastLoginTime()
		return nil
	case user.FieldLastLoginIP:
		m.ResetLastLoginIP()
		return nil
	case user.FieldOrgID:
		m.ResetOrgID()
		return nil
	case user.FieldDepartmentID:
		m.ResetDepartmentID()
		return nil
	case user.FieldPositionID:
		m.ResetPositionID()
		return nil
	case user.FieldWorkID:
		m.ResetWorkID()
		return nil
	case user.FieldRoleIds:
		m.ResetRoleIds()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

// UserCredentialMutation represents an operation that mutates the UserCredential nodes in the graph.
type UserCredentialMutation struct {
	config
	op              Op
	typ             string
	id              *uint32
	created_at      *time.Time
	updated_at      *time.Time
	deleted_at      *time.Time
	tenant_id       *uint32
	addtenant_id    *int32
	user_id         *uint32
	adduser_id      *int32
	identity_type   *usercredential.IdentityType
	identifier      *string
	credential_type *usercredential.CredentialType
	credential      *string
	is_primary      *bool
	status          *usercredential.Status
	extra_info      *string
	activate_token  *string
	reset_token     *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*UserCredential, error)
	predicates      []predicate.UserCredential
}

var _ ent.Mutation = (*UserCredentialMutation)(nil)

// usercredentialOption allows management of the mutation configuration using functional options.
type usercredentialOption func(*UserCredentialMutation)

// newUserCredentialMutation creates new mutation for the UserCredential entity.
func newUserCredentialMutation(c config, op Op, opts ...usercredentialOption) *UserCredentialMutation {
	m := &UserCredentialMutation{
		config:        c,
		op:            op,
		typ:           TypeUserCredential,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserCredentialID sets the ID field of the mutation.
func withUserCredentialID(id uint32) usercredentialOption {
	return func(m *UserCredentialMutation) {
		var (
			err   error
			once  sync.Once
			value *UserCredential
		)
		m.oldValue = func(ctx context.Context) (*UserCredential, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserCredential.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserCredential sets the old UserCredential of the mutation.
func withUserCredential(node *UserCredential) usercredentialOption {
	return func(m *UserCredentialMutation) {
		m.oldValue = func(context.Context) (*UserCredential, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserCredentialMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserCredentialMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserCredential entities.
func (m *UserCredentialMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserCredentialMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserCredentialMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserCredential.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserCredentialMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserCredentialMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserCredential entity.
// If the UserCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCredentialMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *UserCredentialMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[usercredential.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *UserCredentialMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[usercredential.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserCredentialMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, usercredential.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserCredentialMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserCredentialMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserCredential entity.
// If the UserCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCredentialMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *UserCredentialMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[usercredential.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *UserCredentialMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[usercredential.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserCredentialMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, usercredential.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserCredentialMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserCredentialMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the UserCredential entity.
// If the UserCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCredentialMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserCredentialMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[usercredential.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserCredentialMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[usercredential.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserCredentialMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, usercredential.FieldDeletedAt)
}

// SetTenantID sets the "tenant_id" field.
func (m *UserCredentialMutation) SetTenantID(u uint32) {
	m.tenant_id = &u
	m.addtenant_id = nil
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *UserCredentialMutation) TenantID() (r uint32, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the UserCredential entity.
// If the UserCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCredentialMutation) OldTenantID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// AddTenantID adds u to the "tenant_id" field.
func (m *UserCredentialMutation) AddTenantID(u int32) {
	if m.addtenant_id != nil {
		*m.addtenant_id += u
	} else {
		m.addtenant_id = &u
	}
}

// AddedTenantID returns the value that was added to the "tenant_id" field in this mutation.
func (m *UserCredentialMutation) AddedTenantID() (r int32, exists bool) {
	v := m.addtenant_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTenantID clears the value of the "tenant_id" field.
func (m *UserCredentialMutation) ClearTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	m.clearedFields[usercredential.FieldTenantID] = struct{}{}
}

// TenantIDCleared returns if the "tenant_id" field was cleared in this mutation.
func (m *UserCredentialMutation) TenantIDCleared() bool {
	_, ok := m.clearedFields[usercredential.FieldTenantID]
	return ok
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *UserCredentialMutation) ResetTenantID() {
	m.tenant_id = nil
	m.addtenant_id = nil
	delete(m.clearedFields, usercredential.FieldTenantID)
}

// SetUserID sets the "user_id" field.
func (m *UserCredentialMutation) SetUserID(u uint32) {
	m.user_id = &u
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserCredentialMutation) UserID() (r uint32, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserCredential entity.
// If the UserCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCredentialMutation) OldUserID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds u to the "user_id" field.
func (m *UserCredentialMutation) AddUserID(u int32) {
	if m.adduser_id != nil {
		*m.adduser_id += u
	} else {
		m.adduser_id = &u
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *UserCredentialMutation) AddedUserID() (r int32, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearUserID clears the value of the "user_id" field.
func (m *UserCredentialMutation) ClearUserID() {
	m.user_id = nil
	m.adduser_id = nil
	m.clearedFields[usercredential.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *UserCredentialMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[usercredential.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserCredentialMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
	delete(m.clearedFields, usercredential.FieldUserID)
}

// SetIdentityType sets the "identity_type" field.
func (m *UserCredentialMutation) SetIdentityType(ut usercredential.IdentityType) {
	m.identity_type = &ut
}

// IdentityType returns the value of the "identity_type" field in the mutation.
func (m *UserCredentialMutation) IdentityType() (r usercredential.IdentityType, exists bool) {
	v := m.identity_type
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentityType returns the old "identity_type" field's value of the UserCredential entity.
// If the UserCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCredentialMutation) OldIdentityType(ctx context.Context) (v *usercredential.IdentityType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentityType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentityType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentityType: %w", err)
	}
	return oldValue.IdentityType, nil
}

// ClearIdentityType clears the value of the "identity_type" field.
func (m *UserCredentialMutation) ClearIdentityType() {
	m.identity_type = nil
	m.clearedFields[usercredential.FieldIdentityType] = struct{}{}
}

// IdentityTypeCleared returns if the "identity_type" field was cleared in this mutation.
func (m *UserCredentialMutation) IdentityTypeCleared() bool {
	_, ok := m.clearedFields[usercredential.FieldIdentityType]
	return ok
}

// ResetIdentityType resets all changes to the "identity_type" field.
func (m *UserCredentialMutation) ResetIdentityType() {
	m.identity_type = nil
	delete(m.clearedFields, usercredential.FieldIdentityType)
}

// SetIdentifier sets the "identifier" field.
func (m *UserCredentialMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *UserCredentialMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the UserCredential entity.
// If the UserCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCredentialMutation) OldIdentifier(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ClearIdentifier clears the value of the "identifier" field.
func (m *UserCredentialMutation) ClearIdentifier() {
	m.identifier = nil
	m.clearedFields[usercredential.FieldIdentifier] = struct{}{}
}

// IdentifierCleared returns if the "identifier" field was cleared in this mutation.
func (m *UserCredentialMutation) IdentifierCleared() bool {
	_, ok := m.clearedFields[usercredential.FieldIdentifier]
	return ok
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *UserCredentialMutation) ResetIdentifier() {
	m.identifier = nil
	delete(m.clearedFields, usercredential.FieldIdentifier)
}

// SetCredentialType sets the "credential_type" field.
func (m *UserCredentialMutation) SetCredentialType(ut usercredential.CredentialType) {
	m.credential_type = &ut
}

// CredentialType returns the value of the "credential_type" field in the mutation.
func (m *UserCredentialMutation) CredentialType() (r usercredential.CredentialType, exists bool) {
	v := m.credential_type
	if v == nil {
		return
	}
	return *v, true
}

// OldCredentialType returns the old "credential_type" field's value of the UserCredential entity.
// If the UserCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCredentialMutation) OldCredentialType(ctx context.Context) (v *usercredential.CredentialType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredentialType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredentialType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredentialType: %w", err)
	}
	return oldValue.CredentialType, nil
}

// ClearCredentialType clears the value of the "credential_type" field.
func (m *UserCredentialMutation) ClearCredentialType() {
	m.credential_type = nil
	m.clearedFields[usercredential.FieldCredentialType] = struct{}{}
}

// CredentialTypeCleared returns if the "credential_type" field was cleared in this mutation.
func (m *UserCredentialMutation) CredentialTypeCleared() bool {
	_, ok := m.clearedFields[usercredential.FieldCredentialType]
	return ok
}

// ResetCredentialType resets all changes to the "credential_type" field.
func (m *UserCredentialMutation) ResetCredentialType() {
	m.credential_type = nil
	delete(m.clearedFields, usercredential.FieldCredentialType)
}

// SetCredential sets the "credential" field.
func (m *UserCredentialMutation) SetCredential(s string) {
	m.credential = &s
}

// Credential returns the value of the "credential" field in the mutation.
func (m *UserCredentialMutation) Credential() (r string, exists bool) {
	v := m.credential
	if v == nil {
		return
	}
	return *v, true
}

// OldCredential returns the old "credential" field's value of the UserCredential entity.
// If the UserCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCredentialMutation) OldCredential(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredential is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredential requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredential: %w", err)
	}
	return oldValue.Credential, nil
}

// ClearCredential clears the value of the "credential" field.
func (m *UserCredentialMutation) ClearCredential() {
	m.credential = nil
	m.clearedFields[usercredential.FieldCredential] = struct{}{}
}

// CredentialCleared returns if the "credential" field was cleared in this mutation.
func (m *UserCredentialMutation) CredentialCleared() bool {
	_, ok := m.clearedFields[usercredential.FieldCredential]
	return ok
}

// ResetCredential resets all changes to the "credential" field.
func (m *UserCredentialMutation) ResetCredential() {
	m.credential = nil
	delete(m.clearedFields, usercredential.FieldCredential)
}

// SetIsPrimary sets the "is_primary" field.
func (m *UserCredentialMutation) SetIsPrimary(b bool) {
	m.is_primary = &b
}

// IsPrimary returns the value of the "is_primary" field in the mutation.
func (m *UserCredentialMutation) IsPrimary() (r bool, exists bool) {
	v := m.is_primary
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPrimary returns the old "is_primary" field's value of the UserCredential entity.
// If the UserCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCredentialMutation) OldIsPrimary(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPrimary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPrimary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPrimary: %w", err)
	}
	return oldValue.IsPrimary, nil
}

// ClearIsPrimary clears the value of the "is_primary" field.
func (m *UserCredentialMutation) ClearIsPrimary() {
	m.is_primary = nil
	m.clearedFields[usercredential.FieldIsPrimary] = struct{}{}
}

// IsPrimaryCleared returns if the "is_primary" field was cleared in this mutation.
func (m *UserCredentialMutation) IsPrimaryCleared() bool {
	_, ok := m.clearedFields[usercredential.FieldIsPrimary]
	return ok
}

// ResetIsPrimary resets all changes to the "is_primary" field.
func (m *UserCredentialMutation) ResetIsPrimary() {
	m.is_primary = nil
	delete(m.clearedFields, usercredential.FieldIsPrimary)
}

// SetStatus sets the "status" field.
func (m *UserCredentialMutation) SetStatus(u usercredential.Status) {
	m.status = &u
}

// Status returns the value of the "status" field in the mutation.
func (m *UserCredentialMutation) Status() (r usercredential.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the UserCredential entity.
// If the UserCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCredentialMutation) OldStatus(ctx context.Context) (v *usercredential.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *UserCredentialMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[usercredential.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *UserCredentialMutation) StatusCleared() bool {
	_, ok := m.clearedFields[usercredential.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *UserCredentialMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, usercredential.FieldStatus)
}

// SetExtraInfo sets the "extra_info" field.
func (m *UserCredentialMutation) SetExtraInfo(s string) {
	m.extra_info = &s
}

// ExtraInfo returns the value of the "extra_info" field in the mutation.
func (m *UserCredentialMutation) ExtraInfo() (r string, exists bool) {
	v := m.extra_info
	if v == nil {
		return
	}
	return *v, true
}

// OldExtraInfo returns the old "extra_info" field's value of the UserCredential entity.
// If the UserCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCredentialMutation) OldExtraInfo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtraInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtraInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtraInfo: %w", err)
	}
	return oldValue.ExtraInfo, nil
}

// ClearExtraInfo clears the value of the "extra_info" field.
func (m *UserCredentialMutation) ClearExtraInfo() {
	m.extra_info = nil
	m.clearedFields[usercredential.FieldExtraInfo] = struct{}{}
}

// ExtraInfoCleared returns if the "extra_info" field was cleared in this mutation.
func (m *UserCredentialMutation) ExtraInfoCleared() bool {
	_, ok := m.clearedFields[usercredential.FieldExtraInfo]
	return ok
}

// ResetExtraInfo resets all changes to the "extra_info" field.
func (m *UserCredentialMutation) ResetExtraInfo() {
	m.extra_info = nil
	delete(m.clearedFields, usercredential.FieldExtraInfo)
}

// SetActivateToken sets the "activate_token" field.
func (m *UserCredentialMutation) SetActivateToken(s string) {
	m.activate_token = &s
}

// ActivateToken returns the value of the "activate_token" field in the mutation.
func (m *UserCredentialMutation) ActivateToken() (r string, exists bool) {
	v := m.activate_token
	if v == nil {
		return
	}
	return *v, true
}

// OldActivateToken returns the old "activate_token" field's value of the UserCredential entity.
// If the UserCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCredentialMutation) OldActivateToken(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivateToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivateToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivateToken: %w", err)
	}
	return oldValue.ActivateToken, nil
}

// ClearActivateToken clears the value of the "activate_token" field.
func (m *UserCredentialMutation) ClearActivateToken() {
	m.activate_token = nil
	m.clearedFields[usercredential.FieldActivateToken] = struct{}{}
}

// ActivateTokenCleared returns if the "activate_token" field was cleared in this mutation.
func (m *UserCredentialMutation) ActivateTokenCleared() bool {
	_, ok := m.clearedFields[usercredential.FieldActivateToken]
	return ok
}

// ResetActivateToken resets all changes to the "activate_token" field.
func (m *UserCredentialMutation) ResetActivateToken() {
	m.activate_token = nil
	delete(m.clearedFields, usercredential.FieldActivateToken)
}

// SetResetToken sets the "reset_token" field.
func (m *UserCredentialMutation) SetResetToken(s string) {
	m.reset_token = &s
}

// ResetToken returns the value of the "reset_token" field in the mutation.
func (m *UserCredentialMutation) ResetToken() (r string, exists bool) {
	v := m.reset_token
	if v == nil {
		return
	}
	return *v, true
}

// OldResetToken returns the old "reset_token" field's value of the UserCredential entity.
// If the UserCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCredentialMutation) OldResetToken(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResetToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResetToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResetToken: %w", err)
	}
	return oldValue.ResetToken, nil
}

// ClearResetToken clears the value of the "reset_token" field.
func (m *UserCredentialMutation) ClearResetToken() {
	m.reset_token = nil
	m.clearedFields[usercredential.FieldResetToken] = struct{}{}
}

// ResetTokenCleared returns if the "reset_token" field was cleared in this mutation.
func (m *UserCredentialMutation) ResetTokenCleared() bool {
	_, ok := m.clearedFields[usercredential.FieldResetToken]
	return ok
}

// ResetResetToken resets all changes to the "reset_token" field.
func (m *UserCredentialMutation) ResetResetToken() {
	m.reset_token = nil
	delete(m.clearedFields, usercredential.FieldResetToken)
}

// Where appends a list predicates to the UserCredentialMutation builder.
func (m *UserCredentialMutation) Where(ps ...predicate.UserCredential) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserCredentialMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserCredentialMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserCredential, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserCredentialMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserCredentialMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserCredential).
func (m *UserCredentialMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserCredentialMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.created_at != nil {
		fields = append(fields, usercredential.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, usercredential.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, usercredential.FieldDeletedAt)
	}
	if m.tenant_id != nil {
		fields = append(fields, usercredential.FieldTenantID)
	}
	if m.user_id != nil {
		fields = append(fields, usercredential.FieldUserID)
	}
	if m.identity_type != nil {
		fields = append(fields, usercredential.FieldIdentityType)
	}
	if m.identifier != nil {
		fields = append(fields, usercredential.FieldIdentifier)
	}
	if m.credential_type != nil {
		fields = append(fields, usercredential.FieldCredentialType)
	}
	if m.credential != nil {
		fields = append(fields, usercredential.FieldCredential)
	}
	if m.is_primary != nil {
		fields = append(fields, usercredential.FieldIsPrimary)
	}
	if m.status != nil {
		fields = append(fields, usercredential.FieldStatus)
	}
	if m.extra_info != nil {
		fields = append(fields, usercredential.FieldExtraInfo)
	}
	if m.activate_token != nil {
		fields = append(fields, usercredential.FieldActivateToken)
	}
	if m.reset_token != nil {
		fields = append(fields, usercredential.FieldResetToken)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserCredentialMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usercredential.FieldCreatedAt:
		return m.CreatedAt()
	case usercredential.FieldUpdatedAt:
		return m.UpdatedAt()
	case usercredential.FieldDeletedAt:
		return m.DeletedAt()
	case usercredential.FieldTenantID:
		return m.TenantID()
	case usercredential.FieldUserID:
		return m.UserID()
	case usercredential.FieldIdentityType:
		return m.IdentityType()
	case usercredential.FieldIdentifier:
		return m.Identifier()
	case usercredential.FieldCredentialType:
		return m.CredentialType()
	case usercredential.FieldCredential:
		return m.Credential()
	case usercredential.FieldIsPrimary:
		return m.IsPrimary()
	case usercredential.FieldStatus:
		return m.Status()
	case usercredential.FieldExtraInfo:
		return m.ExtraInfo()
	case usercredential.FieldActivateToken:
		return m.ActivateToken()
	case usercredential.FieldResetToken:
		return m.ResetToken()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserCredentialMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usercredential.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case usercredential.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case usercredential.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case usercredential.FieldTenantID:
		return m.OldTenantID(ctx)
	case usercredential.FieldUserID:
		return m.OldUserID(ctx)
	case usercredential.FieldIdentityType:
		return m.OldIdentityType(ctx)
	case usercredential.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case usercredential.FieldCredentialType:
		return m.OldCredentialType(ctx)
	case usercredential.FieldCredential:
		return m.OldCredential(ctx)
	case usercredential.FieldIsPrimary:
		return m.OldIsPrimary(ctx)
	case usercredential.FieldStatus:
		return m.OldStatus(ctx)
	case usercredential.FieldExtraInfo:
		return m.OldExtraInfo(ctx)
	case usercredential.FieldActivateToken:
		return m.OldActivateToken(ctx)
	case usercredential.FieldResetToken:
		return m.OldResetToken(ctx)
	}
	return nil, fmt.Errorf("unknown UserCredential field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserCredentialMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usercredential.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case usercredential.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case usercredential.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case usercredential.FieldTenantID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case usercredential.FieldUserID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case usercredential.FieldIdentityType:
		v, ok := value.(usercredential.IdentityType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentityType(v)
		return nil
	case usercredential.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case usercredential.FieldCredentialType:
		v, ok := value.(usercredential.CredentialType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredentialType(v)
		return nil
	case usercredential.FieldCredential:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredential(v)
		return nil
	case usercredential.FieldIsPrimary:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPrimary(v)
		return nil
	case usercredential.FieldStatus:
		v, ok := value.(usercredential.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case usercredential.FieldExtraInfo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtraInfo(v)
		return nil
	case usercredential.FieldActivateToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivateToken(v)
		return nil
	case usercredential.FieldResetToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResetToken(v)
		return nil
	}
	return fmt.Errorf("unknown UserCredential field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserCredentialMutation) AddedFields() []string {
	var fields []string
	if m.addtenant_id != nil {
		fields = append(fields, usercredential.FieldTenantID)
	}
	if m.adduser_id != nil {
		fields = append(fields, usercredential.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserCredentialMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case usercredential.FieldTenantID:
		return m.AddedTenantID()
	case usercredential.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserCredentialMutation) AddField(name string, value ent.Value) error {
	switch name {
	case usercredential.FieldTenantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantID(v)
		return nil
	case usercredential.FieldUserID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown UserCredential numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserCredentialMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(usercredential.FieldCreatedAt) {
		fields = append(fields, usercredential.FieldCreatedAt)
	}
	if m.FieldCleared(usercredential.FieldUpdatedAt) {
		fields = append(fields, usercredential.FieldUpdatedAt)
	}
	if m.FieldCleared(usercredential.FieldDeletedAt) {
		fields = append(fields, usercredential.FieldDeletedAt)
	}
	if m.FieldCleared(usercredential.FieldTenantID) {
		fields = append(fields, usercredential.FieldTenantID)
	}
	if m.FieldCleared(usercredential.FieldUserID) {
		fields = append(fields, usercredential.FieldUserID)
	}
	if m.FieldCleared(usercredential.FieldIdentityType) {
		fields = append(fields, usercredential.FieldIdentityType)
	}
	if m.FieldCleared(usercredential.FieldIdentifier) {
		fields = append(fields, usercredential.FieldIdentifier)
	}
	if m.FieldCleared(usercredential.FieldCredentialType) {
		fields = append(fields, usercredential.FieldCredentialType)
	}
	if m.FieldCleared(usercredential.FieldCredential) {
		fields = append(fields, usercredential.FieldCredential)
	}
	if m.FieldCleared(usercredential.FieldIsPrimary) {
		fields = append(fields, usercredential.FieldIsPrimary)
	}
	if m.FieldCleared(usercredential.FieldStatus) {
		fields = append(fields, usercredential.FieldStatus)
	}
	if m.FieldCleared(usercredential.FieldExtraInfo) {
		fields = append(fields, usercredential.FieldExtraInfo)
	}
	if m.FieldCleared(usercredential.FieldActivateToken) {
		fields = append(fields, usercredential.FieldActivateToken)
	}
	if m.FieldCleared(usercredential.FieldResetToken) {
		fields = append(fields, usercredential.FieldResetToken)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserCredentialMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserCredentialMutation) ClearField(name string) error {
	switch name {
	case usercredential.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case usercredential.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case usercredential.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case usercredential.FieldTenantID:
		m.ClearTenantID()
		return nil
	case usercredential.FieldUserID:
		m.ClearUserID()
		return nil
	case usercredential.FieldIdentityType:
		m.ClearIdentityType()
		return nil
	case usercredential.FieldIdentifier:
		m.ClearIdentifier()
		return nil
	case usercredential.FieldCredentialType:
		m.ClearCredentialType()
		return nil
	case usercredential.FieldCredential:
		m.ClearCredential()
		return nil
	case usercredential.FieldIsPrimary:
		m.ClearIsPrimary()
		return nil
	case usercredential.FieldStatus:
		m.ClearStatus()
		return nil
	case usercredential.FieldExtraInfo:
		m.ClearExtraInfo()
		return nil
	case usercredential.FieldActivateToken:
		m.ClearActivateToken()
		return nil
	case usercredential.FieldResetToken:
		m.ClearResetToken()
		return nil
	}
	return fmt.Errorf("unknown UserCredential nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserCredentialMutation) ResetField(name string) error {
	switch name {
	case usercredential.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case usercredential.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case usercredential.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case usercredential.FieldTenantID:
		m.ResetTenantID()
		return nil
	case usercredential.FieldUserID:
		m.ResetUserID()
		return nil
	case usercredential.FieldIdentityType:
		m.ResetIdentityType()
		return nil
	case usercredential.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case usercredential.FieldCredentialType:
		m.ResetCredentialType()
		return nil
	case usercredential.FieldCredential:
		m.ResetCredential()
		return nil
	case usercredential.FieldIsPrimary:
		m.ResetIsPrimary()
		return nil
	case usercredential.FieldStatus:
		m.ResetStatus()
		return nil
	case usercredential.FieldExtraInfo:
		m.ResetExtraInfo()
		return nil
	case usercredential.FieldActivateToken:
		m.ResetActivateToken()
		return nil
	case usercredential.FieldResetToken:
		m.ResetResetToken()
		return nil
	}
	return fmt.Errorf("unknown UserCredential field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserCredentialMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserCredentialMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserCredentialMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserCredentialMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserCredentialMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserCredentialMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserCredentialMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserCredential unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserCredentialMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserCredential edge %s", name)
}

// UserPositionMutation represents an operation that mutates the UserPosition nodes in the graph.
type UserPositionMutation struct {
	config
	op             Op
	typ            string
	id             *uint32
	created_at     *time.Time
	updated_at     *time.Time
	deleted_at     *time.Time
	created_by     *uint32
	addcreated_by  *int32
	updated_by     *uint32
	addupdated_by  *int32
	deleted_by     *uint32
	adddeleted_by  *int32
	user_id        *uint32
	adduser_id     *int32
	position_id    *uint32
	addposition_id *int32
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*UserPosition, error)
	predicates     []predicate.UserPosition
}

var _ ent.Mutation = (*UserPositionMutation)(nil)

// userpositionOption allows management of the mutation configuration using functional options.
type userpositionOption func(*UserPositionMutation)

// newUserPositionMutation creates new mutation for the UserPosition entity.
func newUserPositionMutation(c config, op Op, opts ...userpositionOption) *UserPositionMutation {
	m := &UserPositionMutation{
		config:        c,
		op:            op,
		typ:           TypeUserPosition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserPositionID sets the ID field of the mutation.
func withUserPositionID(id uint32) userpositionOption {
	return func(m *UserPositionMutation) {
		var (
			err   error
			once  sync.Once
			value *UserPosition
		)
		m.oldValue = func(ctx context.Context) (*UserPosition, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserPosition.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserPosition sets the old UserPosition of the mutation.
func withUserPosition(node *UserPosition) userpositionOption {
	return func(m *UserPositionMutation) {
		m.oldValue = func(context.Context) (*UserPosition, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserPositionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserPositionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserPosition entities.
func (m *UserPositionMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserPositionMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserPositionMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserPosition.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserPositionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserPositionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserPosition entity.
// If the UserPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPositionMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *UserPositionMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[userposition.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *UserPositionMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[userposition.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserPositionMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, userposition.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserPositionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserPositionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserPosition entity.
// If the UserPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPositionMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *UserPositionMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[userposition.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *UserPositionMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[userposition.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserPositionMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, userposition.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserPositionMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserPositionMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the UserPosition entity.
// If the UserPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPositionMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserPositionMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[userposition.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserPositionMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[userposition.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserPositionMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, userposition.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *UserPositionMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *UserPositionMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the UserPosition entity.
// If the UserPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPositionMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *UserPositionMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *UserPositionMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *UserPositionMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[userposition.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *UserPositionMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[userposition.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *UserPositionMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, userposition.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *UserPositionMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *UserPositionMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the UserPosition entity.
// If the UserPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPositionMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *UserPositionMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *UserPositionMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *UserPositionMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[userposition.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *UserPositionMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[userposition.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *UserPositionMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, userposition.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *UserPositionMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *UserPositionMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the UserPosition entity.
// If the UserPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPositionMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *UserPositionMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *UserPositionMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *UserPositionMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[userposition.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *UserPositionMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[userposition.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *UserPositionMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, userposition.FieldDeletedBy)
}

// SetUserID sets the "user_id" field.
func (m *UserPositionMutation) SetUserID(u uint32) {
	m.user_id = &u
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserPositionMutation) UserID() (r uint32, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserPosition entity.
// If the UserPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPositionMutation) OldUserID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds u to the "user_id" field.
func (m *UserPositionMutation) AddUserID(u int32) {
	if m.adduser_id != nil {
		*m.adduser_id += u
	} else {
		m.adduser_id = &u
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *UserPositionMutation) AddedUserID() (r int32, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserPositionMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetPositionID sets the "position_id" field.
func (m *UserPositionMutation) SetPositionID(u uint32) {
	m.position_id = &u
	m.addposition_id = nil
}

// PositionID returns the value of the "position_id" field in the mutation.
func (m *UserPositionMutation) PositionID() (r uint32, exists bool) {
	v := m.position_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPositionID returns the old "position_id" field's value of the UserPosition entity.
// If the UserPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPositionMutation) OldPositionID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPositionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPositionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPositionID: %w", err)
	}
	return oldValue.PositionID, nil
}

// AddPositionID adds u to the "position_id" field.
func (m *UserPositionMutation) AddPositionID(u int32) {
	if m.addposition_id != nil {
		*m.addposition_id += u
	} else {
		m.addposition_id = &u
	}
}

// AddedPositionID returns the value that was added to the "position_id" field in this mutation.
func (m *UserPositionMutation) AddedPositionID() (r int32, exists bool) {
	v := m.addposition_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPositionID resets all changes to the "position_id" field.
func (m *UserPositionMutation) ResetPositionID() {
	m.position_id = nil
	m.addposition_id = nil
}

// Where appends a list predicates to the UserPositionMutation builder.
func (m *UserPositionMutation) Where(ps ...predicate.UserPosition) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserPositionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserPositionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserPosition, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserPositionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserPositionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserPosition).
func (m *UserPositionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserPositionMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, userposition.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, userposition.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, userposition.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, userposition.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, userposition.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, userposition.FieldDeletedBy)
	}
	if m.user_id != nil {
		fields = append(fields, userposition.FieldUserID)
	}
	if m.position_id != nil {
		fields = append(fields, userposition.FieldPositionID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserPositionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userposition.FieldCreatedAt:
		return m.CreatedAt()
	case userposition.FieldUpdatedAt:
		return m.UpdatedAt()
	case userposition.FieldDeletedAt:
		return m.DeletedAt()
	case userposition.FieldCreatedBy:
		return m.CreatedBy()
	case userposition.FieldUpdatedBy:
		return m.UpdatedBy()
	case userposition.FieldDeletedBy:
		return m.DeletedBy()
	case userposition.FieldUserID:
		return m.UserID()
	case userposition.FieldPositionID:
		return m.PositionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserPositionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userposition.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case userposition.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case userposition.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case userposition.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case userposition.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case userposition.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case userposition.FieldUserID:
		return m.OldUserID(ctx)
	case userposition.FieldPositionID:
		return m.OldPositionID(ctx)
	}
	return nil, fmt.Errorf("unknown UserPosition field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPositionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userposition.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case userposition.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case userposition.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case userposition.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case userposition.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case userposition.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case userposition.FieldUserID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userposition.FieldPositionID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPositionID(v)
		return nil
	}
	return fmt.Errorf("unknown UserPosition field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserPositionMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, userposition.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, userposition.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, userposition.FieldDeletedBy)
	}
	if m.adduser_id != nil {
		fields = append(fields, userposition.FieldUserID)
	}
	if m.addposition_id != nil {
		fields = append(fields, userposition.FieldPositionID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserPositionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userposition.FieldCreatedBy:
		return m.AddedCreatedBy()
	case userposition.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case userposition.FieldDeletedBy:
		return m.AddedDeletedBy()
	case userposition.FieldUserID:
		return m.AddedUserID()
	case userposition.FieldPositionID:
		return m.AddedPositionID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPositionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userposition.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case userposition.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case userposition.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case userposition.FieldUserID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case userposition.FieldPositionID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPositionID(v)
		return nil
	}
	return fmt.Errorf("unknown UserPosition numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserPositionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userposition.FieldCreatedAt) {
		fields = append(fields, userposition.FieldCreatedAt)
	}
	if m.FieldCleared(userposition.FieldUpdatedAt) {
		fields = append(fields, userposition.FieldUpdatedAt)
	}
	if m.FieldCleared(userposition.FieldDeletedAt) {
		fields = append(fields, userposition.FieldDeletedAt)
	}
	if m.FieldCleared(userposition.FieldCreatedBy) {
		fields = append(fields, userposition.FieldCreatedBy)
	}
	if m.FieldCleared(userposition.FieldUpdatedBy) {
		fields = append(fields, userposition.FieldUpdatedBy)
	}
	if m.FieldCleared(userposition.FieldDeletedBy) {
		fields = append(fields, userposition.FieldDeletedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserPositionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserPositionMutation) ClearField(name string) error {
	switch name {
	case userposition.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case userposition.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case userposition.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case userposition.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case userposition.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case userposition.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	}
	return fmt.Errorf("unknown UserPosition nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserPositionMutation) ResetField(name string) error {
	switch name {
	case userposition.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case userposition.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case userposition.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case userposition.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case userposition.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case userposition.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case userposition.FieldUserID:
		m.ResetUserID()
		return nil
	case userposition.FieldPositionID:
		m.ResetPositionID()
		return nil
	}
	return fmt.Errorf("unknown UserPosition field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserPositionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserPositionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserPositionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserPositionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserPositionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserPositionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserPositionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserPosition unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserPositionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserPosition edge %s", name)
}

// UserRoleMutation represents an operation that mutates the UserRole nodes in the graph.
type UserRoleMutation struct {
	config
	op            Op
	typ           string
	id            *uint32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	created_by    *uint32
	addcreated_by *int32
	updated_by    *uint32
	addupdated_by *int32
	deleted_by    *uint32
	adddeleted_by *int32
	user_id       *uint32
	adduser_id    *int32
	role_id       *uint32
	addrole_id    *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserRole, error)
	predicates    []predicate.UserRole
}

var _ ent.Mutation = (*UserRoleMutation)(nil)

// userroleOption allows management of the mutation configuration using functional options.
type userroleOption func(*UserRoleMutation)

// newUserRoleMutation creates new mutation for the UserRole entity.
func newUserRoleMutation(c config, op Op, opts ...userroleOption) *UserRoleMutation {
	m := &UserRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeUserRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserRoleID sets the ID field of the mutation.
func withUserRoleID(id uint32) userroleOption {
	return func(m *UserRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *UserRole
		)
		m.oldValue = func(ctx context.Context) (*UserRole, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserRole sets the old UserRole of the mutation.
func withUserRole(node *UserRole) userroleOption {
	return func(m *UserRoleMutation) {
		m.oldValue = func(context.Context) (*UserRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserRole entities.
func (m *UserRoleMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserRoleMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserRoleMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserRole.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserRoleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserRoleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *UserRoleMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[userrole.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *UserRoleMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[userrole.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserRoleMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, userrole.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserRoleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserRoleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *UserRoleMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[userrole.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *UserRoleMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[userrole.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserRoleMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, userrole.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserRoleMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserRoleMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserRoleMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[userrole.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserRoleMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[userrole.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserRoleMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, userrole.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *UserRoleMutation) SetCreatedBy(u uint32) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *UserRoleMutation) CreatedBy() (r uint32, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldCreatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *UserRoleMutation) AddCreatedBy(u int32) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *UserRoleMutation) AddedCreatedBy() (r int32, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *UserRoleMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[userrole.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *UserRoleMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[userrole.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *UserRoleMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, userrole.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *UserRoleMutation) SetUpdatedBy(u uint32) {
	m.updated_by = &u
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *UserRoleMutation) UpdatedBy() (r uint32, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldUpdatedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds u to the "updated_by" field.
func (m *UserRoleMutation) AddUpdatedBy(u int32) {
	if m.addupdated_by != nil {
		*m.addupdated_by += u
	} else {
		m.addupdated_by = &u
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *UserRoleMutation) AddedUpdatedBy() (r int32, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *UserRoleMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[userrole.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *UserRoleMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[userrole.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *UserRoleMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, userrole.FieldUpdatedBy)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *UserRoleMutation) SetDeletedBy(u uint32) {
	m.deleted_by = &u
	m.adddeleted_by = nil
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *UserRoleMutation) DeletedBy() (r uint32, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldDeletedBy(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// AddDeletedBy adds u to the "deleted_by" field.
func (m *UserRoleMutation) AddDeletedBy(u int32) {
	if m.adddeleted_by != nil {
		*m.adddeleted_by += u
	} else {
		m.adddeleted_by = &u
	}
}

// AddedDeletedBy returns the value that was added to the "deleted_by" field in this mutation.
func (m *UserRoleMutation) AddedDeletedBy() (r int32, exists bool) {
	v := m.adddeleted_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *UserRoleMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	m.clearedFields[userrole.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *UserRoleMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[userrole.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *UserRoleMutation) ResetDeletedBy() {
	m.deleted_by = nil
	m.adddeleted_by = nil
	delete(m.clearedFields, userrole.FieldDeletedBy)
}

// SetUserID sets the "user_id" field.
func (m *UserRoleMutation) SetUserID(u uint32) {
	m.user_id = &u
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserRoleMutation) UserID() (r uint32, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldUserID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds u to the "user_id" field.
func (m *UserRoleMutation) AddUserID(u int32) {
	if m.adduser_id != nil {
		*m.adduser_id += u
	} else {
		m.adduser_id = &u
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *UserRoleMutation) AddedUserID() (r int32, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserRoleMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetRoleID sets the "role_id" field.
func (m *UserRoleMutation) SetRoleID(u uint32) {
	m.role_id = &u
	m.addrole_id = nil
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *UserRoleMutation) RoleID() (r uint32, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldRoleID(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// AddRoleID adds u to the "role_id" field.
func (m *UserRoleMutation) AddRoleID(u int32) {
	if m.addrole_id != nil {
		*m.addrole_id += u
	} else {
		m.addrole_id = &u
	}
}

// AddedRoleID returns the value that was added to the "role_id" field in this mutation.
func (m *UserRoleMutation) AddedRoleID() (r int32, exists bool) {
	v := m.addrole_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *UserRoleMutation) ResetRoleID() {
	m.role_id = nil
	m.addrole_id = nil
}

// Where appends a list predicates to the UserRoleMutation builder.
func (m *UserRoleMutation) Where(ps ...predicate.UserRole) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserRoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserRoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserRole, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserRoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserRoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserRole).
func (m *UserRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserRoleMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, userrole.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, userrole.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, userrole.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, userrole.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, userrole.FieldUpdatedBy)
	}
	if m.deleted_by != nil {
		fields = append(fields, userrole.FieldDeletedBy)
	}
	if m.user_id != nil {
		fields = append(fields, userrole.FieldUserID)
	}
	if m.role_id != nil {
		fields = append(fields, userrole.FieldRoleID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userrole.FieldCreatedAt:
		return m.CreatedAt()
	case userrole.FieldUpdatedAt:
		return m.UpdatedAt()
	case userrole.FieldDeletedAt:
		return m.DeletedAt()
	case userrole.FieldCreatedBy:
		return m.CreatedBy()
	case userrole.FieldUpdatedBy:
		return m.UpdatedBy()
	case userrole.FieldDeletedBy:
		return m.DeletedBy()
	case userrole.FieldUserID:
		return m.UserID()
	case userrole.FieldRoleID:
		return m.RoleID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userrole.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case userrole.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case userrole.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case userrole.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case userrole.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case userrole.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case userrole.FieldUserID:
		return m.OldUserID(ctx)
	case userrole.FieldRoleID:
		return m.OldRoleID(ctx)
	}
	return nil, fmt.Errorf("unknown UserRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userrole.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case userrole.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case userrole.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case userrole.FieldCreatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case userrole.FieldUpdatedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case userrole.FieldDeletedBy:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case userrole.FieldUserID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userrole.FieldRoleID:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	}
	return fmt.Errorf("unknown UserRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserRoleMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, userrole.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, userrole.FieldUpdatedBy)
	}
	if m.adddeleted_by != nil {
		fields = append(fields, userrole.FieldDeletedBy)
	}
	if m.adduser_id != nil {
		fields = append(fields, userrole.FieldUserID)
	}
	if m.addrole_id != nil {
		fields = append(fields, userrole.FieldRoleID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserRoleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userrole.FieldCreatedBy:
		return m.AddedCreatedBy()
	case userrole.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case userrole.FieldDeletedBy:
		return m.AddedDeletedBy()
	case userrole.FieldUserID:
		return m.AddedUserID()
	case userrole.FieldRoleID:
		return m.AddedRoleID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userrole.FieldCreatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case userrole.FieldUpdatedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case userrole.FieldDeletedBy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedBy(v)
		return nil
	case userrole.FieldUserID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case userrole.FieldRoleID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoleID(v)
		return nil
	}
	return fmt.Errorf("unknown UserRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserRoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userrole.FieldCreatedAt) {
		fields = append(fields, userrole.FieldCreatedAt)
	}
	if m.FieldCleared(userrole.FieldUpdatedAt) {
		fields = append(fields, userrole.FieldUpdatedAt)
	}
	if m.FieldCleared(userrole.FieldDeletedAt) {
		fields = append(fields, userrole.FieldDeletedAt)
	}
	if m.FieldCleared(userrole.FieldCreatedBy) {
		fields = append(fields, userrole.FieldCreatedBy)
	}
	if m.FieldCleared(userrole.FieldUpdatedBy) {
		fields = append(fields, userrole.FieldUpdatedBy)
	}
	if m.FieldCleared(userrole.FieldDeletedBy) {
		fields = append(fields, userrole.FieldDeletedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserRoleMutation) ClearField(name string) error {
	switch name {
	case userrole.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case userrole.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case userrole.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case userrole.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case userrole.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case userrole.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	}
	return fmt.Errorf("unknown UserRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserRoleMutation) ResetField(name string) error {
	switch name {
	case userrole.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case userrole.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case userrole.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case userrole.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case userrole.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case userrole.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case userrole.FieldUserID:
		m.ResetUserID()
		return nil
	case userrole.FieldRoleID:
		m.ResetRoleID()
		return nil
	}
	return fmt.Errorf("unknown UserRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserRoleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserRoleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserRoleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserRoleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserRoleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserRole edge %s", name)
}

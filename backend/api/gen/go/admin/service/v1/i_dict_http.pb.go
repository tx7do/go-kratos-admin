// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: admin/service/v1/i_dict.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDictServiceCreateDictItem = "/admin.service.v1.DictService/CreateDictItem"
const OperationDictServiceCreateDictMain = "/admin.service.v1.DictService/CreateDictMain"
const OperationDictServiceDeleteDictItem = "/admin.service.v1.DictService/DeleteDictItem"
const OperationDictServiceDeleteDictMain = "/admin.service.v1.DictService/DeleteDictMain"
const OperationDictServiceGetDictMain = "/admin.service.v1.DictService/GetDictMain"
const OperationDictServiceListDictItem = "/admin.service.v1.DictService/ListDictItem"
const OperationDictServiceListDictMain = "/admin.service.v1.DictService/ListDictMain"
const OperationDictServiceUpdateDictItem = "/admin.service.v1.DictService/UpdateDictItem"
const OperationDictServiceUpdateDictMain = "/admin.service.v1.DictService/UpdateDictMain"

type DictServiceHTTPServer interface {
	// CreateDictItem 创建子字典
	CreateDictItem(context.Context, *CreateDictItemRequest) (*emptypb.Empty, error)
	// CreateDictMain 创建主字典
	CreateDictMain(context.Context, *CreateDictMainRequest) (*emptypb.Empty, error)
	// DeleteDictItem 删除子字典
	DeleteDictItem(context.Context, *BatchDeleteDictRequest) (*emptypb.Empty, error)
	// DeleteDictMain 删除主字典
	DeleteDictMain(context.Context, *BatchDeleteDictRequest) (*emptypb.Empty, error)
	// GetDictMain 查询主字典详情
	GetDictMain(context.Context, *GetDictMainRequest) (*DictMain, error)
	// ListDictItem 分页查询子字典列表
	ListDictItem(context.Context, *v1.PagingRequest) (*ListDictItemResponse, error)
	// ListDictMain 分页查询主字典列表
	ListDictMain(context.Context, *v1.PagingRequest) (*ListDictMainResponse, error)
	// UpdateDictItem 更新子字典
	UpdateDictItem(context.Context, *UpdateDictItemRequest) (*emptypb.Empty, error)
	// UpdateDictMain 更新主字典
	UpdateDictMain(context.Context, *UpdateDictMainRequest) (*emptypb.Empty, error)
}

func RegisterDictServiceHTTPServer(s *http.Server, srv DictServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/dict-mains", _DictService_ListDictMain0_HTTP_Handler(srv))
	r.GET("/api/v1/dict-mains/code/{code}", _DictService_GetDictMain0_HTTP_Handler(srv))
	r.GET("/admin/v1/dict-mains/{id}", _DictService_GetDictMain1_HTTP_Handler(srv))
	r.POST("/admin/v1/dict-mains", _DictService_CreateDictMain0_HTTP_Handler(srv))
	r.PUT("/admin/v1/dict-mains/{data.id}", _DictService_UpdateDictMain0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/dict-mains", _DictService_DeleteDictMain0_HTTP_Handler(srv))
	r.GET("/admin/v1/dict-items", _DictService_ListDictItem0_HTTP_Handler(srv))
	r.POST("/admin/v1/dict-items", _DictService_CreateDictItem0_HTTP_Handler(srv))
	r.PUT("/admin/v1/dict-items/{data.id}", _DictService_UpdateDictItem0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/dict-items", _DictService_DeleteDictItem0_HTTP_Handler(srv))
}

func _DictService_ListDictMain0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.PagingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceListDictMain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDictMain(ctx, req.(*v1.PagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDictMainResponse)
		return ctx.Result(200, reply)
	}
}

func _DictService_GetDictMain0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictMainRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceGetDictMain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictMain(ctx, req.(*GetDictMainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DictMain)
		return ctx.Result(200, reply)
	}
}

func _DictService_GetDictMain1_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictMainRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceGetDictMain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictMain(ctx, req.(*GetDictMainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DictMain)
		return ctx.Result(200, reply)
	}
}

func _DictService_CreateDictMain0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDictMainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceCreateDictMain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDictMain(ctx, req.(*CreateDictMainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _DictService_UpdateDictMain0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDictMainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceUpdateDictMain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDictMain(ctx, req.(*UpdateDictMainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _DictService_DeleteDictMain0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchDeleteDictRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceDeleteDictMain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDictMain(ctx, req.(*BatchDeleteDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _DictService_ListDictItem0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.PagingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceListDictItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDictItem(ctx, req.(*v1.PagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDictItemResponse)
		return ctx.Result(200, reply)
	}
}

func _DictService_CreateDictItem0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDictItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceCreateDictItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDictItem(ctx, req.(*CreateDictItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _DictService_UpdateDictItem0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDictItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceUpdateDictItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDictItem(ctx, req.(*UpdateDictItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _DictService_DeleteDictItem0_HTTP_Handler(srv DictServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchDeleteDictRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictServiceDeleteDictItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDictItem(ctx, req.(*BatchDeleteDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type DictServiceHTTPClient interface {
	// CreateDictItem 创建子字典
	CreateDictItem(ctx context.Context, req *CreateDictItemRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// CreateDictMain 创建主字典
	CreateDictMain(ctx context.Context, req *CreateDictMainRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// DeleteDictItem 删除子字典
	DeleteDictItem(ctx context.Context, req *BatchDeleteDictRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// DeleteDictMain 删除主字典
	DeleteDictMain(ctx context.Context, req *BatchDeleteDictRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// GetDictMain 查询主字典详情
	GetDictMain(ctx context.Context, req *GetDictMainRequest, opts ...http.CallOption) (rsp *DictMain, err error)
	// ListDictItem 分页查询子字典列表
	ListDictItem(ctx context.Context, req *v1.PagingRequest, opts ...http.CallOption) (rsp *ListDictItemResponse, err error)
	// ListDictMain 分页查询主字典列表
	ListDictMain(ctx context.Context, req *v1.PagingRequest, opts ...http.CallOption) (rsp *ListDictMainResponse, err error)
	// UpdateDictItem 更新子字典
	UpdateDictItem(ctx context.Context, req *UpdateDictItemRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// UpdateDictMain 更新主字典
	UpdateDictMain(ctx context.Context, req *UpdateDictMainRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type DictServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDictServiceHTTPClient(client *http.Client) DictServiceHTTPClient {
	return &DictServiceHTTPClientImpl{client}
}

// CreateDictItem 创建子字典
func (c *DictServiceHTTPClientImpl) CreateDictItem(ctx context.Context, in *CreateDictItemRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/dict-items"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictServiceCreateDictItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateDictMain 创建主字典
func (c *DictServiceHTTPClientImpl) CreateDictMain(ctx context.Context, in *CreateDictMainRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/dict-mains"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictServiceCreateDictMain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteDictItem 删除子字典
func (c *DictServiceHTTPClientImpl) DeleteDictItem(ctx context.Context, in *BatchDeleteDictRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/dict-items"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictServiceDeleteDictItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteDictMain 删除主字典
func (c *DictServiceHTTPClientImpl) DeleteDictMain(ctx context.Context, in *BatchDeleteDictRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/dict-mains"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictServiceDeleteDictMain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetDictMain 查询主字典详情
func (c *DictServiceHTTPClientImpl) GetDictMain(ctx context.Context, in *GetDictMainRequest, opts ...http.CallOption) (*DictMain, error) {
	var out DictMain
	pattern := "/admin/v1/dict-mains/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictServiceGetDictMain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListDictItem 分页查询子字典列表
func (c *DictServiceHTTPClientImpl) ListDictItem(ctx context.Context, in *v1.PagingRequest, opts ...http.CallOption) (*ListDictItemResponse, error) {
	var out ListDictItemResponse
	pattern := "/admin/v1/dict-items"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictServiceListDictItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListDictMain 分页查询主字典列表
func (c *DictServiceHTTPClientImpl) ListDictMain(ctx context.Context, in *v1.PagingRequest, opts ...http.CallOption) (*ListDictMainResponse, error) {
	var out ListDictMainResponse
	pattern := "/admin/v1/dict-mains"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictServiceListDictMain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateDictItem 更新子字典
func (c *DictServiceHTTPClientImpl) UpdateDictItem(ctx context.Context, in *UpdateDictItemRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/dict-items/{data.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictServiceUpdateDictItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateDictMain 更新主字典
func (c *DictServiceHTTPClientImpl) UpdateDictMain(ctx context.Context, in *UpdateDictMainRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/dict-mains/{data.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictServiceUpdateDictMain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

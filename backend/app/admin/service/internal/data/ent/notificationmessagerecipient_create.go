// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/notificationmessagerecipient"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationMessageRecipientCreate is the builder for creating a NotificationMessageRecipient entity.
type NotificationMessageRecipientCreate struct {
	config
	mutation *NotificationMessageRecipientMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *NotificationMessageRecipientCreate) SetCreatedAt(v time.Time) *NotificationMessageRecipientCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *NotificationMessageRecipientCreate) SetNillableCreatedAt(v *time.Time) *NotificationMessageRecipientCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *NotificationMessageRecipientCreate) SetUpdatedAt(v time.Time) *NotificationMessageRecipientCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *NotificationMessageRecipientCreate) SetNillableUpdatedAt(v *time.Time) *NotificationMessageRecipientCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *NotificationMessageRecipientCreate) SetDeletedAt(v time.Time) *NotificationMessageRecipientCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *NotificationMessageRecipientCreate) SetNillableDeletedAt(v *time.Time) *NotificationMessageRecipientCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *NotificationMessageRecipientCreate) SetTenantID(v uint32) *NotificationMessageRecipientCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetMessageID sets the "message_id" field.
func (_c *NotificationMessageRecipientCreate) SetMessageID(v uint32) *NotificationMessageRecipientCreate {
	_c.mutation.SetMessageID(v)
	return _c
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (_c *NotificationMessageRecipientCreate) SetNillableMessageID(v *uint32) *NotificationMessageRecipientCreate {
	if v != nil {
		_c.SetMessageID(*v)
	}
	return _c
}

// SetRecipientID sets the "recipient_id" field.
func (_c *NotificationMessageRecipientCreate) SetRecipientID(v uint32) *NotificationMessageRecipientCreate {
	_c.mutation.SetRecipientID(v)
	return _c
}

// SetNillableRecipientID sets the "recipient_id" field if the given value is not nil.
func (_c *NotificationMessageRecipientCreate) SetNillableRecipientID(v *uint32) *NotificationMessageRecipientCreate {
	if v != nil {
		_c.SetRecipientID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *NotificationMessageRecipientCreate) SetStatus(v notificationmessagerecipient.Status) *NotificationMessageRecipientCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *NotificationMessageRecipientCreate) SetNillableStatus(v *notificationmessagerecipient.Status) *NotificationMessageRecipientCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *NotificationMessageRecipientCreate) SetID(v uint32) *NotificationMessageRecipientCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the NotificationMessageRecipientMutation object of the builder.
func (_c *NotificationMessageRecipientCreate) Mutation() *NotificationMessageRecipientMutation {
	return _c.mutation
}

// Save creates the NotificationMessageRecipient in the database.
func (_c *NotificationMessageRecipientCreate) Save(ctx context.Context) (*NotificationMessageRecipient, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *NotificationMessageRecipientCreate) SaveX(ctx context.Context) *NotificationMessageRecipient {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotificationMessageRecipientCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotificationMessageRecipientCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *NotificationMessageRecipientCreate) check() error {
	if _, ok := _c.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "NotificationMessageRecipient.tenant_id"`)}
	}
	if v, ok := _c.mutation.TenantID(); ok {
		if err := notificationmessagerecipient.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "NotificationMessageRecipient.tenant_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := notificationmessagerecipient.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "NotificationMessageRecipient.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := notificationmessagerecipient.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "NotificationMessageRecipient.id": %w`, err)}
		}
	}
	return nil
}

func (_c *NotificationMessageRecipientCreate) sqlSave(ctx context.Context) (*NotificationMessageRecipient, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *NotificationMessageRecipientCreate) createSpec() (*NotificationMessageRecipient, *sqlgraph.CreateSpec) {
	var (
		_node = &NotificationMessageRecipient{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(notificationmessagerecipient.Table, sqlgraph.NewFieldSpec(notificationmessagerecipient.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(notificationmessagerecipient.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationmessagerecipient.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(notificationmessagerecipient.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(notificationmessagerecipient.FieldTenantID, field.TypeUint32, value)
		_node.TenantID = value
	}
	if value, ok := _c.mutation.MessageID(); ok {
		_spec.SetField(notificationmessagerecipient.FieldMessageID, field.TypeUint32, value)
		_node.MessageID = &value
	}
	if value, ok := _c.mutation.RecipientID(); ok {
		_spec.SetField(notificationmessagerecipient.FieldRecipientID, field.TypeUint32, value)
		_node.RecipientID = &value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(notificationmessagerecipient.FieldStatus, field.TypeEnum, value)
		_node.Status = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationMessageRecipient.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationMessageRecipientUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *NotificationMessageRecipientCreate) OnConflict(opts ...sql.ConflictOption) *NotificationMessageRecipientUpsertOne {
	_c.conflict = opts
	return &NotificationMessageRecipientUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationMessageRecipient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NotificationMessageRecipientCreate) OnConflictColumns(columns ...string) *NotificationMessageRecipientUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NotificationMessageRecipientUpsertOne{
		create: _c,
	}
}

type (
	// NotificationMessageRecipientUpsertOne is the builder for "upsert"-ing
	//  one NotificationMessageRecipient node.
	NotificationMessageRecipientUpsertOne struct {
		create *NotificationMessageRecipientCreate
	}

	// NotificationMessageRecipientUpsert is the "OnConflict" setter.
	NotificationMessageRecipientUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationMessageRecipientUpsert) SetUpdatedAt(v time.Time) *NotificationMessageRecipientUpsert {
	u.Set(notificationmessagerecipient.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationMessageRecipientUpsert) UpdateUpdatedAt() *NotificationMessageRecipientUpsert {
	u.SetExcluded(notificationmessagerecipient.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *NotificationMessageRecipientUpsert) ClearUpdatedAt() *NotificationMessageRecipientUpsert {
	u.SetNull(notificationmessagerecipient.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationMessageRecipientUpsert) SetDeletedAt(v time.Time) *NotificationMessageRecipientUpsert {
	u.Set(notificationmessagerecipient.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationMessageRecipientUpsert) UpdateDeletedAt() *NotificationMessageRecipientUpsert {
	u.SetExcluded(notificationmessagerecipient.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationMessageRecipientUpsert) ClearDeletedAt() *NotificationMessageRecipientUpsert {
	u.SetNull(notificationmessagerecipient.FieldDeletedAt)
	return u
}

// SetMessageID sets the "message_id" field.
func (u *NotificationMessageRecipientUpsert) SetMessageID(v uint32) *NotificationMessageRecipientUpsert {
	u.Set(notificationmessagerecipient.FieldMessageID, v)
	return u
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *NotificationMessageRecipientUpsert) UpdateMessageID() *NotificationMessageRecipientUpsert {
	u.SetExcluded(notificationmessagerecipient.FieldMessageID)
	return u
}

// AddMessageID adds v to the "message_id" field.
func (u *NotificationMessageRecipientUpsert) AddMessageID(v uint32) *NotificationMessageRecipientUpsert {
	u.Add(notificationmessagerecipient.FieldMessageID, v)
	return u
}

// ClearMessageID clears the value of the "message_id" field.
func (u *NotificationMessageRecipientUpsert) ClearMessageID() *NotificationMessageRecipientUpsert {
	u.SetNull(notificationmessagerecipient.FieldMessageID)
	return u
}

// SetRecipientID sets the "recipient_id" field.
func (u *NotificationMessageRecipientUpsert) SetRecipientID(v uint32) *NotificationMessageRecipientUpsert {
	u.Set(notificationmessagerecipient.FieldRecipientID, v)
	return u
}

// UpdateRecipientID sets the "recipient_id" field to the value that was provided on create.
func (u *NotificationMessageRecipientUpsert) UpdateRecipientID() *NotificationMessageRecipientUpsert {
	u.SetExcluded(notificationmessagerecipient.FieldRecipientID)
	return u
}

// AddRecipientID adds v to the "recipient_id" field.
func (u *NotificationMessageRecipientUpsert) AddRecipientID(v uint32) *NotificationMessageRecipientUpsert {
	u.Add(notificationmessagerecipient.FieldRecipientID, v)
	return u
}

// ClearRecipientID clears the value of the "recipient_id" field.
func (u *NotificationMessageRecipientUpsert) ClearRecipientID() *NotificationMessageRecipientUpsert {
	u.SetNull(notificationmessagerecipient.FieldRecipientID)
	return u
}

// SetStatus sets the "status" field.
func (u *NotificationMessageRecipientUpsert) SetStatus(v notificationmessagerecipient.Status) *NotificationMessageRecipientUpsert {
	u.Set(notificationmessagerecipient.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *NotificationMessageRecipientUpsert) UpdateStatus() *NotificationMessageRecipientUpsert {
	u.SetExcluded(notificationmessagerecipient.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *NotificationMessageRecipientUpsert) ClearStatus() *NotificationMessageRecipientUpsert {
	u.SetNull(notificationmessagerecipient.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NotificationMessageRecipient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationmessagerecipient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationMessageRecipientUpsertOne) UpdateNewValues() *NotificationMessageRecipientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notificationmessagerecipient.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(notificationmessagerecipient.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(notificationmessagerecipient.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationMessageRecipient.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NotificationMessageRecipientUpsertOne) Ignore() *NotificationMessageRecipientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationMessageRecipientUpsertOne) DoNothing() *NotificationMessageRecipientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationMessageRecipientCreate.OnConflict
// documentation for more info.
func (u *NotificationMessageRecipientUpsertOne) Update(set func(*NotificationMessageRecipientUpsert)) *NotificationMessageRecipientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationMessageRecipientUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationMessageRecipientUpsertOne) SetUpdatedAt(v time.Time) *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationMessageRecipientUpsertOne) UpdateUpdatedAt() *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *NotificationMessageRecipientUpsertOne) ClearUpdatedAt() *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationMessageRecipientUpsertOne) SetDeletedAt(v time.Time) *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationMessageRecipientUpsertOne) UpdateDeletedAt() *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationMessageRecipientUpsertOne) ClearDeletedAt() *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMessageID sets the "message_id" field.
func (u *NotificationMessageRecipientUpsertOne) SetMessageID(v uint32) *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.SetMessageID(v)
	})
}

// AddMessageID adds v to the "message_id" field.
func (u *NotificationMessageRecipientUpsertOne) AddMessageID(v uint32) *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.AddMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *NotificationMessageRecipientUpsertOne) UpdateMessageID() *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.UpdateMessageID()
	})
}

// ClearMessageID clears the value of the "message_id" field.
func (u *NotificationMessageRecipientUpsertOne) ClearMessageID() *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.ClearMessageID()
	})
}

// SetRecipientID sets the "recipient_id" field.
func (u *NotificationMessageRecipientUpsertOne) SetRecipientID(v uint32) *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.SetRecipientID(v)
	})
}

// AddRecipientID adds v to the "recipient_id" field.
func (u *NotificationMessageRecipientUpsertOne) AddRecipientID(v uint32) *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.AddRecipientID(v)
	})
}

// UpdateRecipientID sets the "recipient_id" field to the value that was provided on create.
func (u *NotificationMessageRecipientUpsertOne) UpdateRecipientID() *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.UpdateRecipientID()
	})
}

// ClearRecipientID clears the value of the "recipient_id" field.
func (u *NotificationMessageRecipientUpsertOne) ClearRecipientID() *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.ClearRecipientID()
	})
}

// SetStatus sets the "status" field.
func (u *NotificationMessageRecipientUpsertOne) SetStatus(v notificationmessagerecipient.Status) *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *NotificationMessageRecipientUpsertOne) UpdateStatus() *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *NotificationMessageRecipientUpsertOne) ClearStatus() *NotificationMessageRecipientUpsertOne {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *NotificationMessageRecipientUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotificationMessageRecipientCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationMessageRecipientUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotificationMessageRecipientUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotificationMessageRecipientUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotificationMessageRecipientCreateBulk is the builder for creating many NotificationMessageRecipient entities in bulk.
type NotificationMessageRecipientCreateBulk struct {
	config
	err      error
	builders []*NotificationMessageRecipientCreate
	conflict []sql.ConflictOption
}

// Save creates the NotificationMessageRecipient entities in the database.
func (_c *NotificationMessageRecipientCreateBulk) Save(ctx context.Context) ([]*NotificationMessageRecipient, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*NotificationMessageRecipient, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationMessageRecipientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *NotificationMessageRecipientCreateBulk) SaveX(ctx context.Context) []*NotificationMessageRecipient {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotificationMessageRecipientCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotificationMessageRecipientCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationMessageRecipient.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationMessageRecipientUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *NotificationMessageRecipientCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotificationMessageRecipientUpsertBulk {
	_c.conflict = opts
	return &NotificationMessageRecipientUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationMessageRecipient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NotificationMessageRecipientCreateBulk) OnConflictColumns(columns ...string) *NotificationMessageRecipientUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NotificationMessageRecipientUpsertBulk{
		create: _c,
	}
}

// NotificationMessageRecipientUpsertBulk is the builder for "upsert"-ing
// a bulk of NotificationMessageRecipient nodes.
type NotificationMessageRecipientUpsertBulk struct {
	create *NotificationMessageRecipientCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NotificationMessageRecipient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationmessagerecipient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationMessageRecipientUpsertBulk) UpdateNewValues() *NotificationMessageRecipientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notificationmessagerecipient.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(notificationmessagerecipient.FieldCreatedAt)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(notificationmessagerecipient.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationMessageRecipient.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NotificationMessageRecipientUpsertBulk) Ignore() *NotificationMessageRecipientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationMessageRecipientUpsertBulk) DoNothing() *NotificationMessageRecipientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationMessageRecipientCreateBulk.OnConflict
// documentation for more info.
func (u *NotificationMessageRecipientUpsertBulk) Update(set func(*NotificationMessageRecipientUpsert)) *NotificationMessageRecipientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationMessageRecipientUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationMessageRecipientUpsertBulk) SetUpdatedAt(v time.Time) *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationMessageRecipientUpsertBulk) UpdateUpdatedAt() *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *NotificationMessageRecipientUpsertBulk) ClearUpdatedAt() *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationMessageRecipientUpsertBulk) SetDeletedAt(v time.Time) *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationMessageRecipientUpsertBulk) UpdateDeletedAt() *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationMessageRecipientUpsertBulk) ClearDeletedAt() *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMessageID sets the "message_id" field.
func (u *NotificationMessageRecipientUpsertBulk) SetMessageID(v uint32) *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.SetMessageID(v)
	})
}

// AddMessageID adds v to the "message_id" field.
func (u *NotificationMessageRecipientUpsertBulk) AddMessageID(v uint32) *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.AddMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *NotificationMessageRecipientUpsertBulk) UpdateMessageID() *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.UpdateMessageID()
	})
}

// ClearMessageID clears the value of the "message_id" field.
func (u *NotificationMessageRecipientUpsertBulk) ClearMessageID() *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.ClearMessageID()
	})
}

// SetRecipientID sets the "recipient_id" field.
func (u *NotificationMessageRecipientUpsertBulk) SetRecipientID(v uint32) *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.SetRecipientID(v)
	})
}

// AddRecipientID adds v to the "recipient_id" field.
func (u *NotificationMessageRecipientUpsertBulk) AddRecipientID(v uint32) *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.AddRecipientID(v)
	})
}

// UpdateRecipientID sets the "recipient_id" field to the value that was provided on create.
func (u *NotificationMessageRecipientUpsertBulk) UpdateRecipientID() *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.UpdateRecipientID()
	})
}

// ClearRecipientID clears the value of the "recipient_id" field.
func (u *NotificationMessageRecipientUpsertBulk) ClearRecipientID() *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.ClearRecipientID()
	})
}

// SetStatus sets the "status" field.
func (u *NotificationMessageRecipientUpsertBulk) SetStatus(v notificationmessagerecipient.Status) *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *NotificationMessageRecipientUpsertBulk) UpdateStatus() *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *NotificationMessageRecipientUpsertBulk) ClearStatus() *NotificationMessageRecipientUpsertBulk {
	return u.Update(func(s *NotificationMessageRecipientUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *NotificationMessageRecipientUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NotificationMessageRecipientCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotificationMessageRecipientCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationMessageRecipientUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: admin/service/v1/i_dict.proto

package servicev1

import (
	context "context"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DictService_ListDictMain_FullMethodName   = "/admin.service.v1.DictService/ListDictMain"
	DictService_GetDictMain_FullMethodName    = "/admin.service.v1.DictService/GetDictMain"
	DictService_CreateDictMain_FullMethodName = "/admin.service.v1.DictService/CreateDictMain"
	DictService_UpdateDictMain_FullMethodName = "/admin.service.v1.DictService/UpdateDictMain"
	DictService_DeleteDictMain_FullMethodName = "/admin.service.v1.DictService/DeleteDictMain"
	DictService_ListDictItem_FullMethodName   = "/admin.service.v1.DictService/ListDictItem"
	DictService_CreateDictItem_FullMethodName = "/admin.service.v1.DictService/CreateDictItem"
	DictService_UpdateDictItem_FullMethodName = "/admin.service.v1.DictService/UpdateDictItem"
	DictService_DeleteDictItem_FullMethodName = "/admin.service.v1.DictService/DeleteDictItem"
)

// DictServiceClient is the client API for DictService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 字典管理服务
type DictServiceClient interface {
	// 分页查询主字典列表
	ListDictMain(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*ListDictMainResponse, error)
	// 查询主字典详情
	GetDictMain(ctx context.Context, in *GetDictMainRequest, opts ...grpc.CallOption) (*DictMain, error)
	// 创建主字典
	CreateDictMain(ctx context.Context, in *CreateDictMainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新主字典
	UpdateDictMain(ctx context.Context, in *UpdateDictMainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除主字典
	DeleteDictMain(ctx context.Context, in *BatchDeleteDictRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 分页查询子字典列表
	ListDictItem(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*ListDictItemResponse, error)
	// 创建子字典
	CreateDictItem(ctx context.Context, in *CreateDictItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新子字典
	UpdateDictItem(ctx context.Context, in *UpdateDictItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除子字典
	DeleteDictItem(ctx context.Context, in *BatchDeleteDictRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dictServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDictServiceClient(cc grpc.ClientConnInterface) DictServiceClient {
	return &dictServiceClient{cc}
}

func (c *dictServiceClient) ListDictMain(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*ListDictMainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDictMainResponse)
	err := c.cc.Invoke(ctx, DictService_ListDictMain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) GetDictMain(ctx context.Context, in *GetDictMainRequest, opts ...grpc.CallOption) (*DictMain, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictMain)
	err := c.cc.Invoke(ctx, DictService_GetDictMain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) CreateDictMain(ctx context.Context, in *CreateDictMainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DictService_CreateDictMain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) UpdateDictMain(ctx context.Context, in *UpdateDictMainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DictService_UpdateDictMain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) DeleteDictMain(ctx context.Context, in *BatchDeleteDictRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DictService_DeleteDictMain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) ListDictItem(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*ListDictItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDictItemResponse)
	err := c.cc.Invoke(ctx, DictService_ListDictItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) CreateDictItem(ctx context.Context, in *CreateDictItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DictService_CreateDictItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) UpdateDictItem(ctx context.Context, in *UpdateDictItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DictService_UpdateDictItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) DeleteDictItem(ctx context.Context, in *BatchDeleteDictRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DictService_DeleteDictItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictServiceServer is the server API for DictService service.
// All implementations must embed UnimplementedDictServiceServer
// for forward compatibility.
//
// 字典管理服务
type DictServiceServer interface {
	// 分页查询主字典列表
	ListDictMain(context.Context, *v1.PagingRequest) (*ListDictMainResponse, error)
	// 查询主字典详情
	GetDictMain(context.Context, *GetDictMainRequest) (*DictMain, error)
	// 创建主字典
	CreateDictMain(context.Context, *CreateDictMainRequest) (*emptypb.Empty, error)
	// 更新主字典
	UpdateDictMain(context.Context, *UpdateDictMainRequest) (*emptypb.Empty, error)
	// 删除主字典
	DeleteDictMain(context.Context, *BatchDeleteDictRequest) (*emptypb.Empty, error)
	// 分页查询子字典列表
	ListDictItem(context.Context, *v1.PagingRequest) (*ListDictItemResponse, error)
	// 创建子字典
	CreateDictItem(context.Context, *CreateDictItemRequest) (*emptypb.Empty, error)
	// 更新子字典
	UpdateDictItem(context.Context, *UpdateDictItemRequest) (*emptypb.Empty, error)
	// 删除子字典
	DeleteDictItem(context.Context, *BatchDeleteDictRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDictServiceServer()
}

// UnimplementedDictServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDictServiceServer struct{}

func (UnimplementedDictServiceServer) ListDictMain(context.Context, *v1.PagingRequest) (*ListDictMainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDictMain not implemented")
}
func (UnimplementedDictServiceServer) GetDictMain(context.Context, *GetDictMainRequest) (*DictMain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictMain not implemented")
}
func (UnimplementedDictServiceServer) CreateDictMain(context.Context, *CreateDictMainRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictMain not implemented")
}
func (UnimplementedDictServiceServer) UpdateDictMain(context.Context, *UpdateDictMainRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictMain not implemented")
}
func (UnimplementedDictServiceServer) DeleteDictMain(context.Context, *BatchDeleteDictRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictMain not implemented")
}
func (UnimplementedDictServiceServer) ListDictItem(context.Context, *v1.PagingRequest) (*ListDictItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDictItem not implemented")
}
func (UnimplementedDictServiceServer) CreateDictItem(context.Context, *CreateDictItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictItem not implemented")
}
func (UnimplementedDictServiceServer) UpdateDictItem(context.Context, *UpdateDictItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictItem not implemented")
}
func (UnimplementedDictServiceServer) DeleteDictItem(context.Context, *BatchDeleteDictRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictItem not implemented")
}
func (UnimplementedDictServiceServer) mustEmbedUnimplementedDictServiceServer() {}
func (UnimplementedDictServiceServer) testEmbeddedByValue()                     {}

// UnsafeDictServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictServiceServer will
// result in compilation errors.
type UnsafeDictServiceServer interface {
	mustEmbedUnimplementedDictServiceServer()
}

func RegisterDictServiceServer(s grpc.ServiceRegistrar, srv DictServiceServer) {
	// If the following call pancis, it indicates UnimplementedDictServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DictService_ServiceDesc, srv)
}

func _DictService_ListDictMain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).ListDictMain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_ListDictMain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).ListDictMain(ctx, req.(*v1.PagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_GetDictMain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictMainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).GetDictMain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_GetDictMain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).GetDictMain(ctx, req.(*GetDictMainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_CreateDictMain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictMainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).CreateDictMain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_CreateDictMain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).CreateDictMain(ctx, req.(*CreateDictMainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_UpdateDictMain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictMainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).UpdateDictMain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_UpdateDictMain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).UpdateDictMain(ctx, req.(*UpdateDictMainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_DeleteDictMain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).DeleteDictMain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_DeleteDictMain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).DeleteDictMain(ctx, req.(*BatchDeleteDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_ListDictItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).ListDictItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_ListDictItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).ListDictItem(ctx, req.(*v1.PagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_CreateDictItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).CreateDictItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_CreateDictItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).CreateDictItem(ctx, req.(*CreateDictItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_UpdateDictItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).UpdateDictItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_UpdateDictItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).UpdateDictItem(ctx, req.(*UpdateDictItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_DeleteDictItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).DeleteDictItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_DeleteDictItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).DeleteDictItem(ctx, req.(*BatchDeleteDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DictService_ServiceDesc is the grpc.ServiceDesc for DictService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.service.v1.DictService",
	HandlerType: (*DictServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDictMain",
			Handler:    _DictService_ListDictMain_Handler,
		},
		{
			MethodName: "GetDictMain",
			Handler:    _DictService_GetDictMain_Handler,
		},
		{
			MethodName: "CreateDictMain",
			Handler:    _DictService_CreateDictMain_Handler,
		},
		{
			MethodName: "UpdateDictMain",
			Handler:    _DictService_UpdateDictMain_Handler,
		},
		{
			MethodName: "DeleteDictMain",
			Handler:    _DictService_DeleteDictMain_Handler,
		},
		{
			MethodName: "ListDictItem",
			Handler:    _DictService_ListDictItem_Handler,
		},
		{
			MethodName: "CreateDictItem",
			Handler:    _DictService_CreateDictItem_Handler,
		},
		{
			MethodName: "UpdateDictItem",
			Handler:    _DictService_UpdateDictItem_Handler,
		},
		{
			MethodName: "DeleteDictItem",
			Handler:    _DictService_DeleteDictItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/service/v1/i_dict.proto",
}

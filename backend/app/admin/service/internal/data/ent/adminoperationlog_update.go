// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/adminoperationlog"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminOperationLogUpdate is the builder for updating AdminOperationLog entities.
type AdminOperationLogUpdate struct {
	config
	hooks     []Hook
	mutation  *AdminOperationLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AdminOperationLogUpdate builder.
func (_u *AdminOperationLogUpdate) Where(ps ...predicate.AdminOperationLog) *AdminOperationLogUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetRequestID sets the "request_id" field.
func (_u *AdminOperationLogUpdate) SetRequestID(v string) *AdminOperationLogUpdate {
	_u.mutation.SetRequestID(v)
	return _u
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableRequestID(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetRequestID(*v)
	}
	return _u
}

// ClearRequestID clears the value of the "request_id" field.
func (_u *AdminOperationLogUpdate) ClearRequestID() *AdminOperationLogUpdate {
	_u.mutation.ClearRequestID()
	return _u
}

// SetMethod sets the "method" field.
func (_u *AdminOperationLogUpdate) SetMethod(v string) *AdminOperationLogUpdate {
	_u.mutation.SetMethod(v)
	return _u
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableMethod(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetMethod(*v)
	}
	return _u
}

// ClearMethod clears the value of the "method" field.
func (_u *AdminOperationLogUpdate) ClearMethod() *AdminOperationLogUpdate {
	_u.mutation.ClearMethod()
	return _u
}

// SetOperation sets the "operation" field.
func (_u *AdminOperationLogUpdate) SetOperation(v string) *AdminOperationLogUpdate {
	_u.mutation.SetOperation(v)
	return _u
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableOperation(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetOperation(*v)
	}
	return _u
}

// ClearOperation clears the value of the "operation" field.
func (_u *AdminOperationLogUpdate) ClearOperation() *AdminOperationLogUpdate {
	_u.mutation.ClearOperation()
	return _u
}

// SetPath sets the "path" field.
func (_u *AdminOperationLogUpdate) SetPath(v string) *AdminOperationLogUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillablePath(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *AdminOperationLogUpdate) ClearPath() *AdminOperationLogUpdate {
	_u.mutation.ClearPath()
	return _u
}

// SetReferer sets the "referer" field.
func (_u *AdminOperationLogUpdate) SetReferer(v string) *AdminOperationLogUpdate {
	_u.mutation.SetReferer(v)
	return _u
}

// SetNillableReferer sets the "referer" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableReferer(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetReferer(*v)
	}
	return _u
}

// ClearReferer clears the value of the "referer" field.
func (_u *AdminOperationLogUpdate) ClearReferer() *AdminOperationLogUpdate {
	_u.mutation.ClearReferer()
	return _u
}

// SetRequestURI sets the "request_uri" field.
func (_u *AdminOperationLogUpdate) SetRequestURI(v string) *AdminOperationLogUpdate {
	_u.mutation.SetRequestURI(v)
	return _u
}

// SetNillableRequestURI sets the "request_uri" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableRequestURI(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetRequestURI(*v)
	}
	return _u
}

// ClearRequestURI clears the value of the "request_uri" field.
func (_u *AdminOperationLogUpdate) ClearRequestURI() *AdminOperationLogUpdate {
	_u.mutation.ClearRequestURI()
	return _u
}

// SetRequestBody sets the "request_body" field.
func (_u *AdminOperationLogUpdate) SetRequestBody(v string) *AdminOperationLogUpdate {
	_u.mutation.SetRequestBody(v)
	return _u
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableRequestBody(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetRequestBody(*v)
	}
	return _u
}

// ClearRequestBody clears the value of the "request_body" field.
func (_u *AdminOperationLogUpdate) ClearRequestBody() *AdminOperationLogUpdate {
	_u.mutation.ClearRequestBody()
	return _u
}

// SetRequestHeader sets the "request_header" field.
func (_u *AdminOperationLogUpdate) SetRequestHeader(v string) *AdminOperationLogUpdate {
	_u.mutation.SetRequestHeader(v)
	return _u
}

// SetNillableRequestHeader sets the "request_header" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableRequestHeader(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetRequestHeader(*v)
	}
	return _u
}

// ClearRequestHeader clears the value of the "request_header" field.
func (_u *AdminOperationLogUpdate) ClearRequestHeader() *AdminOperationLogUpdate {
	_u.mutation.ClearRequestHeader()
	return _u
}

// SetResponse sets the "response" field.
func (_u *AdminOperationLogUpdate) SetResponse(v string) *AdminOperationLogUpdate {
	_u.mutation.SetResponse(v)
	return _u
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableResponse(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetResponse(*v)
	}
	return _u
}

// ClearResponse clears the value of the "response" field.
func (_u *AdminOperationLogUpdate) ClearResponse() *AdminOperationLogUpdate {
	_u.mutation.ClearResponse()
	return _u
}

// SetCostTime sets the "cost_time" field.
func (_u *AdminOperationLogUpdate) SetCostTime(v float64) *AdminOperationLogUpdate {
	_u.mutation.ResetCostTime()
	_u.mutation.SetCostTime(v)
	return _u
}

// SetNillableCostTime sets the "cost_time" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableCostTime(v *float64) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetCostTime(*v)
	}
	return _u
}

// AddCostTime adds value to the "cost_time" field.
func (_u *AdminOperationLogUpdate) AddCostTime(v float64) *AdminOperationLogUpdate {
	_u.mutation.AddCostTime(v)
	return _u
}

// ClearCostTime clears the value of the "cost_time" field.
func (_u *AdminOperationLogUpdate) ClearCostTime() *AdminOperationLogUpdate {
	_u.mutation.ClearCostTime()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *AdminOperationLogUpdate) SetUserID(v uint32) *AdminOperationLogUpdate {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableUserID(v *uint32) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *AdminOperationLogUpdate) AddUserID(v int32) *AdminOperationLogUpdate {
	_u.mutation.AddUserID(v)
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *AdminOperationLogUpdate) ClearUserID() *AdminOperationLogUpdate {
	_u.mutation.ClearUserID()
	return _u
}

// SetUsername sets the "username" field.
func (_u *AdminOperationLogUpdate) SetUsername(v string) *AdminOperationLogUpdate {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableUsername(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// ClearUsername clears the value of the "username" field.
func (_u *AdminOperationLogUpdate) ClearUsername() *AdminOperationLogUpdate {
	_u.mutation.ClearUsername()
	return _u
}

// SetClientIP sets the "client_ip" field.
func (_u *AdminOperationLogUpdate) SetClientIP(v string) *AdminOperationLogUpdate {
	_u.mutation.SetClientIP(v)
	return _u
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableClientIP(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetClientIP(*v)
	}
	return _u
}

// ClearClientIP clears the value of the "client_ip" field.
func (_u *AdminOperationLogUpdate) ClearClientIP() *AdminOperationLogUpdate {
	_u.mutation.ClearClientIP()
	return _u
}

// SetStatusCode sets the "status_code" field.
func (_u *AdminOperationLogUpdate) SetStatusCode(v int32) *AdminOperationLogUpdate {
	_u.mutation.ResetStatusCode()
	_u.mutation.SetStatusCode(v)
	return _u
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableStatusCode(v *int32) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetStatusCode(*v)
	}
	return _u
}

// AddStatusCode adds value to the "status_code" field.
func (_u *AdminOperationLogUpdate) AddStatusCode(v int32) *AdminOperationLogUpdate {
	_u.mutation.AddStatusCode(v)
	return _u
}

// ClearStatusCode clears the value of the "status_code" field.
func (_u *AdminOperationLogUpdate) ClearStatusCode() *AdminOperationLogUpdate {
	_u.mutation.ClearStatusCode()
	return _u
}

// SetReason sets the "reason" field.
func (_u *AdminOperationLogUpdate) SetReason(v string) *AdminOperationLogUpdate {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableReason(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// ClearReason clears the value of the "reason" field.
func (_u *AdminOperationLogUpdate) ClearReason() *AdminOperationLogUpdate {
	_u.mutation.ClearReason()
	return _u
}

// SetSuccess sets the "success" field.
func (_u *AdminOperationLogUpdate) SetSuccess(v bool) *AdminOperationLogUpdate {
	_u.mutation.SetSuccess(v)
	return _u
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableSuccess(v *bool) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetSuccess(*v)
	}
	return _u
}

// ClearSuccess clears the value of the "success" field.
func (_u *AdminOperationLogUpdate) ClearSuccess() *AdminOperationLogUpdate {
	_u.mutation.ClearSuccess()
	return _u
}

// SetLocation sets the "location" field.
func (_u *AdminOperationLogUpdate) SetLocation(v string) *AdminOperationLogUpdate {
	_u.mutation.SetLocation(v)
	return _u
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableLocation(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetLocation(*v)
	}
	return _u
}

// ClearLocation clears the value of the "location" field.
func (_u *AdminOperationLogUpdate) ClearLocation() *AdminOperationLogUpdate {
	_u.mutation.ClearLocation()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *AdminOperationLogUpdate) SetUserAgent(v string) *AdminOperationLogUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableUserAgent(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *AdminOperationLogUpdate) ClearUserAgent() *AdminOperationLogUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetBrowserName sets the "browser_name" field.
func (_u *AdminOperationLogUpdate) SetBrowserName(v string) *AdminOperationLogUpdate {
	_u.mutation.SetBrowserName(v)
	return _u
}

// SetNillableBrowserName sets the "browser_name" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableBrowserName(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetBrowserName(*v)
	}
	return _u
}

// ClearBrowserName clears the value of the "browser_name" field.
func (_u *AdminOperationLogUpdate) ClearBrowserName() *AdminOperationLogUpdate {
	_u.mutation.ClearBrowserName()
	return _u
}

// SetBrowserVersion sets the "browser_version" field.
func (_u *AdminOperationLogUpdate) SetBrowserVersion(v string) *AdminOperationLogUpdate {
	_u.mutation.SetBrowserVersion(v)
	return _u
}

// SetNillableBrowserVersion sets the "browser_version" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableBrowserVersion(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetBrowserVersion(*v)
	}
	return _u
}

// ClearBrowserVersion clears the value of the "browser_version" field.
func (_u *AdminOperationLogUpdate) ClearBrowserVersion() *AdminOperationLogUpdate {
	_u.mutation.ClearBrowserVersion()
	return _u
}

// SetClientID sets the "client_id" field.
func (_u *AdminOperationLogUpdate) SetClientID(v string) *AdminOperationLogUpdate {
	_u.mutation.SetClientID(v)
	return _u
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableClientID(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetClientID(*v)
	}
	return _u
}

// ClearClientID clears the value of the "client_id" field.
func (_u *AdminOperationLogUpdate) ClearClientID() *AdminOperationLogUpdate {
	_u.mutation.ClearClientID()
	return _u
}

// SetClientName sets the "client_name" field.
func (_u *AdminOperationLogUpdate) SetClientName(v string) *AdminOperationLogUpdate {
	_u.mutation.SetClientName(v)
	return _u
}

// SetNillableClientName sets the "client_name" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableClientName(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetClientName(*v)
	}
	return _u
}

// ClearClientName clears the value of the "client_name" field.
func (_u *AdminOperationLogUpdate) ClearClientName() *AdminOperationLogUpdate {
	_u.mutation.ClearClientName()
	return _u
}

// SetOsName sets the "os_name" field.
func (_u *AdminOperationLogUpdate) SetOsName(v string) *AdminOperationLogUpdate {
	_u.mutation.SetOsName(v)
	return _u
}

// SetNillableOsName sets the "os_name" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableOsName(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetOsName(*v)
	}
	return _u
}

// ClearOsName clears the value of the "os_name" field.
func (_u *AdminOperationLogUpdate) ClearOsName() *AdminOperationLogUpdate {
	_u.mutation.ClearOsName()
	return _u
}

// SetOsVersion sets the "os_version" field.
func (_u *AdminOperationLogUpdate) SetOsVersion(v string) *AdminOperationLogUpdate {
	_u.mutation.SetOsVersion(v)
	return _u
}

// SetNillableOsVersion sets the "os_version" field if the given value is not nil.
func (_u *AdminOperationLogUpdate) SetNillableOsVersion(v *string) *AdminOperationLogUpdate {
	if v != nil {
		_u.SetOsVersion(*v)
	}
	return _u
}

// ClearOsVersion clears the value of the "os_version" field.
func (_u *AdminOperationLogUpdate) ClearOsVersion() *AdminOperationLogUpdate {
	_u.mutation.ClearOsVersion()
	return _u
}

// Mutation returns the AdminOperationLogMutation object of the builder.
func (_u *AdminOperationLogUpdate) Mutation() *AdminOperationLogMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AdminOperationLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AdminOperationLogUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AdminOperationLogUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AdminOperationLogUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AdminOperationLogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdminOperationLogUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AdminOperationLogUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminoperationlog.Table, adminoperationlog.Columns, sqlgraph.NewFieldSpec(adminoperationlog.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(adminoperationlog.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.RequestID(); ok {
		_spec.SetField(adminoperationlog.FieldRequestID, field.TypeString, value)
	}
	if _u.mutation.RequestIDCleared() {
		_spec.ClearField(adminoperationlog.FieldRequestID, field.TypeString)
	}
	if value, ok := _u.mutation.Method(); ok {
		_spec.SetField(adminoperationlog.FieldMethod, field.TypeString, value)
	}
	if _u.mutation.MethodCleared() {
		_spec.ClearField(adminoperationlog.FieldMethod, field.TypeString)
	}
	if value, ok := _u.mutation.Operation(); ok {
		_spec.SetField(adminoperationlog.FieldOperation, field.TypeString, value)
	}
	if _u.mutation.OperationCleared() {
		_spec.ClearField(adminoperationlog.FieldOperation, field.TypeString)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(adminoperationlog.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(adminoperationlog.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Referer(); ok {
		_spec.SetField(adminoperationlog.FieldReferer, field.TypeString, value)
	}
	if _u.mutation.RefererCleared() {
		_spec.ClearField(adminoperationlog.FieldReferer, field.TypeString)
	}
	if value, ok := _u.mutation.RequestURI(); ok {
		_spec.SetField(adminoperationlog.FieldRequestURI, field.TypeString, value)
	}
	if _u.mutation.RequestURICleared() {
		_spec.ClearField(adminoperationlog.FieldRequestURI, field.TypeString)
	}
	if value, ok := _u.mutation.RequestBody(); ok {
		_spec.SetField(adminoperationlog.FieldRequestBody, field.TypeString, value)
	}
	if _u.mutation.RequestBodyCleared() {
		_spec.ClearField(adminoperationlog.FieldRequestBody, field.TypeString)
	}
	if value, ok := _u.mutation.RequestHeader(); ok {
		_spec.SetField(adminoperationlog.FieldRequestHeader, field.TypeString, value)
	}
	if _u.mutation.RequestHeaderCleared() {
		_spec.ClearField(adminoperationlog.FieldRequestHeader, field.TypeString)
	}
	if value, ok := _u.mutation.Response(); ok {
		_spec.SetField(adminoperationlog.FieldResponse, field.TypeString, value)
	}
	if _u.mutation.ResponseCleared() {
		_spec.ClearField(adminoperationlog.FieldResponse, field.TypeString)
	}
	if value, ok := _u.mutation.CostTime(); ok {
		_spec.SetField(adminoperationlog.FieldCostTime, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCostTime(); ok {
		_spec.AddField(adminoperationlog.FieldCostTime, field.TypeFloat64, value)
	}
	if _u.mutation.CostTimeCleared() {
		_spec.ClearField(adminoperationlog.FieldCostTime, field.TypeFloat64)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(adminoperationlog.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(adminoperationlog.FieldUserID, field.TypeUint32, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(adminoperationlog.FieldUserID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(adminoperationlog.FieldUsername, field.TypeString, value)
	}
	if _u.mutation.UsernameCleared() {
		_spec.ClearField(adminoperationlog.FieldUsername, field.TypeString)
	}
	if value, ok := _u.mutation.ClientIP(); ok {
		_spec.SetField(adminoperationlog.FieldClientIP, field.TypeString, value)
	}
	if _u.mutation.ClientIPCleared() {
		_spec.ClearField(adminoperationlog.FieldClientIP, field.TypeString)
	}
	if value, ok := _u.mutation.StatusCode(); ok {
		_spec.SetField(adminoperationlog.FieldStatusCode, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatusCode(); ok {
		_spec.AddField(adminoperationlog.FieldStatusCode, field.TypeInt32, value)
	}
	if _u.mutation.StatusCodeCleared() {
		_spec.ClearField(adminoperationlog.FieldStatusCode, field.TypeInt32)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(adminoperationlog.FieldReason, field.TypeString, value)
	}
	if _u.mutation.ReasonCleared() {
		_spec.ClearField(adminoperationlog.FieldReason, field.TypeString)
	}
	if value, ok := _u.mutation.Success(); ok {
		_spec.SetField(adminoperationlog.FieldSuccess, field.TypeBool, value)
	}
	if _u.mutation.SuccessCleared() {
		_spec.ClearField(adminoperationlog.FieldSuccess, field.TypeBool)
	}
	if value, ok := _u.mutation.Location(); ok {
		_spec.SetField(adminoperationlog.FieldLocation, field.TypeString, value)
	}
	if _u.mutation.LocationCleared() {
		_spec.ClearField(adminoperationlog.FieldLocation, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(adminoperationlog.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(adminoperationlog.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.BrowserName(); ok {
		_spec.SetField(adminoperationlog.FieldBrowserName, field.TypeString, value)
	}
	if _u.mutation.BrowserNameCleared() {
		_spec.ClearField(adminoperationlog.FieldBrowserName, field.TypeString)
	}
	if value, ok := _u.mutation.BrowserVersion(); ok {
		_spec.SetField(adminoperationlog.FieldBrowserVersion, field.TypeString, value)
	}
	if _u.mutation.BrowserVersionCleared() {
		_spec.ClearField(adminoperationlog.FieldBrowserVersion, field.TypeString)
	}
	if value, ok := _u.mutation.ClientID(); ok {
		_spec.SetField(adminoperationlog.FieldClientID, field.TypeString, value)
	}
	if _u.mutation.ClientIDCleared() {
		_spec.ClearField(adminoperationlog.FieldClientID, field.TypeString)
	}
	if value, ok := _u.mutation.ClientName(); ok {
		_spec.SetField(adminoperationlog.FieldClientName, field.TypeString, value)
	}
	if _u.mutation.ClientNameCleared() {
		_spec.ClearField(adminoperationlog.FieldClientName, field.TypeString)
	}
	if value, ok := _u.mutation.OsName(); ok {
		_spec.SetField(adminoperationlog.FieldOsName, field.TypeString, value)
	}
	if _u.mutation.OsNameCleared() {
		_spec.ClearField(adminoperationlog.FieldOsName, field.TypeString)
	}
	if value, ok := _u.mutation.OsVersion(); ok {
		_spec.SetField(adminoperationlog.FieldOsVersion, field.TypeString, value)
	}
	if _u.mutation.OsVersionCleared() {
		_spec.ClearField(adminoperationlog.FieldOsVersion, field.TypeString)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminoperationlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AdminOperationLogUpdateOne is the builder for updating a single AdminOperationLog entity.
type AdminOperationLogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AdminOperationLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetRequestID sets the "request_id" field.
func (_u *AdminOperationLogUpdateOne) SetRequestID(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetRequestID(v)
	return _u
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableRequestID(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetRequestID(*v)
	}
	return _u
}

// ClearRequestID clears the value of the "request_id" field.
func (_u *AdminOperationLogUpdateOne) ClearRequestID() *AdminOperationLogUpdateOne {
	_u.mutation.ClearRequestID()
	return _u
}

// SetMethod sets the "method" field.
func (_u *AdminOperationLogUpdateOne) SetMethod(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetMethod(v)
	return _u
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableMethod(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetMethod(*v)
	}
	return _u
}

// ClearMethod clears the value of the "method" field.
func (_u *AdminOperationLogUpdateOne) ClearMethod() *AdminOperationLogUpdateOne {
	_u.mutation.ClearMethod()
	return _u
}

// SetOperation sets the "operation" field.
func (_u *AdminOperationLogUpdateOne) SetOperation(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetOperation(v)
	return _u
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableOperation(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetOperation(*v)
	}
	return _u
}

// ClearOperation clears the value of the "operation" field.
func (_u *AdminOperationLogUpdateOne) ClearOperation() *AdminOperationLogUpdateOne {
	_u.mutation.ClearOperation()
	return _u
}

// SetPath sets the "path" field.
func (_u *AdminOperationLogUpdateOne) SetPath(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillablePath(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *AdminOperationLogUpdateOne) ClearPath() *AdminOperationLogUpdateOne {
	_u.mutation.ClearPath()
	return _u
}

// SetReferer sets the "referer" field.
func (_u *AdminOperationLogUpdateOne) SetReferer(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetReferer(v)
	return _u
}

// SetNillableReferer sets the "referer" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableReferer(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetReferer(*v)
	}
	return _u
}

// ClearReferer clears the value of the "referer" field.
func (_u *AdminOperationLogUpdateOne) ClearReferer() *AdminOperationLogUpdateOne {
	_u.mutation.ClearReferer()
	return _u
}

// SetRequestURI sets the "request_uri" field.
func (_u *AdminOperationLogUpdateOne) SetRequestURI(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetRequestURI(v)
	return _u
}

// SetNillableRequestURI sets the "request_uri" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableRequestURI(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetRequestURI(*v)
	}
	return _u
}

// ClearRequestURI clears the value of the "request_uri" field.
func (_u *AdminOperationLogUpdateOne) ClearRequestURI() *AdminOperationLogUpdateOne {
	_u.mutation.ClearRequestURI()
	return _u
}

// SetRequestBody sets the "request_body" field.
func (_u *AdminOperationLogUpdateOne) SetRequestBody(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetRequestBody(v)
	return _u
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableRequestBody(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetRequestBody(*v)
	}
	return _u
}

// ClearRequestBody clears the value of the "request_body" field.
func (_u *AdminOperationLogUpdateOne) ClearRequestBody() *AdminOperationLogUpdateOne {
	_u.mutation.ClearRequestBody()
	return _u
}

// SetRequestHeader sets the "request_header" field.
func (_u *AdminOperationLogUpdateOne) SetRequestHeader(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetRequestHeader(v)
	return _u
}

// SetNillableRequestHeader sets the "request_header" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableRequestHeader(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetRequestHeader(*v)
	}
	return _u
}

// ClearRequestHeader clears the value of the "request_header" field.
func (_u *AdminOperationLogUpdateOne) ClearRequestHeader() *AdminOperationLogUpdateOne {
	_u.mutation.ClearRequestHeader()
	return _u
}

// SetResponse sets the "response" field.
func (_u *AdminOperationLogUpdateOne) SetResponse(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetResponse(v)
	return _u
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableResponse(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetResponse(*v)
	}
	return _u
}

// ClearResponse clears the value of the "response" field.
func (_u *AdminOperationLogUpdateOne) ClearResponse() *AdminOperationLogUpdateOne {
	_u.mutation.ClearResponse()
	return _u
}

// SetCostTime sets the "cost_time" field.
func (_u *AdminOperationLogUpdateOne) SetCostTime(v float64) *AdminOperationLogUpdateOne {
	_u.mutation.ResetCostTime()
	_u.mutation.SetCostTime(v)
	return _u
}

// SetNillableCostTime sets the "cost_time" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableCostTime(v *float64) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetCostTime(*v)
	}
	return _u
}

// AddCostTime adds value to the "cost_time" field.
func (_u *AdminOperationLogUpdateOne) AddCostTime(v float64) *AdminOperationLogUpdateOne {
	_u.mutation.AddCostTime(v)
	return _u
}

// ClearCostTime clears the value of the "cost_time" field.
func (_u *AdminOperationLogUpdateOne) ClearCostTime() *AdminOperationLogUpdateOne {
	_u.mutation.ClearCostTime()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *AdminOperationLogUpdateOne) SetUserID(v uint32) *AdminOperationLogUpdateOne {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableUserID(v *uint32) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *AdminOperationLogUpdateOne) AddUserID(v int32) *AdminOperationLogUpdateOne {
	_u.mutation.AddUserID(v)
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *AdminOperationLogUpdateOne) ClearUserID() *AdminOperationLogUpdateOne {
	_u.mutation.ClearUserID()
	return _u
}

// SetUsername sets the "username" field.
func (_u *AdminOperationLogUpdateOne) SetUsername(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableUsername(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// ClearUsername clears the value of the "username" field.
func (_u *AdminOperationLogUpdateOne) ClearUsername() *AdminOperationLogUpdateOne {
	_u.mutation.ClearUsername()
	return _u
}

// SetClientIP sets the "client_ip" field.
func (_u *AdminOperationLogUpdateOne) SetClientIP(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetClientIP(v)
	return _u
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableClientIP(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetClientIP(*v)
	}
	return _u
}

// ClearClientIP clears the value of the "client_ip" field.
func (_u *AdminOperationLogUpdateOne) ClearClientIP() *AdminOperationLogUpdateOne {
	_u.mutation.ClearClientIP()
	return _u
}

// SetStatusCode sets the "status_code" field.
func (_u *AdminOperationLogUpdateOne) SetStatusCode(v int32) *AdminOperationLogUpdateOne {
	_u.mutation.ResetStatusCode()
	_u.mutation.SetStatusCode(v)
	return _u
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableStatusCode(v *int32) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetStatusCode(*v)
	}
	return _u
}

// AddStatusCode adds value to the "status_code" field.
func (_u *AdminOperationLogUpdateOne) AddStatusCode(v int32) *AdminOperationLogUpdateOne {
	_u.mutation.AddStatusCode(v)
	return _u
}

// ClearStatusCode clears the value of the "status_code" field.
func (_u *AdminOperationLogUpdateOne) ClearStatusCode() *AdminOperationLogUpdateOne {
	_u.mutation.ClearStatusCode()
	return _u
}

// SetReason sets the "reason" field.
func (_u *AdminOperationLogUpdateOne) SetReason(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableReason(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// ClearReason clears the value of the "reason" field.
func (_u *AdminOperationLogUpdateOne) ClearReason() *AdminOperationLogUpdateOne {
	_u.mutation.ClearReason()
	return _u
}

// SetSuccess sets the "success" field.
func (_u *AdminOperationLogUpdateOne) SetSuccess(v bool) *AdminOperationLogUpdateOne {
	_u.mutation.SetSuccess(v)
	return _u
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableSuccess(v *bool) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetSuccess(*v)
	}
	return _u
}

// ClearSuccess clears the value of the "success" field.
func (_u *AdminOperationLogUpdateOne) ClearSuccess() *AdminOperationLogUpdateOne {
	_u.mutation.ClearSuccess()
	return _u
}

// SetLocation sets the "location" field.
func (_u *AdminOperationLogUpdateOne) SetLocation(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetLocation(v)
	return _u
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableLocation(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetLocation(*v)
	}
	return _u
}

// ClearLocation clears the value of the "location" field.
func (_u *AdminOperationLogUpdateOne) ClearLocation() *AdminOperationLogUpdateOne {
	_u.mutation.ClearLocation()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *AdminOperationLogUpdateOne) SetUserAgent(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableUserAgent(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *AdminOperationLogUpdateOne) ClearUserAgent() *AdminOperationLogUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetBrowserName sets the "browser_name" field.
func (_u *AdminOperationLogUpdateOne) SetBrowserName(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetBrowserName(v)
	return _u
}

// SetNillableBrowserName sets the "browser_name" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableBrowserName(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetBrowserName(*v)
	}
	return _u
}

// ClearBrowserName clears the value of the "browser_name" field.
func (_u *AdminOperationLogUpdateOne) ClearBrowserName() *AdminOperationLogUpdateOne {
	_u.mutation.ClearBrowserName()
	return _u
}

// SetBrowserVersion sets the "browser_version" field.
func (_u *AdminOperationLogUpdateOne) SetBrowserVersion(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetBrowserVersion(v)
	return _u
}

// SetNillableBrowserVersion sets the "browser_version" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableBrowserVersion(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetBrowserVersion(*v)
	}
	return _u
}

// ClearBrowserVersion clears the value of the "browser_version" field.
func (_u *AdminOperationLogUpdateOne) ClearBrowserVersion() *AdminOperationLogUpdateOne {
	_u.mutation.ClearBrowserVersion()
	return _u
}

// SetClientID sets the "client_id" field.
func (_u *AdminOperationLogUpdateOne) SetClientID(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetClientID(v)
	return _u
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableClientID(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetClientID(*v)
	}
	return _u
}

// ClearClientID clears the value of the "client_id" field.
func (_u *AdminOperationLogUpdateOne) ClearClientID() *AdminOperationLogUpdateOne {
	_u.mutation.ClearClientID()
	return _u
}

// SetClientName sets the "client_name" field.
func (_u *AdminOperationLogUpdateOne) SetClientName(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetClientName(v)
	return _u
}

// SetNillableClientName sets the "client_name" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableClientName(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetClientName(*v)
	}
	return _u
}

// ClearClientName clears the value of the "client_name" field.
func (_u *AdminOperationLogUpdateOne) ClearClientName() *AdminOperationLogUpdateOne {
	_u.mutation.ClearClientName()
	return _u
}

// SetOsName sets the "os_name" field.
func (_u *AdminOperationLogUpdateOne) SetOsName(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetOsName(v)
	return _u
}

// SetNillableOsName sets the "os_name" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableOsName(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetOsName(*v)
	}
	return _u
}

// ClearOsName clears the value of the "os_name" field.
func (_u *AdminOperationLogUpdateOne) ClearOsName() *AdminOperationLogUpdateOne {
	_u.mutation.ClearOsName()
	return _u
}

// SetOsVersion sets the "os_version" field.
func (_u *AdminOperationLogUpdateOne) SetOsVersion(v string) *AdminOperationLogUpdateOne {
	_u.mutation.SetOsVersion(v)
	return _u
}

// SetNillableOsVersion sets the "os_version" field if the given value is not nil.
func (_u *AdminOperationLogUpdateOne) SetNillableOsVersion(v *string) *AdminOperationLogUpdateOne {
	if v != nil {
		_u.SetOsVersion(*v)
	}
	return _u
}

// ClearOsVersion clears the value of the "os_version" field.
func (_u *AdminOperationLogUpdateOne) ClearOsVersion() *AdminOperationLogUpdateOne {
	_u.mutation.ClearOsVersion()
	return _u
}

// Mutation returns the AdminOperationLogMutation object of the builder.
func (_u *AdminOperationLogUpdateOne) Mutation() *AdminOperationLogMutation {
	return _u.mutation
}

// Where appends a list predicates to the AdminOperationLogUpdate builder.
func (_u *AdminOperationLogUpdateOne) Where(ps ...predicate.AdminOperationLog) *AdminOperationLogUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AdminOperationLogUpdateOne) Select(field string, fields ...string) *AdminOperationLogUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AdminOperationLog entity.
func (_u *AdminOperationLogUpdateOne) Save(ctx context.Context) (*AdminOperationLog, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AdminOperationLogUpdateOne) SaveX(ctx context.Context) *AdminOperationLog {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AdminOperationLogUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AdminOperationLogUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AdminOperationLogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdminOperationLogUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AdminOperationLogUpdateOne) sqlSave(ctx context.Context) (_node *AdminOperationLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminoperationlog.Table, adminoperationlog.Columns, sqlgraph.NewFieldSpec(adminoperationlog.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AdminOperationLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminoperationlog.FieldID)
		for _, f := range fields {
			if !adminoperationlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminoperationlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(adminoperationlog.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.RequestID(); ok {
		_spec.SetField(adminoperationlog.FieldRequestID, field.TypeString, value)
	}
	if _u.mutation.RequestIDCleared() {
		_spec.ClearField(adminoperationlog.FieldRequestID, field.TypeString)
	}
	if value, ok := _u.mutation.Method(); ok {
		_spec.SetField(adminoperationlog.FieldMethod, field.TypeString, value)
	}
	if _u.mutation.MethodCleared() {
		_spec.ClearField(adminoperationlog.FieldMethod, field.TypeString)
	}
	if value, ok := _u.mutation.Operation(); ok {
		_spec.SetField(adminoperationlog.FieldOperation, field.TypeString, value)
	}
	if _u.mutation.OperationCleared() {
		_spec.ClearField(adminoperationlog.FieldOperation, field.TypeString)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(adminoperationlog.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(adminoperationlog.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Referer(); ok {
		_spec.SetField(adminoperationlog.FieldReferer, field.TypeString, value)
	}
	if _u.mutation.RefererCleared() {
		_spec.ClearField(adminoperationlog.FieldReferer, field.TypeString)
	}
	if value, ok := _u.mutation.RequestURI(); ok {
		_spec.SetField(adminoperationlog.FieldRequestURI, field.TypeString, value)
	}
	if _u.mutation.RequestURICleared() {
		_spec.ClearField(adminoperationlog.FieldRequestURI, field.TypeString)
	}
	if value, ok := _u.mutation.RequestBody(); ok {
		_spec.SetField(adminoperationlog.FieldRequestBody, field.TypeString, value)
	}
	if _u.mutation.RequestBodyCleared() {
		_spec.ClearField(adminoperationlog.FieldRequestBody, field.TypeString)
	}
	if value, ok := _u.mutation.RequestHeader(); ok {
		_spec.SetField(adminoperationlog.FieldRequestHeader, field.TypeString, value)
	}
	if _u.mutation.RequestHeaderCleared() {
		_spec.ClearField(adminoperationlog.FieldRequestHeader, field.TypeString)
	}
	if value, ok := _u.mutation.Response(); ok {
		_spec.SetField(adminoperationlog.FieldResponse, field.TypeString, value)
	}
	if _u.mutation.ResponseCleared() {
		_spec.ClearField(adminoperationlog.FieldResponse, field.TypeString)
	}
	if value, ok := _u.mutation.CostTime(); ok {
		_spec.SetField(adminoperationlog.FieldCostTime, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCostTime(); ok {
		_spec.AddField(adminoperationlog.FieldCostTime, field.TypeFloat64, value)
	}
	if _u.mutation.CostTimeCleared() {
		_spec.ClearField(adminoperationlog.FieldCostTime, field.TypeFloat64)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(adminoperationlog.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(adminoperationlog.FieldUserID, field.TypeUint32, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(adminoperationlog.FieldUserID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(adminoperationlog.FieldUsername, field.TypeString, value)
	}
	if _u.mutation.UsernameCleared() {
		_spec.ClearField(adminoperationlog.FieldUsername, field.TypeString)
	}
	if value, ok := _u.mutation.ClientIP(); ok {
		_spec.SetField(adminoperationlog.FieldClientIP, field.TypeString, value)
	}
	if _u.mutation.ClientIPCleared() {
		_spec.ClearField(adminoperationlog.FieldClientIP, field.TypeString)
	}
	if value, ok := _u.mutation.StatusCode(); ok {
		_spec.SetField(adminoperationlog.FieldStatusCode, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatusCode(); ok {
		_spec.AddField(adminoperationlog.FieldStatusCode, field.TypeInt32, value)
	}
	if _u.mutation.StatusCodeCleared() {
		_spec.ClearField(adminoperationlog.FieldStatusCode, field.TypeInt32)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(adminoperationlog.FieldReason, field.TypeString, value)
	}
	if _u.mutation.ReasonCleared() {
		_spec.ClearField(adminoperationlog.FieldReason, field.TypeString)
	}
	if value, ok := _u.mutation.Success(); ok {
		_spec.SetField(adminoperationlog.FieldSuccess, field.TypeBool, value)
	}
	if _u.mutation.SuccessCleared() {
		_spec.ClearField(adminoperationlog.FieldSuccess, field.TypeBool)
	}
	if value, ok := _u.mutation.Location(); ok {
		_spec.SetField(adminoperationlog.FieldLocation, field.TypeString, value)
	}
	if _u.mutation.LocationCleared() {
		_spec.ClearField(adminoperationlog.FieldLocation, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(adminoperationlog.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(adminoperationlog.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.BrowserName(); ok {
		_spec.SetField(adminoperationlog.FieldBrowserName, field.TypeString, value)
	}
	if _u.mutation.BrowserNameCleared() {
		_spec.ClearField(adminoperationlog.FieldBrowserName, field.TypeString)
	}
	if value, ok := _u.mutation.BrowserVersion(); ok {
		_spec.SetField(adminoperationlog.FieldBrowserVersion, field.TypeString, value)
	}
	if _u.mutation.BrowserVersionCleared() {
		_spec.ClearField(adminoperationlog.FieldBrowserVersion, field.TypeString)
	}
	if value, ok := _u.mutation.ClientID(); ok {
		_spec.SetField(adminoperationlog.FieldClientID, field.TypeString, value)
	}
	if _u.mutation.ClientIDCleared() {
		_spec.ClearField(adminoperationlog.FieldClientID, field.TypeString)
	}
	if value, ok := _u.mutation.ClientName(); ok {
		_spec.SetField(adminoperationlog.FieldClientName, field.TypeString, value)
	}
	if _u.mutation.ClientNameCleared() {
		_spec.ClearField(adminoperationlog.FieldClientName, field.TypeString)
	}
	if value, ok := _u.mutation.OsName(); ok {
		_spec.SetField(adminoperationlog.FieldOsName, field.TypeString, value)
	}
	if _u.mutation.OsNameCleared() {
		_spec.ClearField(adminoperationlog.FieldOsName, field.TypeString)
	}
	if value, ok := _u.mutation.OsVersion(); ok {
		_spec.SetField(adminoperationlog.FieldOsVersion, field.TypeString, value)
	}
	if _u.mutation.OsVersionCleared() {
		_spec.ClearField(adminoperationlog.FieldOsVersion, field.TypeString)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &AdminOperationLog{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminoperationlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

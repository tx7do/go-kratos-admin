// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dict/service/v1/dict.proto

package servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DictType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DictType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DictTypeMultiError, or nil
// if none found.
func (m *DictType) ValidateAll() error {
	return m.validate(true)
}

func (m *DictType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.TypeCode != nil {
		// no validation rules for TypeCode
	}

	if m.TypeName != nil {
		// no validation rules for TypeName
	}

	if m.IsEnabled != nil {
		// no validation rules for IsEnabled
	}

	if m.SortOrder != nil {
		// no validation rules for SortOrder
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.CreatedBy != nil {
		// no validation rules for CreatedBy
	}

	if m.UpdatedBy != nil {
		// no validation rules for UpdatedBy
	}

	if m.DeletedBy != nil {
		// no validation rules for DeletedBy
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictTypeValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictTypeValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictTypeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictTypeValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictTypeValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictTypeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeletedAt != nil {

		if all {
			switch v := interface{}(m.GetDeletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictTypeValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictTypeValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictTypeValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DictTypeMultiError(errors)
	}

	return nil
}

// DictTypeMultiError is an error wrapping multiple validation errors returned
// by DictType.ValidateAll() if the designated constraints aren't met.
type DictTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictTypeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictTypeMultiError) AllErrors() []error { return m }

// DictTypeValidationError is the validation error returned by
// DictType.Validate if the designated constraints aren't met.
type DictTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictTypeValidationError) ErrorName() string { return "DictTypeValidationError" }

// Error satisfies the builtin error interface
func (e DictTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictTypeValidationError{}

// Validate checks the field values on DictEntry with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DictEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DictEntryMultiError, or nil
// if none found.
func (m *DictEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *DictEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.TypeId != nil {
		// no validation rules for TypeId
	}

	if m.EntryLabel != nil {
		// no validation rules for EntryLabel
	}

	if m.EntryValue != nil {
		// no validation rules for EntryValue
	}

	if m.NumericValue != nil {
		// no validation rules for NumericValue
	}

	if m.LanguageCode != nil {
		// no validation rules for LanguageCode
	}

	if m.IsEnabled != nil {
		// no validation rules for IsEnabled
	}

	if m.SortOrder != nil {
		// no validation rules for SortOrder
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.CreatedBy != nil {
		// no validation rules for CreatedBy
	}

	if m.UpdatedBy != nil {
		// no validation rules for UpdatedBy
	}

	if m.DeletedBy != nil {
		// no validation rules for DeletedBy
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictEntryValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictEntryValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictEntryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictEntryValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictEntryValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictEntryValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeletedAt != nil {

		if all {
			switch v := interface{}(m.GetDeletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictEntryValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictEntryValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictEntryValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DictEntryMultiError(errors)
	}

	return nil
}

// DictEntryMultiError is an error wrapping multiple validation errors returned
// by DictEntry.ValidateAll() if the designated constraints aren't met.
type DictEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictEntryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictEntryMultiError) AllErrors() []error { return m }

// DictEntryValidationError is the validation error returned by
// DictEntry.Validate if the designated constraints aren't met.
type DictEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictEntryValidationError) ErrorName() string { return "DictEntryValidationError" }

// Error satisfies the builtin error interface
func (e DictEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictEntryValidationError{}

// Validate checks the field values on ListDictTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDictTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictTypeResponseMultiError, or nil if none found.
func (m *ListDictTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictTypeResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictTypeResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictTypeResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListDictTypeResponseMultiError(errors)
	}

	return nil
}

// ListDictTypeResponseMultiError is an error wrapping multiple validation
// errors returned by ListDictTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDictTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictTypeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictTypeResponseMultiError) AllErrors() []error { return m }

// ListDictTypeResponseValidationError is the validation error returned by
// ListDictTypeResponse.Validate if the designated constraints aren't met.
type ListDictTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictTypeResponseValidationError) ErrorName() string {
	return "ListDictTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictTypeResponseValidationError{}

// Validate checks the field values on GetDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictTypeRequestMultiError, or nil if none found.
func (m *GetDictTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.QueryBy.(type) {
	case *GetDictTypeRequest_Id:
		if v == nil {
			err := GetDictTypeRequestValidationError{
				field:  "QueryBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Id
	case *GetDictTypeRequest_Code:
		if v == nil {
			err := GetDictTypeRequestValidationError{
				field:  "QueryBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Code
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetDictTypeRequestMultiError(errors)
	}

	return nil
}

// GetDictTypeRequestMultiError is an error wrapping multiple validation errors
// returned by GetDictTypeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDictTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictTypeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictTypeRequestMultiError) AllErrors() []error { return m }

// GetDictTypeRequestValidationError is the validation error returned by
// GetDictTypeRequest.Validate if the designated constraints aren't met.
type GetDictTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictTypeRequestValidationError) ErrorName() string {
	return "GetDictTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictTypeRequestValidationError{}

// Validate checks the field values on CreateDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictTypeRequestMultiError, or nil if none found.
func (m *CreateDictTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDictTypeRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDictTypeRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDictTypeRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDictTypeRequestMultiError(errors)
	}

	return nil
}

// CreateDictTypeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDictTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDictTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictTypeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictTypeRequestMultiError) AllErrors() []error { return m }

// CreateDictTypeRequestValidationError is the validation error returned by
// CreateDictTypeRequest.Validate if the designated constraints aren't met.
type CreateDictTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictTypeRequestValidationError) ErrorName() string {
	return "CreateDictTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictTypeRequestValidationError{}

// Validate checks the field values on UpdateDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictTypeRequestMultiError, or nil if none found.
func (m *UpdateDictTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictTypeRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictTypeRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictTypeRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictTypeRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictTypeRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictTypeRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.AllowMissing != nil {
		// no validation rules for AllowMissing
	}

	if len(errors) > 0 {
		return UpdateDictTypeRequestMultiError(errors)
	}

	return nil
}

// UpdateDictTypeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDictTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictTypeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictTypeRequestMultiError) AllErrors() []error { return m }

// UpdateDictTypeRequestValidationError is the validation error returned by
// UpdateDictTypeRequest.Validate if the designated constraints aren't met.
type UpdateDictTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictTypeRequestValidationError) ErrorName() string {
	return "UpdateDictTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictTypeRequestValidationError{}

// Validate checks the field values on BatchDeleteDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchDeleteDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchDeleteDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchDeleteDictRequestMultiError, or nil if none found.
func (m *BatchDeleteDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchDeleteDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchDeleteDictRequestMultiError(errors)
	}

	return nil
}

// BatchDeleteDictRequestMultiError is an error wrapping multiple validation
// errors returned by BatchDeleteDictRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchDeleteDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchDeleteDictRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchDeleteDictRequestMultiError) AllErrors() []error { return m }

// BatchDeleteDictRequestValidationError is the validation error returned by
// BatchDeleteDictRequest.Validate if the designated constraints aren't met.
type BatchDeleteDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchDeleteDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchDeleteDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchDeleteDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchDeleteDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchDeleteDictRequestValidationError) ErrorName() string {
	return "BatchDeleteDictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchDeleteDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchDeleteDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchDeleteDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchDeleteDictRequestValidationError{}

// Validate checks the field values on ListDictEntryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDictEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictEntryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictEntryResponseMultiError, or nil if none found.
func (m *ListDictEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictEntryResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictEntryResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictEntryResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListDictEntryResponseMultiError(errors)
	}

	return nil
}

// ListDictEntryResponseMultiError is an error wrapping multiple validation
// errors returned by ListDictEntryResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDictEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictEntryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictEntryResponseMultiError) AllErrors() []error { return m }

// ListDictEntryResponseValidationError is the validation error returned by
// ListDictEntryResponse.Validate if the designated constraints aren't met.
type ListDictEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictEntryResponseValidationError) ErrorName() string {
	return "ListDictEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictEntryResponseValidationError{}

// Validate checks the field values on CreateDictEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictEntryRequestMultiError, or nil if none found.
func (m *CreateDictEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDictEntryRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDictEntryRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDictEntryRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDictEntryRequestMultiError(errors)
	}

	return nil
}

// CreateDictEntryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDictEntryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDictEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictEntryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictEntryRequestMultiError) AllErrors() []error { return m }

// CreateDictEntryRequestValidationError is the validation error returned by
// CreateDictEntryRequest.Validate if the designated constraints aren't met.
type CreateDictEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictEntryRequestValidationError) ErrorName() string {
	return "CreateDictEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictEntryRequestValidationError{}

// Validate checks the field values on UpdateDictEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictEntryRequestMultiError, or nil if none found.
func (m *UpdateDictEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictEntryRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictEntryRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictEntryRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictEntryRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictEntryRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictEntryRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.AllowMissing != nil {
		// no validation rules for AllowMissing
	}

	if len(errors) > 0 {
		return UpdateDictEntryRequestMultiError(errors)
	}

	return nil
}

// UpdateDictEntryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDictEntryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictEntryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictEntryRequestMultiError) AllErrors() []error { return m }

// UpdateDictEntryRequestValidationError is the validation error returned by
// UpdateDictEntryRequest.Validate if the designated constraints aren't met.
type UpdateDictEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictEntryRequestValidationError) ErrorName() string {
	return "UpdateDictEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictEntryRequestValidationError{}

// Validate checks the field values on GetDictEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictEntryRequestMultiError, or nil if none found.
func (m *GetDictEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.QueryBy.(type) {
	case *GetDictEntryRequest_Id:
		if v == nil {
			err := GetDictEntryRequestValidationError{
				field:  "QueryBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Id
	case *GetDictEntryRequest_Code:
		if v == nil {
			err := GetDictEntryRequestValidationError{
				field:  "QueryBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Code
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetDictEntryRequestMultiError(errors)
	}

	return nil
}

// GetDictEntryRequestMultiError is an error wrapping multiple validation
// errors returned by GetDictEntryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDictEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictEntryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictEntryRequestMultiError) AllErrors() []error { return m }

// GetDictEntryRequestValidationError is the validation error returned by
// GetDictEntryRequest.Validate if the designated constraints aren't met.
type GetDictEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictEntryRequestValidationError) ErrorName() string {
	return "GetDictEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictEntryRequestValidationError{}

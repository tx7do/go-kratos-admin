// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/dictentry"
	"kratos-admin/app/admin/service/internal/data/ent/dicttype"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictEntryCreate is the builder for creating a DictEntry entity.
type DictEntryCreate struct {
	config
	mutation *DictEntryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *DictEntryCreate) SetCreatedAt(v time.Time) *DictEntryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *DictEntryCreate) SetNillableCreatedAt(v *time.Time) *DictEntryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *DictEntryCreate) SetUpdatedAt(v time.Time) *DictEntryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *DictEntryCreate) SetNillableUpdatedAt(v *time.Time) *DictEntryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *DictEntryCreate) SetDeletedAt(v time.Time) *DictEntryCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *DictEntryCreate) SetNillableDeletedAt(v *time.Time) *DictEntryCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *DictEntryCreate) SetCreatedBy(v uint32) *DictEntryCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *DictEntryCreate) SetNillableCreatedBy(v *uint32) *DictEntryCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *DictEntryCreate) SetUpdatedBy(v uint32) *DictEntryCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *DictEntryCreate) SetNillableUpdatedBy(v *uint32) *DictEntryCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *DictEntryCreate) SetDeletedBy(v uint32) *DictEntryCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *DictEntryCreate) SetNillableDeletedBy(v *uint32) *DictEntryCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *DictEntryCreate) SetDescription(v string) *DictEntryCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *DictEntryCreate) SetNillableDescription(v *string) *DictEntryCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetSortOrder sets the "sort_order" field.
func (_c *DictEntryCreate) SetSortOrder(v int32) *DictEntryCreate {
	_c.mutation.SetSortOrder(v)
	return _c
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_c *DictEntryCreate) SetNillableSortOrder(v *int32) *DictEntryCreate {
	if v != nil {
		_c.SetSortOrder(*v)
	}
	return _c
}

// SetIsEnabled sets the "is_enabled" field.
func (_c *DictEntryCreate) SetIsEnabled(v bool) *DictEntryCreate {
	_c.mutation.SetIsEnabled(v)
	return _c
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_c *DictEntryCreate) SetNillableIsEnabled(v *bool) *DictEntryCreate {
	if v != nil {
		_c.SetIsEnabled(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *DictEntryCreate) SetTenantID(v uint32) *DictEntryCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_c *DictEntryCreate) SetNillableTenantID(v *uint32) *DictEntryCreate {
	if v != nil {
		_c.SetTenantID(*v)
	}
	return _c
}

// SetEntryLabel sets the "entry_label" field.
func (_c *DictEntryCreate) SetEntryLabel(v string) *DictEntryCreate {
	_c.mutation.SetEntryLabel(v)
	return _c
}

// SetNillableEntryLabel sets the "entry_label" field if the given value is not nil.
func (_c *DictEntryCreate) SetNillableEntryLabel(v *string) *DictEntryCreate {
	if v != nil {
		_c.SetEntryLabel(*v)
	}
	return _c
}

// SetEntryValue sets the "entry_value" field.
func (_c *DictEntryCreate) SetEntryValue(v string) *DictEntryCreate {
	_c.mutation.SetEntryValue(v)
	return _c
}

// SetNillableEntryValue sets the "entry_value" field if the given value is not nil.
func (_c *DictEntryCreate) SetNillableEntryValue(v *string) *DictEntryCreate {
	if v != nil {
		_c.SetEntryValue(*v)
	}
	return _c
}

// SetNumericValue sets the "numeric_value" field.
func (_c *DictEntryCreate) SetNumericValue(v int32) *DictEntryCreate {
	_c.mutation.SetNumericValue(v)
	return _c
}

// SetNillableNumericValue sets the "numeric_value" field if the given value is not nil.
func (_c *DictEntryCreate) SetNillableNumericValue(v *int32) *DictEntryCreate {
	if v != nil {
		_c.SetNumericValue(*v)
	}
	return _c
}

// SetLanguageCode sets the "language_code" field.
func (_c *DictEntryCreate) SetLanguageCode(v string) *DictEntryCreate {
	_c.mutation.SetLanguageCode(v)
	return _c
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (_c *DictEntryCreate) SetNillableLanguageCode(v *string) *DictEntryCreate {
	if v != nil {
		_c.SetLanguageCode(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *DictEntryCreate) SetID(v uint32) *DictEntryCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetSysDictTypesID sets the "sys_dict_types" edge to the DictType entity by ID.
func (_c *DictEntryCreate) SetSysDictTypesID(id uint32) *DictEntryCreate {
	_c.mutation.SetSysDictTypesID(id)
	return _c
}

// SetSysDictTypes sets the "sys_dict_types" edge to the DictType entity.
func (_c *DictEntryCreate) SetSysDictTypes(v *DictType) *DictEntryCreate {
	return _c.SetSysDictTypesID(v.ID)
}

// Mutation returns the DictEntryMutation object of the builder.
func (_c *DictEntryCreate) Mutation() *DictEntryMutation {
	return _c.mutation
}

// Save creates the DictEntry in the database.
func (_c *DictEntryCreate) Save(ctx context.Context) (*DictEntry, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DictEntryCreate) SaveX(ctx context.Context) *DictEntry {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DictEntryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DictEntryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DictEntryCreate) defaults() {
	if _, ok := _c.mutation.SortOrder(); !ok {
		v := dictentry.DefaultSortOrder
		_c.mutation.SetSortOrder(v)
	}
	if _, ok := _c.mutation.IsEnabled(); !ok {
		v := dictentry.DefaultIsEnabled
		_c.mutation.SetIsEnabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DictEntryCreate) check() error {
	if v, ok := _c.mutation.EntryLabel(); ok {
		if err := dictentry.EntryLabelValidator(v); err != nil {
			return &ValidationError{Name: "entry_label", err: fmt.Errorf(`ent: validator failed for field "DictEntry.entry_label": %w`, err)}
		}
	}
	if v, ok := _c.mutation.EntryValue(); ok {
		if err := dictentry.EntryValueValidator(v); err != nil {
			return &ValidationError{Name: "entry_value", err: fmt.Errorf(`ent: validator failed for field "DictEntry.entry_value": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := dictentry.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "DictEntry.id": %w`, err)}
		}
	}
	if len(_c.mutation.SysDictTypesIDs()) == 0 {
		return &ValidationError{Name: "sys_dict_types", err: errors.New(`ent: missing required edge "DictEntry.sys_dict_types"`)}
	}
	return nil
}

func (_c *DictEntryCreate) sqlSave(ctx context.Context) (*DictEntry, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DictEntryCreate) createSpec() (*DictEntry, *sqlgraph.CreateSpec) {
	var (
		_node = &DictEntry{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(dictentry.Table, sqlgraph.NewFieldSpec(dictentry.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(dictentry.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(dictentry.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(dictentry.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(dictentry.FieldCreatedBy, field.TypeUint32, value)
		_node.CreatedBy = &value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(dictentry.FieldUpdatedBy, field.TypeUint32, value)
		_node.UpdatedBy = &value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(dictentry.FieldDeletedBy, field.TypeUint32, value)
		_node.DeletedBy = &value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(dictentry.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.SortOrder(); ok {
		_spec.SetField(dictentry.FieldSortOrder, field.TypeInt32, value)
		_node.SortOrder = &value
	}
	if value, ok := _c.mutation.IsEnabled(); ok {
		_spec.SetField(dictentry.FieldIsEnabled, field.TypeBool, value)
		_node.IsEnabled = &value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(dictentry.FieldTenantID, field.TypeUint32, value)
		_node.TenantID = &value
	}
	if value, ok := _c.mutation.EntryLabel(); ok {
		_spec.SetField(dictentry.FieldEntryLabel, field.TypeString, value)
		_node.EntryLabel = &value
	}
	if value, ok := _c.mutation.EntryValue(); ok {
		_spec.SetField(dictentry.FieldEntryValue, field.TypeString, value)
		_node.EntryValue = &value
	}
	if value, ok := _c.mutation.NumericValue(); ok {
		_spec.SetField(dictentry.FieldNumericValue, field.TypeInt32, value)
		_node.NumericValue = &value
	}
	if value, ok := _c.mutation.LanguageCode(); ok {
		_spec.SetField(dictentry.FieldLanguageCode, field.TypeString, value)
		_node.LanguageCode = &value
	}
	if nodes := _c.mutation.SysDictTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dictentry.SysDictTypesTable,
			Columns: []string{dictentry.SysDictTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dicttype.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.type_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DictEntry.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictEntryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *DictEntryCreate) OnConflict(opts ...sql.ConflictOption) *DictEntryUpsertOne {
	_c.conflict = opts
	return &DictEntryUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DictEntry.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DictEntryCreate) OnConflictColumns(columns ...string) *DictEntryUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DictEntryUpsertOne{
		create: _c,
	}
}

type (
	// DictEntryUpsertOne is the builder for "upsert"-ing
	//  one DictEntry node.
	DictEntryUpsertOne struct {
		create *DictEntryCreate
	}

	// DictEntryUpsert is the "OnConflict" setter.
	DictEntryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *DictEntryUpsert) SetUpdatedAt(v time.Time) *DictEntryUpsert {
	u.Set(dictentry.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DictEntryUpsert) UpdateUpdatedAt() *DictEntryUpsert {
	u.SetExcluded(dictentry.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *DictEntryUpsert) ClearUpdatedAt() *DictEntryUpsert {
	u.SetNull(dictentry.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DictEntryUpsert) SetDeletedAt(v time.Time) *DictEntryUpsert {
	u.Set(dictentry.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DictEntryUpsert) UpdateDeletedAt() *DictEntryUpsert {
	u.SetExcluded(dictentry.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DictEntryUpsert) ClearDeletedAt() *DictEntryUpsert {
	u.SetNull(dictentry.FieldDeletedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *DictEntryUpsert) SetCreatedBy(v uint32) *DictEntryUpsert {
	u.Set(dictentry.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DictEntryUpsert) UpdateCreatedBy() *DictEntryUpsert {
	u.SetExcluded(dictentry.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *DictEntryUpsert) AddCreatedBy(v uint32) *DictEntryUpsert {
	u.Add(dictentry.FieldCreatedBy, v)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *DictEntryUpsert) ClearCreatedBy() *DictEntryUpsert {
	u.SetNull(dictentry.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DictEntryUpsert) SetUpdatedBy(v uint32) *DictEntryUpsert {
	u.Set(dictentry.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DictEntryUpsert) UpdateUpdatedBy() *DictEntryUpsert {
	u.SetExcluded(dictentry.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DictEntryUpsert) AddUpdatedBy(v uint32) *DictEntryUpsert {
	u.Add(dictentry.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DictEntryUpsert) ClearUpdatedBy() *DictEntryUpsert {
	u.SetNull(dictentry.FieldUpdatedBy)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *DictEntryUpsert) SetDeletedBy(v uint32) *DictEntryUpsert {
	u.Set(dictentry.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *DictEntryUpsert) UpdateDeletedBy() *DictEntryUpsert {
	u.SetExcluded(dictentry.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *DictEntryUpsert) AddDeletedBy(v uint32) *DictEntryUpsert {
	u.Add(dictentry.FieldDeletedBy, v)
	return u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *DictEntryUpsert) ClearDeletedBy() *DictEntryUpsert {
	u.SetNull(dictentry.FieldDeletedBy)
	return u
}

// SetDescription sets the "description" field.
func (u *DictEntryUpsert) SetDescription(v string) *DictEntryUpsert {
	u.Set(dictentry.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DictEntryUpsert) UpdateDescription() *DictEntryUpsert {
	u.SetExcluded(dictentry.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *DictEntryUpsert) ClearDescription() *DictEntryUpsert {
	u.SetNull(dictentry.FieldDescription)
	return u
}

// SetSortOrder sets the "sort_order" field.
func (u *DictEntryUpsert) SetSortOrder(v int32) *DictEntryUpsert {
	u.Set(dictentry.FieldSortOrder, v)
	return u
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *DictEntryUpsert) UpdateSortOrder() *DictEntryUpsert {
	u.SetExcluded(dictentry.FieldSortOrder)
	return u
}

// AddSortOrder adds v to the "sort_order" field.
func (u *DictEntryUpsert) AddSortOrder(v int32) *DictEntryUpsert {
	u.Add(dictentry.FieldSortOrder, v)
	return u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (u *DictEntryUpsert) ClearSortOrder() *DictEntryUpsert {
	u.SetNull(dictentry.FieldSortOrder)
	return u
}

// SetIsEnabled sets the "is_enabled" field.
func (u *DictEntryUpsert) SetIsEnabled(v bool) *DictEntryUpsert {
	u.Set(dictentry.FieldIsEnabled, v)
	return u
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *DictEntryUpsert) UpdateIsEnabled() *DictEntryUpsert {
	u.SetExcluded(dictentry.FieldIsEnabled)
	return u
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (u *DictEntryUpsert) ClearIsEnabled() *DictEntryUpsert {
	u.SetNull(dictentry.FieldIsEnabled)
	return u
}

// SetEntryLabel sets the "entry_label" field.
func (u *DictEntryUpsert) SetEntryLabel(v string) *DictEntryUpsert {
	u.Set(dictentry.FieldEntryLabel, v)
	return u
}

// UpdateEntryLabel sets the "entry_label" field to the value that was provided on create.
func (u *DictEntryUpsert) UpdateEntryLabel() *DictEntryUpsert {
	u.SetExcluded(dictentry.FieldEntryLabel)
	return u
}

// ClearEntryLabel clears the value of the "entry_label" field.
func (u *DictEntryUpsert) ClearEntryLabel() *DictEntryUpsert {
	u.SetNull(dictentry.FieldEntryLabel)
	return u
}

// SetEntryValue sets the "entry_value" field.
func (u *DictEntryUpsert) SetEntryValue(v string) *DictEntryUpsert {
	u.Set(dictentry.FieldEntryValue, v)
	return u
}

// UpdateEntryValue sets the "entry_value" field to the value that was provided on create.
func (u *DictEntryUpsert) UpdateEntryValue() *DictEntryUpsert {
	u.SetExcluded(dictentry.FieldEntryValue)
	return u
}

// ClearEntryValue clears the value of the "entry_value" field.
func (u *DictEntryUpsert) ClearEntryValue() *DictEntryUpsert {
	u.SetNull(dictentry.FieldEntryValue)
	return u
}

// SetNumericValue sets the "numeric_value" field.
func (u *DictEntryUpsert) SetNumericValue(v int32) *DictEntryUpsert {
	u.Set(dictentry.FieldNumericValue, v)
	return u
}

// UpdateNumericValue sets the "numeric_value" field to the value that was provided on create.
func (u *DictEntryUpsert) UpdateNumericValue() *DictEntryUpsert {
	u.SetExcluded(dictentry.FieldNumericValue)
	return u
}

// AddNumericValue adds v to the "numeric_value" field.
func (u *DictEntryUpsert) AddNumericValue(v int32) *DictEntryUpsert {
	u.Add(dictentry.FieldNumericValue, v)
	return u
}

// ClearNumericValue clears the value of the "numeric_value" field.
func (u *DictEntryUpsert) ClearNumericValue() *DictEntryUpsert {
	u.SetNull(dictentry.FieldNumericValue)
	return u
}

// SetLanguageCode sets the "language_code" field.
func (u *DictEntryUpsert) SetLanguageCode(v string) *DictEntryUpsert {
	u.Set(dictentry.FieldLanguageCode, v)
	return u
}

// UpdateLanguageCode sets the "language_code" field to the value that was provided on create.
func (u *DictEntryUpsert) UpdateLanguageCode() *DictEntryUpsert {
	u.SetExcluded(dictentry.FieldLanguageCode)
	return u
}

// ClearLanguageCode clears the value of the "language_code" field.
func (u *DictEntryUpsert) ClearLanguageCode() *DictEntryUpsert {
	u.SetNull(dictentry.FieldLanguageCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DictEntry.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dictentry.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DictEntryUpsertOne) UpdateNewValues() *DictEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(dictentry.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(dictentry.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(dictentry.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DictEntry.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DictEntryUpsertOne) Ignore() *DictEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictEntryUpsertOne) DoNothing() *DictEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictEntryCreate.OnConflict
// documentation for more info.
func (u *DictEntryUpsertOne) Update(set func(*DictEntryUpsert)) *DictEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictEntryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DictEntryUpsertOne) SetUpdatedAt(v time.Time) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DictEntryUpsertOne) UpdateUpdatedAt() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *DictEntryUpsertOne) ClearUpdatedAt() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DictEntryUpsertOne) SetDeletedAt(v time.Time) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DictEntryUpsertOne) UpdateDeletedAt() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DictEntryUpsertOne) ClearDeletedAt() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *DictEntryUpsertOne) SetCreatedBy(v uint32) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *DictEntryUpsertOne) AddCreatedBy(v uint32) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DictEntryUpsertOne) UpdateCreatedBy() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *DictEntryUpsertOne) ClearCreatedBy() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DictEntryUpsertOne) SetUpdatedBy(v uint32) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DictEntryUpsertOne) AddUpdatedBy(v uint32) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DictEntryUpsertOne) UpdateUpdatedBy() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DictEntryUpsertOne) ClearUpdatedBy() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *DictEntryUpsertOne) SetDeletedBy(v uint32) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *DictEntryUpsertOne) AddDeletedBy(v uint32) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *DictEntryUpsertOne) UpdateDeletedBy() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *DictEntryUpsertOne) ClearDeletedBy() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearDeletedBy()
	})
}

// SetDescription sets the "description" field.
func (u *DictEntryUpsertOne) SetDescription(v string) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DictEntryUpsertOne) UpdateDescription() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DictEntryUpsertOne) ClearDescription() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearDescription()
	})
}

// SetSortOrder sets the "sort_order" field.
func (u *DictEntryUpsertOne) SetSortOrder(v int32) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetSortOrder(v)
	})
}

// AddSortOrder adds v to the "sort_order" field.
func (u *DictEntryUpsertOne) AddSortOrder(v int32) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.AddSortOrder(v)
	})
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *DictEntryUpsertOne) UpdateSortOrder() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateSortOrder()
	})
}

// ClearSortOrder clears the value of the "sort_order" field.
func (u *DictEntryUpsertOne) ClearSortOrder() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearSortOrder()
	})
}

// SetIsEnabled sets the "is_enabled" field.
func (u *DictEntryUpsertOne) SetIsEnabled(v bool) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetIsEnabled(v)
	})
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *DictEntryUpsertOne) UpdateIsEnabled() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateIsEnabled()
	})
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (u *DictEntryUpsertOne) ClearIsEnabled() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearIsEnabled()
	})
}

// SetEntryLabel sets the "entry_label" field.
func (u *DictEntryUpsertOne) SetEntryLabel(v string) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetEntryLabel(v)
	})
}

// UpdateEntryLabel sets the "entry_label" field to the value that was provided on create.
func (u *DictEntryUpsertOne) UpdateEntryLabel() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateEntryLabel()
	})
}

// ClearEntryLabel clears the value of the "entry_label" field.
func (u *DictEntryUpsertOne) ClearEntryLabel() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearEntryLabel()
	})
}

// SetEntryValue sets the "entry_value" field.
func (u *DictEntryUpsertOne) SetEntryValue(v string) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetEntryValue(v)
	})
}

// UpdateEntryValue sets the "entry_value" field to the value that was provided on create.
func (u *DictEntryUpsertOne) UpdateEntryValue() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateEntryValue()
	})
}

// ClearEntryValue clears the value of the "entry_value" field.
func (u *DictEntryUpsertOne) ClearEntryValue() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearEntryValue()
	})
}

// SetNumericValue sets the "numeric_value" field.
func (u *DictEntryUpsertOne) SetNumericValue(v int32) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetNumericValue(v)
	})
}

// AddNumericValue adds v to the "numeric_value" field.
func (u *DictEntryUpsertOne) AddNumericValue(v int32) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.AddNumericValue(v)
	})
}

// UpdateNumericValue sets the "numeric_value" field to the value that was provided on create.
func (u *DictEntryUpsertOne) UpdateNumericValue() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateNumericValue()
	})
}

// ClearNumericValue clears the value of the "numeric_value" field.
func (u *DictEntryUpsertOne) ClearNumericValue() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearNumericValue()
	})
}

// SetLanguageCode sets the "language_code" field.
func (u *DictEntryUpsertOne) SetLanguageCode(v string) *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetLanguageCode(v)
	})
}

// UpdateLanguageCode sets the "language_code" field to the value that was provided on create.
func (u *DictEntryUpsertOne) UpdateLanguageCode() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateLanguageCode()
	})
}

// ClearLanguageCode clears the value of the "language_code" field.
func (u *DictEntryUpsertOne) ClearLanguageCode() *DictEntryUpsertOne {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearLanguageCode()
	})
}

// Exec executes the query.
func (u *DictEntryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DictEntryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictEntryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DictEntryUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DictEntryUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DictEntryCreateBulk is the builder for creating many DictEntry entities in bulk.
type DictEntryCreateBulk struct {
	config
	err      error
	builders []*DictEntryCreate
	conflict []sql.ConflictOption
}

// Save creates the DictEntry entities in the database.
func (_c *DictEntryCreateBulk) Save(ctx context.Context) ([]*DictEntry, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*DictEntry, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DictEntryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DictEntryCreateBulk) SaveX(ctx context.Context) []*DictEntry {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DictEntryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DictEntryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DictEntry.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictEntryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *DictEntryCreateBulk) OnConflict(opts ...sql.ConflictOption) *DictEntryUpsertBulk {
	_c.conflict = opts
	return &DictEntryUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DictEntry.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DictEntryCreateBulk) OnConflictColumns(columns ...string) *DictEntryUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DictEntryUpsertBulk{
		create: _c,
	}
}

// DictEntryUpsertBulk is the builder for "upsert"-ing
// a bulk of DictEntry nodes.
type DictEntryUpsertBulk struct {
	create *DictEntryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DictEntry.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dictentry.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DictEntryUpsertBulk) UpdateNewValues() *DictEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(dictentry.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(dictentry.FieldCreatedAt)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(dictentry.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DictEntry.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DictEntryUpsertBulk) Ignore() *DictEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictEntryUpsertBulk) DoNothing() *DictEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictEntryCreateBulk.OnConflict
// documentation for more info.
func (u *DictEntryUpsertBulk) Update(set func(*DictEntryUpsert)) *DictEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictEntryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DictEntryUpsertBulk) SetUpdatedAt(v time.Time) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DictEntryUpsertBulk) UpdateUpdatedAt() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *DictEntryUpsertBulk) ClearUpdatedAt() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DictEntryUpsertBulk) SetDeletedAt(v time.Time) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DictEntryUpsertBulk) UpdateDeletedAt() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DictEntryUpsertBulk) ClearDeletedAt() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *DictEntryUpsertBulk) SetCreatedBy(v uint32) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *DictEntryUpsertBulk) AddCreatedBy(v uint32) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DictEntryUpsertBulk) UpdateCreatedBy() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *DictEntryUpsertBulk) ClearCreatedBy() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DictEntryUpsertBulk) SetUpdatedBy(v uint32) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *DictEntryUpsertBulk) AddUpdatedBy(v uint32) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DictEntryUpsertBulk) UpdateUpdatedBy() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DictEntryUpsertBulk) ClearUpdatedBy() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *DictEntryUpsertBulk) SetDeletedBy(v uint32) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *DictEntryUpsertBulk) AddDeletedBy(v uint32) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *DictEntryUpsertBulk) UpdateDeletedBy() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *DictEntryUpsertBulk) ClearDeletedBy() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearDeletedBy()
	})
}

// SetDescription sets the "description" field.
func (u *DictEntryUpsertBulk) SetDescription(v string) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DictEntryUpsertBulk) UpdateDescription() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DictEntryUpsertBulk) ClearDescription() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearDescription()
	})
}

// SetSortOrder sets the "sort_order" field.
func (u *DictEntryUpsertBulk) SetSortOrder(v int32) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetSortOrder(v)
	})
}

// AddSortOrder adds v to the "sort_order" field.
func (u *DictEntryUpsertBulk) AddSortOrder(v int32) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.AddSortOrder(v)
	})
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *DictEntryUpsertBulk) UpdateSortOrder() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateSortOrder()
	})
}

// ClearSortOrder clears the value of the "sort_order" field.
func (u *DictEntryUpsertBulk) ClearSortOrder() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearSortOrder()
	})
}

// SetIsEnabled sets the "is_enabled" field.
func (u *DictEntryUpsertBulk) SetIsEnabled(v bool) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetIsEnabled(v)
	})
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *DictEntryUpsertBulk) UpdateIsEnabled() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateIsEnabled()
	})
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (u *DictEntryUpsertBulk) ClearIsEnabled() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearIsEnabled()
	})
}

// SetEntryLabel sets the "entry_label" field.
func (u *DictEntryUpsertBulk) SetEntryLabel(v string) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetEntryLabel(v)
	})
}

// UpdateEntryLabel sets the "entry_label" field to the value that was provided on create.
func (u *DictEntryUpsertBulk) UpdateEntryLabel() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateEntryLabel()
	})
}

// ClearEntryLabel clears the value of the "entry_label" field.
func (u *DictEntryUpsertBulk) ClearEntryLabel() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearEntryLabel()
	})
}

// SetEntryValue sets the "entry_value" field.
func (u *DictEntryUpsertBulk) SetEntryValue(v string) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetEntryValue(v)
	})
}

// UpdateEntryValue sets the "entry_value" field to the value that was provided on create.
func (u *DictEntryUpsertBulk) UpdateEntryValue() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateEntryValue()
	})
}

// ClearEntryValue clears the value of the "entry_value" field.
func (u *DictEntryUpsertBulk) ClearEntryValue() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearEntryValue()
	})
}

// SetNumericValue sets the "numeric_value" field.
func (u *DictEntryUpsertBulk) SetNumericValue(v int32) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetNumericValue(v)
	})
}

// AddNumericValue adds v to the "numeric_value" field.
func (u *DictEntryUpsertBulk) AddNumericValue(v int32) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.AddNumericValue(v)
	})
}

// UpdateNumericValue sets the "numeric_value" field to the value that was provided on create.
func (u *DictEntryUpsertBulk) UpdateNumericValue() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateNumericValue()
	})
}

// ClearNumericValue clears the value of the "numeric_value" field.
func (u *DictEntryUpsertBulk) ClearNumericValue() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearNumericValue()
	})
}

// SetLanguageCode sets the "language_code" field.
func (u *DictEntryUpsertBulk) SetLanguageCode(v string) *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.SetLanguageCode(v)
	})
}

// UpdateLanguageCode sets the "language_code" field to the value that was provided on create.
func (u *DictEntryUpsertBulk) UpdateLanguageCode() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.UpdateLanguageCode()
	})
}

// ClearLanguageCode clears the value of the "language_code" field.
func (u *DictEntryUpsertBulk) ClearLanguageCode() *DictEntryUpsertBulk {
	return u.Update(func(s *DictEntryUpsert) {
		s.ClearLanguageCode()
	})
}

// Exec executes the query.
func (u *DictEntryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DictEntryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DictEntryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictEntryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/rolemenu"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleMenuCreate is the builder for creating a RoleMenu entity.
type RoleMenuCreate struct {
	config
	mutation *RoleMenuMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *RoleMenuCreate) SetCreatedAt(v time.Time) *RoleMenuCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *RoleMenuCreate) SetNillableCreatedAt(v *time.Time) *RoleMenuCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *RoleMenuCreate) SetUpdatedAt(v time.Time) *RoleMenuCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *RoleMenuCreate) SetNillableUpdatedAt(v *time.Time) *RoleMenuCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *RoleMenuCreate) SetDeletedAt(v time.Time) *RoleMenuCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *RoleMenuCreate) SetNillableDeletedAt(v *time.Time) *RoleMenuCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *RoleMenuCreate) SetCreatedBy(v uint32) *RoleMenuCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *RoleMenuCreate) SetNillableCreatedBy(v *uint32) *RoleMenuCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *RoleMenuCreate) SetUpdatedBy(v uint32) *RoleMenuCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *RoleMenuCreate) SetNillableUpdatedBy(v *uint32) *RoleMenuCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *RoleMenuCreate) SetDeletedBy(v uint32) *RoleMenuCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *RoleMenuCreate) SetNillableDeletedBy(v *uint32) *RoleMenuCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetRoleID sets the "role_id" field.
func (_c *RoleMenuCreate) SetRoleID(v uint32) *RoleMenuCreate {
	_c.mutation.SetRoleID(v)
	return _c
}

// SetMenuID sets the "menu_id" field.
func (_c *RoleMenuCreate) SetMenuID(v uint32) *RoleMenuCreate {
	_c.mutation.SetMenuID(v)
	return _c
}

// SetID sets the "id" field.
func (_c *RoleMenuCreate) SetID(v uint32) *RoleMenuCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the RoleMenuMutation object of the builder.
func (_c *RoleMenuCreate) Mutation() *RoleMenuMutation {
	return _c.mutation
}

// Save creates the RoleMenu in the database.
func (_c *RoleMenuCreate) Save(ctx context.Context) (*RoleMenu, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *RoleMenuCreate) SaveX(ctx context.Context) *RoleMenu {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RoleMenuCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RoleMenuCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *RoleMenuCreate) check() error {
	if _, ok := _c.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "RoleMenu.role_id"`)}
	}
	if _, ok := _c.mutation.MenuID(); !ok {
		return &ValidationError{Name: "menu_id", err: errors.New(`ent: missing required field "RoleMenu.menu_id"`)}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := rolemenu.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "RoleMenu.id": %w`, err)}
		}
	}
	return nil
}

func (_c *RoleMenuCreate) sqlSave(ctx context.Context) (*RoleMenu, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *RoleMenuCreate) createSpec() (*RoleMenu, *sqlgraph.CreateSpec) {
	var (
		_node = &RoleMenu{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(rolemenu.Table, sqlgraph.NewFieldSpec(rolemenu.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(rolemenu.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(rolemenu.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(rolemenu.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(rolemenu.FieldCreatedBy, field.TypeUint32, value)
		_node.CreatedBy = &value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(rolemenu.FieldUpdatedBy, field.TypeUint32, value)
		_node.UpdatedBy = &value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(rolemenu.FieldDeletedBy, field.TypeUint32, value)
		_node.DeletedBy = &value
	}
	if value, ok := _c.mutation.RoleID(); ok {
		_spec.SetField(rolemenu.FieldRoleID, field.TypeUint32, value)
		_node.RoleID = &value
	}
	if value, ok := _c.mutation.MenuID(); ok {
		_spec.SetField(rolemenu.FieldMenuID, field.TypeUint32, value)
		_node.MenuID = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RoleMenu.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RoleMenuUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *RoleMenuCreate) OnConflict(opts ...sql.ConflictOption) *RoleMenuUpsertOne {
	_c.conflict = opts
	return &RoleMenuUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RoleMenu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RoleMenuCreate) OnConflictColumns(columns ...string) *RoleMenuUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RoleMenuUpsertOne{
		create: _c,
	}
}

type (
	// RoleMenuUpsertOne is the builder for "upsert"-ing
	//  one RoleMenu node.
	RoleMenuUpsertOne struct {
		create *RoleMenuCreate
	}

	// RoleMenuUpsert is the "OnConflict" setter.
	RoleMenuUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *RoleMenuUpsert) SetUpdatedAt(v time.Time) *RoleMenuUpsert {
	u.Set(rolemenu.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RoleMenuUpsert) UpdateUpdatedAt() *RoleMenuUpsert {
	u.SetExcluded(rolemenu.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *RoleMenuUpsert) ClearUpdatedAt() *RoleMenuUpsert {
	u.SetNull(rolemenu.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RoleMenuUpsert) SetDeletedAt(v time.Time) *RoleMenuUpsert {
	u.Set(rolemenu.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RoleMenuUpsert) UpdateDeletedAt() *RoleMenuUpsert {
	u.SetExcluded(rolemenu.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RoleMenuUpsert) ClearDeletedAt() *RoleMenuUpsert {
	u.SetNull(rolemenu.FieldDeletedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *RoleMenuUpsert) SetCreatedBy(v uint32) *RoleMenuUpsert {
	u.Set(rolemenu.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RoleMenuUpsert) UpdateCreatedBy() *RoleMenuUpsert {
	u.SetExcluded(rolemenu.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *RoleMenuUpsert) AddCreatedBy(v uint32) *RoleMenuUpsert {
	u.Add(rolemenu.FieldCreatedBy, v)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *RoleMenuUpsert) ClearCreatedBy() *RoleMenuUpsert {
	u.SetNull(rolemenu.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RoleMenuUpsert) SetUpdatedBy(v uint32) *RoleMenuUpsert {
	u.Set(rolemenu.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RoleMenuUpsert) UpdateUpdatedBy() *RoleMenuUpsert {
	u.SetExcluded(rolemenu.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RoleMenuUpsert) AddUpdatedBy(v uint32) *RoleMenuUpsert {
	u.Add(rolemenu.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *RoleMenuUpsert) ClearUpdatedBy() *RoleMenuUpsert {
	u.SetNull(rolemenu.FieldUpdatedBy)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *RoleMenuUpsert) SetDeletedBy(v uint32) *RoleMenuUpsert {
	u.Set(rolemenu.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *RoleMenuUpsert) UpdateDeletedBy() *RoleMenuUpsert {
	u.SetExcluded(rolemenu.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *RoleMenuUpsert) AddDeletedBy(v uint32) *RoleMenuUpsert {
	u.Add(rolemenu.FieldDeletedBy, v)
	return u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *RoleMenuUpsert) ClearDeletedBy() *RoleMenuUpsert {
	u.SetNull(rolemenu.FieldDeletedBy)
	return u
}

// SetRoleID sets the "role_id" field.
func (u *RoleMenuUpsert) SetRoleID(v uint32) *RoleMenuUpsert {
	u.Set(rolemenu.FieldRoleID, v)
	return u
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *RoleMenuUpsert) UpdateRoleID() *RoleMenuUpsert {
	u.SetExcluded(rolemenu.FieldRoleID)
	return u
}

// AddRoleID adds v to the "role_id" field.
func (u *RoleMenuUpsert) AddRoleID(v uint32) *RoleMenuUpsert {
	u.Add(rolemenu.FieldRoleID, v)
	return u
}

// SetMenuID sets the "menu_id" field.
func (u *RoleMenuUpsert) SetMenuID(v uint32) *RoleMenuUpsert {
	u.Set(rolemenu.FieldMenuID, v)
	return u
}

// UpdateMenuID sets the "menu_id" field to the value that was provided on create.
func (u *RoleMenuUpsert) UpdateMenuID() *RoleMenuUpsert {
	u.SetExcluded(rolemenu.FieldMenuID)
	return u
}

// AddMenuID adds v to the "menu_id" field.
func (u *RoleMenuUpsert) AddMenuID(v uint32) *RoleMenuUpsert {
	u.Add(rolemenu.FieldMenuID, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RoleMenu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rolemenu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RoleMenuUpsertOne) UpdateNewValues() *RoleMenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(rolemenu.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(rolemenu.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RoleMenu.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RoleMenuUpsertOne) Ignore() *RoleMenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RoleMenuUpsertOne) DoNothing() *RoleMenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RoleMenuCreate.OnConflict
// documentation for more info.
func (u *RoleMenuUpsertOne) Update(set func(*RoleMenuUpsert)) *RoleMenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RoleMenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RoleMenuUpsertOne) SetUpdatedAt(v time.Time) *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RoleMenuUpsertOne) UpdateUpdatedAt() *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *RoleMenuUpsertOne) ClearUpdatedAt() *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RoleMenuUpsertOne) SetDeletedAt(v time.Time) *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RoleMenuUpsertOne) UpdateDeletedAt() *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RoleMenuUpsertOne) ClearDeletedAt() *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *RoleMenuUpsertOne) SetCreatedBy(v uint32) *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *RoleMenuUpsertOne) AddCreatedBy(v uint32) *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RoleMenuUpsertOne) UpdateCreatedBy() *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *RoleMenuUpsertOne) ClearCreatedBy() *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RoleMenuUpsertOne) SetUpdatedBy(v uint32) *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RoleMenuUpsertOne) AddUpdatedBy(v uint32) *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RoleMenuUpsertOne) UpdateUpdatedBy() *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *RoleMenuUpsertOne) ClearUpdatedBy() *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *RoleMenuUpsertOne) SetDeletedBy(v uint32) *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *RoleMenuUpsertOne) AddDeletedBy(v uint32) *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *RoleMenuUpsertOne) UpdateDeletedBy() *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *RoleMenuUpsertOne) ClearDeletedBy() *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.ClearDeletedBy()
	})
}

// SetRoleID sets the "role_id" field.
func (u *RoleMenuUpsertOne) SetRoleID(v uint32) *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.SetRoleID(v)
	})
}

// AddRoleID adds v to the "role_id" field.
func (u *RoleMenuUpsertOne) AddRoleID(v uint32) *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.AddRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *RoleMenuUpsertOne) UpdateRoleID() *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.UpdateRoleID()
	})
}

// SetMenuID sets the "menu_id" field.
func (u *RoleMenuUpsertOne) SetMenuID(v uint32) *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.SetMenuID(v)
	})
}

// AddMenuID adds v to the "menu_id" field.
func (u *RoleMenuUpsertOne) AddMenuID(v uint32) *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.AddMenuID(v)
	})
}

// UpdateMenuID sets the "menu_id" field to the value that was provided on create.
func (u *RoleMenuUpsertOne) UpdateMenuID() *RoleMenuUpsertOne {
	return u.Update(func(s *RoleMenuUpsert) {
		s.UpdateMenuID()
	})
}

// Exec executes the query.
func (u *RoleMenuUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RoleMenuCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RoleMenuUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RoleMenuUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RoleMenuUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RoleMenuCreateBulk is the builder for creating many RoleMenu entities in bulk.
type RoleMenuCreateBulk struct {
	config
	err      error
	builders []*RoleMenuCreate
	conflict []sql.ConflictOption
}

// Save creates the RoleMenu entities in the database.
func (_c *RoleMenuCreateBulk) Save(ctx context.Context) ([]*RoleMenu, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*RoleMenu, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoleMenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *RoleMenuCreateBulk) SaveX(ctx context.Context) []*RoleMenu {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RoleMenuCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RoleMenuCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RoleMenu.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RoleMenuUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *RoleMenuCreateBulk) OnConflict(opts ...sql.ConflictOption) *RoleMenuUpsertBulk {
	_c.conflict = opts
	return &RoleMenuUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RoleMenu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RoleMenuCreateBulk) OnConflictColumns(columns ...string) *RoleMenuUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RoleMenuUpsertBulk{
		create: _c,
	}
}

// RoleMenuUpsertBulk is the builder for "upsert"-ing
// a bulk of RoleMenu nodes.
type RoleMenuUpsertBulk struct {
	create *RoleMenuCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RoleMenu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rolemenu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RoleMenuUpsertBulk) UpdateNewValues() *RoleMenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(rolemenu.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(rolemenu.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RoleMenu.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RoleMenuUpsertBulk) Ignore() *RoleMenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RoleMenuUpsertBulk) DoNothing() *RoleMenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RoleMenuCreateBulk.OnConflict
// documentation for more info.
func (u *RoleMenuUpsertBulk) Update(set func(*RoleMenuUpsert)) *RoleMenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RoleMenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RoleMenuUpsertBulk) SetUpdatedAt(v time.Time) *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RoleMenuUpsertBulk) UpdateUpdatedAt() *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *RoleMenuUpsertBulk) ClearUpdatedAt() *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RoleMenuUpsertBulk) SetDeletedAt(v time.Time) *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RoleMenuUpsertBulk) UpdateDeletedAt() *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RoleMenuUpsertBulk) ClearDeletedAt() *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *RoleMenuUpsertBulk) SetCreatedBy(v uint32) *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *RoleMenuUpsertBulk) AddCreatedBy(v uint32) *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RoleMenuUpsertBulk) UpdateCreatedBy() *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *RoleMenuUpsertBulk) ClearCreatedBy() *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RoleMenuUpsertBulk) SetUpdatedBy(v uint32) *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RoleMenuUpsertBulk) AddUpdatedBy(v uint32) *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RoleMenuUpsertBulk) UpdateUpdatedBy() *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *RoleMenuUpsertBulk) ClearUpdatedBy() *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *RoleMenuUpsertBulk) SetDeletedBy(v uint32) *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *RoleMenuUpsertBulk) AddDeletedBy(v uint32) *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *RoleMenuUpsertBulk) UpdateDeletedBy() *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *RoleMenuUpsertBulk) ClearDeletedBy() *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.ClearDeletedBy()
	})
}

// SetRoleID sets the "role_id" field.
func (u *RoleMenuUpsertBulk) SetRoleID(v uint32) *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.SetRoleID(v)
	})
}

// AddRoleID adds v to the "role_id" field.
func (u *RoleMenuUpsertBulk) AddRoleID(v uint32) *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.AddRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *RoleMenuUpsertBulk) UpdateRoleID() *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.UpdateRoleID()
	})
}

// SetMenuID sets the "menu_id" field.
func (u *RoleMenuUpsertBulk) SetMenuID(v uint32) *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.SetMenuID(v)
	})
}

// AddMenuID adds v to the "menu_id" field.
func (u *RoleMenuUpsertBulk) AddMenuID(v uint32) *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.AddMenuID(v)
	})
}

// UpdateMenuID sets the "menu_id" field to the value that was provided on create.
func (u *RoleMenuUpsertBulk) UpdateMenuID() *RoleMenuUpsertBulk {
	return u.Update(func(s *RoleMenuUpsert) {
		s.UpdateMenuID()
	})
}

// Exec executes the query.
func (u *RoleMenuUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RoleMenuCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RoleMenuCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RoleMenuUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package tenant

import (
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldUpdateTime, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldDeleteTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldUpdateBy, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldRemark, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldName, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldCode, v))
}

// LogoURL applies equality check predicate on the "logo_url" field. It's identical to LogoURLEQ.
func LogoURL(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldLogoURL, v))
}

// Industry applies equality check predicate on the "industry" field. It's identical to IndustryEQ.
func Industry(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldIndustry, v))
}

// AdminUserID applies equality check predicate on the "admin_user_id" field. It's identical to AdminUserIDEQ.
func AdminUserID(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldAdminUserID, v))
}

// SubscriptionAt applies equality check predicate on the "subscription_at" field. It's identical to SubscriptionAtEQ.
func SubscriptionAt(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldSubscriptionAt, v))
}

// UnsubscribeAt applies equality check predicate on the "unsubscribe_at" field. It's identical to UnsubscribeAtEQ.
func UnsubscribeAt(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldUnsubscribeAt, v))
}

// SubscriptionPlan applies equality check predicate on the "subscription_plan" field. It's identical to SubscriptionPlanEQ.
func SubscriptionPlan(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldSubscriptionPlan, v))
}

// ExpiredAt applies equality check predicate on the "expired_at" field. It's identical to ExpiredAtEQ.
func ExpiredAt(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldExpiredAt, v))
}

// LastLoginTime applies equality check predicate on the "last_login_time" field. It's identical to LastLoginTimeEQ.
func LastLoginTime(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldLastLoginTime, v))
}

// LastLoginIP applies equality check predicate on the "last_login_ip" field. It's identical to LastLoginIPEQ.
func LastLoginIP(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldLastLoginIP, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldCreateTime, v))
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldCreateTime))
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldCreateTime))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldUpdateTime))
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldUpdateTime))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldDeleteTime))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldCreateBy))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldUpdateBy))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContainsFold(FieldRemark, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContainsFold(FieldName, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasSuffix(FieldCode, v))
}

// CodeIsNil applies the IsNil predicate on the "code" field.
func CodeIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldCode))
}

// CodeNotNil applies the NotNil predicate on the "code" field.
func CodeNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldCode))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContainsFold(FieldCode, v))
}

// LogoURLEQ applies the EQ predicate on the "logo_url" field.
func LogoURLEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldLogoURL, v))
}

// LogoURLNEQ applies the NEQ predicate on the "logo_url" field.
func LogoURLNEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldLogoURL, v))
}

// LogoURLIn applies the In predicate on the "logo_url" field.
func LogoURLIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldLogoURL, vs...))
}

// LogoURLNotIn applies the NotIn predicate on the "logo_url" field.
func LogoURLNotIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldLogoURL, vs...))
}

// LogoURLGT applies the GT predicate on the "logo_url" field.
func LogoURLGT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldLogoURL, v))
}

// LogoURLGTE applies the GTE predicate on the "logo_url" field.
func LogoURLGTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldLogoURL, v))
}

// LogoURLLT applies the LT predicate on the "logo_url" field.
func LogoURLLT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldLogoURL, v))
}

// LogoURLLTE applies the LTE predicate on the "logo_url" field.
func LogoURLLTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldLogoURL, v))
}

// LogoURLContains applies the Contains predicate on the "logo_url" field.
func LogoURLContains(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContains(FieldLogoURL, v))
}

// LogoURLHasPrefix applies the HasPrefix predicate on the "logo_url" field.
func LogoURLHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasPrefix(FieldLogoURL, v))
}

// LogoURLHasSuffix applies the HasSuffix predicate on the "logo_url" field.
func LogoURLHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasSuffix(FieldLogoURL, v))
}

// LogoURLIsNil applies the IsNil predicate on the "logo_url" field.
func LogoURLIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldLogoURL))
}

// LogoURLNotNil applies the NotNil predicate on the "logo_url" field.
func LogoURLNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldLogoURL))
}

// LogoURLEqualFold applies the EqualFold predicate on the "logo_url" field.
func LogoURLEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEqualFold(FieldLogoURL, v))
}

// LogoURLContainsFold applies the ContainsFold predicate on the "logo_url" field.
func LogoURLContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContainsFold(FieldLogoURL, v))
}

// IndustryEQ applies the EQ predicate on the "industry" field.
func IndustryEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldIndustry, v))
}

// IndustryNEQ applies the NEQ predicate on the "industry" field.
func IndustryNEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldIndustry, v))
}

// IndustryIn applies the In predicate on the "industry" field.
func IndustryIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldIndustry, vs...))
}

// IndustryNotIn applies the NotIn predicate on the "industry" field.
func IndustryNotIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldIndustry, vs...))
}

// IndustryGT applies the GT predicate on the "industry" field.
func IndustryGT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldIndustry, v))
}

// IndustryGTE applies the GTE predicate on the "industry" field.
func IndustryGTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldIndustry, v))
}

// IndustryLT applies the LT predicate on the "industry" field.
func IndustryLT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldIndustry, v))
}

// IndustryLTE applies the LTE predicate on the "industry" field.
func IndustryLTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldIndustry, v))
}

// IndustryContains applies the Contains predicate on the "industry" field.
func IndustryContains(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContains(FieldIndustry, v))
}

// IndustryHasPrefix applies the HasPrefix predicate on the "industry" field.
func IndustryHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasPrefix(FieldIndustry, v))
}

// IndustryHasSuffix applies the HasSuffix predicate on the "industry" field.
func IndustryHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasSuffix(FieldIndustry, v))
}

// IndustryIsNil applies the IsNil predicate on the "industry" field.
func IndustryIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldIndustry))
}

// IndustryNotNil applies the NotNil predicate on the "industry" field.
func IndustryNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldIndustry))
}

// IndustryEqualFold applies the EqualFold predicate on the "industry" field.
func IndustryEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEqualFold(FieldIndustry, v))
}

// IndustryContainsFold applies the ContainsFold predicate on the "industry" field.
func IndustryContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContainsFold(FieldIndustry, v))
}

// AdminUserIDEQ applies the EQ predicate on the "admin_user_id" field.
func AdminUserIDEQ(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldAdminUserID, v))
}

// AdminUserIDNEQ applies the NEQ predicate on the "admin_user_id" field.
func AdminUserIDNEQ(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldAdminUserID, v))
}

// AdminUserIDIn applies the In predicate on the "admin_user_id" field.
func AdminUserIDIn(vs ...uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldAdminUserID, vs...))
}

// AdminUserIDNotIn applies the NotIn predicate on the "admin_user_id" field.
func AdminUserIDNotIn(vs ...uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldAdminUserID, vs...))
}

// AdminUserIDGT applies the GT predicate on the "admin_user_id" field.
func AdminUserIDGT(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldAdminUserID, v))
}

// AdminUserIDGTE applies the GTE predicate on the "admin_user_id" field.
func AdminUserIDGTE(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldAdminUserID, v))
}

// AdminUserIDLT applies the LT predicate on the "admin_user_id" field.
func AdminUserIDLT(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldAdminUserID, v))
}

// AdminUserIDLTE applies the LTE predicate on the "admin_user_id" field.
func AdminUserIDLTE(v uint32) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldAdminUserID, v))
}

// AdminUserIDIsNil applies the IsNil predicate on the "admin_user_id" field.
func AdminUserIDIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldAdminUserID))
}

// AdminUserIDNotNil applies the NotNil predicate on the "admin_user_id" field.
func AdminUserIDNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldAdminUserID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldStatus))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldType, vs...))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldType))
}

// AuditStatusEQ applies the EQ predicate on the "audit_status" field.
func AuditStatusEQ(v AuditStatus) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldAuditStatus, v))
}

// AuditStatusNEQ applies the NEQ predicate on the "audit_status" field.
func AuditStatusNEQ(v AuditStatus) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldAuditStatus, v))
}

// AuditStatusIn applies the In predicate on the "audit_status" field.
func AuditStatusIn(vs ...AuditStatus) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldAuditStatus, vs...))
}

// AuditStatusNotIn applies the NotIn predicate on the "audit_status" field.
func AuditStatusNotIn(vs ...AuditStatus) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldAuditStatus, vs...))
}

// AuditStatusIsNil applies the IsNil predicate on the "audit_status" field.
func AuditStatusIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldAuditStatus))
}

// AuditStatusNotNil applies the NotNil predicate on the "audit_status" field.
func AuditStatusNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldAuditStatus))
}

// SubscriptionAtEQ applies the EQ predicate on the "subscription_at" field.
func SubscriptionAtEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldSubscriptionAt, v))
}

// SubscriptionAtNEQ applies the NEQ predicate on the "subscription_at" field.
func SubscriptionAtNEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldSubscriptionAt, v))
}

// SubscriptionAtIn applies the In predicate on the "subscription_at" field.
func SubscriptionAtIn(vs ...time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldSubscriptionAt, vs...))
}

// SubscriptionAtNotIn applies the NotIn predicate on the "subscription_at" field.
func SubscriptionAtNotIn(vs ...time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldSubscriptionAt, vs...))
}

// SubscriptionAtGT applies the GT predicate on the "subscription_at" field.
func SubscriptionAtGT(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldSubscriptionAt, v))
}

// SubscriptionAtGTE applies the GTE predicate on the "subscription_at" field.
func SubscriptionAtGTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldSubscriptionAt, v))
}

// SubscriptionAtLT applies the LT predicate on the "subscription_at" field.
func SubscriptionAtLT(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldSubscriptionAt, v))
}

// SubscriptionAtLTE applies the LTE predicate on the "subscription_at" field.
func SubscriptionAtLTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldSubscriptionAt, v))
}

// SubscriptionAtIsNil applies the IsNil predicate on the "subscription_at" field.
func SubscriptionAtIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldSubscriptionAt))
}

// SubscriptionAtNotNil applies the NotNil predicate on the "subscription_at" field.
func SubscriptionAtNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldSubscriptionAt))
}

// UnsubscribeAtEQ applies the EQ predicate on the "unsubscribe_at" field.
func UnsubscribeAtEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldUnsubscribeAt, v))
}

// UnsubscribeAtNEQ applies the NEQ predicate on the "unsubscribe_at" field.
func UnsubscribeAtNEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldUnsubscribeAt, v))
}

// UnsubscribeAtIn applies the In predicate on the "unsubscribe_at" field.
func UnsubscribeAtIn(vs ...time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldUnsubscribeAt, vs...))
}

// UnsubscribeAtNotIn applies the NotIn predicate on the "unsubscribe_at" field.
func UnsubscribeAtNotIn(vs ...time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldUnsubscribeAt, vs...))
}

// UnsubscribeAtGT applies the GT predicate on the "unsubscribe_at" field.
func UnsubscribeAtGT(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldUnsubscribeAt, v))
}

// UnsubscribeAtGTE applies the GTE predicate on the "unsubscribe_at" field.
func UnsubscribeAtGTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldUnsubscribeAt, v))
}

// UnsubscribeAtLT applies the LT predicate on the "unsubscribe_at" field.
func UnsubscribeAtLT(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldUnsubscribeAt, v))
}

// UnsubscribeAtLTE applies the LTE predicate on the "unsubscribe_at" field.
func UnsubscribeAtLTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldUnsubscribeAt, v))
}

// UnsubscribeAtIsNil applies the IsNil predicate on the "unsubscribe_at" field.
func UnsubscribeAtIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldUnsubscribeAt))
}

// UnsubscribeAtNotNil applies the NotNil predicate on the "unsubscribe_at" field.
func UnsubscribeAtNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldUnsubscribeAt))
}

// SubscriptionPlanEQ applies the EQ predicate on the "subscription_plan" field.
func SubscriptionPlanEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldSubscriptionPlan, v))
}

// SubscriptionPlanNEQ applies the NEQ predicate on the "subscription_plan" field.
func SubscriptionPlanNEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldSubscriptionPlan, v))
}

// SubscriptionPlanIn applies the In predicate on the "subscription_plan" field.
func SubscriptionPlanIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldSubscriptionPlan, vs...))
}

// SubscriptionPlanNotIn applies the NotIn predicate on the "subscription_plan" field.
func SubscriptionPlanNotIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldSubscriptionPlan, vs...))
}

// SubscriptionPlanGT applies the GT predicate on the "subscription_plan" field.
func SubscriptionPlanGT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldSubscriptionPlan, v))
}

// SubscriptionPlanGTE applies the GTE predicate on the "subscription_plan" field.
func SubscriptionPlanGTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldSubscriptionPlan, v))
}

// SubscriptionPlanLT applies the LT predicate on the "subscription_plan" field.
func SubscriptionPlanLT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldSubscriptionPlan, v))
}

// SubscriptionPlanLTE applies the LTE predicate on the "subscription_plan" field.
func SubscriptionPlanLTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldSubscriptionPlan, v))
}

// SubscriptionPlanContains applies the Contains predicate on the "subscription_plan" field.
func SubscriptionPlanContains(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContains(FieldSubscriptionPlan, v))
}

// SubscriptionPlanHasPrefix applies the HasPrefix predicate on the "subscription_plan" field.
func SubscriptionPlanHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasPrefix(FieldSubscriptionPlan, v))
}

// SubscriptionPlanHasSuffix applies the HasSuffix predicate on the "subscription_plan" field.
func SubscriptionPlanHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasSuffix(FieldSubscriptionPlan, v))
}

// SubscriptionPlanIsNil applies the IsNil predicate on the "subscription_plan" field.
func SubscriptionPlanIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldSubscriptionPlan))
}

// SubscriptionPlanNotNil applies the NotNil predicate on the "subscription_plan" field.
func SubscriptionPlanNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldSubscriptionPlan))
}

// SubscriptionPlanEqualFold applies the EqualFold predicate on the "subscription_plan" field.
func SubscriptionPlanEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEqualFold(FieldSubscriptionPlan, v))
}

// SubscriptionPlanContainsFold applies the ContainsFold predicate on the "subscription_plan" field.
func SubscriptionPlanContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContainsFold(FieldSubscriptionPlan, v))
}

// ExpiredAtEQ applies the EQ predicate on the "expired_at" field.
func ExpiredAtEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldExpiredAt, v))
}

// ExpiredAtNEQ applies the NEQ predicate on the "expired_at" field.
func ExpiredAtNEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldExpiredAt, v))
}

// ExpiredAtIn applies the In predicate on the "expired_at" field.
func ExpiredAtIn(vs ...time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldExpiredAt, vs...))
}

// ExpiredAtNotIn applies the NotIn predicate on the "expired_at" field.
func ExpiredAtNotIn(vs ...time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldExpiredAt, vs...))
}

// ExpiredAtGT applies the GT predicate on the "expired_at" field.
func ExpiredAtGT(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldExpiredAt, v))
}

// ExpiredAtGTE applies the GTE predicate on the "expired_at" field.
func ExpiredAtGTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldExpiredAt, v))
}

// ExpiredAtLT applies the LT predicate on the "expired_at" field.
func ExpiredAtLT(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldExpiredAt, v))
}

// ExpiredAtLTE applies the LTE predicate on the "expired_at" field.
func ExpiredAtLTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldExpiredAt, v))
}

// ExpiredAtIsNil applies the IsNil predicate on the "expired_at" field.
func ExpiredAtIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldExpiredAt))
}

// ExpiredAtNotNil applies the NotNil predicate on the "expired_at" field.
func ExpiredAtNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldExpiredAt))
}

// LastLoginTimeEQ applies the EQ predicate on the "last_login_time" field.
func LastLoginTimeEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldLastLoginTime, v))
}

// LastLoginTimeNEQ applies the NEQ predicate on the "last_login_time" field.
func LastLoginTimeNEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldLastLoginTime, v))
}

// LastLoginTimeIn applies the In predicate on the "last_login_time" field.
func LastLoginTimeIn(vs ...time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldLastLoginTime, vs...))
}

// LastLoginTimeNotIn applies the NotIn predicate on the "last_login_time" field.
func LastLoginTimeNotIn(vs ...time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldLastLoginTime, vs...))
}

// LastLoginTimeGT applies the GT predicate on the "last_login_time" field.
func LastLoginTimeGT(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldLastLoginTime, v))
}

// LastLoginTimeGTE applies the GTE predicate on the "last_login_time" field.
func LastLoginTimeGTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldLastLoginTime, v))
}

// LastLoginTimeLT applies the LT predicate on the "last_login_time" field.
func LastLoginTimeLT(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldLastLoginTime, v))
}

// LastLoginTimeLTE applies the LTE predicate on the "last_login_time" field.
func LastLoginTimeLTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldLastLoginTime, v))
}

// LastLoginTimeIsNil applies the IsNil predicate on the "last_login_time" field.
func LastLoginTimeIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldLastLoginTime))
}

// LastLoginTimeNotNil applies the NotNil predicate on the "last_login_time" field.
func LastLoginTimeNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldLastLoginTime))
}

// LastLoginIPEQ applies the EQ predicate on the "last_login_ip" field.
func LastLoginIPEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldLastLoginIP, v))
}

// LastLoginIPNEQ applies the NEQ predicate on the "last_login_ip" field.
func LastLoginIPNEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldLastLoginIP, v))
}

// LastLoginIPIn applies the In predicate on the "last_login_ip" field.
func LastLoginIPIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldLastLoginIP, vs...))
}

// LastLoginIPNotIn applies the NotIn predicate on the "last_login_ip" field.
func LastLoginIPNotIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldLastLoginIP, vs...))
}

// LastLoginIPGT applies the GT predicate on the "last_login_ip" field.
func LastLoginIPGT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldLastLoginIP, v))
}

// LastLoginIPGTE applies the GTE predicate on the "last_login_ip" field.
func LastLoginIPGTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldLastLoginIP, v))
}

// LastLoginIPLT applies the LT predicate on the "last_login_ip" field.
func LastLoginIPLT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldLastLoginIP, v))
}

// LastLoginIPLTE applies the LTE predicate on the "last_login_ip" field.
func LastLoginIPLTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldLastLoginIP, v))
}

// LastLoginIPContains applies the Contains predicate on the "last_login_ip" field.
func LastLoginIPContains(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContains(FieldLastLoginIP, v))
}

// LastLoginIPHasPrefix applies the HasPrefix predicate on the "last_login_ip" field.
func LastLoginIPHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasPrefix(FieldLastLoginIP, v))
}

// LastLoginIPHasSuffix applies the HasSuffix predicate on the "last_login_ip" field.
func LastLoginIPHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasSuffix(FieldLastLoginIP, v))
}

// LastLoginIPIsNil applies the IsNil predicate on the "last_login_ip" field.
func LastLoginIPIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldLastLoginIP))
}

// LastLoginIPNotNil applies the NotNil predicate on the "last_login_ip" field.
func LastLoginIPNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldLastLoginIP))
}

// LastLoginIPEqualFold applies the EqualFold predicate on the "last_login_ip" field.
func LastLoginIPEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEqualFold(FieldLastLoginIP, v))
}

// LastLoginIPContainsFold applies the ContainsFold predicate on the "last_login_ip" field.
func LastLoginIPContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContainsFold(FieldLastLoginIP, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(sql.NotPredicates(p))
}

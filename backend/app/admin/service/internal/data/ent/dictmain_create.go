// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/dictmain"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictMainCreate is the builder for creating a DictMain entity.
type DictMainCreate struct {
	config
	mutation *DictMainMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (_c *DictMainCreate) SetCreateTime(v time.Time) *DictMainCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *DictMainCreate) SetNillableCreateTime(v *time.Time) *DictMainCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *DictMainCreate) SetUpdateTime(v time.Time) *DictMainCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *DictMainCreate) SetNillableUpdateTime(v *time.Time) *DictMainCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *DictMainCreate) SetDeleteTime(v time.Time) *DictMainCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *DictMainCreate) SetNillableDeleteTime(v *time.Time) *DictMainCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *DictMainCreate) SetCreateBy(v uint32) *DictMainCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *DictMainCreate) SetNillableCreateBy(v *uint32) *DictMainCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *DictMainCreate) SetUpdateBy(v uint32) *DictMainCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *DictMainCreate) SetNillableUpdateBy(v *uint32) *DictMainCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetRemark sets the "remark" field.
func (_c *DictMainCreate) SetRemark(v string) *DictMainCreate {
	_c.mutation.SetRemark(v)
	return _c
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_c *DictMainCreate) SetNillableRemark(v *string) *DictMainCreate {
	if v != nil {
		_c.SetRemark(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *DictMainCreate) SetTenantID(v uint32) *DictMainCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_c *DictMainCreate) SetNillableTenantID(v *uint32) *DictMainCreate {
	if v != nil {
		_c.SetTenantID(*v)
	}
	return _c
}

// SetCode sets the "code" field.
func (_c *DictMainCreate) SetCode(v string) *DictMainCreate {
	_c.mutation.SetCode(v)
	return _c
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_c *DictMainCreate) SetNillableCode(v *string) *DictMainCreate {
	if v != nil {
		_c.SetCode(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *DictMainCreate) SetName(v string) *DictMainCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *DictMainCreate) SetNillableName(v *string) *DictMainCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *DictMainCreate) SetID(v uint32) *DictMainCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the DictMainMutation object of the builder.
func (_c *DictMainCreate) Mutation() *DictMainMutation {
	return _c.mutation
}

// Save creates the DictMain in the database.
func (_c *DictMainCreate) Save(ctx context.Context) (*DictMain, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DictMainCreate) SaveX(ctx context.Context) *DictMain {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DictMainCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DictMainCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DictMainCreate) defaults() {
	if _, ok := _c.mutation.Remark(); !ok {
		v := dictmain.DefaultRemark
		_c.mutation.SetRemark(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DictMainCreate) check() error {
	if v, ok := _c.mutation.TenantID(); ok {
		if err := dictmain.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "DictMain.tenant_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Code(); ok {
		if err := dictmain.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DictMain.code": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := dictmain.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DictMain.name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := dictmain.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "DictMain.id": %w`, err)}
		}
	}
	return nil
}

func (_c *DictMainCreate) sqlSave(ctx context.Context) (*DictMain, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DictMainCreate) createSpec() (*DictMain, *sqlgraph.CreateSpec) {
	var (
		_node = &DictMain{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(dictmain.Table, sqlgraph.NewFieldSpec(dictmain.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(dictmain.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(dictmain.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(dictmain.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(dictmain.FieldCreateBy, field.TypeUint32, value)
		_node.CreateBy = &value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(dictmain.FieldUpdateBy, field.TypeUint32, value)
		_node.UpdateBy = &value
	}
	if value, ok := _c.mutation.Remark(); ok {
		_spec.SetField(dictmain.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(dictmain.FieldTenantID, field.TypeUint32, value)
		_node.TenantID = &value
	}
	if value, ok := _c.mutation.Code(); ok {
		_spec.SetField(dictmain.FieldCode, field.TypeString, value)
		_node.Code = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(dictmain.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DictMain.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictMainUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (_c *DictMainCreate) OnConflict(opts ...sql.ConflictOption) *DictMainUpsertOne {
	_c.conflict = opts
	return &DictMainUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DictMain.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DictMainCreate) OnConflictColumns(columns ...string) *DictMainUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DictMainUpsertOne{
		create: _c,
	}
}

type (
	// DictMainUpsertOne is the builder for "upsert"-ing
	//  one DictMain node.
	DictMainUpsertOne struct {
		create *DictMainCreate
	}

	// DictMainUpsert is the "OnConflict" setter.
	DictMainUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *DictMainUpsert) SetUpdateTime(v time.Time) *DictMainUpsert {
	u.Set(dictmain.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DictMainUpsert) UpdateUpdateTime() *DictMainUpsert {
	u.SetExcluded(dictmain.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *DictMainUpsert) ClearUpdateTime() *DictMainUpsert {
	u.SetNull(dictmain.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *DictMainUpsert) SetDeleteTime(v time.Time) *DictMainUpsert {
	u.Set(dictmain.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *DictMainUpsert) UpdateDeleteTime() *DictMainUpsert {
	u.SetExcluded(dictmain.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *DictMainUpsert) ClearDeleteTime() *DictMainUpsert {
	u.SetNull(dictmain.FieldDeleteTime)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *DictMainUpsert) SetCreateBy(v uint32) *DictMainUpsert {
	u.Set(dictmain.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *DictMainUpsert) UpdateCreateBy() *DictMainUpsert {
	u.SetExcluded(dictmain.FieldCreateBy)
	return u
}

// AddCreateBy adds v to the "create_by" field.
func (u *DictMainUpsert) AddCreateBy(v uint32) *DictMainUpsert {
	u.Add(dictmain.FieldCreateBy, v)
	return u
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *DictMainUpsert) ClearCreateBy() *DictMainUpsert {
	u.SetNull(dictmain.FieldCreateBy)
	return u
}

// SetUpdateBy sets the "update_by" field.
func (u *DictMainUpsert) SetUpdateBy(v uint32) *DictMainUpsert {
	u.Set(dictmain.FieldUpdateBy, v)
	return u
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *DictMainUpsert) UpdateUpdateBy() *DictMainUpsert {
	u.SetExcluded(dictmain.FieldUpdateBy)
	return u
}

// AddUpdateBy adds v to the "update_by" field.
func (u *DictMainUpsert) AddUpdateBy(v uint32) *DictMainUpsert {
	u.Add(dictmain.FieldUpdateBy, v)
	return u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *DictMainUpsert) ClearUpdateBy() *DictMainUpsert {
	u.SetNull(dictmain.FieldUpdateBy)
	return u
}

// SetRemark sets the "remark" field.
func (u *DictMainUpsert) SetRemark(v string) *DictMainUpsert {
	u.Set(dictmain.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *DictMainUpsert) UpdateRemark() *DictMainUpsert {
	u.SetExcluded(dictmain.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *DictMainUpsert) ClearRemark() *DictMainUpsert {
	u.SetNull(dictmain.FieldRemark)
	return u
}

// SetCode sets the "code" field.
func (u *DictMainUpsert) SetCode(v string) *DictMainUpsert {
	u.Set(dictmain.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *DictMainUpsert) UpdateCode() *DictMainUpsert {
	u.SetExcluded(dictmain.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *DictMainUpsert) ClearCode() *DictMainUpsert {
	u.SetNull(dictmain.FieldCode)
	return u
}

// SetName sets the "name" field.
func (u *DictMainUpsert) SetName(v string) *DictMainUpsert {
	u.Set(dictmain.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DictMainUpsert) UpdateName() *DictMainUpsert {
	u.SetExcluded(dictmain.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *DictMainUpsert) ClearName() *DictMainUpsert {
	u.SetNull(dictmain.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DictMain.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dictmain.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DictMainUpsertOne) UpdateNewValues() *DictMainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(dictmain.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(dictmain.FieldCreateTime)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(dictmain.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DictMain.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DictMainUpsertOne) Ignore() *DictMainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictMainUpsertOne) DoNothing() *DictMainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictMainCreate.OnConflict
// documentation for more info.
func (u *DictMainUpsertOne) Update(set func(*DictMainUpsert)) *DictMainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictMainUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *DictMainUpsertOne) SetUpdateTime(v time.Time) *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DictMainUpsertOne) UpdateUpdateTime() *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *DictMainUpsertOne) ClearUpdateTime() *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *DictMainUpsertOne) SetDeleteTime(v time.Time) *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *DictMainUpsertOne) UpdateDeleteTime() *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *DictMainUpsertOne) ClearDeleteTime() *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *DictMainUpsertOne) SetCreateBy(v uint32) *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *DictMainUpsertOne) AddCreateBy(v uint32) *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *DictMainUpsertOne) UpdateCreateBy() *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *DictMainUpsertOne) ClearCreateBy() *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *DictMainUpsertOne) SetUpdateBy(v uint32) *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *DictMainUpsertOne) AddUpdateBy(v uint32) *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *DictMainUpsertOne) UpdateUpdateBy() *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *DictMainUpsertOne) ClearUpdateBy() *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *DictMainUpsertOne) SetRemark(v string) *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *DictMainUpsertOne) UpdateRemark() *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *DictMainUpsertOne) ClearRemark() *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.ClearRemark()
	})
}

// SetCode sets the "code" field.
func (u *DictMainUpsertOne) SetCode(v string) *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *DictMainUpsertOne) UpdateCode() *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *DictMainUpsertOne) ClearCode() *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.ClearCode()
	})
}

// SetName sets the "name" field.
func (u *DictMainUpsertOne) SetName(v string) *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DictMainUpsertOne) UpdateName() *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DictMainUpsertOne) ClearName() *DictMainUpsertOne {
	return u.Update(func(s *DictMainUpsert) {
		s.ClearName()
	})
}

// Exec executes the query.
func (u *DictMainUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DictMainCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictMainUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DictMainUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DictMainUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DictMainCreateBulk is the builder for creating many DictMain entities in bulk.
type DictMainCreateBulk struct {
	config
	err      error
	builders []*DictMainCreate
	conflict []sql.ConflictOption
}

// Save creates the DictMain entities in the database.
func (_c *DictMainCreateBulk) Save(ctx context.Context) ([]*DictMain, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*DictMain, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DictMainMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DictMainCreateBulk) SaveX(ctx context.Context) []*DictMain {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DictMainCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DictMainCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DictMain.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictMainUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (_c *DictMainCreateBulk) OnConflict(opts ...sql.ConflictOption) *DictMainUpsertBulk {
	_c.conflict = opts
	return &DictMainUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DictMain.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DictMainCreateBulk) OnConflictColumns(columns ...string) *DictMainUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DictMainUpsertBulk{
		create: _c,
	}
}

// DictMainUpsertBulk is the builder for "upsert"-ing
// a bulk of DictMain nodes.
type DictMainUpsertBulk struct {
	create *DictMainCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DictMain.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dictmain.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DictMainUpsertBulk) UpdateNewValues() *DictMainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(dictmain.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(dictmain.FieldCreateTime)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(dictmain.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DictMain.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DictMainUpsertBulk) Ignore() *DictMainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictMainUpsertBulk) DoNothing() *DictMainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictMainCreateBulk.OnConflict
// documentation for more info.
func (u *DictMainUpsertBulk) Update(set func(*DictMainUpsert)) *DictMainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictMainUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *DictMainUpsertBulk) SetUpdateTime(v time.Time) *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DictMainUpsertBulk) UpdateUpdateTime() *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *DictMainUpsertBulk) ClearUpdateTime() *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *DictMainUpsertBulk) SetDeleteTime(v time.Time) *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *DictMainUpsertBulk) UpdateDeleteTime() *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *DictMainUpsertBulk) ClearDeleteTime() *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *DictMainUpsertBulk) SetCreateBy(v uint32) *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *DictMainUpsertBulk) AddCreateBy(v uint32) *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *DictMainUpsertBulk) UpdateCreateBy() *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *DictMainUpsertBulk) ClearCreateBy() *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *DictMainUpsertBulk) SetUpdateBy(v uint32) *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *DictMainUpsertBulk) AddUpdateBy(v uint32) *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *DictMainUpsertBulk) UpdateUpdateBy() *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *DictMainUpsertBulk) ClearUpdateBy() *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *DictMainUpsertBulk) SetRemark(v string) *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *DictMainUpsertBulk) UpdateRemark() *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *DictMainUpsertBulk) ClearRemark() *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.ClearRemark()
	})
}

// SetCode sets the "code" field.
func (u *DictMainUpsertBulk) SetCode(v string) *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *DictMainUpsertBulk) UpdateCode() *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *DictMainUpsertBulk) ClearCode() *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.ClearCode()
	})
}

// SetName sets the "name" field.
func (u *DictMainUpsertBulk) SetName(v string) *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DictMainUpsertBulk) UpdateName() *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DictMainUpsertBulk) ClearName() *DictMainUpsertBulk {
	return u.Update(func(s *DictMainUpsert) {
		s.ClearName()
	})
}

// Exec executes the query.
func (u *DictMainUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DictMainCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DictMainCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictMainUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

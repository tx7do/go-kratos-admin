syntax = "proto3";

package dict.service.v1;

import "gnostic/openapi/v3/annotations.proto";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

import "pagination/v1/pagination.proto";

// 数据字典管理服务
service DictService {
  // 分页查询字典类型列表
  rpc ListDictType (pagination.PagingRequest) returns (ListDictTypeResponse) {}

  // 查询字典类型详情
  rpc GetDictType (GetDictTypeRequest) returns (DictType) {}

  // 创建字典类型
  rpc CreateDictType (CreateDictTypeRequest) returns (google.protobuf.Empty) {}

  // 更新字典类型
  rpc UpdateDictType (UpdateDictTypeRequest) returns (google.protobuf.Empty) {}

  // 删除字典类型
  rpc DeleteDictType (BatchDeleteDictRequest) returns (google.protobuf.Empty) {}


  // 分页查询字典条目列表
  rpc ListDictEntry (pagination.PagingRequest) returns (ListDictEntryResponse) {}

  // 创建字典条目
  rpc CreateDictEntry (CreateDictEntryRequest) returns (google.protobuf.Empty) {}

  // 更新字典条目
  rpc UpdateDictEntry (UpdateDictEntryRequest) returns (google.protobuf.Empty) {}

  // 删除字典条目
  rpc DeleteDictEntry (BatchDeleteDictRequest) returns (google.protobuf.Empty) {}
}

// 字典类型
message DictType {
  optional uint32 id = 1 [
    json_name = "id",
    (gnostic.openapi.v3.property) = {
      description: "字典类型ID"
    }
  ]; // 字典类型ID

  optional string type_code = 2 [
    json_name = "typeCode",
    (gnostic.openapi.v3.property) = {
      description: "字典类型唯一代码"
    }
  ]; // 字典类型唯一代码

  optional string type_name = 3 [
    json_name = "typeName",
    (gnostic.openapi.v3.property) = {
      description: "字典类型名称"
    }
  ]; // 字典类型名称

  optional bool is_enabled = 4 [
    json_name = "isEnabled",
    (gnostic.openapi.v3.property) = {description: "字典状态"}
  ]; // 字典状态

  optional int32 sort_order = 5 [
    json_name = "sortOrder",
    (gnostic.openapi.v3.property) = {
      description: "排序顺序，值越小越靠前"
    }
  ]; // 排序顺序，值越小越靠前

  optional string description = 6 [
    json_name = "description",
    (gnostic.openapi.v3.property) = {
      description: "描述"
    }
  ]; // 描述

  optional uint32 created_by = 100 [json_name = "createdBy", (gnostic.openapi.v3.property) = {description: "创建者用户ID"}]; // 创建者用户ID
  optional uint32 updated_by = 101 [json_name = "updatedBy", (gnostic.openapi.v3.property) = {description: "更新者用户ID"}]; // 更新者用户ID
  optional uint32 deleted_by = 102 [json_name = "deletedBy", (gnostic.openapi.v3.property) = {description: "删除者用户ID"}]; // 删除者用户ID

  optional google.protobuf.Timestamp created_at = 200 [json_name = "createdAt", (gnostic.openapi.v3.property) = {description: "创建时间"}];// 创建时间
  optional google.protobuf.Timestamp updated_at = 201 [json_name = "updatedAt", (gnostic.openapi.v3.property) = {description: "更新时间"}];// 更新时间
  optional google.protobuf.Timestamp deleted_at = 202 [json_name = "deletedAt", (gnostic.openapi.v3.property) = {description: "删除时间"}];// 删除时间
}

// 字典条目
message DictEntry {
  optional uint32 id = 1 [
    json_name = "id",
    (gnostic.openapi.v3.property) = {
      description: "字典条目ID"
    }
  ]; // 字典条目ID

  optional uint32 type_id = 2 [
    json_name = "typeId",
    (gnostic.openapi.v3.property) = {
      description: "字典类型ID"
    }
  ]; // 字典类型ID

  optional string entry_label = 3 [
    json_name = "entryLabel",
    (gnostic.openapi.v3.property) = {
      description: "字典项的显示标签"
    }
  ]; // 字典项的显示标签

  optional string entry_value = 4 [
    json_name = "entryValue",
    (gnostic.openapi.v3.property) = {
      description: "字典项的实际值"
    }
  ]; // 字典项的实际值

  optional int32 numeric_value = 5 [
    json_name = "numericValue",
    (gnostic.openapi.v3.property) = {
      description: "数值型值"
    }
  ]; // 数值型值

  optional string language_code = 6 [
    json_name = "languageCode",
    (gnostic.openapi.v3.property) = {
      description: "语言代码"
    }
  ]; // 语言代码

  optional bool is_enabled = 7 [
    json_name = "isEnabled",
    (gnostic.openapi.v3.property) = {description: "字典状态"}
  ]; // 字典状态

  optional int32 sort_order = 8 [
    json_name = "sortOrder",
    (gnostic.openapi.v3.property) = {
      description: "排序顺序，值越小越靠前"
    }
  ]; // 排序顺序，值越小越靠前

  optional string description = 9 [
    json_name = "description",
    (gnostic.openapi.v3.property) = {
      description: "描述"
    }
  ]; // 描述

  optional uint32 created_by = 100 [json_name = "createdBy", (gnostic.openapi.v3.property) = {description: "创建者ID"}]; // 创建者ID
  optional uint32 updated_by = 101 [json_name = "updatedBy", (gnostic.openapi.v3.property) = {description: "更新者ID"}]; // 更新者ID
  optional uint32 deleted_by = 102 [json_name = "deletedBy", (gnostic.openapi.v3.property) = {description: "删除者用户ID"}]; // 删除者用户ID

  optional google.protobuf.Timestamp created_at = 200 [json_name = "createdAt", (gnostic.openapi.v3.property) = {description: "创建时间"}];// 创建时间
  optional google.protobuf.Timestamp updated_at = 201 [json_name = "updatedAt", (gnostic.openapi.v3.property) = {description: "更新时间"}];// 更新时间
  optional google.protobuf.Timestamp deleted_at = 202 [json_name = "deletedAt", (gnostic.openapi.v3.property) = {description: "删除时间"}];// 删除时间
}

// 查询字典类型列表 - 回应
message ListDictTypeResponse {
  repeated DictType items = 1;
  uint32 total = 2;
}

// 查询字典类型详情 - 请求
message GetDictTypeRequest {
  oneof query_by {
    uint32 id = 1;
    string code = 2;
  }
}

// 创建字典类型 - 请求
message CreateDictTypeRequest {
  DictType data = 1;
}

// 更新字典类型 - 请求
message UpdateDictTypeRequest {
  DictType data = 1;

  google.protobuf.FieldMask update_mask = 2 [
    (gnostic.openapi.v3.property) = {
      description: "要更新的字段列表",
      example: {yaml : "id,realname,username"}
    },
    json_name = "updateMask"
  ]; // 要更新的字段列表

  optional bool allow_missing = 3 [
    (gnostic.openapi.v3.property) = {description: "如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。"},
    json_name = "allowMissing"
  ]; // 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
}

// 批量删除字典 - 请求
message BatchDeleteDictRequest {
  repeated uint32 ids = 1;  // 要删除的ID列表
}

// 查询字典条目列表 - 回应
message ListDictEntryResponse {
  repeated DictEntry items = 1;
  uint32 total = 2;
}

// 创建字典条目 - 请求
message CreateDictEntryRequest {
  DictEntry data = 1;
}

// 更新字典条目 - 请求
message UpdateDictEntryRequest {
  DictEntry data = 1;

  google.protobuf.FieldMask update_mask = 2 [
    (gnostic.openapi.v3.property) = {
      description: "要更新的字段列表",
      example: {yaml : "id,realname,username"}
    },
    json_name = "updateMask"
  ]; // 要更新的字段列表

  optional bool allow_missing = 3 [
    (gnostic.openapi.v3.property) = {description: "如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。"},
    json_name = "allowMissing"
  ]; // 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
}

// 查询字典条目详情 - 请求
message GetDictEntryRequest {
  oneof query_by {
    uint32 id = 1;
    string code = 2;
  }
}

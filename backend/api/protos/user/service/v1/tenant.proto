syntax = "proto3";

package user.service.v1;

import "gnostic/openapi/v3/annotations.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

import "pagination/v1/pagination.proto";

// 租户服务
service TenantService {
  // 查询租户列表
  rpc List (pagination.PagingRequest) returns (ListTenantResponse) {}

  // 查询租户详情
  rpc Get (GetTenantRequest) returns (Tenant) {}

  // 创建租户
  rpc Create (CreateTenantRequest) returns (google.protobuf.Empty) {}

  // 更新租户
  rpc Update (UpdateTenantRequest) returns (google.protobuf.Empty) {}

  // 删除租户
  rpc Delete (DeleteTenantRequest) returns (google.protobuf.Empty) {}

  // 批量创建租户
  rpc BatchCreate ( BatchCreateTenantsRequest ) returns ( BatchCreateTenantsResponse ) {}

  // 租户是否存在
  rpc TenantExists ( TenantExistsRequest ) returns ( TenantExistsResponse ) {}

  // 根据租户编码获取租户信息
  rpc GetTenantByTenantCode(GetTenantByTenantCodeRequest) returns (Tenant) {}
}

// 租户
message Tenant {
  // 租户状态
  enum Status {
    OFF = 0;         // 禁用
    ON = 1;          // 启用
    EXPIRED = 2;     // 过期
    FREEZE = 3;      // 冻结
  }

  // 租户类型
  enum Type {
    TENANT_TYPE_UNSPECIFIED = 0; // 未指定

    TRIAL = 1;       // 试用
    PAID = 2;        // 付费
    INTERNAL = 3;    // 内部
    PARTNER = 4;     // 合作伙伴
    CUSTOM = 5;      // 定制
  }

  // 租户审核状态
  enum AuditStatus {
    TENANT_AUDIT_STATUS_UNSPECIFIED = 0; // 未指定

    PENDING = 1;      // 待审核
    APPROVED = 2;     // 审核通过
    REJECTED = 3;     // 审核拒绝
  }

  optional uint32 id = 1 [
    json_name = "id",
    (gnostic.openapi.v3.property) = {description: "租户ID"}
  ];  // 租户ID

  optional string name = 2 [
    json_name = "name",
    (gnostic.openapi.v3.property) = {description: "租户名称"}
  ];  // 租户名称

  optional string code = 3 [
    json_name = "code",
    (gnostic.openapi.v3.property) = {description: "租户编码"}
  ];  // 租户编码

  optional string logo_url = 4 [
    json_name = "logoUrl",
    (gnostic.openapi.v3.property) = {description: "租户logo地址"}
  ];  // 租户logo地址

  optional string industry = 5 [
    json_name = "industry",
    (gnostic.openapi.v3.property) = {description: "所属行业（如“互联网”“金融”“制造”）"}
  ];  // 所属行业

  optional Status status = 6 [(gnostic.openapi.v3.property) = {description: "租户状态"}]; // 租户状态
  optional Type type = 7 [(gnostic.openapi.v3.property) = {description: "租户类型"}]; // 租户类型
  optional AuditStatus audit_status = 8 [
    json_name = "auditStatus",
    (gnostic.openapi.v3.property) = {description: "审核状态"}
  ]; // 审核状态

  optional string remark = 9 [
    json_name = "remark",
    (gnostic.openapi.v3.property) = {description: "备注"}
  ]; // 备注

  optional uint32 admin_user_id = 10 [
    json_name = "adminUserId",
    (gnostic.openapi.v3.property) = {description: "管理员用户ID"}
  ];  // 管理员用户ID

  optional string admin_user_name = 11 [
    json_name = "adminUserName",
    (gnostic.openapi.v3.property) = {description: "管理员用户名"}
  ];  // 管理员用户名

  optional google.protobuf.Timestamp subscription_at = 20 [
    json_name = "subscriptionAt",
    (gnostic.openapi.v3.property) = {description: "订阅时间（首次订阅/续费时间，NULL表示未订阅）"}
  ]; // 订阅时间（首次订阅/续费时间，NULL表示未订阅）
  optional google.protobuf.Timestamp unsubscribe_at = 21 [
    json_name = "unsubscribeAt",
    (gnostic.openapi.v3.property) = {description: "取消订阅时间"}
  ]; // 取消订阅时间（NULL表示未取消）
  optional google.protobuf.Timestamp expired_at = 22 [
    json_name = "expiredAt",
    (gnostic.openapi.v3.property) = {description: "租户有效期（NULL表示永久，过期后状态自动改为“过期”）"}
  ]; // 租户有效期（NULL表示永久，过期后状态自动改为“过期”）
  optional string subscription_plan = 23 [
    json_name = "subscriptionPlan",
    (gnostic.openapi.v3.property) = {description: "订阅套餐（如“企业版1年”“基础版3个月”）"}
  ]; // 订阅套餐（如“企业版1年”“基础版3个月”）

  optional int32 member_count = 30 [
    json_name = "memberCount",
    (gnostic.openapi.v3.property) = {description: "成员数量"}
  ];  // 成员数量

  optional google.protobuf.Timestamp last_login_time = 31 [
    json_name = "lastLoginTime",
    (gnostic.openapi.v3.property) = {description: "最后登录时间"}
  ]; // 最后登录时间

  optional string last_login_ip = 32 [
    json_name = "lastLoginIp",
    (gnostic.openapi.v3.property) = {description: "最后登录IP"}
  ]; // 最后登录IP

  optional uint32 parent_id = 50 [json_name = "parentId", (gnostic.openapi.v3.property) = {description: "父节点ID"}];  // 父节点ID
  repeated Tenant children = 51 [json_name = "children", (gnostic.openapi.v3.property) = {description: "子节点树"}];  // 子节点树

  optional uint32 create_by = 100 [json_name = "createBy", (gnostic.openapi.v3.property) = {description: "创建者ID"}]; // 创建者ID
  optional uint32 update_by = 101 [json_name = "updateBy", (gnostic.openapi.v3.property) = {description: "更新者ID"}]; // 更新者ID

  optional google.protobuf.Timestamp create_time = 200 [json_name = "createTime", (gnostic.openapi.v3.property) = {description: "创建时间"}];// 创建时间
  optional google.protobuf.Timestamp update_time = 201 [json_name = "updateTime", (gnostic.openapi.v3.property) = {description: "更新时间"}];// 更新时间
  optional google.protobuf.Timestamp delete_time = 202 [json_name = "deleteTime", (gnostic.openapi.v3.property) = {description: "删除时间"}];// 删除时间
}

// 租户列表 - 答复
message ListTenantResponse {
  repeated Tenant items = 1;
  uint32 total = 2;
}

// 租户数据 - 请求
message GetTenantRequest {
  uint32 id = 1;
}

// 创建租户 - 请求
message CreateTenantRequest {
  Tenant data = 1;
}

// 更新租户 -请求
message UpdateTenantRequest {
  Tenant data = 1;

  google.protobuf.FieldMask update_mask = 2 [
    (gnostic.openapi.v3.property) = {
      description: "要更新的字段列表",
      example: {yaml : "id,realname,username"}
    },
    json_name = "updateMask"
  ]; // 要更新的字段列表

  optional bool allow_missing = 3 [
    (gnostic.openapi.v3.property) = {description: "如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。"},
    json_name = "allowMissing"
  ]; // 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
}

// 删除租户 - 请求
message DeleteTenantRequest {
  uint32 id = 1;
}

message BatchCreateTenantsRequest {
  repeated Tenant data = 1;
}
message BatchCreateTenantsResponse {
  repeated Tenant data = 1;
}

// 租户是否存在 - 请求
message TenantExistsRequest {
  string code = 1 [
    (gnostic.openapi.v3.property) = {description: "租户编码", read_only: true},
    json_name = "code"
  ]; // 租户编码
}
// 租户是否存在 - 答复
message TenantExistsResponse {
  bool exist = 1;
}

message GetTenantByTenantCodeRequest {
  string code = 1 [
    (gnostic.openapi.v3.property) = {description: "租户编码", read_only: true},
    json_name = "code"
  ]; // 租户编码
}

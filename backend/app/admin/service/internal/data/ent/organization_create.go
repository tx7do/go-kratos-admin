// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/organization"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationCreate is the builder for creating a Organization entity.
type OrganizationCreate struct {
	config
	mutation *OrganizationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (_c *OrganizationCreate) SetCreateTime(v time.Time) *OrganizationCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableCreateTime(v *time.Time) *OrganizationCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *OrganizationCreate) SetUpdateTime(v time.Time) *OrganizationCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableUpdateTime(v *time.Time) *OrganizationCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *OrganizationCreate) SetDeleteTime(v time.Time) *OrganizationCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableDeleteTime(v *time.Time) *OrganizationCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *OrganizationCreate) SetCreateBy(v uint32) *OrganizationCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableCreateBy(v *uint32) *OrganizationCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *OrganizationCreate) SetUpdateBy(v uint32) *OrganizationCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableUpdateBy(v *uint32) *OrganizationCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetRemark sets the "remark" field.
func (_c *OrganizationCreate) SetRemark(v string) *OrganizationCreate {
	_c.mutation.SetRemark(v)
	return _c
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableRemark(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetRemark(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *OrganizationCreate) SetTenantID(v uint32) *OrganizationCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableTenantID(v *uint32) *OrganizationCreate {
	if v != nil {
		_c.SetTenantID(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *OrganizationCreate) SetName(v string) *OrganizationCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableName(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetParentID sets the "parent_id" field.
func (_c *OrganizationCreate) SetParentID(v uint32) *OrganizationCreate {
	_c.mutation.SetParentID(v)
	return _c
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableParentID(v *uint32) *OrganizationCreate {
	if v != nil {
		_c.SetParentID(*v)
	}
	return _c
}

// SetSortID sets the "sort_id" field.
func (_c *OrganizationCreate) SetSortID(v int32) *OrganizationCreate {
	_c.mutation.SetSortID(v)
	return _c
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableSortID(v *int32) *OrganizationCreate {
	if v != nil {
		_c.SetSortID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *OrganizationCreate) SetStatus(v organization.Status) *OrganizationCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableStatus(v *organization.Status) *OrganizationCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetOrganizationType sets the "organization_type" field.
func (_c *OrganizationCreate) SetOrganizationType(v organization.OrganizationType) *OrganizationCreate {
	_c.mutation.SetOrganizationType(v)
	return _c
}

// SetNillableOrganizationType sets the "organization_type" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableOrganizationType(v *organization.OrganizationType) *OrganizationCreate {
	if v != nil {
		_c.SetOrganizationType(*v)
	}
	return _c
}

// SetCreditCode sets the "credit_code" field.
func (_c *OrganizationCreate) SetCreditCode(v string) *OrganizationCreate {
	_c.mutation.SetCreditCode(v)
	return _c
}

// SetNillableCreditCode sets the "credit_code" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableCreditCode(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetCreditCode(*v)
	}
	return _c
}

// SetAddress sets the "address" field.
func (_c *OrganizationCreate) SetAddress(v string) *OrganizationCreate {
	_c.mutation.SetAddress(v)
	return _c
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableAddress(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetAddress(*v)
	}
	return _c
}

// SetBusinessScope sets the "business_scope" field.
func (_c *OrganizationCreate) SetBusinessScope(v string) *OrganizationCreate {
	_c.mutation.SetBusinessScope(v)
	return _c
}

// SetNillableBusinessScope sets the "business_scope" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableBusinessScope(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetBusinessScope(*v)
	}
	return _c
}

// SetIsLegalEntity sets the "is_legal_entity" field.
func (_c *OrganizationCreate) SetIsLegalEntity(v bool) *OrganizationCreate {
	_c.mutation.SetIsLegalEntity(v)
	return _c
}

// SetNillableIsLegalEntity sets the "is_legal_entity" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableIsLegalEntity(v *bool) *OrganizationCreate {
	if v != nil {
		_c.SetIsLegalEntity(*v)
	}
	return _c
}

// SetManagerID sets the "manager_id" field.
func (_c *OrganizationCreate) SetManagerID(v uint32) *OrganizationCreate {
	_c.mutation.SetManagerID(v)
	return _c
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableManagerID(v *uint32) *OrganizationCreate {
	if v != nil {
		_c.SetManagerID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *OrganizationCreate) SetID(v uint32) *OrganizationCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetParent sets the "parent" edge to the Organization entity.
func (_c *OrganizationCreate) SetParent(v *Organization) *OrganizationCreate {
	return _c.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Organization entity by IDs.
func (_c *OrganizationCreate) AddChildIDs(ids ...uint32) *OrganizationCreate {
	_c.mutation.AddChildIDs(ids...)
	return _c
}

// AddChildren adds the "children" edges to the Organization entity.
func (_c *OrganizationCreate) AddChildren(v ...*Organization) *OrganizationCreate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (_c *OrganizationCreate) Mutation() *OrganizationMutation {
	return _c.mutation
}

// Save creates the Organization in the database.
func (_c *OrganizationCreate) Save(ctx context.Context) (*Organization, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OrganizationCreate) SaveX(ctx context.Context) *Organization {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrganizationCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrganizationCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OrganizationCreate) defaults() {
	if _, ok := _c.mutation.Remark(); !ok {
		v := organization.DefaultRemark
		_c.mutation.SetRemark(v)
	}
	if _, ok := _c.mutation.SortID(); !ok {
		v := organization.DefaultSortID
		_c.mutation.SetSortID(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := organization.DefaultStatus
		_c.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OrganizationCreate) check() error {
	if v, ok := _c.mutation.TenantID(); ok {
		if err := organization.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Organization.tenant_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := organization.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Organization.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.OrganizationType(); ok {
		if err := organization.OrganizationTypeValidator(v); err != nil {
			return &ValidationError{Name: "organization_type", err: fmt.Errorf(`ent: validator failed for field "Organization.organization_type": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := organization.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Organization.id": %w`, err)}
		}
	}
	return nil
}

func (_c *OrganizationCreate) sqlSave(ctx context.Context) (*Organization, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OrganizationCreate) createSpec() (*Organization, *sqlgraph.CreateSpec) {
	var (
		_node = &Organization{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(organization.Table, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(organization.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(organization.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(organization.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(organization.FieldCreateBy, field.TypeUint32, value)
		_node.CreateBy = &value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(organization.FieldUpdateBy, field.TypeUint32, value)
		_node.UpdateBy = &value
	}
	if value, ok := _c.mutation.Remark(); ok {
		_spec.SetField(organization.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(organization.FieldTenantID, field.TypeUint32, value)
		_node.TenantID = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := _c.mutation.SortID(); ok {
		_spec.SetField(organization.FieldSortID, field.TypeInt32, value)
		_node.SortID = &value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(organization.FieldStatus, field.TypeEnum, value)
		_node.Status = &value
	}
	if value, ok := _c.mutation.OrganizationType(); ok {
		_spec.SetField(organization.FieldOrganizationType, field.TypeEnum, value)
		_node.OrganizationType = &value
	}
	if value, ok := _c.mutation.CreditCode(); ok {
		_spec.SetField(organization.FieldCreditCode, field.TypeString, value)
		_node.CreditCode = &value
	}
	if value, ok := _c.mutation.Address(); ok {
		_spec.SetField(organization.FieldAddress, field.TypeString, value)
		_node.Address = &value
	}
	if value, ok := _c.mutation.BusinessScope(); ok {
		_spec.SetField(organization.FieldBusinessScope, field.TypeString, value)
		_node.BusinessScope = &value
	}
	if value, ok := _c.mutation.IsLegalEntity(); ok {
		_spec.SetField(organization.FieldIsLegalEntity, field.TypeBool, value)
		_node.IsLegalEntity = &value
	}
	if value, ok := _c.mutation.ManagerID(); ok {
		_spec.SetField(organization.FieldManagerID, field.TypeUint32, value)
		_node.ManagerID = &value
	}
	if nodes := _c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.ParentTable,
			Columns: []string{organization.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Organization.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrganizationUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (_c *OrganizationCreate) OnConflict(opts ...sql.ConflictOption) *OrganizationUpsertOne {
	_c.conflict = opts
	return &OrganizationUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrganizationCreate) OnConflictColumns(columns ...string) *OrganizationUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrganizationUpsertOne{
		create: _c,
	}
}

type (
	// OrganizationUpsertOne is the builder for "upsert"-ing
	//  one Organization node.
	OrganizationUpsertOne struct {
		create *OrganizationCreate
	}

	// OrganizationUpsert is the "OnConflict" setter.
	OrganizationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *OrganizationUpsert) SetUpdateTime(v time.Time) *OrganizationUpsert {
	u.Set(organization.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateUpdateTime() *OrganizationUpsert {
	u.SetExcluded(organization.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *OrganizationUpsert) ClearUpdateTime() *OrganizationUpsert {
	u.SetNull(organization.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *OrganizationUpsert) SetDeleteTime(v time.Time) *OrganizationUpsert {
	u.Set(organization.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateDeleteTime() *OrganizationUpsert {
	u.SetExcluded(organization.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *OrganizationUpsert) ClearDeleteTime() *OrganizationUpsert {
	u.SetNull(organization.FieldDeleteTime)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *OrganizationUpsert) SetCreateBy(v uint32) *OrganizationUpsert {
	u.Set(organization.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateCreateBy() *OrganizationUpsert {
	u.SetExcluded(organization.FieldCreateBy)
	return u
}

// AddCreateBy adds v to the "create_by" field.
func (u *OrganizationUpsert) AddCreateBy(v uint32) *OrganizationUpsert {
	u.Add(organization.FieldCreateBy, v)
	return u
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *OrganizationUpsert) ClearCreateBy() *OrganizationUpsert {
	u.SetNull(organization.FieldCreateBy)
	return u
}

// SetUpdateBy sets the "update_by" field.
func (u *OrganizationUpsert) SetUpdateBy(v uint32) *OrganizationUpsert {
	u.Set(organization.FieldUpdateBy, v)
	return u
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateUpdateBy() *OrganizationUpsert {
	u.SetExcluded(organization.FieldUpdateBy)
	return u
}

// AddUpdateBy adds v to the "update_by" field.
func (u *OrganizationUpsert) AddUpdateBy(v uint32) *OrganizationUpsert {
	u.Add(organization.FieldUpdateBy, v)
	return u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *OrganizationUpsert) ClearUpdateBy() *OrganizationUpsert {
	u.SetNull(organization.FieldUpdateBy)
	return u
}

// SetRemark sets the "remark" field.
func (u *OrganizationUpsert) SetRemark(v string) *OrganizationUpsert {
	u.Set(organization.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateRemark() *OrganizationUpsert {
	u.SetExcluded(organization.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *OrganizationUpsert) ClearRemark() *OrganizationUpsert {
	u.SetNull(organization.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *OrganizationUpsert) SetName(v string) *OrganizationUpsert {
	u.Set(organization.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateName() *OrganizationUpsert {
	u.SetExcluded(organization.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *OrganizationUpsert) ClearName() *OrganizationUpsert {
	u.SetNull(organization.FieldName)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *OrganizationUpsert) SetParentID(v uint32) *OrganizationUpsert {
	u.Set(organization.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateParentID() *OrganizationUpsert {
	u.SetExcluded(organization.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *OrganizationUpsert) ClearParentID() *OrganizationUpsert {
	u.SetNull(organization.FieldParentID)
	return u
}

// SetSortID sets the "sort_id" field.
func (u *OrganizationUpsert) SetSortID(v int32) *OrganizationUpsert {
	u.Set(organization.FieldSortID, v)
	return u
}

// UpdateSortID sets the "sort_id" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateSortID() *OrganizationUpsert {
	u.SetExcluded(organization.FieldSortID)
	return u
}

// AddSortID adds v to the "sort_id" field.
func (u *OrganizationUpsert) AddSortID(v int32) *OrganizationUpsert {
	u.Add(organization.FieldSortID, v)
	return u
}

// ClearSortID clears the value of the "sort_id" field.
func (u *OrganizationUpsert) ClearSortID() *OrganizationUpsert {
	u.SetNull(organization.FieldSortID)
	return u
}

// SetStatus sets the "status" field.
func (u *OrganizationUpsert) SetStatus(v organization.Status) *OrganizationUpsert {
	u.Set(organization.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateStatus() *OrganizationUpsert {
	u.SetExcluded(organization.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *OrganizationUpsert) ClearStatus() *OrganizationUpsert {
	u.SetNull(organization.FieldStatus)
	return u
}

// SetOrganizationType sets the "organization_type" field.
func (u *OrganizationUpsert) SetOrganizationType(v organization.OrganizationType) *OrganizationUpsert {
	u.Set(organization.FieldOrganizationType, v)
	return u
}

// UpdateOrganizationType sets the "organization_type" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateOrganizationType() *OrganizationUpsert {
	u.SetExcluded(organization.FieldOrganizationType)
	return u
}

// ClearOrganizationType clears the value of the "organization_type" field.
func (u *OrganizationUpsert) ClearOrganizationType() *OrganizationUpsert {
	u.SetNull(organization.FieldOrganizationType)
	return u
}

// SetCreditCode sets the "credit_code" field.
func (u *OrganizationUpsert) SetCreditCode(v string) *OrganizationUpsert {
	u.Set(organization.FieldCreditCode, v)
	return u
}

// UpdateCreditCode sets the "credit_code" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateCreditCode() *OrganizationUpsert {
	u.SetExcluded(organization.FieldCreditCode)
	return u
}

// ClearCreditCode clears the value of the "credit_code" field.
func (u *OrganizationUpsert) ClearCreditCode() *OrganizationUpsert {
	u.SetNull(organization.FieldCreditCode)
	return u
}

// SetAddress sets the "address" field.
func (u *OrganizationUpsert) SetAddress(v string) *OrganizationUpsert {
	u.Set(organization.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateAddress() *OrganizationUpsert {
	u.SetExcluded(organization.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *OrganizationUpsert) ClearAddress() *OrganizationUpsert {
	u.SetNull(organization.FieldAddress)
	return u
}

// SetBusinessScope sets the "business_scope" field.
func (u *OrganizationUpsert) SetBusinessScope(v string) *OrganizationUpsert {
	u.Set(organization.FieldBusinessScope, v)
	return u
}

// UpdateBusinessScope sets the "business_scope" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateBusinessScope() *OrganizationUpsert {
	u.SetExcluded(organization.FieldBusinessScope)
	return u
}

// ClearBusinessScope clears the value of the "business_scope" field.
func (u *OrganizationUpsert) ClearBusinessScope() *OrganizationUpsert {
	u.SetNull(organization.FieldBusinessScope)
	return u
}

// SetIsLegalEntity sets the "is_legal_entity" field.
func (u *OrganizationUpsert) SetIsLegalEntity(v bool) *OrganizationUpsert {
	u.Set(organization.FieldIsLegalEntity, v)
	return u
}

// UpdateIsLegalEntity sets the "is_legal_entity" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateIsLegalEntity() *OrganizationUpsert {
	u.SetExcluded(organization.FieldIsLegalEntity)
	return u
}

// ClearIsLegalEntity clears the value of the "is_legal_entity" field.
func (u *OrganizationUpsert) ClearIsLegalEntity() *OrganizationUpsert {
	u.SetNull(organization.FieldIsLegalEntity)
	return u
}

// SetManagerID sets the "manager_id" field.
func (u *OrganizationUpsert) SetManagerID(v uint32) *OrganizationUpsert {
	u.Set(organization.FieldManagerID, v)
	return u
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateManagerID() *OrganizationUpsert {
	u.SetExcluded(organization.FieldManagerID)
	return u
}

// AddManagerID adds v to the "manager_id" field.
func (u *OrganizationUpsert) AddManagerID(v uint32) *OrganizationUpsert {
	u.Add(organization.FieldManagerID, v)
	return u
}

// ClearManagerID clears the value of the "manager_id" field.
func (u *OrganizationUpsert) ClearManagerID() *OrganizationUpsert {
	u.SetNull(organization.FieldManagerID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(organization.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrganizationUpsertOne) UpdateNewValues() *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(organization.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(organization.FieldCreateTime)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(organization.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Organization.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrganizationUpsertOne) Ignore() *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrganizationUpsertOne) DoNothing() *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrganizationCreate.OnConflict
// documentation for more info.
func (u *OrganizationUpsertOne) Update(set func(*OrganizationUpsert)) *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrganizationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *OrganizationUpsertOne) SetUpdateTime(v time.Time) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateUpdateTime() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *OrganizationUpsertOne) ClearUpdateTime() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *OrganizationUpsertOne) SetDeleteTime(v time.Time) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateDeleteTime() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *OrganizationUpsertOne) ClearDeleteTime() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *OrganizationUpsertOne) SetCreateBy(v uint32) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *OrganizationUpsertOne) AddCreateBy(v uint32) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateCreateBy() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *OrganizationUpsertOne) ClearCreateBy() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *OrganizationUpsertOne) SetUpdateBy(v uint32) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *OrganizationUpsertOne) AddUpdateBy(v uint32) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateUpdateBy() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *OrganizationUpsertOne) ClearUpdateBy() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *OrganizationUpsertOne) SetRemark(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateRemark() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *OrganizationUpsertOne) ClearRemark() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *OrganizationUpsertOne) SetName(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateName() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *OrganizationUpsertOne) ClearName() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearName()
	})
}

// SetParentID sets the "parent_id" field.
func (u *OrganizationUpsertOne) SetParentID(v uint32) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateParentID() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *OrganizationUpsertOne) ClearParentID() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearParentID()
	})
}

// SetSortID sets the "sort_id" field.
func (u *OrganizationUpsertOne) SetSortID(v int32) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetSortID(v)
	})
}

// AddSortID adds v to the "sort_id" field.
func (u *OrganizationUpsertOne) AddSortID(v int32) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddSortID(v)
	})
}

// UpdateSortID sets the "sort_id" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateSortID() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateSortID()
	})
}

// ClearSortID clears the value of the "sort_id" field.
func (u *OrganizationUpsertOne) ClearSortID() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearSortID()
	})
}

// SetStatus sets the "status" field.
func (u *OrganizationUpsertOne) SetStatus(v organization.Status) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateStatus() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *OrganizationUpsertOne) ClearStatus() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearStatus()
	})
}

// SetOrganizationType sets the "organization_type" field.
func (u *OrganizationUpsertOne) SetOrganizationType(v organization.OrganizationType) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetOrganizationType(v)
	})
}

// UpdateOrganizationType sets the "organization_type" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateOrganizationType() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateOrganizationType()
	})
}

// ClearOrganizationType clears the value of the "organization_type" field.
func (u *OrganizationUpsertOne) ClearOrganizationType() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearOrganizationType()
	})
}

// SetCreditCode sets the "credit_code" field.
func (u *OrganizationUpsertOne) SetCreditCode(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetCreditCode(v)
	})
}

// UpdateCreditCode sets the "credit_code" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateCreditCode() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateCreditCode()
	})
}

// ClearCreditCode clears the value of the "credit_code" field.
func (u *OrganizationUpsertOne) ClearCreditCode() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearCreditCode()
	})
}

// SetAddress sets the "address" field.
func (u *OrganizationUpsertOne) SetAddress(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateAddress() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *OrganizationUpsertOne) ClearAddress() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearAddress()
	})
}

// SetBusinessScope sets the "business_scope" field.
func (u *OrganizationUpsertOne) SetBusinessScope(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetBusinessScope(v)
	})
}

// UpdateBusinessScope sets the "business_scope" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateBusinessScope() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateBusinessScope()
	})
}

// ClearBusinessScope clears the value of the "business_scope" field.
func (u *OrganizationUpsertOne) ClearBusinessScope() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearBusinessScope()
	})
}

// SetIsLegalEntity sets the "is_legal_entity" field.
func (u *OrganizationUpsertOne) SetIsLegalEntity(v bool) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetIsLegalEntity(v)
	})
}

// UpdateIsLegalEntity sets the "is_legal_entity" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateIsLegalEntity() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateIsLegalEntity()
	})
}

// ClearIsLegalEntity clears the value of the "is_legal_entity" field.
func (u *OrganizationUpsertOne) ClearIsLegalEntity() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearIsLegalEntity()
	})
}

// SetManagerID sets the "manager_id" field.
func (u *OrganizationUpsertOne) SetManagerID(v uint32) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetManagerID(v)
	})
}

// AddManagerID adds v to the "manager_id" field.
func (u *OrganizationUpsertOne) AddManagerID(v uint32) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddManagerID(v)
	})
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateManagerID() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateManagerID()
	})
}

// ClearManagerID clears the value of the "manager_id" field.
func (u *OrganizationUpsertOne) ClearManagerID() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearManagerID()
	})
}

// Exec executes the query.
func (u *OrganizationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrganizationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrganizationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrganizationUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrganizationUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrganizationCreateBulk is the builder for creating many Organization entities in bulk.
type OrganizationCreateBulk struct {
	config
	err      error
	builders []*OrganizationCreate
	conflict []sql.ConflictOption
}

// Save creates the Organization entities in the database.
func (_c *OrganizationCreateBulk) Save(ctx context.Context) ([]*Organization, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Organization, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OrganizationCreateBulk) SaveX(ctx context.Context) []*Organization {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrganizationCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrganizationCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Organization.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrganizationUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (_c *OrganizationCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrganizationUpsertBulk {
	_c.conflict = opts
	return &OrganizationUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrganizationCreateBulk) OnConflictColumns(columns ...string) *OrganizationUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrganizationUpsertBulk{
		create: _c,
	}
}

// OrganizationUpsertBulk is the builder for "upsert"-ing
// a bulk of Organization nodes.
type OrganizationUpsertBulk struct {
	create *OrganizationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(organization.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrganizationUpsertBulk) UpdateNewValues() *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(organization.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(organization.FieldCreateTime)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(organization.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrganizationUpsertBulk) Ignore() *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrganizationUpsertBulk) DoNothing() *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrganizationCreateBulk.OnConflict
// documentation for more info.
func (u *OrganizationUpsertBulk) Update(set func(*OrganizationUpsert)) *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrganizationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *OrganizationUpsertBulk) SetUpdateTime(v time.Time) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateUpdateTime() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *OrganizationUpsertBulk) ClearUpdateTime() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *OrganizationUpsertBulk) SetDeleteTime(v time.Time) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateDeleteTime() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *OrganizationUpsertBulk) ClearDeleteTime() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *OrganizationUpsertBulk) SetCreateBy(v uint32) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *OrganizationUpsertBulk) AddCreateBy(v uint32) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateCreateBy() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *OrganizationUpsertBulk) ClearCreateBy() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *OrganizationUpsertBulk) SetUpdateBy(v uint32) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *OrganizationUpsertBulk) AddUpdateBy(v uint32) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateUpdateBy() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *OrganizationUpsertBulk) ClearUpdateBy() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *OrganizationUpsertBulk) SetRemark(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateRemark() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *OrganizationUpsertBulk) ClearRemark() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *OrganizationUpsertBulk) SetName(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateName() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *OrganizationUpsertBulk) ClearName() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearName()
	})
}

// SetParentID sets the "parent_id" field.
func (u *OrganizationUpsertBulk) SetParentID(v uint32) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateParentID() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *OrganizationUpsertBulk) ClearParentID() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearParentID()
	})
}

// SetSortID sets the "sort_id" field.
func (u *OrganizationUpsertBulk) SetSortID(v int32) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetSortID(v)
	})
}

// AddSortID adds v to the "sort_id" field.
func (u *OrganizationUpsertBulk) AddSortID(v int32) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddSortID(v)
	})
}

// UpdateSortID sets the "sort_id" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateSortID() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateSortID()
	})
}

// ClearSortID clears the value of the "sort_id" field.
func (u *OrganizationUpsertBulk) ClearSortID() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearSortID()
	})
}

// SetStatus sets the "status" field.
func (u *OrganizationUpsertBulk) SetStatus(v organization.Status) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateStatus() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *OrganizationUpsertBulk) ClearStatus() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearStatus()
	})
}

// SetOrganizationType sets the "organization_type" field.
func (u *OrganizationUpsertBulk) SetOrganizationType(v organization.OrganizationType) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetOrganizationType(v)
	})
}

// UpdateOrganizationType sets the "organization_type" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateOrganizationType() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateOrganizationType()
	})
}

// ClearOrganizationType clears the value of the "organization_type" field.
func (u *OrganizationUpsertBulk) ClearOrganizationType() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearOrganizationType()
	})
}

// SetCreditCode sets the "credit_code" field.
func (u *OrganizationUpsertBulk) SetCreditCode(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetCreditCode(v)
	})
}

// UpdateCreditCode sets the "credit_code" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateCreditCode() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateCreditCode()
	})
}

// ClearCreditCode clears the value of the "credit_code" field.
func (u *OrganizationUpsertBulk) ClearCreditCode() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearCreditCode()
	})
}

// SetAddress sets the "address" field.
func (u *OrganizationUpsertBulk) SetAddress(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateAddress() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *OrganizationUpsertBulk) ClearAddress() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearAddress()
	})
}

// SetBusinessScope sets the "business_scope" field.
func (u *OrganizationUpsertBulk) SetBusinessScope(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetBusinessScope(v)
	})
}

// UpdateBusinessScope sets the "business_scope" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateBusinessScope() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateBusinessScope()
	})
}

// ClearBusinessScope clears the value of the "business_scope" field.
func (u *OrganizationUpsertBulk) ClearBusinessScope() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearBusinessScope()
	})
}

// SetIsLegalEntity sets the "is_legal_entity" field.
func (u *OrganizationUpsertBulk) SetIsLegalEntity(v bool) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetIsLegalEntity(v)
	})
}

// UpdateIsLegalEntity sets the "is_legal_entity" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateIsLegalEntity() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateIsLegalEntity()
	})
}

// ClearIsLegalEntity clears the value of the "is_legal_entity" field.
func (u *OrganizationUpsertBulk) ClearIsLegalEntity() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearIsLegalEntity()
	})
}

// SetManagerID sets the "manager_id" field.
func (u *OrganizationUpsertBulk) SetManagerID(v uint32) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetManagerID(v)
	})
}

// AddManagerID adds v to the "manager_id" field.
func (u *OrganizationUpsertBulk) AddManagerID(v uint32) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddManagerID(v)
	})
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateManagerID() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateManagerID()
	})
}

// ClearManagerID clears the value of the "manager_id" field.
func (u *OrganizationUpsertBulk) ClearManagerID() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearManagerID()
	})
}

// Exec executes the query.
func (u *OrganizationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrganizationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrganizationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrganizationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

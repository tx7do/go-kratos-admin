// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"kratos-admin/app/admin/service/internal/data/ent/role"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks     []Hook
	mutation  *RoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RoleUpdate builder.
func (_u *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RoleUpdate) SetUpdatedAt(v time.Time) *RoleUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableUpdatedAt(v *time.Time) *RoleUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *RoleUpdate) ClearUpdatedAt() *RoleUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *RoleUpdate) SetDeletedAt(v time.Time) *RoleUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableDeletedAt(v *time.Time) *RoleUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *RoleUpdate) ClearDeletedAt() *RoleUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *RoleUpdate) SetCreatedBy(v uint32) *RoleUpdate {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableCreatedBy(v *uint32) *RoleUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *RoleUpdate) AddCreatedBy(v int32) *RoleUpdate {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *RoleUpdate) ClearCreatedBy() *RoleUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *RoleUpdate) SetUpdatedBy(v uint32) *RoleUpdate {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableUpdatedBy(v *uint32) *RoleUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *RoleUpdate) AddUpdatedBy(v int32) *RoleUpdate {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *RoleUpdate) ClearUpdatedBy() *RoleUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *RoleUpdate) SetDeletedBy(v uint32) *RoleUpdate {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableDeletedBy(v *uint32) *RoleUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *RoleUpdate) AddDeletedBy(v int32) *RoleUpdate {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *RoleUpdate) ClearDeletedBy() *RoleUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *RoleUpdate) SetRemark(v string) *RoleUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableRemark(v *string) *RoleUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *RoleUpdate) ClearRemark() *RoleUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetName sets the "name" field.
func (_u *RoleUpdate) SetName(v string) *RoleUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableName(v *string) *RoleUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *RoleUpdate) ClearName() *RoleUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetCode sets the "code" field.
func (_u *RoleUpdate) SetCode(v string) *RoleUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableCode(v *string) *RoleUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *RoleUpdate) ClearCode() *RoleUpdate {
	_u.mutation.ClearCode()
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *RoleUpdate) SetParentID(v uint32) *RoleUpdate {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableParentID(v *uint32) *RoleUpdate {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *RoleUpdate) ClearParentID() *RoleUpdate {
	_u.mutation.ClearParentID()
	return _u
}

// SetSortOrder sets the "sort_order" field.
func (_u *RoleUpdate) SetSortOrder(v int32) *RoleUpdate {
	_u.mutation.ResetSortOrder()
	_u.mutation.SetSortOrder(v)
	return _u
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableSortOrder(v *int32) *RoleUpdate {
	if v != nil {
		_u.SetSortOrder(*v)
	}
	return _u
}

// AddSortOrder adds value to the "sort_order" field.
func (_u *RoleUpdate) AddSortOrder(v int32) *RoleUpdate {
	_u.mutation.AddSortOrder(v)
	return _u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (_u *RoleUpdate) ClearSortOrder() *RoleUpdate {
	_u.mutation.ClearSortOrder()
	return _u
}

// SetMenus sets the "menus" field.
func (_u *RoleUpdate) SetMenus(v []uint32) *RoleUpdate {
	_u.mutation.SetMenus(v)
	return _u
}

// AppendMenus appends value to the "menus" field.
func (_u *RoleUpdate) AppendMenus(v []uint32) *RoleUpdate {
	_u.mutation.AppendMenus(v)
	return _u
}

// ClearMenus clears the value of the "menus" field.
func (_u *RoleUpdate) ClearMenus() *RoleUpdate {
	_u.mutation.ClearMenus()
	return _u
}

// SetApis sets the "apis" field.
func (_u *RoleUpdate) SetApis(v []uint32) *RoleUpdate {
	_u.mutation.SetApis(v)
	return _u
}

// AppendApis appends value to the "apis" field.
func (_u *RoleUpdate) AppendApis(v []uint32) *RoleUpdate {
	_u.mutation.AppendApis(v)
	return _u
}

// ClearApis clears the value of the "apis" field.
func (_u *RoleUpdate) ClearApis() *RoleUpdate {
	_u.mutation.ClearApis()
	return _u
}

// SetDataScope sets the "data_scope" field.
func (_u *RoleUpdate) SetDataScope(v role.DataScope) *RoleUpdate {
	_u.mutation.SetDataScope(v)
	return _u
}

// SetNillableDataScope sets the "data_scope" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableDataScope(v *role.DataScope) *RoleUpdate {
	if v != nil {
		_u.SetDataScope(*v)
	}
	return _u
}

// ClearDataScope clears the value of the "data_scope" field.
func (_u *RoleUpdate) ClearDataScope() *RoleUpdate {
	_u.mutation.ClearDataScope()
	return _u
}

// SetStatus sets the "status" field.
func (_u *RoleUpdate) SetStatus(v role.Status) *RoleUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableStatus(v *role.Status) *RoleUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *RoleUpdate) ClearStatus() *RoleUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetParent sets the "parent" edge to the Role entity.
func (_u *RoleUpdate) SetParent(v *Role) *RoleUpdate {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Role entity by IDs.
func (_u *RoleUpdate) AddChildIDs(ids ...uint32) *RoleUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Role entity.
func (_u *RoleUpdate) AddChildren(v ...*Role) *RoleUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (_u *RoleUpdate) Mutation() *RoleMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Role entity.
func (_u *RoleUpdate) ClearParent() *RoleUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Role entity.
func (_u *RoleUpdate) ClearChildren() *RoleUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Role entities by IDs.
func (_u *RoleUpdate) RemoveChildIDs(ids ...uint32) *RoleUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Role entities.
func (_u *RoleUpdate) RemoveChildren(v ...*Role) *RoleUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RoleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RoleUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RoleUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := role.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Role.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := role.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Role.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DataScope(); ok {
		if err := role.DataScopeValidator(v); err != nil {
			return &ValidationError{Name: "data_scope", err: fmt.Errorf(`ent: validator failed for field "Role.data_scope": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := role.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Role.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RoleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RoleUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(role.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(role.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(role.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(role.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(role.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(role.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(role.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(role.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(role.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(role.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(role.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(role.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(role.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(role.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(role.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(role.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(role.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(role.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(role.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.SortOrder(); ok {
		_spec.SetField(role.FieldSortOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortOrder(); ok {
		_spec.AddField(role.FieldSortOrder, field.TypeInt32, value)
	}
	if _u.mutation.SortOrderCleared() {
		_spec.ClearField(role.FieldSortOrder, field.TypeInt32)
	}
	if value, ok := _u.mutation.Menus(); ok {
		_spec.SetField(role.FieldMenus, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMenus(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, role.FieldMenus, value)
		})
	}
	if _u.mutation.MenusCleared() {
		_spec.ClearField(role.FieldMenus, field.TypeJSON)
	}
	if value, ok := _u.mutation.Apis(); ok {
		_spec.SetField(role.FieldApis, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedApis(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, role.FieldApis, value)
		})
	}
	if _u.mutation.ApisCleared() {
		_spec.ClearField(role.FieldApis, field.TypeJSON)
	}
	if value, ok := _u.mutation.DataScope(); ok {
		_spec.SetField(role.FieldDataScope, field.TypeEnum, value)
	}
	if _u.mutation.DataScopeCleared() {
		_spec.ClearField(role.FieldDataScope, field.TypeEnum)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(role.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(role.FieldStatus, field.TypeEnum)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.ParentTable,
			Columns: []string{role.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.ParentTable,
			Columns: []string{role.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RoleUpdateOne) SetUpdatedAt(v time.Time) *RoleUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableUpdatedAt(v *time.Time) *RoleUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *RoleUpdateOne) ClearUpdatedAt() *RoleUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *RoleUpdateOne) SetDeletedAt(v time.Time) *RoleUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableDeletedAt(v *time.Time) *RoleUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *RoleUpdateOne) ClearDeletedAt() *RoleUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *RoleUpdateOne) SetCreatedBy(v uint32) *RoleUpdateOne {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableCreatedBy(v *uint32) *RoleUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *RoleUpdateOne) AddCreatedBy(v int32) *RoleUpdateOne {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *RoleUpdateOne) ClearCreatedBy() *RoleUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *RoleUpdateOne) SetUpdatedBy(v uint32) *RoleUpdateOne {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableUpdatedBy(v *uint32) *RoleUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *RoleUpdateOne) AddUpdatedBy(v int32) *RoleUpdateOne {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *RoleUpdateOne) ClearUpdatedBy() *RoleUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *RoleUpdateOne) SetDeletedBy(v uint32) *RoleUpdateOne {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableDeletedBy(v *uint32) *RoleUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *RoleUpdateOne) AddDeletedBy(v int32) *RoleUpdateOne {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *RoleUpdateOne) ClearDeletedBy() *RoleUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *RoleUpdateOne) SetRemark(v string) *RoleUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableRemark(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *RoleUpdateOne) ClearRemark() *RoleUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetName sets the "name" field.
func (_u *RoleUpdateOne) SetName(v string) *RoleUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableName(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *RoleUpdateOne) ClearName() *RoleUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetCode sets the "code" field.
func (_u *RoleUpdateOne) SetCode(v string) *RoleUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableCode(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *RoleUpdateOne) ClearCode() *RoleUpdateOne {
	_u.mutation.ClearCode()
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *RoleUpdateOne) SetParentID(v uint32) *RoleUpdateOne {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableParentID(v *uint32) *RoleUpdateOne {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *RoleUpdateOne) ClearParentID() *RoleUpdateOne {
	_u.mutation.ClearParentID()
	return _u
}

// SetSortOrder sets the "sort_order" field.
func (_u *RoleUpdateOne) SetSortOrder(v int32) *RoleUpdateOne {
	_u.mutation.ResetSortOrder()
	_u.mutation.SetSortOrder(v)
	return _u
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableSortOrder(v *int32) *RoleUpdateOne {
	if v != nil {
		_u.SetSortOrder(*v)
	}
	return _u
}

// AddSortOrder adds value to the "sort_order" field.
func (_u *RoleUpdateOne) AddSortOrder(v int32) *RoleUpdateOne {
	_u.mutation.AddSortOrder(v)
	return _u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (_u *RoleUpdateOne) ClearSortOrder() *RoleUpdateOne {
	_u.mutation.ClearSortOrder()
	return _u
}

// SetMenus sets the "menus" field.
func (_u *RoleUpdateOne) SetMenus(v []uint32) *RoleUpdateOne {
	_u.mutation.SetMenus(v)
	return _u
}

// AppendMenus appends value to the "menus" field.
func (_u *RoleUpdateOne) AppendMenus(v []uint32) *RoleUpdateOne {
	_u.mutation.AppendMenus(v)
	return _u
}

// ClearMenus clears the value of the "menus" field.
func (_u *RoleUpdateOne) ClearMenus() *RoleUpdateOne {
	_u.mutation.ClearMenus()
	return _u
}

// SetApis sets the "apis" field.
func (_u *RoleUpdateOne) SetApis(v []uint32) *RoleUpdateOne {
	_u.mutation.SetApis(v)
	return _u
}

// AppendApis appends value to the "apis" field.
func (_u *RoleUpdateOne) AppendApis(v []uint32) *RoleUpdateOne {
	_u.mutation.AppendApis(v)
	return _u
}

// ClearApis clears the value of the "apis" field.
func (_u *RoleUpdateOne) ClearApis() *RoleUpdateOne {
	_u.mutation.ClearApis()
	return _u
}

// SetDataScope sets the "data_scope" field.
func (_u *RoleUpdateOne) SetDataScope(v role.DataScope) *RoleUpdateOne {
	_u.mutation.SetDataScope(v)
	return _u
}

// SetNillableDataScope sets the "data_scope" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableDataScope(v *role.DataScope) *RoleUpdateOne {
	if v != nil {
		_u.SetDataScope(*v)
	}
	return _u
}

// ClearDataScope clears the value of the "data_scope" field.
func (_u *RoleUpdateOne) ClearDataScope() *RoleUpdateOne {
	_u.mutation.ClearDataScope()
	return _u
}

// SetStatus sets the "status" field.
func (_u *RoleUpdateOne) SetStatus(v role.Status) *RoleUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableStatus(v *role.Status) *RoleUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *RoleUpdateOne) ClearStatus() *RoleUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetParent sets the "parent" edge to the Role entity.
func (_u *RoleUpdateOne) SetParent(v *Role) *RoleUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Role entity by IDs.
func (_u *RoleUpdateOne) AddChildIDs(ids ...uint32) *RoleUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Role entity.
func (_u *RoleUpdateOne) AddChildren(v ...*Role) *RoleUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (_u *RoleUpdateOne) Mutation() *RoleMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Role entity.
func (_u *RoleUpdateOne) ClearParent() *RoleUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Role entity.
func (_u *RoleUpdateOne) ClearChildren() *RoleUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Role entities by IDs.
func (_u *RoleUpdateOne) RemoveChildIDs(ids ...uint32) *RoleUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Role entities.
func (_u *RoleUpdateOne) RemoveChildren(v ...*Role) *RoleUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the RoleUpdate builder.
func (_u *RoleUpdateOne) Where(ps ...predicate.Role) *RoleUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Role entity.
func (_u *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RoleUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := role.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Role.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := role.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Role.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DataScope(); ok {
		if err := role.DataScopeValidator(v); err != nil {
			return &ValidationError{Name: "data_scope", err: fmt.Errorf(`ent: validator failed for field "Role.data_scope": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := role.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Role.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RoleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(role.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(role.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(role.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(role.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(role.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(role.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(role.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(role.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(role.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(role.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(role.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(role.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(role.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(role.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(role.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(role.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(role.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(role.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(role.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.SortOrder(); ok {
		_spec.SetField(role.FieldSortOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortOrder(); ok {
		_spec.AddField(role.FieldSortOrder, field.TypeInt32, value)
	}
	if _u.mutation.SortOrderCleared() {
		_spec.ClearField(role.FieldSortOrder, field.TypeInt32)
	}
	if value, ok := _u.mutation.Menus(); ok {
		_spec.SetField(role.FieldMenus, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMenus(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, role.FieldMenus, value)
		})
	}
	if _u.mutation.MenusCleared() {
		_spec.ClearField(role.FieldMenus, field.TypeJSON)
	}
	if value, ok := _u.mutation.Apis(); ok {
		_spec.SetField(role.FieldApis, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedApis(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, role.FieldApis, value)
		})
	}
	if _u.mutation.ApisCleared() {
		_spec.ClearField(role.FieldApis, field.TypeJSON)
	}
	if value, ok := _u.mutation.DataScope(); ok {
		_spec.SetField(role.FieldDataScope, field.TypeEnum, value)
	}
	if _u.mutation.DataScopeCleared() {
		_spec.ClearField(role.FieldDataScope, field.TypeEnum)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(role.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(role.FieldStatus, field.TypeEnum)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.ParentTable,
			Columns: []string{role.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.ParentTable,
			Columns: []string{role.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Role{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

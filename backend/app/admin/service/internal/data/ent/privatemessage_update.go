// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"kratos-admin/app/admin/service/internal/data/ent/privatemessage"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PrivateMessageUpdate is the builder for updating PrivateMessage entities.
type PrivateMessageUpdate struct {
	config
	hooks     []Hook
	mutation  *PrivateMessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PrivateMessageUpdate builder.
func (_u *PrivateMessageUpdate) Where(ps ...predicate.PrivateMessage) *PrivateMessageUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PrivateMessageUpdate) SetUpdatedAt(v time.Time) *PrivateMessageUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *PrivateMessageUpdate) SetNillableUpdatedAt(v *time.Time) *PrivateMessageUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *PrivateMessageUpdate) ClearUpdatedAt() *PrivateMessageUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *PrivateMessageUpdate) SetDeletedAt(v time.Time) *PrivateMessageUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *PrivateMessageUpdate) SetNillableDeletedAt(v *time.Time) *PrivateMessageUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *PrivateMessageUpdate) ClearDeletedAt() *PrivateMessageUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetSubject sets the "subject" field.
func (_u *PrivateMessageUpdate) SetSubject(v string) *PrivateMessageUpdate {
	_u.mutation.SetSubject(v)
	return _u
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (_u *PrivateMessageUpdate) SetNillableSubject(v *string) *PrivateMessageUpdate {
	if v != nil {
		_u.SetSubject(*v)
	}
	return _u
}

// ClearSubject clears the value of the "subject" field.
func (_u *PrivateMessageUpdate) ClearSubject() *PrivateMessageUpdate {
	_u.mutation.ClearSubject()
	return _u
}

// SetContent sets the "content" field.
func (_u *PrivateMessageUpdate) SetContent(v string) *PrivateMessageUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *PrivateMessageUpdate) SetNillableContent(v *string) *PrivateMessageUpdate {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// ClearContent clears the value of the "content" field.
func (_u *PrivateMessageUpdate) ClearContent() *PrivateMessageUpdate {
	_u.mutation.ClearContent()
	return _u
}

// SetStatus sets the "status" field.
func (_u *PrivateMessageUpdate) SetStatus(v privatemessage.Status) *PrivateMessageUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *PrivateMessageUpdate) SetNillableStatus(v *privatemessage.Status) *PrivateMessageUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *PrivateMessageUpdate) ClearStatus() *PrivateMessageUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetSenderID sets the "sender_id" field.
func (_u *PrivateMessageUpdate) SetSenderID(v uint32) *PrivateMessageUpdate {
	_u.mutation.ResetSenderID()
	_u.mutation.SetSenderID(v)
	return _u
}

// SetNillableSenderID sets the "sender_id" field if the given value is not nil.
func (_u *PrivateMessageUpdate) SetNillableSenderID(v *uint32) *PrivateMessageUpdate {
	if v != nil {
		_u.SetSenderID(*v)
	}
	return _u
}

// AddSenderID adds value to the "sender_id" field.
func (_u *PrivateMessageUpdate) AddSenderID(v int32) *PrivateMessageUpdate {
	_u.mutation.AddSenderID(v)
	return _u
}

// ClearSenderID clears the value of the "sender_id" field.
func (_u *PrivateMessageUpdate) ClearSenderID() *PrivateMessageUpdate {
	_u.mutation.ClearSenderID()
	return _u
}

// SetReceiverID sets the "receiver_id" field.
func (_u *PrivateMessageUpdate) SetReceiverID(v uint32) *PrivateMessageUpdate {
	_u.mutation.ResetReceiverID()
	_u.mutation.SetReceiverID(v)
	return _u
}

// SetNillableReceiverID sets the "receiver_id" field if the given value is not nil.
func (_u *PrivateMessageUpdate) SetNillableReceiverID(v *uint32) *PrivateMessageUpdate {
	if v != nil {
		_u.SetReceiverID(*v)
	}
	return _u
}

// AddReceiverID adds value to the "receiver_id" field.
func (_u *PrivateMessageUpdate) AddReceiverID(v int32) *PrivateMessageUpdate {
	_u.mutation.AddReceiverID(v)
	return _u
}

// ClearReceiverID clears the value of the "receiver_id" field.
func (_u *PrivateMessageUpdate) ClearReceiverID() *PrivateMessageUpdate {
	_u.mutation.ClearReceiverID()
	return _u
}

// Mutation returns the PrivateMessageMutation object of the builder.
func (_u *PrivateMessageUpdate) Mutation() *PrivateMessageMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PrivateMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PrivateMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PrivateMessageUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PrivateMessageUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PrivateMessageUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := privatemessage.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PrivateMessage.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PrivateMessageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PrivateMessageUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PrivateMessageUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(privatemessage.Table, privatemessage.Columns, sqlgraph.NewFieldSpec(privatemessage.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(privatemessage.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(privatemessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(privatemessage.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(privatemessage.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(privatemessage.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(privatemessage.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Subject(); ok {
		_spec.SetField(privatemessage.FieldSubject, field.TypeString, value)
	}
	if _u.mutation.SubjectCleared() {
		_spec.ClearField(privatemessage.FieldSubject, field.TypeString)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(privatemessage.FieldContent, field.TypeString, value)
	}
	if _u.mutation.ContentCleared() {
		_spec.ClearField(privatemessage.FieldContent, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(privatemessage.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(privatemessage.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.SenderID(); ok {
		_spec.SetField(privatemessage.FieldSenderID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSenderID(); ok {
		_spec.AddField(privatemessage.FieldSenderID, field.TypeUint32, value)
	}
	if _u.mutation.SenderIDCleared() {
		_spec.ClearField(privatemessage.FieldSenderID, field.TypeUint32)
	}
	if value, ok := _u.mutation.ReceiverID(); ok {
		_spec.SetField(privatemessage.FieldReceiverID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedReceiverID(); ok {
		_spec.AddField(privatemessage.FieldReceiverID, field.TypeUint32, value)
	}
	if _u.mutation.ReceiverIDCleared() {
		_spec.ClearField(privatemessage.FieldReceiverID, field.TypeUint32)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{privatemessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PrivateMessageUpdateOne is the builder for updating a single PrivateMessage entity.
type PrivateMessageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PrivateMessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PrivateMessageUpdateOne) SetUpdatedAt(v time.Time) *PrivateMessageUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *PrivateMessageUpdateOne) SetNillableUpdatedAt(v *time.Time) *PrivateMessageUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *PrivateMessageUpdateOne) ClearUpdatedAt() *PrivateMessageUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *PrivateMessageUpdateOne) SetDeletedAt(v time.Time) *PrivateMessageUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *PrivateMessageUpdateOne) SetNillableDeletedAt(v *time.Time) *PrivateMessageUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *PrivateMessageUpdateOne) ClearDeletedAt() *PrivateMessageUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetSubject sets the "subject" field.
func (_u *PrivateMessageUpdateOne) SetSubject(v string) *PrivateMessageUpdateOne {
	_u.mutation.SetSubject(v)
	return _u
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (_u *PrivateMessageUpdateOne) SetNillableSubject(v *string) *PrivateMessageUpdateOne {
	if v != nil {
		_u.SetSubject(*v)
	}
	return _u
}

// ClearSubject clears the value of the "subject" field.
func (_u *PrivateMessageUpdateOne) ClearSubject() *PrivateMessageUpdateOne {
	_u.mutation.ClearSubject()
	return _u
}

// SetContent sets the "content" field.
func (_u *PrivateMessageUpdateOne) SetContent(v string) *PrivateMessageUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *PrivateMessageUpdateOne) SetNillableContent(v *string) *PrivateMessageUpdateOne {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// ClearContent clears the value of the "content" field.
func (_u *PrivateMessageUpdateOne) ClearContent() *PrivateMessageUpdateOne {
	_u.mutation.ClearContent()
	return _u
}

// SetStatus sets the "status" field.
func (_u *PrivateMessageUpdateOne) SetStatus(v privatemessage.Status) *PrivateMessageUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *PrivateMessageUpdateOne) SetNillableStatus(v *privatemessage.Status) *PrivateMessageUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *PrivateMessageUpdateOne) ClearStatus() *PrivateMessageUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetSenderID sets the "sender_id" field.
func (_u *PrivateMessageUpdateOne) SetSenderID(v uint32) *PrivateMessageUpdateOne {
	_u.mutation.ResetSenderID()
	_u.mutation.SetSenderID(v)
	return _u
}

// SetNillableSenderID sets the "sender_id" field if the given value is not nil.
func (_u *PrivateMessageUpdateOne) SetNillableSenderID(v *uint32) *PrivateMessageUpdateOne {
	if v != nil {
		_u.SetSenderID(*v)
	}
	return _u
}

// AddSenderID adds value to the "sender_id" field.
func (_u *PrivateMessageUpdateOne) AddSenderID(v int32) *PrivateMessageUpdateOne {
	_u.mutation.AddSenderID(v)
	return _u
}

// ClearSenderID clears the value of the "sender_id" field.
func (_u *PrivateMessageUpdateOne) ClearSenderID() *PrivateMessageUpdateOne {
	_u.mutation.ClearSenderID()
	return _u
}

// SetReceiverID sets the "receiver_id" field.
func (_u *PrivateMessageUpdateOne) SetReceiverID(v uint32) *PrivateMessageUpdateOne {
	_u.mutation.ResetReceiverID()
	_u.mutation.SetReceiverID(v)
	return _u
}

// SetNillableReceiverID sets the "receiver_id" field if the given value is not nil.
func (_u *PrivateMessageUpdateOne) SetNillableReceiverID(v *uint32) *PrivateMessageUpdateOne {
	if v != nil {
		_u.SetReceiverID(*v)
	}
	return _u
}

// AddReceiverID adds value to the "receiver_id" field.
func (_u *PrivateMessageUpdateOne) AddReceiverID(v int32) *PrivateMessageUpdateOne {
	_u.mutation.AddReceiverID(v)
	return _u
}

// ClearReceiverID clears the value of the "receiver_id" field.
func (_u *PrivateMessageUpdateOne) ClearReceiverID() *PrivateMessageUpdateOne {
	_u.mutation.ClearReceiverID()
	return _u
}

// Mutation returns the PrivateMessageMutation object of the builder.
func (_u *PrivateMessageUpdateOne) Mutation() *PrivateMessageMutation {
	return _u.mutation
}

// Where appends a list predicates to the PrivateMessageUpdate builder.
func (_u *PrivateMessageUpdateOne) Where(ps ...predicate.PrivateMessage) *PrivateMessageUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PrivateMessageUpdateOne) Select(field string, fields ...string) *PrivateMessageUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PrivateMessage entity.
func (_u *PrivateMessageUpdateOne) Save(ctx context.Context) (*PrivateMessage, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PrivateMessageUpdateOne) SaveX(ctx context.Context) *PrivateMessage {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PrivateMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PrivateMessageUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PrivateMessageUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := privatemessage.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PrivateMessage.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PrivateMessageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PrivateMessageUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PrivateMessageUpdateOne) sqlSave(ctx context.Context) (_node *PrivateMessage, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(privatemessage.Table, privatemessage.Columns, sqlgraph.NewFieldSpec(privatemessage.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PrivateMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, privatemessage.FieldID)
		for _, f := range fields {
			if !privatemessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != privatemessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(privatemessage.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(privatemessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(privatemessage.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(privatemessage.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(privatemessage.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(privatemessage.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Subject(); ok {
		_spec.SetField(privatemessage.FieldSubject, field.TypeString, value)
	}
	if _u.mutation.SubjectCleared() {
		_spec.ClearField(privatemessage.FieldSubject, field.TypeString)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(privatemessage.FieldContent, field.TypeString, value)
	}
	if _u.mutation.ContentCleared() {
		_spec.ClearField(privatemessage.FieldContent, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(privatemessage.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(privatemessage.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.SenderID(); ok {
		_spec.SetField(privatemessage.FieldSenderID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSenderID(); ok {
		_spec.AddField(privatemessage.FieldSenderID, field.TypeUint32, value)
	}
	if _u.mutation.SenderIDCleared() {
		_spec.ClearField(privatemessage.FieldSenderID, field.TypeUint32)
	}
	if value, ok := _u.mutation.ReceiverID(); ok {
		_spec.SetField(privatemessage.FieldReceiverID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedReceiverID(); ok {
		_spec.AddField(privatemessage.FieldReceiverID, field.TypeUint32, value)
	}
	if _u.mutation.ReceiverIDCleared() {
		_spec.ClearField(privatemessage.FieldReceiverID, field.TypeUint32)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &PrivateMessage{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{privatemessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

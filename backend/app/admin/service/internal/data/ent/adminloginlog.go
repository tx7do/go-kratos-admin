// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/adminloginlog"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 后台登录日志表
type AdminLoginLog struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint32 `json:"id,omitempty"`
	// 创建时间
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// 登录IP地址
	LoginIP *string `json:"login_ip,omitempty"`
	// 登录MAC地址
	LoginMAC *string `json:"login_mac,omitempty"`
	// 登录时间
	LoginTime *time.Time `json:"login_time,omitempty"`
	// 浏览器的用户代理信息
	UserAgent *string `json:"user_agent,omitempty"`
	// 浏览器名称
	BrowserName *string `json:"browser_name,omitempty"`
	// 浏览器版本
	BrowserVersion *string `json:"browser_version,omitempty"`
	// 客户端ID
	ClientID *string `json:"client_id,omitempty"`
	// 客户端名称
	ClientName *string `json:"client_name,omitempty"`
	// 操作系统名称
	OsName *string `json:"os_name,omitempty"`
	// 操作系统版本
	OsVersion *string `json:"os_version,omitempty"`
	// 操作者用户ID
	UserID *uint32 `json:"user_id,omitempty"`
	// 操作者账号名
	Username *string `json:"username,omitempty"`
	// 状态码
	StatusCode *int32 `json:"status_code,omitempty"`
	// 操作成功
	Success *bool `json:"success,omitempty"`
	// 登录失败原因
	Reason *string `json:"reason,omitempty"`
	// 登录地理位置
	Location     *string `json:"location,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminLoginLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminloginlog.FieldSuccess:
			values[i] = new(sql.NullBool)
		case adminloginlog.FieldID, adminloginlog.FieldUserID, adminloginlog.FieldStatusCode:
			values[i] = new(sql.NullInt64)
		case adminloginlog.FieldLoginIP, adminloginlog.FieldLoginMAC, adminloginlog.FieldUserAgent, adminloginlog.FieldBrowserName, adminloginlog.FieldBrowserVersion, adminloginlog.FieldClientID, adminloginlog.FieldClientName, adminloginlog.FieldOsName, adminloginlog.FieldOsVersion, adminloginlog.FieldUsername, adminloginlog.FieldReason, adminloginlog.FieldLocation:
			values[i] = new(sql.NullString)
		case adminloginlog.FieldCreatedAt, adminloginlog.FieldLoginTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminLoginLog fields.
func (_m *AdminLoginLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminloginlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint32(value.Int64)
		case adminloginlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = new(time.Time)
				*_m.CreatedAt = value.Time
			}
		case adminloginlog.FieldLoginIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login_ip", values[i])
			} else if value.Valid {
				_m.LoginIP = new(string)
				*_m.LoginIP = value.String
			}
		case adminloginlog.FieldLoginMAC:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login_mac", values[i])
			} else if value.Valid {
				_m.LoginMAC = new(string)
				*_m.LoginMAC = value.String
			}
		case adminloginlog.FieldLoginTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field login_time", values[i])
			} else if value.Valid {
				_m.LoginTime = new(time.Time)
				*_m.LoginTime = value.Time
			}
		case adminloginlog.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				_m.UserAgent = new(string)
				*_m.UserAgent = value.String
			}
		case adminloginlog.FieldBrowserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field browser_name", values[i])
			} else if value.Valid {
				_m.BrowserName = new(string)
				*_m.BrowserName = value.String
			}
		case adminloginlog.FieldBrowserVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field browser_version", values[i])
			} else if value.Valid {
				_m.BrowserVersion = new(string)
				*_m.BrowserVersion = value.String
			}
		case adminloginlog.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				_m.ClientID = new(string)
				*_m.ClientID = value.String
			}
		case adminloginlog.FieldClientName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_name", values[i])
			} else if value.Valid {
				_m.ClientName = new(string)
				*_m.ClientName = value.String
			}
		case adminloginlog.FieldOsName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os_name", values[i])
			} else if value.Valid {
				_m.OsName = new(string)
				*_m.OsName = value.String
			}
		case adminloginlog.FieldOsVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os_version", values[i])
			} else if value.Valid {
				_m.OsVersion = new(string)
				*_m.OsVersion = value.String
			}
		case adminloginlog.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = new(uint32)
				*_m.UserID = uint32(value.Int64)
			}
		case adminloginlog.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				_m.Username = new(string)
				*_m.Username = value.String
			}
		case adminloginlog.FieldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				_m.StatusCode = new(int32)
				*_m.StatusCode = int32(value.Int64)
			}
		case adminloginlog.FieldSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field success", values[i])
			} else if value.Valid {
				_m.Success = new(bool)
				*_m.Success = value.Bool
			}
		case adminloginlog.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				_m.Reason = new(string)
				*_m.Reason = value.String
			}
		case adminloginlog.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				_m.Location = new(string)
				*_m.Location = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AdminLoginLog.
// This includes values selected through modifiers, order, etc.
func (_m *AdminLoginLog) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this AdminLoginLog.
// Note that you need to call AdminLoginLog.Unwrap() before calling this method if this AdminLoginLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *AdminLoginLog) Update() *AdminLoginLogUpdateOne {
	return NewAdminLoginLogClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the AdminLoginLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *AdminLoginLog) Unwrap() *AdminLoginLog {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminLoginLog is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *AdminLoginLog) String() string {
	var builder strings.Builder
	builder.WriteString("AdminLoginLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	if v := _m.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.LoginIP; v != nil {
		builder.WriteString("login_ip=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.LoginMAC; v != nil {
		builder.WriteString("login_mac=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.LoginTime; v != nil {
		builder.WriteString("login_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UserAgent; v != nil {
		builder.WriteString("user_agent=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.BrowserName; v != nil {
		builder.WriteString("browser_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.BrowserVersion; v != nil {
		builder.WriteString("browser_version=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.ClientID; v != nil {
		builder.WriteString("client_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.ClientName; v != nil {
		builder.WriteString("client_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.OsName; v != nil {
		builder.WriteString("os_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.OsVersion; v != nil {
		builder.WriteString("os_version=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.UserID; v != nil {
		builder.WriteString("user_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Username; v != nil {
		builder.WriteString("username=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.StatusCode; v != nil {
		builder.WriteString("status_code=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Success; v != nil {
		builder.WriteString("success=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Reason; v != nil {
		builder.WriteString("reason=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Location; v != nil {
		builder.WriteString("location=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// AdminLoginLogs is a parsable slice of AdminLoginLog.
type AdminLoginLogs []*AdminLoginLog

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/language"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LanguageUpdate is the builder for updating Language entities.
type LanguageUpdate struct {
	config
	hooks     []Hook
	mutation  *LanguageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LanguageUpdate builder.
func (_u *LanguageUpdate) Where(ps ...predicate.Language) *LanguageUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *LanguageUpdate) SetUpdatedAt(v time.Time) *LanguageUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *LanguageUpdate) SetNillableUpdatedAt(v *time.Time) *LanguageUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *LanguageUpdate) ClearUpdatedAt() *LanguageUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *LanguageUpdate) SetDeletedAt(v time.Time) *LanguageUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *LanguageUpdate) SetNillableDeletedAt(v *time.Time) *LanguageUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *LanguageUpdate) ClearDeletedAt() *LanguageUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *LanguageUpdate) SetCreatedBy(v uint32) *LanguageUpdate {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *LanguageUpdate) SetNillableCreatedBy(v *uint32) *LanguageUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *LanguageUpdate) AddCreatedBy(v int32) *LanguageUpdate {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *LanguageUpdate) ClearCreatedBy() *LanguageUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *LanguageUpdate) SetUpdatedBy(v uint32) *LanguageUpdate {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *LanguageUpdate) SetNillableUpdatedBy(v *uint32) *LanguageUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *LanguageUpdate) AddUpdatedBy(v int32) *LanguageUpdate {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *LanguageUpdate) ClearUpdatedBy() *LanguageUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *LanguageUpdate) SetDeletedBy(v uint32) *LanguageUpdate {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *LanguageUpdate) SetNillableDeletedBy(v *uint32) *LanguageUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *LanguageUpdate) AddDeletedBy(v int32) *LanguageUpdate {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *LanguageUpdate) ClearDeletedBy() *LanguageUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetSortOrder sets the "sort_order" field.
func (_u *LanguageUpdate) SetSortOrder(v int32) *LanguageUpdate {
	_u.mutation.ResetSortOrder()
	_u.mutation.SetSortOrder(v)
	return _u
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_u *LanguageUpdate) SetNillableSortOrder(v *int32) *LanguageUpdate {
	if v != nil {
		_u.SetSortOrder(*v)
	}
	return _u
}

// AddSortOrder adds value to the "sort_order" field.
func (_u *LanguageUpdate) AddSortOrder(v int32) *LanguageUpdate {
	_u.mutation.AddSortOrder(v)
	return _u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (_u *LanguageUpdate) ClearSortOrder() *LanguageUpdate {
	_u.mutation.ClearSortOrder()
	return _u
}

// SetIsEnabled sets the "is_enabled" field.
func (_u *LanguageUpdate) SetIsEnabled(v bool) *LanguageUpdate {
	_u.mutation.SetIsEnabled(v)
	return _u
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_u *LanguageUpdate) SetNillableIsEnabled(v *bool) *LanguageUpdate {
	if v != nil {
		_u.SetIsEnabled(*v)
	}
	return _u
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (_u *LanguageUpdate) ClearIsEnabled() *LanguageUpdate {
	_u.mutation.ClearIsEnabled()
	return _u
}

// SetLanguageCode sets the "language_code" field.
func (_u *LanguageUpdate) SetLanguageCode(v string) *LanguageUpdate {
	_u.mutation.SetLanguageCode(v)
	return _u
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (_u *LanguageUpdate) SetNillableLanguageCode(v *string) *LanguageUpdate {
	if v != nil {
		_u.SetLanguageCode(*v)
	}
	return _u
}

// ClearLanguageCode clears the value of the "language_code" field.
func (_u *LanguageUpdate) ClearLanguageCode() *LanguageUpdate {
	_u.mutation.ClearLanguageCode()
	return _u
}

// SetLanguageName sets the "language_name" field.
func (_u *LanguageUpdate) SetLanguageName(v string) *LanguageUpdate {
	_u.mutation.SetLanguageName(v)
	return _u
}

// SetNillableLanguageName sets the "language_name" field if the given value is not nil.
func (_u *LanguageUpdate) SetNillableLanguageName(v *string) *LanguageUpdate {
	if v != nil {
		_u.SetLanguageName(*v)
	}
	return _u
}

// ClearLanguageName clears the value of the "language_name" field.
func (_u *LanguageUpdate) ClearLanguageName() *LanguageUpdate {
	_u.mutation.ClearLanguageName()
	return _u
}

// SetNativeName sets the "native_name" field.
func (_u *LanguageUpdate) SetNativeName(v string) *LanguageUpdate {
	_u.mutation.SetNativeName(v)
	return _u
}

// SetNillableNativeName sets the "native_name" field if the given value is not nil.
func (_u *LanguageUpdate) SetNillableNativeName(v *string) *LanguageUpdate {
	if v != nil {
		_u.SetNativeName(*v)
	}
	return _u
}

// ClearNativeName clears the value of the "native_name" field.
func (_u *LanguageUpdate) ClearNativeName() *LanguageUpdate {
	_u.mutation.ClearNativeName()
	return _u
}

// SetIsDefault sets the "is_default" field.
func (_u *LanguageUpdate) SetIsDefault(v bool) *LanguageUpdate {
	_u.mutation.SetIsDefault(v)
	return _u
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (_u *LanguageUpdate) SetNillableIsDefault(v *bool) *LanguageUpdate {
	if v != nil {
		_u.SetIsDefault(*v)
	}
	return _u
}

// ClearIsDefault clears the value of the "is_default" field.
func (_u *LanguageUpdate) ClearIsDefault() *LanguageUpdate {
	_u.mutation.ClearIsDefault()
	return _u
}

// Mutation returns the LanguageMutation object of the builder.
func (_u *LanguageUpdate) Mutation() *LanguageMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *LanguageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LanguageUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *LanguageUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LanguageUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *LanguageUpdate) check() error {
	if v, ok := _u.mutation.LanguageCode(); ok {
		if err := language.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "Language.language_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LanguageName(); ok {
		if err := language.LanguageNameValidator(v); err != nil {
			return &ValidationError{Name: "language_name", err: fmt.Errorf(`ent: validator failed for field "Language.language_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.NativeName(); ok {
		if err := language.NativeNameValidator(v); err != nil {
			return &ValidationError{Name: "native_name", err: fmt.Errorf(`ent: validator failed for field "Language.native_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *LanguageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LanguageUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *LanguageUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(language.Table, language.Columns, sqlgraph.NewFieldSpec(language.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(language.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(language.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(language.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(language.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(language.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(language.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(language.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(language.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(language.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(language.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(language.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(language.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(language.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(language.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.SortOrder(); ok {
		_spec.SetField(language.FieldSortOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortOrder(); ok {
		_spec.AddField(language.FieldSortOrder, field.TypeInt32, value)
	}
	if _u.mutation.SortOrderCleared() {
		_spec.ClearField(language.FieldSortOrder, field.TypeInt32)
	}
	if value, ok := _u.mutation.IsEnabled(); ok {
		_spec.SetField(language.FieldIsEnabled, field.TypeBool, value)
	}
	if _u.mutation.IsEnabledCleared() {
		_spec.ClearField(language.FieldIsEnabled, field.TypeBool)
	}
	if value, ok := _u.mutation.LanguageCode(); ok {
		_spec.SetField(language.FieldLanguageCode, field.TypeString, value)
	}
	if _u.mutation.LanguageCodeCleared() {
		_spec.ClearField(language.FieldLanguageCode, field.TypeString)
	}
	if value, ok := _u.mutation.LanguageName(); ok {
		_spec.SetField(language.FieldLanguageName, field.TypeString, value)
	}
	if _u.mutation.LanguageNameCleared() {
		_spec.ClearField(language.FieldLanguageName, field.TypeString)
	}
	if value, ok := _u.mutation.NativeName(); ok {
		_spec.SetField(language.FieldNativeName, field.TypeString, value)
	}
	if _u.mutation.NativeNameCleared() {
		_spec.ClearField(language.FieldNativeName, field.TypeString)
	}
	if value, ok := _u.mutation.IsDefault(); ok {
		_spec.SetField(language.FieldIsDefault, field.TypeBool, value)
	}
	if _u.mutation.IsDefaultCleared() {
		_spec.ClearField(language.FieldIsDefault, field.TypeBool)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{language.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// LanguageUpdateOne is the builder for updating a single Language entity.
type LanguageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LanguageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *LanguageUpdateOne) SetUpdatedAt(v time.Time) *LanguageUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *LanguageUpdateOne) SetNillableUpdatedAt(v *time.Time) *LanguageUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *LanguageUpdateOne) ClearUpdatedAt() *LanguageUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *LanguageUpdateOne) SetDeletedAt(v time.Time) *LanguageUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *LanguageUpdateOne) SetNillableDeletedAt(v *time.Time) *LanguageUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *LanguageUpdateOne) ClearDeletedAt() *LanguageUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *LanguageUpdateOne) SetCreatedBy(v uint32) *LanguageUpdateOne {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *LanguageUpdateOne) SetNillableCreatedBy(v *uint32) *LanguageUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *LanguageUpdateOne) AddCreatedBy(v int32) *LanguageUpdateOne {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *LanguageUpdateOne) ClearCreatedBy() *LanguageUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *LanguageUpdateOne) SetUpdatedBy(v uint32) *LanguageUpdateOne {
	_u.mutation.ResetUpdatedBy()
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *LanguageUpdateOne) SetNillableUpdatedBy(v *uint32) *LanguageUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// AddUpdatedBy adds value to the "updated_by" field.
func (_u *LanguageUpdateOne) AddUpdatedBy(v int32) *LanguageUpdateOne {
	_u.mutation.AddUpdatedBy(v)
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *LanguageUpdateOne) ClearUpdatedBy() *LanguageUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *LanguageUpdateOne) SetDeletedBy(v uint32) *LanguageUpdateOne {
	_u.mutation.ResetDeletedBy()
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *LanguageUpdateOne) SetNillableDeletedBy(v *uint32) *LanguageUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// AddDeletedBy adds value to the "deleted_by" field.
func (_u *LanguageUpdateOne) AddDeletedBy(v int32) *LanguageUpdateOne {
	_u.mutation.AddDeletedBy(v)
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *LanguageUpdateOne) ClearDeletedBy() *LanguageUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetSortOrder sets the "sort_order" field.
func (_u *LanguageUpdateOne) SetSortOrder(v int32) *LanguageUpdateOne {
	_u.mutation.ResetSortOrder()
	_u.mutation.SetSortOrder(v)
	return _u
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_u *LanguageUpdateOne) SetNillableSortOrder(v *int32) *LanguageUpdateOne {
	if v != nil {
		_u.SetSortOrder(*v)
	}
	return _u
}

// AddSortOrder adds value to the "sort_order" field.
func (_u *LanguageUpdateOne) AddSortOrder(v int32) *LanguageUpdateOne {
	_u.mutation.AddSortOrder(v)
	return _u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (_u *LanguageUpdateOne) ClearSortOrder() *LanguageUpdateOne {
	_u.mutation.ClearSortOrder()
	return _u
}

// SetIsEnabled sets the "is_enabled" field.
func (_u *LanguageUpdateOne) SetIsEnabled(v bool) *LanguageUpdateOne {
	_u.mutation.SetIsEnabled(v)
	return _u
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_u *LanguageUpdateOne) SetNillableIsEnabled(v *bool) *LanguageUpdateOne {
	if v != nil {
		_u.SetIsEnabled(*v)
	}
	return _u
}

// ClearIsEnabled clears the value of the "is_enabled" field.
func (_u *LanguageUpdateOne) ClearIsEnabled() *LanguageUpdateOne {
	_u.mutation.ClearIsEnabled()
	return _u
}

// SetLanguageCode sets the "language_code" field.
func (_u *LanguageUpdateOne) SetLanguageCode(v string) *LanguageUpdateOne {
	_u.mutation.SetLanguageCode(v)
	return _u
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (_u *LanguageUpdateOne) SetNillableLanguageCode(v *string) *LanguageUpdateOne {
	if v != nil {
		_u.SetLanguageCode(*v)
	}
	return _u
}

// ClearLanguageCode clears the value of the "language_code" field.
func (_u *LanguageUpdateOne) ClearLanguageCode() *LanguageUpdateOne {
	_u.mutation.ClearLanguageCode()
	return _u
}

// SetLanguageName sets the "language_name" field.
func (_u *LanguageUpdateOne) SetLanguageName(v string) *LanguageUpdateOne {
	_u.mutation.SetLanguageName(v)
	return _u
}

// SetNillableLanguageName sets the "language_name" field if the given value is not nil.
func (_u *LanguageUpdateOne) SetNillableLanguageName(v *string) *LanguageUpdateOne {
	if v != nil {
		_u.SetLanguageName(*v)
	}
	return _u
}

// ClearLanguageName clears the value of the "language_name" field.
func (_u *LanguageUpdateOne) ClearLanguageName() *LanguageUpdateOne {
	_u.mutation.ClearLanguageName()
	return _u
}

// SetNativeName sets the "native_name" field.
func (_u *LanguageUpdateOne) SetNativeName(v string) *LanguageUpdateOne {
	_u.mutation.SetNativeName(v)
	return _u
}

// SetNillableNativeName sets the "native_name" field if the given value is not nil.
func (_u *LanguageUpdateOne) SetNillableNativeName(v *string) *LanguageUpdateOne {
	if v != nil {
		_u.SetNativeName(*v)
	}
	return _u
}

// ClearNativeName clears the value of the "native_name" field.
func (_u *LanguageUpdateOne) ClearNativeName() *LanguageUpdateOne {
	_u.mutation.ClearNativeName()
	return _u
}

// SetIsDefault sets the "is_default" field.
func (_u *LanguageUpdateOne) SetIsDefault(v bool) *LanguageUpdateOne {
	_u.mutation.SetIsDefault(v)
	return _u
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (_u *LanguageUpdateOne) SetNillableIsDefault(v *bool) *LanguageUpdateOne {
	if v != nil {
		_u.SetIsDefault(*v)
	}
	return _u
}

// ClearIsDefault clears the value of the "is_default" field.
func (_u *LanguageUpdateOne) ClearIsDefault() *LanguageUpdateOne {
	_u.mutation.ClearIsDefault()
	return _u
}

// Mutation returns the LanguageMutation object of the builder.
func (_u *LanguageUpdateOne) Mutation() *LanguageMutation {
	return _u.mutation
}

// Where appends a list predicates to the LanguageUpdate builder.
func (_u *LanguageUpdateOne) Where(ps ...predicate.Language) *LanguageUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *LanguageUpdateOne) Select(field string, fields ...string) *LanguageUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Language entity.
func (_u *LanguageUpdateOne) Save(ctx context.Context) (*Language, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LanguageUpdateOne) SaveX(ctx context.Context) *Language {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *LanguageUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LanguageUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *LanguageUpdateOne) check() error {
	if v, ok := _u.mutation.LanguageCode(); ok {
		if err := language.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "Language.language_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LanguageName(); ok {
		if err := language.LanguageNameValidator(v); err != nil {
			return &ValidationError{Name: "language_name", err: fmt.Errorf(`ent: validator failed for field "Language.language_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.NativeName(); ok {
		if err := language.NativeNameValidator(v); err != nil {
			return &ValidationError{Name: "native_name", err: fmt.Errorf(`ent: validator failed for field "Language.native_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *LanguageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LanguageUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *LanguageUpdateOne) sqlSave(ctx context.Context) (_node *Language, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(language.Table, language.Columns, sqlgraph.NewFieldSpec(language.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Language.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, language.FieldID)
		for _, f := range fields {
			if !language.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != language.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(language.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(language.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(language.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(language.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(language.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(language.FieldCreatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(language.FieldCreatedBy, field.TypeUint32, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(language.FieldCreatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(language.FieldUpdatedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(language.FieldUpdatedBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(language.FieldUpdatedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(language.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDeletedBy(); ok {
		_spec.AddField(language.FieldDeletedBy, field.TypeUint32, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(language.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.SortOrder(); ok {
		_spec.SetField(language.FieldSortOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortOrder(); ok {
		_spec.AddField(language.FieldSortOrder, field.TypeInt32, value)
	}
	if _u.mutation.SortOrderCleared() {
		_spec.ClearField(language.FieldSortOrder, field.TypeInt32)
	}
	if value, ok := _u.mutation.IsEnabled(); ok {
		_spec.SetField(language.FieldIsEnabled, field.TypeBool, value)
	}
	if _u.mutation.IsEnabledCleared() {
		_spec.ClearField(language.FieldIsEnabled, field.TypeBool)
	}
	if value, ok := _u.mutation.LanguageCode(); ok {
		_spec.SetField(language.FieldLanguageCode, field.TypeString, value)
	}
	if _u.mutation.LanguageCodeCleared() {
		_spec.ClearField(language.FieldLanguageCode, field.TypeString)
	}
	if value, ok := _u.mutation.LanguageName(); ok {
		_spec.SetField(language.FieldLanguageName, field.TypeString, value)
	}
	if _u.mutation.LanguageNameCleared() {
		_spec.ClearField(language.FieldLanguageName, field.TypeString)
	}
	if value, ok := _u.mutation.NativeName(); ok {
		_spec.SetField(language.FieldNativeName, field.TypeString, value)
	}
	if _u.mutation.NativeNameCleared() {
		_spec.ClearField(language.FieldNativeName, field.TypeString)
	}
	if value, ok := _u.mutation.IsDefault(); ok {
		_spec.SetField(language.FieldIsDefault, field.TypeBool, value)
	}
	if _u.mutation.IsDefaultCleared() {
		_spec.ClearField(language.FieldIsDefault, field.TypeBool)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Language{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{language.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

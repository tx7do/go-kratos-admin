// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/dictitem"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictItemCreate is the builder for creating a DictItem entity.
type DictItemCreate struct {
	config
	mutation *DictItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (_c *DictItemCreate) SetCreateTime(v time.Time) *DictItemCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *DictItemCreate) SetNillableCreateTime(v *time.Time) *DictItemCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *DictItemCreate) SetUpdateTime(v time.Time) *DictItemCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *DictItemCreate) SetNillableUpdateTime(v *time.Time) *DictItemCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetDeleteTime sets the "delete_time" field.
func (_c *DictItemCreate) SetDeleteTime(v time.Time) *DictItemCreate {
	_c.mutation.SetDeleteTime(v)
	return _c
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_c *DictItemCreate) SetNillableDeleteTime(v *time.Time) *DictItemCreate {
	if v != nil {
		_c.SetDeleteTime(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *DictItemCreate) SetCreateBy(v uint32) *DictItemCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *DictItemCreate) SetNillableCreateBy(v *uint32) *DictItemCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *DictItemCreate) SetUpdateBy(v uint32) *DictItemCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *DictItemCreate) SetNillableUpdateBy(v *uint32) *DictItemCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetRemark sets the "remark" field.
func (_c *DictItemCreate) SetRemark(v string) *DictItemCreate {
	_c.mutation.SetRemark(v)
	return _c
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_c *DictItemCreate) SetNillableRemark(v *string) *DictItemCreate {
	if v != nil {
		_c.SetRemark(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *DictItemCreate) SetTenantID(v uint32) *DictItemCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_c *DictItemCreate) SetNillableTenantID(v *uint32) *DictItemCreate {
	if v != nil {
		_c.SetTenantID(*v)
	}
	return _c
}

// SetCode sets the "code" field.
func (_c *DictItemCreate) SetCode(v string) *DictItemCreate {
	_c.mutation.SetCode(v)
	return _c
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_c *DictItemCreate) SetNillableCode(v *string) *DictItemCreate {
	if v != nil {
		_c.SetCode(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *DictItemCreate) SetName(v string) *DictItemCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *DictItemCreate) SetNillableName(v *string) *DictItemCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetMainID sets the "main_id" field.
func (_c *DictItemCreate) SetMainID(v uint32) *DictItemCreate {
	_c.mutation.SetMainID(v)
	return _c
}

// SetNillableMainID sets the "main_id" field if the given value is not nil.
func (_c *DictItemCreate) SetNillableMainID(v *uint32) *DictItemCreate {
	if v != nil {
		_c.SetMainID(*v)
	}
	return _c
}

// SetSortID sets the "sort_id" field.
func (_c *DictItemCreate) SetSortID(v int32) *DictItemCreate {
	_c.mutation.SetSortID(v)
	return _c
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (_c *DictItemCreate) SetNillableSortID(v *int32) *DictItemCreate {
	if v != nil {
		_c.SetSortID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *DictItemCreate) SetStatus(v dictitem.Status) *DictItemCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *DictItemCreate) SetNillableStatus(v *dictitem.Status) *DictItemCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *DictItemCreate) SetID(v uint32) *DictItemCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the DictItemMutation object of the builder.
func (_c *DictItemCreate) Mutation() *DictItemMutation {
	return _c.mutation
}

// Save creates the DictItem in the database.
func (_c *DictItemCreate) Save(ctx context.Context) (*DictItem, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DictItemCreate) SaveX(ctx context.Context) *DictItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DictItemCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DictItemCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DictItemCreate) defaults() {
	if _, ok := _c.mutation.Remark(); !ok {
		v := dictitem.DefaultRemark
		_c.mutation.SetRemark(v)
	}
	if _, ok := _c.mutation.SortID(); !ok {
		v := dictitem.DefaultSortID
		_c.mutation.SetSortID(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := dictitem.DefaultStatus
		_c.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DictItemCreate) check() error {
	if v, ok := _c.mutation.TenantID(); ok {
		if err := dictitem.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "DictItem.tenant_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Code(); ok {
		if err := dictitem.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DictItem.code": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := dictitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DictItem.name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := dictitem.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DictItem.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := dictitem.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "DictItem.id": %w`, err)}
		}
	}
	return nil
}

func (_c *DictItemCreate) sqlSave(ctx context.Context) (*DictItem, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DictItemCreate) createSpec() (*DictItem, *sqlgraph.CreateSpec) {
	var (
		_node = &DictItem{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(dictitem.Table, sqlgraph.NewFieldSpec(dictitem.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(dictitem.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(dictitem.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := _c.mutation.DeleteTime(); ok {
		_spec.SetField(dictitem.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(dictitem.FieldCreateBy, field.TypeUint32, value)
		_node.CreateBy = &value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(dictitem.FieldUpdateBy, field.TypeUint32, value)
		_node.UpdateBy = &value
	}
	if value, ok := _c.mutation.Remark(); ok {
		_spec.SetField(dictitem.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(dictitem.FieldTenantID, field.TypeUint32, value)
		_node.TenantID = &value
	}
	if value, ok := _c.mutation.Code(); ok {
		_spec.SetField(dictitem.FieldCode, field.TypeString, value)
		_node.Code = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(dictitem.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := _c.mutation.MainID(); ok {
		_spec.SetField(dictitem.FieldMainID, field.TypeUint32, value)
		_node.MainID = &value
	}
	if value, ok := _c.mutation.SortID(); ok {
		_spec.SetField(dictitem.FieldSortID, field.TypeInt32, value)
		_node.SortID = &value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(dictitem.FieldStatus, field.TypeEnum, value)
		_node.Status = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DictItem.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictItemUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (_c *DictItemCreate) OnConflict(opts ...sql.ConflictOption) *DictItemUpsertOne {
	_c.conflict = opts
	return &DictItemUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DictItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DictItemCreate) OnConflictColumns(columns ...string) *DictItemUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DictItemUpsertOne{
		create: _c,
	}
}

type (
	// DictItemUpsertOne is the builder for "upsert"-ing
	//  one DictItem node.
	DictItemUpsertOne struct {
		create *DictItemCreate
	}

	// DictItemUpsert is the "OnConflict" setter.
	DictItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *DictItemUpsert) SetUpdateTime(v time.Time) *DictItemUpsert {
	u.Set(dictitem.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateUpdateTime() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *DictItemUpsert) ClearUpdateTime() *DictItemUpsert {
	u.SetNull(dictitem.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *DictItemUpsert) SetDeleteTime(v time.Time) *DictItemUpsert {
	u.Set(dictitem.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateDeleteTime() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *DictItemUpsert) ClearDeleteTime() *DictItemUpsert {
	u.SetNull(dictitem.FieldDeleteTime)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *DictItemUpsert) SetCreateBy(v uint32) *DictItemUpsert {
	u.Set(dictitem.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateCreateBy() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldCreateBy)
	return u
}

// AddCreateBy adds v to the "create_by" field.
func (u *DictItemUpsert) AddCreateBy(v uint32) *DictItemUpsert {
	u.Add(dictitem.FieldCreateBy, v)
	return u
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *DictItemUpsert) ClearCreateBy() *DictItemUpsert {
	u.SetNull(dictitem.FieldCreateBy)
	return u
}

// SetUpdateBy sets the "update_by" field.
func (u *DictItemUpsert) SetUpdateBy(v uint32) *DictItemUpsert {
	u.Set(dictitem.FieldUpdateBy, v)
	return u
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateUpdateBy() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldUpdateBy)
	return u
}

// AddUpdateBy adds v to the "update_by" field.
func (u *DictItemUpsert) AddUpdateBy(v uint32) *DictItemUpsert {
	u.Add(dictitem.FieldUpdateBy, v)
	return u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *DictItemUpsert) ClearUpdateBy() *DictItemUpsert {
	u.SetNull(dictitem.FieldUpdateBy)
	return u
}

// SetRemark sets the "remark" field.
func (u *DictItemUpsert) SetRemark(v string) *DictItemUpsert {
	u.Set(dictitem.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateRemark() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *DictItemUpsert) ClearRemark() *DictItemUpsert {
	u.SetNull(dictitem.FieldRemark)
	return u
}

// SetCode sets the "code" field.
func (u *DictItemUpsert) SetCode(v string) *DictItemUpsert {
	u.Set(dictitem.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateCode() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *DictItemUpsert) ClearCode() *DictItemUpsert {
	u.SetNull(dictitem.FieldCode)
	return u
}

// SetName sets the "name" field.
func (u *DictItemUpsert) SetName(v string) *DictItemUpsert {
	u.Set(dictitem.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateName() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *DictItemUpsert) ClearName() *DictItemUpsert {
	u.SetNull(dictitem.FieldName)
	return u
}

// SetMainID sets the "main_id" field.
func (u *DictItemUpsert) SetMainID(v uint32) *DictItemUpsert {
	u.Set(dictitem.FieldMainID, v)
	return u
}

// UpdateMainID sets the "main_id" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateMainID() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldMainID)
	return u
}

// AddMainID adds v to the "main_id" field.
func (u *DictItemUpsert) AddMainID(v uint32) *DictItemUpsert {
	u.Add(dictitem.FieldMainID, v)
	return u
}

// ClearMainID clears the value of the "main_id" field.
func (u *DictItemUpsert) ClearMainID() *DictItemUpsert {
	u.SetNull(dictitem.FieldMainID)
	return u
}

// SetSortID sets the "sort_id" field.
func (u *DictItemUpsert) SetSortID(v int32) *DictItemUpsert {
	u.Set(dictitem.FieldSortID, v)
	return u
}

// UpdateSortID sets the "sort_id" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateSortID() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldSortID)
	return u
}

// AddSortID adds v to the "sort_id" field.
func (u *DictItemUpsert) AddSortID(v int32) *DictItemUpsert {
	u.Add(dictitem.FieldSortID, v)
	return u
}

// ClearSortID clears the value of the "sort_id" field.
func (u *DictItemUpsert) ClearSortID() *DictItemUpsert {
	u.SetNull(dictitem.FieldSortID)
	return u
}

// SetStatus sets the "status" field.
func (u *DictItemUpsert) SetStatus(v dictitem.Status) *DictItemUpsert {
	u.Set(dictitem.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateStatus() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *DictItemUpsert) ClearStatus() *DictItemUpsert {
	u.SetNull(dictitem.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DictItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dictitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DictItemUpsertOne) UpdateNewValues() *DictItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(dictitem.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(dictitem.FieldCreateTime)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(dictitem.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DictItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DictItemUpsertOne) Ignore() *DictItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictItemUpsertOne) DoNothing() *DictItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictItemCreate.OnConflict
// documentation for more info.
func (u *DictItemUpsertOne) Update(set func(*DictItemUpsert)) *DictItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *DictItemUpsertOne) SetUpdateTime(v time.Time) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateUpdateTime() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *DictItemUpsertOne) ClearUpdateTime() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *DictItemUpsertOne) SetDeleteTime(v time.Time) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateDeleteTime() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *DictItemUpsertOne) ClearDeleteTime() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *DictItemUpsertOne) SetCreateBy(v uint32) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *DictItemUpsertOne) AddCreateBy(v uint32) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateCreateBy() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *DictItemUpsertOne) ClearCreateBy() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *DictItemUpsertOne) SetUpdateBy(v uint32) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *DictItemUpsertOne) AddUpdateBy(v uint32) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateUpdateBy() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *DictItemUpsertOne) ClearUpdateBy() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *DictItemUpsertOne) SetRemark(v string) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateRemark() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *DictItemUpsertOne) ClearRemark() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearRemark()
	})
}

// SetCode sets the "code" field.
func (u *DictItemUpsertOne) SetCode(v string) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateCode() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *DictItemUpsertOne) ClearCode() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearCode()
	})
}

// SetName sets the "name" field.
func (u *DictItemUpsertOne) SetName(v string) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateName() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DictItemUpsertOne) ClearName() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearName()
	})
}

// SetMainID sets the "main_id" field.
func (u *DictItemUpsertOne) SetMainID(v uint32) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetMainID(v)
	})
}

// AddMainID adds v to the "main_id" field.
func (u *DictItemUpsertOne) AddMainID(v uint32) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.AddMainID(v)
	})
}

// UpdateMainID sets the "main_id" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateMainID() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateMainID()
	})
}

// ClearMainID clears the value of the "main_id" field.
func (u *DictItemUpsertOne) ClearMainID() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearMainID()
	})
}

// SetSortID sets the "sort_id" field.
func (u *DictItemUpsertOne) SetSortID(v int32) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetSortID(v)
	})
}

// AddSortID adds v to the "sort_id" field.
func (u *DictItemUpsertOne) AddSortID(v int32) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.AddSortID(v)
	})
}

// UpdateSortID sets the "sort_id" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateSortID() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateSortID()
	})
}

// ClearSortID clears the value of the "sort_id" field.
func (u *DictItemUpsertOne) ClearSortID() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearSortID()
	})
}

// SetStatus sets the "status" field.
func (u *DictItemUpsertOne) SetStatus(v dictitem.Status) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateStatus() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *DictItemUpsertOne) ClearStatus() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *DictItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DictItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DictItemUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DictItemUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DictItemCreateBulk is the builder for creating many DictItem entities in bulk.
type DictItemCreateBulk struct {
	config
	err      error
	builders []*DictItemCreate
	conflict []sql.ConflictOption
}

// Save creates the DictItem entities in the database.
func (_c *DictItemCreateBulk) Save(ctx context.Context) ([]*DictItem, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*DictItem, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DictItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DictItemCreateBulk) SaveX(ctx context.Context) []*DictItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DictItemCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DictItemCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DictItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictItemUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (_c *DictItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *DictItemUpsertBulk {
	_c.conflict = opts
	return &DictItemUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DictItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DictItemCreateBulk) OnConflictColumns(columns ...string) *DictItemUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DictItemUpsertBulk{
		create: _c,
	}
}

// DictItemUpsertBulk is the builder for "upsert"-ing
// a bulk of DictItem nodes.
type DictItemUpsertBulk struct {
	create *DictItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DictItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dictitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DictItemUpsertBulk) UpdateNewValues() *DictItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(dictitem.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(dictitem.FieldCreateTime)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(dictitem.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DictItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DictItemUpsertBulk) Ignore() *DictItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictItemUpsertBulk) DoNothing() *DictItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictItemCreateBulk.OnConflict
// documentation for more info.
func (u *DictItemUpsertBulk) Update(set func(*DictItemUpsert)) *DictItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *DictItemUpsertBulk) SetUpdateTime(v time.Time) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateUpdateTime() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *DictItemUpsertBulk) ClearUpdateTime() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *DictItemUpsertBulk) SetDeleteTime(v time.Time) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateDeleteTime() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *DictItemUpsertBulk) ClearDeleteTime() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *DictItemUpsertBulk) SetCreateBy(v uint32) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *DictItemUpsertBulk) AddCreateBy(v uint32) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateCreateBy() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *DictItemUpsertBulk) ClearCreateBy() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *DictItemUpsertBulk) SetUpdateBy(v uint32) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *DictItemUpsertBulk) AddUpdateBy(v uint32) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateUpdateBy() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *DictItemUpsertBulk) ClearUpdateBy() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *DictItemUpsertBulk) SetRemark(v string) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateRemark() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *DictItemUpsertBulk) ClearRemark() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearRemark()
	})
}

// SetCode sets the "code" field.
func (u *DictItemUpsertBulk) SetCode(v string) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateCode() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *DictItemUpsertBulk) ClearCode() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearCode()
	})
}

// SetName sets the "name" field.
func (u *DictItemUpsertBulk) SetName(v string) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateName() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DictItemUpsertBulk) ClearName() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearName()
	})
}

// SetMainID sets the "main_id" field.
func (u *DictItemUpsertBulk) SetMainID(v uint32) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetMainID(v)
	})
}

// AddMainID adds v to the "main_id" field.
func (u *DictItemUpsertBulk) AddMainID(v uint32) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.AddMainID(v)
	})
}

// UpdateMainID sets the "main_id" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateMainID() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateMainID()
	})
}

// ClearMainID clears the value of the "main_id" field.
func (u *DictItemUpsertBulk) ClearMainID() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearMainID()
	})
}

// SetSortID sets the "sort_id" field.
func (u *DictItemUpsertBulk) SetSortID(v int32) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetSortID(v)
	})
}

// AddSortID adds v to the "sort_id" field.
func (u *DictItemUpsertBulk) AddSortID(v int32) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.AddSortID(v)
	})
}

// UpdateSortID sets the "sort_id" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateSortID() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateSortID()
	})
}

// ClearSortID clears the value of the "sort_id" field.
func (u *DictItemUpsertBulk) ClearSortID() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearSortID()
	})
}

// SetStatus sets the "status" field.
func (u *DictItemUpsertBulk) SetStatus(v dictitem.Status) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateStatus() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *DictItemUpsertBulk) ClearStatus() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *DictItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DictItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DictItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/tenant"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 租户表
type Tenant struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint32 `json:"id,omitempty"`
	// 创建时间
	CreateTime *time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime *time.Time `json:"update_time,omitempty"`
	// 删除时间
	DeleteTime *time.Time `json:"delete_time,omitempty"`
	// 创建者ID
	CreateBy *uint32 `json:"create_by,omitempty"`
	// 更新者ID
	UpdateBy *uint32 `json:"update_by,omitempty"`
	// 备注
	Remark *string `json:"remark,omitempty"`
	// 租户名称
	Name *string `json:"name,omitempty"`
	// 租户编号
	Code *string `json:"code,omitempty"`
	// 租户logo地址
	LogoURL *string `json:"logo_url,omitempty"`
	// 所属行业
	Industry *string `json:"industry,omitempty"`
	// 管理员用户ID
	AdminUserID *uint32 `json:"admin_user_id,omitempty"`
	// 租户状态
	Status *tenant.Status `json:"status,omitempty"`
	// 租户类型
	Type *tenant.Type `json:"type,omitempty"`
	// 审核状态
	AuditStatus *tenant.AuditStatus `json:"audit_status,omitempty"`
	// 订阅时间
	SubscriptionAt *time.Time `json:"subscription_at,omitempty"`
	// 取消订阅时间
	UnsubscribeAt *time.Time `json:"unsubscribe_at,omitempty"`
	// 订阅套餐
	SubscriptionPlan *string `json:"subscription_plan,omitempty"`
	// 租户有效期
	ExpiredAt *time.Time `json:"expired_at,omitempty"`
	// 最后一次登录的时间
	LastLoginTime *time.Time `json:"last_login_time,omitempty"`
	// 最后一次登录的IP
	LastLoginIP  *string `json:"last_login_ip,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tenant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenant.FieldID, tenant.FieldCreateBy, tenant.FieldUpdateBy, tenant.FieldAdminUserID:
			values[i] = new(sql.NullInt64)
		case tenant.FieldRemark, tenant.FieldName, tenant.FieldCode, tenant.FieldLogoURL, tenant.FieldIndustry, tenant.FieldStatus, tenant.FieldType, tenant.FieldAuditStatus, tenant.FieldSubscriptionPlan, tenant.FieldLastLoginIP:
			values[i] = new(sql.NullString)
		case tenant.FieldCreateTime, tenant.FieldUpdateTime, tenant.FieldDeleteTime, tenant.FieldSubscriptionAt, tenant.FieldUnsubscribeAt, tenant.FieldExpiredAt, tenant.FieldLastLoginTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tenant fields.
func (_m *Tenant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint32(value.Int64)
		case tenant.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = new(time.Time)
				*_m.CreateTime = value.Time
			}
		case tenant.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = new(time.Time)
				*_m.UpdateTime = value.Time
			}
		case tenant.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				_m.DeleteTime = new(time.Time)
				*_m.DeleteTime = value.Time
			}
		case tenant.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = new(uint32)
				*_m.CreateBy = uint32(value.Int64)
			}
		case tenant.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = new(uint32)
				*_m.UpdateBy = uint32(value.Int64)
			}
		case tenant.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				_m.Remark = new(string)
				*_m.Remark = value.String
			}
		case tenant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = new(string)
				*_m.Name = value.String
			}
		case tenant.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				_m.Code = new(string)
				*_m.Code = value.String
			}
		case tenant.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				_m.LogoURL = new(string)
				*_m.LogoURL = value.String
			}
		case tenant.FieldIndustry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field industry", values[i])
			} else if value.Valid {
				_m.Industry = new(string)
				*_m.Industry = value.String
			}
		case tenant.FieldAdminUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field admin_user_id", values[i])
			} else if value.Valid {
				_m.AdminUserID = new(uint32)
				*_m.AdminUserID = uint32(value.Int64)
			}
		case tenant.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = new(tenant.Status)
				*_m.Status = tenant.Status(value.String)
			}
		case tenant.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = new(tenant.Type)
				*_m.Type = tenant.Type(value.String)
			}
		case tenant.FieldAuditStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field audit_status", values[i])
			} else if value.Valid {
				_m.AuditStatus = new(tenant.AuditStatus)
				*_m.AuditStatus = tenant.AuditStatus(value.String)
			}
		case tenant.FieldSubscriptionAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_at", values[i])
			} else if value.Valid {
				_m.SubscriptionAt = new(time.Time)
				*_m.SubscriptionAt = value.Time
			}
		case tenant.FieldUnsubscribeAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field unsubscribe_at", values[i])
			} else if value.Valid {
				_m.UnsubscribeAt = new(time.Time)
				*_m.UnsubscribeAt = value.Time
			}
		case tenant.FieldSubscriptionPlan:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_plan", values[i])
			} else if value.Valid {
				_m.SubscriptionPlan = new(string)
				*_m.SubscriptionPlan = value.String
			}
		case tenant.FieldExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expired_at", values[i])
			} else if value.Valid {
				_m.ExpiredAt = new(time.Time)
				*_m.ExpiredAt = value.Time
			}
		case tenant.FieldLastLoginTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_time", values[i])
			} else if value.Valid {
				_m.LastLoginTime = new(time.Time)
				*_m.LastLoginTime = value.Time
			}
		case tenant.FieldLastLoginIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_ip", values[i])
			} else if value.Valid {
				_m.LastLoginIP = new(string)
				*_m.LastLoginIP = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tenant.
// This includes values selected through modifiers, order, etc.
func (_m *Tenant) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Tenant.
// Note that you need to call Tenant.Unwrap() before calling this method if this Tenant
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Tenant) Update() *TenantUpdateOne {
	return NewTenantClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Tenant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Tenant) Unwrap() *Tenant {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tenant is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Tenant) String() string {
	var builder strings.Builder
	builder.WriteString("Tenant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	if v := _m.CreateTime; v != nil {
		builder.WriteString("create_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UpdateTime; v != nil {
		builder.WriteString("update_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.CreateBy; v != nil {
		builder.WriteString("create_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.UpdateBy; v != nil {
		builder.WriteString("update_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Remark; v != nil {
		builder.WriteString("remark=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Code; v != nil {
		builder.WriteString("code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.LogoURL; v != nil {
		builder.WriteString("logo_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Industry; v != nil {
		builder.WriteString("industry=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.AdminUserID; v != nil {
		builder.WriteString("admin_user_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Status; v != nil {
		builder.WriteString("status=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Type; v != nil {
		builder.WriteString("type=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.AuditStatus; v != nil {
		builder.WriteString("audit_status=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.SubscriptionAt; v != nil {
		builder.WriteString("subscription_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UnsubscribeAt; v != nil {
		builder.WriteString("unsubscribe_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.SubscriptionPlan; v != nil {
		builder.WriteString("subscription_plan=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.ExpiredAt; v != nil {
		builder.WriteString("expired_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.LastLoginTime; v != nil {
		builder.WriteString("last_login_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.LastLoginIP; v != nil {
		builder.WriteString("last_login_ip=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Tenants is a parsable slice of Tenant.
type Tenants []*Tenant

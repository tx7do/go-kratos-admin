// Code generated by ent, DO NOT EDIT.

package ent

import (
	"kratos-admin/app/admin/service/internal/data/ent/adminloginlog"
	"kratos-admin/app/admin/service/internal/data/ent/adminloginrestriction"
	"kratos-admin/app/admin/service/internal/data/ent/adminoperationlog"
	"kratos-admin/app/admin/service/internal/data/ent/apiresource"
	"kratos-admin/app/admin/service/internal/data/ent/department"
	"kratos-admin/app/admin/service/internal/data/ent/dictentry"
	"kratos-admin/app/admin/service/internal/data/ent/dicttype"
	"kratos-admin/app/admin/service/internal/data/ent/file"
	"kratos-admin/app/admin/service/internal/data/ent/language"
	"kratos-admin/app/admin/service/internal/data/ent/menu"
	"kratos-admin/app/admin/service/internal/data/ent/notificationmessage"
	"kratos-admin/app/admin/service/internal/data/ent/notificationmessagecategory"
	"kratos-admin/app/admin/service/internal/data/ent/notificationmessagerecipient"
	"kratos-admin/app/admin/service/internal/data/ent/organization"
	"kratos-admin/app/admin/service/internal/data/ent/position"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"kratos-admin/app/admin/service/internal/data/ent/privatemessage"
	"kratos-admin/app/admin/service/internal/data/ent/role"
	"kratos-admin/app/admin/service/internal/data/ent/roleapi"
	"kratos-admin/app/admin/service/internal/data/ent/roledept"
	"kratos-admin/app/admin/service/internal/data/ent/rolemenu"
	"kratos-admin/app/admin/service/internal/data/ent/roleorg"
	"kratos-admin/app/admin/service/internal/data/ent/roleposition"
	"kratos-admin/app/admin/service/internal/data/ent/task"
	"kratos-admin/app/admin/service/internal/data/ent/tenant"
	"kratos-admin/app/admin/service/internal/data/ent/user"
	"kratos-admin/app/admin/service/internal/data/ent/usercredential"
	"kratos-admin/app/admin/service/internal/data/ent/userposition"
	"kratos-admin/app/admin/service/internal/data/ent/userrole"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 28)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   adminloginlog.Table,
			Columns: adminloginlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: adminloginlog.FieldID,
			},
		},
		Type: "AdminLoginLog",
		Fields: map[string]*sqlgraph.FieldSpec{
			adminloginlog.FieldCreatedAt:      {Type: field.TypeTime, Column: adminloginlog.FieldCreatedAt},
			adminloginlog.FieldLoginIP:        {Type: field.TypeString, Column: adminloginlog.FieldLoginIP},
			adminloginlog.FieldLoginMAC:       {Type: field.TypeString, Column: adminloginlog.FieldLoginMAC},
			adminloginlog.FieldLoginTime:      {Type: field.TypeTime, Column: adminloginlog.FieldLoginTime},
			adminloginlog.FieldUserAgent:      {Type: field.TypeString, Column: adminloginlog.FieldUserAgent},
			adminloginlog.FieldBrowserName:    {Type: field.TypeString, Column: adminloginlog.FieldBrowserName},
			adminloginlog.FieldBrowserVersion: {Type: field.TypeString, Column: adminloginlog.FieldBrowserVersion},
			adminloginlog.FieldClientID:       {Type: field.TypeString, Column: adminloginlog.FieldClientID},
			adminloginlog.FieldClientName:     {Type: field.TypeString, Column: adminloginlog.FieldClientName},
			adminloginlog.FieldOsName:         {Type: field.TypeString, Column: adminloginlog.FieldOsName},
			adminloginlog.FieldOsVersion:      {Type: field.TypeString, Column: adminloginlog.FieldOsVersion},
			adminloginlog.FieldUserID:         {Type: field.TypeUint32, Column: adminloginlog.FieldUserID},
			adminloginlog.FieldUsername:       {Type: field.TypeString, Column: adminloginlog.FieldUsername},
			adminloginlog.FieldStatusCode:     {Type: field.TypeInt32, Column: adminloginlog.FieldStatusCode},
			adminloginlog.FieldSuccess:        {Type: field.TypeBool, Column: adminloginlog.FieldSuccess},
			adminloginlog.FieldReason:         {Type: field.TypeString, Column: adminloginlog.FieldReason},
			adminloginlog.FieldLocation:       {Type: field.TypeString, Column: adminloginlog.FieldLocation},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   adminloginrestriction.Table,
			Columns: adminloginrestriction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: adminloginrestriction.FieldID,
			},
		},
		Type: "AdminLoginRestriction",
		Fields: map[string]*sqlgraph.FieldSpec{
			adminloginrestriction.FieldCreatedAt: {Type: field.TypeTime, Column: adminloginrestriction.FieldCreatedAt},
			adminloginrestriction.FieldUpdatedAt: {Type: field.TypeTime, Column: adminloginrestriction.FieldUpdatedAt},
			adminloginrestriction.FieldDeletedAt: {Type: field.TypeTime, Column: adminloginrestriction.FieldDeletedAt},
			adminloginrestriction.FieldCreatedBy: {Type: field.TypeUint32, Column: adminloginrestriction.FieldCreatedBy},
			adminloginrestriction.FieldUpdatedBy: {Type: field.TypeUint32, Column: adminloginrestriction.FieldUpdatedBy},
			adminloginrestriction.FieldDeletedBy: {Type: field.TypeUint32, Column: adminloginrestriction.FieldDeletedBy},
			adminloginrestriction.FieldTargetID:  {Type: field.TypeUint32, Column: adminloginrestriction.FieldTargetID},
			adminloginrestriction.FieldValue:     {Type: field.TypeString, Column: adminloginrestriction.FieldValue},
			adminloginrestriction.FieldReason:    {Type: field.TypeString, Column: adminloginrestriction.FieldReason},
			adminloginrestriction.FieldType:      {Type: field.TypeEnum, Column: adminloginrestriction.FieldType},
			adminloginrestriction.FieldMethod:    {Type: field.TypeEnum, Column: adminloginrestriction.FieldMethod},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   adminoperationlog.Table,
			Columns: adminoperationlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: adminoperationlog.FieldID,
			},
		},
		Type: "AdminOperationLog",
		Fields: map[string]*sqlgraph.FieldSpec{
			adminoperationlog.FieldCreatedAt:      {Type: field.TypeTime, Column: adminoperationlog.FieldCreatedAt},
			adminoperationlog.FieldRequestID:      {Type: field.TypeString, Column: adminoperationlog.FieldRequestID},
			adminoperationlog.FieldMethod:         {Type: field.TypeString, Column: adminoperationlog.FieldMethod},
			adminoperationlog.FieldOperation:      {Type: field.TypeString, Column: adminoperationlog.FieldOperation},
			adminoperationlog.FieldPath:           {Type: field.TypeString, Column: adminoperationlog.FieldPath},
			adminoperationlog.FieldReferer:        {Type: field.TypeString, Column: adminoperationlog.FieldReferer},
			adminoperationlog.FieldRequestURI:     {Type: field.TypeString, Column: adminoperationlog.FieldRequestURI},
			adminoperationlog.FieldRequestBody:    {Type: field.TypeString, Column: adminoperationlog.FieldRequestBody},
			adminoperationlog.FieldRequestHeader:  {Type: field.TypeString, Column: adminoperationlog.FieldRequestHeader},
			adminoperationlog.FieldResponse:       {Type: field.TypeString, Column: adminoperationlog.FieldResponse},
			adminoperationlog.FieldCostTime:       {Type: field.TypeFloat64, Column: adminoperationlog.FieldCostTime},
			adminoperationlog.FieldUserID:         {Type: field.TypeUint32, Column: adminoperationlog.FieldUserID},
			adminoperationlog.FieldUsername:       {Type: field.TypeString, Column: adminoperationlog.FieldUsername},
			adminoperationlog.FieldClientIP:       {Type: field.TypeString, Column: adminoperationlog.FieldClientIP},
			adminoperationlog.FieldStatusCode:     {Type: field.TypeInt32, Column: adminoperationlog.FieldStatusCode},
			adminoperationlog.FieldReason:         {Type: field.TypeString, Column: adminoperationlog.FieldReason},
			adminoperationlog.FieldSuccess:        {Type: field.TypeBool, Column: adminoperationlog.FieldSuccess},
			adminoperationlog.FieldLocation:       {Type: field.TypeString, Column: adminoperationlog.FieldLocation},
			adminoperationlog.FieldUserAgent:      {Type: field.TypeString, Column: adminoperationlog.FieldUserAgent},
			adminoperationlog.FieldBrowserName:    {Type: field.TypeString, Column: adminoperationlog.FieldBrowserName},
			adminoperationlog.FieldBrowserVersion: {Type: field.TypeString, Column: adminoperationlog.FieldBrowserVersion},
			adminoperationlog.FieldClientID:       {Type: field.TypeString, Column: adminoperationlog.FieldClientID},
			adminoperationlog.FieldClientName:     {Type: field.TypeString, Column: adminoperationlog.FieldClientName},
			adminoperationlog.FieldOsName:         {Type: field.TypeString, Column: adminoperationlog.FieldOsName},
			adminoperationlog.FieldOsVersion:      {Type: field.TypeString, Column: adminoperationlog.FieldOsVersion},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   apiresource.Table,
			Columns: apiresource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: apiresource.FieldID,
			},
		},
		Type: "ApiResource",
		Fields: map[string]*sqlgraph.FieldSpec{
			apiresource.FieldCreatedAt:         {Type: field.TypeTime, Column: apiresource.FieldCreatedAt},
			apiresource.FieldUpdatedAt:         {Type: field.TypeTime, Column: apiresource.FieldUpdatedAt},
			apiresource.FieldDeletedAt:         {Type: field.TypeTime, Column: apiresource.FieldDeletedAt},
			apiresource.FieldCreatedBy:         {Type: field.TypeUint32, Column: apiresource.FieldCreatedBy},
			apiresource.FieldUpdatedBy:         {Type: field.TypeUint32, Column: apiresource.FieldUpdatedBy},
			apiresource.FieldDeletedBy:         {Type: field.TypeUint32, Column: apiresource.FieldDeletedBy},
			apiresource.FieldDescription:       {Type: field.TypeString, Column: apiresource.FieldDescription},
			apiresource.FieldModule:            {Type: field.TypeString, Column: apiresource.FieldModule},
			apiresource.FieldModuleDescription: {Type: field.TypeString, Column: apiresource.FieldModuleDescription},
			apiresource.FieldOperation:         {Type: field.TypeString, Column: apiresource.FieldOperation},
			apiresource.FieldPath:              {Type: field.TypeString, Column: apiresource.FieldPath},
			apiresource.FieldMethod:            {Type: field.TypeString, Column: apiresource.FieldMethod},
			apiresource.FieldScope:             {Type: field.TypeEnum, Column: apiresource.FieldScope},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   department.Table,
			Columns: department.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: department.FieldID,
			},
		},
		Type: "Department",
		Fields: map[string]*sqlgraph.FieldSpec{
			department.FieldCreatedAt:      {Type: field.TypeTime, Column: department.FieldCreatedAt},
			department.FieldUpdatedAt:      {Type: field.TypeTime, Column: department.FieldUpdatedAt},
			department.FieldDeletedAt:      {Type: field.TypeTime, Column: department.FieldDeletedAt},
			department.FieldCreatedBy:      {Type: field.TypeUint32, Column: department.FieldCreatedBy},
			department.FieldUpdatedBy:      {Type: field.TypeUint32, Column: department.FieldUpdatedBy},
			department.FieldDeletedBy:      {Type: field.TypeUint32, Column: department.FieldDeletedBy},
			department.FieldRemark:         {Type: field.TypeString, Column: department.FieldRemark},
			department.FieldTenantID:       {Type: field.TypeUint32, Column: department.FieldTenantID},
			department.FieldName:           {Type: field.TypeString, Column: department.FieldName},
			department.FieldParentID:       {Type: field.TypeUint32, Column: department.FieldParentID},
			department.FieldOrganizationID: {Type: field.TypeUint32, Column: department.FieldOrganizationID},
			department.FieldManagerID:      {Type: field.TypeUint32, Column: department.FieldManagerID},
			department.FieldSortOrder:      {Type: field.TypeInt32, Column: department.FieldSortOrder},
			department.FieldStatus:         {Type: field.TypeEnum, Column: department.FieldStatus},
			department.FieldDescription:    {Type: field.TypeString, Column: department.FieldDescription},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dictentry.Table,
			Columns: dictentry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: dictentry.FieldID,
			},
		},
		Type: "DictEntry",
		Fields: map[string]*sqlgraph.FieldSpec{
			dictentry.FieldCreatedAt:    {Type: field.TypeTime, Column: dictentry.FieldCreatedAt},
			dictentry.FieldUpdatedAt:    {Type: field.TypeTime, Column: dictentry.FieldUpdatedAt},
			dictentry.FieldDeletedAt:    {Type: field.TypeTime, Column: dictentry.FieldDeletedAt},
			dictentry.FieldCreatedBy:    {Type: field.TypeUint32, Column: dictentry.FieldCreatedBy},
			dictentry.FieldUpdatedBy:    {Type: field.TypeUint32, Column: dictentry.FieldUpdatedBy},
			dictentry.FieldDeletedBy:    {Type: field.TypeUint32, Column: dictentry.FieldDeletedBy},
			dictentry.FieldDescription:  {Type: field.TypeString, Column: dictentry.FieldDescription},
			dictentry.FieldSortOrder:    {Type: field.TypeInt32, Column: dictentry.FieldSortOrder},
			dictentry.FieldIsEnabled:    {Type: field.TypeBool, Column: dictentry.FieldIsEnabled},
			dictentry.FieldTenantID:     {Type: field.TypeUint32, Column: dictentry.FieldTenantID},
			dictentry.FieldEntryLabel:   {Type: field.TypeString, Column: dictentry.FieldEntryLabel},
			dictentry.FieldEntryValue:   {Type: field.TypeString, Column: dictentry.FieldEntryValue},
			dictentry.FieldNumericValue: {Type: field.TypeInt32, Column: dictentry.FieldNumericValue},
			dictentry.FieldLanguageCode: {Type: field.TypeString, Column: dictentry.FieldLanguageCode},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dicttype.Table,
			Columns: dicttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: dicttype.FieldID,
			},
		},
		Type: "DictType",
		Fields: map[string]*sqlgraph.FieldSpec{
			dicttype.FieldCreatedAt:   {Type: field.TypeTime, Column: dicttype.FieldCreatedAt},
			dicttype.FieldUpdatedAt:   {Type: field.TypeTime, Column: dicttype.FieldUpdatedAt},
			dicttype.FieldDeletedAt:   {Type: field.TypeTime, Column: dicttype.FieldDeletedAt},
			dicttype.FieldCreatedBy:   {Type: field.TypeUint32, Column: dicttype.FieldCreatedBy},
			dicttype.FieldUpdatedBy:   {Type: field.TypeUint32, Column: dicttype.FieldUpdatedBy},
			dicttype.FieldDeletedBy:   {Type: field.TypeUint32, Column: dicttype.FieldDeletedBy},
			dicttype.FieldIsEnabled:   {Type: field.TypeBool, Column: dicttype.FieldIsEnabled},
			dicttype.FieldSortOrder:   {Type: field.TypeInt32, Column: dicttype.FieldSortOrder},
			dicttype.FieldDescription: {Type: field.TypeString, Column: dicttype.FieldDescription},
			dicttype.FieldTenantID:    {Type: field.TypeUint32, Column: dicttype.FieldTenantID},
			dicttype.FieldTypeCode:    {Type: field.TypeString, Column: dicttype.FieldTypeCode},
			dicttype.FieldTypeName:    {Type: field.TypeString, Column: dicttype.FieldTypeName},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   file.Table,
			Columns: file.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: file.FieldID,
			},
		},
		Type: "File",
		Fields: map[string]*sqlgraph.FieldSpec{
			file.FieldCreatedAt:     {Type: field.TypeTime, Column: file.FieldCreatedAt},
			file.FieldUpdatedAt:     {Type: field.TypeTime, Column: file.FieldUpdatedAt},
			file.FieldDeletedAt:     {Type: field.TypeTime, Column: file.FieldDeletedAt},
			file.FieldCreatedBy:     {Type: field.TypeUint32, Column: file.FieldCreatedBy},
			file.FieldUpdatedBy:     {Type: field.TypeUint32, Column: file.FieldUpdatedBy},
			file.FieldDeletedBy:     {Type: field.TypeUint32, Column: file.FieldDeletedBy},
			file.FieldRemark:        {Type: field.TypeString, Column: file.FieldRemark},
			file.FieldTenantID:      {Type: field.TypeUint32, Column: file.FieldTenantID},
			file.FieldProvider:      {Type: field.TypeEnum, Column: file.FieldProvider},
			file.FieldBucketName:    {Type: field.TypeString, Column: file.FieldBucketName},
			file.FieldFileDirectory: {Type: field.TypeString, Column: file.FieldFileDirectory},
			file.FieldFileGUID:      {Type: field.TypeString, Column: file.FieldFileGUID},
			file.FieldSaveFileName:  {Type: field.TypeString, Column: file.FieldSaveFileName},
			file.FieldFileName:      {Type: field.TypeString, Column: file.FieldFileName},
			file.FieldExtension:     {Type: field.TypeString, Column: file.FieldExtension},
			file.FieldSize:          {Type: field.TypeUint64, Column: file.FieldSize},
			file.FieldSizeFormat:    {Type: field.TypeString, Column: file.FieldSizeFormat},
			file.FieldLinkURL:       {Type: field.TypeString, Column: file.FieldLinkURL},
			file.FieldMd5:           {Type: field.TypeString, Column: file.FieldMd5},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   language.Table,
			Columns: language.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: language.FieldID,
			},
		},
		Type: "Language",
		Fields: map[string]*sqlgraph.FieldSpec{
			language.FieldCreatedAt:    {Type: field.TypeTime, Column: language.FieldCreatedAt},
			language.FieldUpdatedAt:    {Type: field.TypeTime, Column: language.FieldUpdatedAt},
			language.FieldDeletedAt:    {Type: field.TypeTime, Column: language.FieldDeletedAt},
			language.FieldCreatedBy:    {Type: field.TypeUint32, Column: language.FieldCreatedBy},
			language.FieldUpdatedBy:    {Type: field.TypeUint32, Column: language.FieldUpdatedBy},
			language.FieldDeletedBy:    {Type: field.TypeUint32, Column: language.FieldDeletedBy},
			language.FieldSortOrder:    {Type: field.TypeInt32, Column: language.FieldSortOrder},
			language.FieldIsEnabled:    {Type: field.TypeBool, Column: language.FieldIsEnabled},
			language.FieldLanguageCode: {Type: field.TypeString, Column: language.FieldLanguageCode},
			language.FieldLanguageName: {Type: field.TypeString, Column: language.FieldLanguageName},
			language.FieldNativeName:   {Type: field.TypeString, Column: language.FieldNativeName},
			language.FieldIsDefault:    {Type: field.TypeBool, Column: language.FieldIsDefault},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   menu.Table,
			Columns: menu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: menu.FieldID,
			},
		},
		Type: "Menu",
		Fields: map[string]*sqlgraph.FieldSpec{
			menu.FieldCreatedAt: {Type: field.TypeTime, Column: menu.FieldCreatedAt},
			menu.FieldUpdatedAt: {Type: field.TypeTime, Column: menu.FieldUpdatedAt},
			menu.FieldDeletedAt: {Type: field.TypeTime, Column: menu.FieldDeletedAt},
			menu.FieldCreatedBy: {Type: field.TypeUint32, Column: menu.FieldCreatedBy},
			menu.FieldUpdatedBy: {Type: field.TypeUint32, Column: menu.FieldUpdatedBy},
			menu.FieldDeletedBy: {Type: field.TypeUint32, Column: menu.FieldDeletedBy},
			menu.FieldRemark:    {Type: field.TypeString, Column: menu.FieldRemark},
			menu.FieldParentID:  {Type: field.TypeUint32, Column: menu.FieldParentID},
			menu.FieldStatus:    {Type: field.TypeEnum, Column: menu.FieldStatus},
			menu.FieldType:      {Type: field.TypeEnum, Column: menu.FieldType},
			menu.FieldPath:      {Type: field.TypeString, Column: menu.FieldPath},
			menu.FieldRedirect:  {Type: field.TypeString, Column: menu.FieldRedirect},
			menu.FieldAlias:     {Type: field.TypeString, Column: menu.FieldAlias},
			menu.FieldName:      {Type: field.TypeString, Column: menu.FieldName},
			menu.FieldComponent: {Type: field.TypeString, Column: menu.FieldComponent},
			menu.FieldMeta:      {Type: field.TypeJSON, Column: menu.FieldMeta},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   notificationmessage.Table,
			Columns: notificationmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: notificationmessage.FieldID,
			},
		},
		Type: "NotificationMessage",
		Fields: map[string]*sqlgraph.FieldSpec{
			notificationmessage.FieldCreatedAt:  {Type: field.TypeTime, Column: notificationmessage.FieldCreatedAt},
			notificationmessage.FieldUpdatedAt:  {Type: field.TypeTime, Column: notificationmessage.FieldUpdatedAt},
			notificationmessage.FieldDeletedAt:  {Type: field.TypeTime, Column: notificationmessage.FieldDeletedAt},
			notificationmessage.FieldCreatedBy:  {Type: field.TypeUint32, Column: notificationmessage.FieldCreatedBy},
			notificationmessage.FieldUpdatedBy:  {Type: field.TypeUint32, Column: notificationmessage.FieldUpdatedBy},
			notificationmessage.FieldDeletedBy:  {Type: field.TypeUint32, Column: notificationmessage.FieldDeletedBy},
			notificationmessage.FieldTenantID:   {Type: field.TypeUint32, Column: notificationmessage.FieldTenantID},
			notificationmessage.FieldSubject:    {Type: field.TypeString, Column: notificationmessage.FieldSubject},
			notificationmessage.FieldContent:    {Type: field.TypeString, Column: notificationmessage.FieldContent},
			notificationmessage.FieldCategoryID: {Type: field.TypeUint32, Column: notificationmessage.FieldCategoryID},
			notificationmessage.FieldStatus:     {Type: field.TypeEnum, Column: notificationmessage.FieldStatus},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   notificationmessagecategory.Table,
			Columns: notificationmessagecategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: notificationmessagecategory.FieldID,
			},
		},
		Type: "NotificationMessageCategory",
		Fields: map[string]*sqlgraph.FieldSpec{
			notificationmessagecategory.FieldCreatedAt: {Type: field.TypeTime, Column: notificationmessagecategory.FieldCreatedAt},
			notificationmessagecategory.FieldUpdatedAt: {Type: field.TypeTime, Column: notificationmessagecategory.FieldUpdatedAt},
			notificationmessagecategory.FieldDeletedAt: {Type: field.TypeTime, Column: notificationmessagecategory.FieldDeletedAt},
			notificationmessagecategory.FieldCreatedBy: {Type: field.TypeUint32, Column: notificationmessagecategory.FieldCreatedBy},
			notificationmessagecategory.FieldUpdatedBy: {Type: field.TypeUint32, Column: notificationmessagecategory.FieldUpdatedBy},
			notificationmessagecategory.FieldDeletedBy: {Type: field.TypeUint32, Column: notificationmessagecategory.FieldDeletedBy},
			notificationmessagecategory.FieldRemark:    {Type: field.TypeString, Column: notificationmessagecategory.FieldRemark},
			notificationmessagecategory.FieldTenantID:  {Type: field.TypeUint32, Column: notificationmessagecategory.FieldTenantID},
			notificationmessagecategory.FieldName:      {Type: field.TypeString, Column: notificationmessagecategory.FieldName},
			notificationmessagecategory.FieldCode:      {Type: field.TypeString, Column: notificationmessagecategory.FieldCode},
			notificationmessagecategory.FieldSortOrder: {Type: field.TypeInt32, Column: notificationmessagecategory.FieldSortOrder},
			notificationmessagecategory.FieldEnable:    {Type: field.TypeBool, Column: notificationmessagecategory.FieldEnable},
			notificationmessagecategory.FieldParentID:  {Type: field.TypeUint32, Column: notificationmessagecategory.FieldParentID},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   notificationmessagerecipient.Table,
			Columns: notificationmessagerecipient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: notificationmessagerecipient.FieldID,
			},
		},
		Type: "NotificationMessageRecipient",
		Fields: map[string]*sqlgraph.FieldSpec{
			notificationmessagerecipient.FieldCreatedAt:   {Type: field.TypeTime, Column: notificationmessagerecipient.FieldCreatedAt},
			notificationmessagerecipient.FieldUpdatedAt:   {Type: field.TypeTime, Column: notificationmessagerecipient.FieldUpdatedAt},
			notificationmessagerecipient.FieldDeletedAt:   {Type: field.TypeTime, Column: notificationmessagerecipient.FieldDeletedAt},
			notificationmessagerecipient.FieldTenantID:    {Type: field.TypeUint32, Column: notificationmessagerecipient.FieldTenantID},
			notificationmessagerecipient.FieldMessageID:   {Type: field.TypeUint32, Column: notificationmessagerecipient.FieldMessageID},
			notificationmessagerecipient.FieldRecipientID: {Type: field.TypeUint32, Column: notificationmessagerecipient.FieldRecipientID},
			notificationmessagerecipient.FieldStatus:      {Type: field.TypeEnum, Column: notificationmessagerecipient.FieldStatus},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organization.Table,
			Columns: organization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: organization.FieldID,
			},
		},
		Type: "Organization",
		Fields: map[string]*sqlgraph.FieldSpec{
			organization.FieldCreatedAt:        {Type: field.TypeTime, Column: organization.FieldCreatedAt},
			organization.FieldUpdatedAt:        {Type: field.TypeTime, Column: organization.FieldUpdatedAt},
			organization.FieldDeletedAt:        {Type: field.TypeTime, Column: organization.FieldDeletedAt},
			organization.FieldCreatedBy:        {Type: field.TypeUint32, Column: organization.FieldCreatedBy},
			organization.FieldUpdatedBy:        {Type: field.TypeUint32, Column: organization.FieldUpdatedBy},
			organization.FieldDeletedBy:        {Type: field.TypeUint32, Column: organization.FieldDeletedBy},
			organization.FieldRemark:           {Type: field.TypeString, Column: organization.FieldRemark},
			organization.FieldTenantID:         {Type: field.TypeUint32, Column: organization.FieldTenantID},
			organization.FieldName:             {Type: field.TypeString, Column: organization.FieldName},
			organization.FieldParentID:         {Type: field.TypeUint32, Column: organization.FieldParentID},
			organization.FieldSortOrder:        {Type: field.TypeInt32, Column: organization.FieldSortOrder},
			organization.FieldStatus:           {Type: field.TypeEnum, Column: organization.FieldStatus},
			organization.FieldOrganizationType: {Type: field.TypeEnum, Column: organization.FieldOrganizationType},
			organization.FieldCreditCode:       {Type: field.TypeString, Column: organization.FieldCreditCode},
			organization.FieldAddress:          {Type: field.TypeString, Column: organization.FieldAddress},
			organization.FieldBusinessScope:    {Type: field.TypeString, Column: organization.FieldBusinessScope},
			organization.FieldIsLegalEntity:    {Type: field.TypeBool, Column: organization.FieldIsLegalEntity},
			organization.FieldManagerID:        {Type: field.TypeUint32, Column: organization.FieldManagerID},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   position.Table,
			Columns: position.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: position.FieldID,
			},
		},
		Type: "Position",
		Fields: map[string]*sqlgraph.FieldSpec{
			position.FieldCreatedAt:      {Type: field.TypeTime, Column: position.FieldCreatedAt},
			position.FieldUpdatedAt:      {Type: field.TypeTime, Column: position.FieldUpdatedAt},
			position.FieldDeletedAt:      {Type: field.TypeTime, Column: position.FieldDeletedAt},
			position.FieldCreatedBy:      {Type: field.TypeUint32, Column: position.FieldCreatedBy},
			position.FieldUpdatedBy:      {Type: field.TypeUint32, Column: position.FieldUpdatedBy},
			position.FieldDeletedBy:      {Type: field.TypeUint32, Column: position.FieldDeletedBy},
			position.FieldRemark:         {Type: field.TypeString, Column: position.FieldRemark},
			position.FieldTenantID:       {Type: field.TypeUint32, Column: position.FieldTenantID},
			position.FieldName:           {Type: field.TypeString, Column: position.FieldName},
			position.FieldCode:           {Type: field.TypeString, Column: position.FieldCode},
			position.FieldParentID:       {Type: field.TypeUint32, Column: position.FieldParentID},
			position.FieldSortOrder:      {Type: field.TypeInt32, Column: position.FieldSortOrder},
			position.FieldOrganizationID: {Type: field.TypeUint32, Column: position.FieldOrganizationID},
			position.FieldDepartmentID:   {Type: field.TypeUint32, Column: position.FieldDepartmentID},
			position.FieldStatus:         {Type: field.TypeEnum, Column: position.FieldStatus},
			position.FieldDescription:    {Type: field.TypeString, Column: position.FieldDescription},
			position.FieldQuota:          {Type: field.TypeUint32, Column: position.FieldQuota},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   privatemessage.Table,
			Columns: privatemessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: privatemessage.FieldID,
			},
		},
		Type: "PrivateMessage",
		Fields: map[string]*sqlgraph.FieldSpec{
			privatemessage.FieldCreatedAt:  {Type: field.TypeTime, Column: privatemessage.FieldCreatedAt},
			privatemessage.FieldUpdatedAt:  {Type: field.TypeTime, Column: privatemessage.FieldUpdatedAt},
			privatemessage.FieldDeletedAt:  {Type: field.TypeTime, Column: privatemessage.FieldDeletedAt},
			privatemessage.FieldTenantID:   {Type: field.TypeUint32, Column: privatemessage.FieldTenantID},
			privatemessage.FieldSubject:    {Type: field.TypeString, Column: privatemessage.FieldSubject},
			privatemessage.FieldContent:    {Type: field.TypeString, Column: privatemessage.FieldContent},
			privatemessage.FieldStatus:     {Type: field.TypeEnum, Column: privatemessage.FieldStatus},
			privatemessage.FieldSenderID:   {Type: field.TypeUint32, Column: privatemessage.FieldSenderID},
			privatemessage.FieldReceiverID: {Type: field.TypeUint32, Column: privatemessage.FieldReceiverID},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: role.FieldID,
			},
		},
		Type: "Role",
		Fields: map[string]*sqlgraph.FieldSpec{
			role.FieldCreatedAt: {Type: field.TypeTime, Column: role.FieldCreatedAt},
			role.FieldUpdatedAt: {Type: field.TypeTime, Column: role.FieldUpdatedAt},
			role.FieldDeletedAt: {Type: field.TypeTime, Column: role.FieldDeletedAt},
			role.FieldCreatedBy: {Type: field.TypeUint32, Column: role.FieldCreatedBy},
			role.FieldUpdatedBy: {Type: field.TypeUint32, Column: role.FieldUpdatedBy},
			role.FieldDeletedBy: {Type: field.TypeUint32, Column: role.FieldDeletedBy},
			role.FieldRemark:    {Type: field.TypeString, Column: role.FieldRemark},
			role.FieldTenantID:  {Type: field.TypeUint32, Column: role.FieldTenantID},
			role.FieldName:      {Type: field.TypeString, Column: role.FieldName},
			role.FieldCode:      {Type: field.TypeString, Column: role.FieldCode},
			role.FieldParentID:  {Type: field.TypeUint32, Column: role.FieldParentID},
			role.FieldSortOrder: {Type: field.TypeInt32, Column: role.FieldSortOrder},
			role.FieldMenus:     {Type: field.TypeJSON, Column: role.FieldMenus},
			role.FieldApis:      {Type: field.TypeJSON, Column: role.FieldApis},
			role.FieldDataScope: {Type: field.TypeEnum, Column: role.FieldDataScope},
			role.FieldStatus:    {Type: field.TypeEnum, Column: role.FieldStatus},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   roleapi.Table,
			Columns: roleapi.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: roleapi.FieldID,
			},
		},
		Type: "RoleApi",
		Fields: map[string]*sqlgraph.FieldSpec{
			roleapi.FieldCreatedAt: {Type: field.TypeTime, Column: roleapi.FieldCreatedAt},
			roleapi.FieldUpdatedAt: {Type: field.TypeTime, Column: roleapi.FieldUpdatedAt},
			roleapi.FieldDeletedAt: {Type: field.TypeTime, Column: roleapi.FieldDeletedAt},
			roleapi.FieldCreatedBy: {Type: field.TypeUint32, Column: roleapi.FieldCreatedBy},
			roleapi.FieldUpdatedBy: {Type: field.TypeUint32, Column: roleapi.FieldUpdatedBy},
			roleapi.FieldDeletedBy: {Type: field.TypeUint32, Column: roleapi.FieldDeletedBy},
			roleapi.FieldRoleID:    {Type: field.TypeUint32, Column: roleapi.FieldRoleID},
			roleapi.FieldAPIID:     {Type: field.TypeUint32, Column: roleapi.FieldAPIID},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   roledept.Table,
			Columns: roledept.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: roledept.FieldID,
			},
		},
		Type: "RoleDept",
		Fields: map[string]*sqlgraph.FieldSpec{
			roledept.FieldCreatedAt: {Type: field.TypeTime, Column: roledept.FieldCreatedAt},
			roledept.FieldUpdatedAt: {Type: field.TypeTime, Column: roledept.FieldUpdatedAt},
			roledept.FieldDeletedAt: {Type: field.TypeTime, Column: roledept.FieldDeletedAt},
			roledept.FieldCreatedBy: {Type: field.TypeUint32, Column: roledept.FieldCreatedBy},
			roledept.FieldUpdatedBy: {Type: field.TypeUint32, Column: roledept.FieldUpdatedBy},
			roledept.FieldDeletedBy: {Type: field.TypeUint32, Column: roledept.FieldDeletedBy},
			roledept.FieldRoleID:    {Type: field.TypeUint32, Column: roledept.FieldRoleID},
			roledept.FieldDeptID:    {Type: field.TypeUint32, Column: roledept.FieldDeptID},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   rolemenu.Table,
			Columns: rolemenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: rolemenu.FieldID,
			},
		},
		Type: "RoleMenu",
		Fields: map[string]*sqlgraph.FieldSpec{
			rolemenu.FieldCreatedAt: {Type: field.TypeTime, Column: rolemenu.FieldCreatedAt},
			rolemenu.FieldUpdatedAt: {Type: field.TypeTime, Column: rolemenu.FieldUpdatedAt},
			rolemenu.FieldDeletedAt: {Type: field.TypeTime, Column: rolemenu.FieldDeletedAt},
			rolemenu.FieldCreatedBy: {Type: field.TypeUint32, Column: rolemenu.FieldCreatedBy},
			rolemenu.FieldUpdatedBy: {Type: field.TypeUint32, Column: rolemenu.FieldUpdatedBy},
			rolemenu.FieldDeletedBy: {Type: field.TypeUint32, Column: rolemenu.FieldDeletedBy},
			rolemenu.FieldRoleID:    {Type: field.TypeUint32, Column: rolemenu.FieldRoleID},
			rolemenu.FieldMenuID:    {Type: field.TypeUint32, Column: rolemenu.FieldMenuID},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   roleorg.Table,
			Columns: roleorg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: roleorg.FieldID,
			},
		},
		Type: "RoleOrg",
		Fields: map[string]*sqlgraph.FieldSpec{
			roleorg.FieldCreatedAt: {Type: field.TypeTime, Column: roleorg.FieldCreatedAt},
			roleorg.FieldUpdatedAt: {Type: field.TypeTime, Column: roleorg.FieldUpdatedAt},
			roleorg.FieldDeletedAt: {Type: field.TypeTime, Column: roleorg.FieldDeletedAt},
			roleorg.FieldCreatedBy: {Type: field.TypeUint32, Column: roleorg.FieldCreatedBy},
			roleorg.FieldUpdatedBy: {Type: field.TypeUint32, Column: roleorg.FieldUpdatedBy},
			roleorg.FieldDeletedBy: {Type: field.TypeUint32, Column: roleorg.FieldDeletedBy},
			roleorg.FieldRoleID:    {Type: field.TypeUint32, Column: roleorg.FieldRoleID},
			roleorg.FieldOrgID:     {Type: field.TypeUint32, Column: roleorg.FieldOrgID},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   roleposition.Table,
			Columns: roleposition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: roleposition.FieldID,
			},
		},
		Type: "RolePosition",
		Fields: map[string]*sqlgraph.FieldSpec{
			roleposition.FieldCreatedAt:  {Type: field.TypeTime, Column: roleposition.FieldCreatedAt},
			roleposition.FieldUpdatedAt:  {Type: field.TypeTime, Column: roleposition.FieldUpdatedAt},
			roleposition.FieldDeletedAt:  {Type: field.TypeTime, Column: roleposition.FieldDeletedAt},
			roleposition.FieldCreatedBy:  {Type: field.TypeUint32, Column: roleposition.FieldCreatedBy},
			roleposition.FieldUpdatedBy:  {Type: field.TypeUint32, Column: roleposition.FieldUpdatedBy},
			roleposition.FieldDeletedBy:  {Type: field.TypeUint32, Column: roleposition.FieldDeletedBy},
			roleposition.FieldRoleID:     {Type: field.TypeUint32, Column: roleposition.FieldRoleID},
			roleposition.FieldPositionID: {Type: field.TypeUint32, Column: roleposition.FieldPositionID},
		},
	}
	graph.Nodes[22] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: task.FieldID,
			},
		},
		Type: "Task",
		Fields: map[string]*sqlgraph.FieldSpec{
			task.FieldCreatedAt:   {Type: field.TypeTime, Column: task.FieldCreatedAt},
			task.FieldUpdatedAt:   {Type: field.TypeTime, Column: task.FieldUpdatedAt},
			task.FieldDeletedAt:   {Type: field.TypeTime, Column: task.FieldDeletedAt},
			task.FieldCreatedBy:   {Type: field.TypeUint32, Column: task.FieldCreatedBy},
			task.FieldUpdatedBy:   {Type: field.TypeUint32, Column: task.FieldUpdatedBy},
			task.FieldDeletedBy:   {Type: field.TypeUint32, Column: task.FieldDeletedBy},
			task.FieldRemark:      {Type: field.TypeString, Column: task.FieldRemark},
			task.FieldTenantID:    {Type: field.TypeUint32, Column: task.FieldTenantID},
			task.FieldType:        {Type: field.TypeEnum, Column: task.FieldType},
			task.FieldTypeName:    {Type: field.TypeString, Column: task.FieldTypeName},
			task.FieldTaskPayload: {Type: field.TypeString, Column: task.FieldTaskPayload},
			task.FieldCronSpec:    {Type: field.TypeString, Column: task.FieldCronSpec},
			task.FieldTaskOptions: {Type: field.TypeJSON, Column: task.FieldTaskOptions},
			task.FieldEnable:      {Type: field.TypeBool, Column: task.FieldEnable},
		},
	}
	graph.Nodes[23] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: tenant.FieldID,
			},
		},
		Type: "Tenant",
		Fields: map[string]*sqlgraph.FieldSpec{
			tenant.FieldCreatedAt:        {Type: field.TypeTime, Column: tenant.FieldCreatedAt},
			tenant.FieldUpdatedAt:        {Type: field.TypeTime, Column: tenant.FieldUpdatedAt},
			tenant.FieldDeletedAt:        {Type: field.TypeTime, Column: tenant.FieldDeletedAt},
			tenant.FieldCreatedBy:        {Type: field.TypeUint32, Column: tenant.FieldCreatedBy},
			tenant.FieldUpdatedBy:        {Type: field.TypeUint32, Column: tenant.FieldUpdatedBy},
			tenant.FieldDeletedBy:        {Type: field.TypeUint32, Column: tenant.FieldDeletedBy},
			tenant.FieldRemark:           {Type: field.TypeString, Column: tenant.FieldRemark},
			tenant.FieldName:             {Type: field.TypeString, Column: tenant.FieldName},
			tenant.FieldCode:             {Type: field.TypeString, Column: tenant.FieldCode},
			tenant.FieldLogoURL:          {Type: field.TypeString, Column: tenant.FieldLogoURL},
			tenant.FieldIndustry:         {Type: field.TypeString, Column: tenant.FieldIndustry},
			tenant.FieldAdminUserID:      {Type: field.TypeUint32, Column: tenant.FieldAdminUserID},
			tenant.FieldStatus:           {Type: field.TypeEnum, Column: tenant.FieldStatus},
			tenant.FieldType:             {Type: field.TypeEnum, Column: tenant.FieldType},
			tenant.FieldAuditStatus:      {Type: field.TypeEnum, Column: tenant.FieldAuditStatus},
			tenant.FieldSubscriptionAt:   {Type: field.TypeTime, Column: tenant.FieldSubscriptionAt},
			tenant.FieldUnsubscribeAt:    {Type: field.TypeTime, Column: tenant.FieldUnsubscribeAt},
			tenant.FieldSubscriptionPlan: {Type: field.TypeString, Column: tenant.FieldSubscriptionPlan},
			tenant.FieldExpiredAt:        {Type: field.TypeTime, Column: tenant.FieldExpiredAt},
			tenant.FieldLastLoginTime:    {Type: field.TypeTime, Column: tenant.FieldLastLoginTime},
			tenant.FieldLastLoginIP:      {Type: field.TypeString, Column: tenant.FieldLastLoginIP},
		},
	}
	graph.Nodes[24] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedBy:     {Type: field.TypeUint32, Column: user.FieldCreatedBy},
			user.FieldUpdatedBy:     {Type: field.TypeUint32, Column: user.FieldUpdatedBy},
			user.FieldDeletedBy:     {Type: field.TypeUint32, Column: user.FieldDeletedBy},
			user.FieldCreatedAt:     {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:     {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldDeletedAt:     {Type: field.TypeTime, Column: user.FieldDeletedAt},
			user.FieldRemark:        {Type: field.TypeString, Column: user.FieldRemark},
			user.FieldTenantID:      {Type: field.TypeUint32, Column: user.FieldTenantID},
			user.FieldUsername:      {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldNickname:      {Type: field.TypeString, Column: user.FieldNickname},
			user.FieldRealname:      {Type: field.TypeString, Column: user.FieldRealname},
			user.FieldEmail:         {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldMobile:        {Type: field.TypeString, Column: user.FieldMobile},
			user.FieldTelephone:     {Type: field.TypeString, Column: user.FieldTelephone},
			user.FieldAvatar:        {Type: field.TypeString, Column: user.FieldAvatar},
			user.FieldAddress:       {Type: field.TypeString, Column: user.FieldAddress},
			user.FieldRegion:        {Type: field.TypeString, Column: user.FieldRegion},
			user.FieldDescription:   {Type: field.TypeString, Column: user.FieldDescription},
			user.FieldGender:        {Type: field.TypeEnum, Column: user.FieldGender},
			user.FieldAuthority:     {Type: field.TypeEnum, Column: user.FieldAuthority},
			user.FieldStatus:        {Type: field.TypeEnum, Column: user.FieldStatus},
			user.FieldLastLoginTime: {Type: field.TypeTime, Column: user.FieldLastLoginTime},
			user.FieldLastLoginIP:   {Type: field.TypeString, Column: user.FieldLastLoginIP},
			user.FieldOrgID:         {Type: field.TypeUint32, Column: user.FieldOrgID},
			user.FieldDepartmentID:  {Type: field.TypeUint32, Column: user.FieldDepartmentID},
			user.FieldPositionID:    {Type: field.TypeUint32, Column: user.FieldPositionID},
			user.FieldWorkID:        {Type: field.TypeUint32, Column: user.FieldWorkID},
			user.FieldRoleIds:       {Type: field.TypeJSON, Column: user.FieldRoleIds},
		},
	}
	graph.Nodes[25] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   usercredential.Table,
			Columns: usercredential.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: usercredential.FieldID,
			},
		},
		Type: "UserCredential",
		Fields: map[string]*sqlgraph.FieldSpec{
			usercredential.FieldCreatedAt:      {Type: field.TypeTime, Column: usercredential.FieldCreatedAt},
			usercredential.FieldUpdatedAt:      {Type: field.TypeTime, Column: usercredential.FieldUpdatedAt},
			usercredential.FieldDeletedAt:      {Type: field.TypeTime, Column: usercredential.FieldDeletedAt},
			usercredential.FieldTenantID:       {Type: field.TypeUint32, Column: usercredential.FieldTenantID},
			usercredential.FieldUserID:         {Type: field.TypeUint32, Column: usercredential.FieldUserID},
			usercredential.FieldIdentityType:   {Type: field.TypeEnum, Column: usercredential.FieldIdentityType},
			usercredential.FieldIdentifier:     {Type: field.TypeString, Column: usercredential.FieldIdentifier},
			usercredential.FieldCredentialType: {Type: field.TypeEnum, Column: usercredential.FieldCredentialType},
			usercredential.FieldCredential:     {Type: field.TypeString, Column: usercredential.FieldCredential},
			usercredential.FieldIsPrimary:      {Type: field.TypeBool, Column: usercredential.FieldIsPrimary},
			usercredential.FieldStatus:         {Type: field.TypeEnum, Column: usercredential.FieldStatus},
			usercredential.FieldExtraInfo:      {Type: field.TypeString, Column: usercredential.FieldExtraInfo},
			usercredential.FieldActivateToken:  {Type: field.TypeString, Column: usercredential.FieldActivateToken},
			usercredential.FieldResetToken:     {Type: field.TypeString, Column: usercredential.FieldResetToken},
		},
	}
	graph.Nodes[26] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userposition.Table,
			Columns: userposition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: userposition.FieldID,
			},
		},
		Type: "UserPosition",
		Fields: map[string]*sqlgraph.FieldSpec{
			userposition.FieldCreatedAt:  {Type: field.TypeTime, Column: userposition.FieldCreatedAt},
			userposition.FieldUpdatedAt:  {Type: field.TypeTime, Column: userposition.FieldUpdatedAt},
			userposition.FieldDeletedAt:  {Type: field.TypeTime, Column: userposition.FieldDeletedAt},
			userposition.FieldCreatedBy:  {Type: field.TypeUint32, Column: userposition.FieldCreatedBy},
			userposition.FieldUpdatedBy:  {Type: field.TypeUint32, Column: userposition.FieldUpdatedBy},
			userposition.FieldDeletedBy:  {Type: field.TypeUint32, Column: userposition.FieldDeletedBy},
			userposition.FieldUserID:     {Type: field.TypeUint32, Column: userposition.FieldUserID},
			userposition.FieldPositionID: {Type: field.TypeUint32, Column: userposition.FieldPositionID},
		},
	}
	graph.Nodes[27] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userrole.Table,
			Columns: userrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: userrole.FieldID,
			},
		},
		Type: "UserRole",
		Fields: map[string]*sqlgraph.FieldSpec{
			userrole.FieldCreatedAt: {Type: field.TypeTime, Column: userrole.FieldCreatedAt},
			userrole.FieldUpdatedAt: {Type: field.TypeTime, Column: userrole.FieldUpdatedAt},
			userrole.FieldDeletedAt: {Type: field.TypeTime, Column: userrole.FieldDeletedAt},
			userrole.FieldCreatedBy: {Type: field.TypeUint32, Column: userrole.FieldCreatedBy},
			userrole.FieldUpdatedBy: {Type: field.TypeUint32, Column: userrole.FieldUpdatedBy},
			userrole.FieldDeletedBy: {Type: field.TypeUint32, Column: userrole.FieldDeletedBy},
			userrole.FieldUserID:    {Type: field.TypeUint32, Column: userrole.FieldUserID},
			userrole.FieldRoleID:    {Type: field.TypeUint32, Column: userrole.FieldRoleID},
		},
	}
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
		},
		"Department",
		"Department",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
		},
		"Department",
		"Department",
	)
	graph.MustAddE(
		"sys_dict_types",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dictentry.SysDictTypesTable,
			Columns: []string{dictentry.SysDictTypesColumn},
			Bidi:    false,
		},
		"DictEntry",
		"DictType",
	)
	graph.MustAddE(
		"entries",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dicttype.EntriesTable,
			Columns: []string{dicttype.EntriesColumn},
			Bidi:    false,
		},
		"DictType",
		"DictEntry",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
		},
		"Menu",
		"Menu",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
		},
		"Menu",
		"Menu",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationmessagecategory.ParentTable,
			Columns: []string{notificationmessagecategory.ParentColumn},
			Bidi:    false,
		},
		"NotificationMessageCategory",
		"NotificationMessageCategory",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationmessagecategory.ChildrenTable,
			Columns: []string{notificationmessagecategory.ChildrenColumn},
			Bidi:    false,
		},
		"NotificationMessageCategory",
		"NotificationMessageCategory",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.ParentTable,
			Columns: []string{organization.ParentColumn},
			Bidi:    false,
		},
		"Organization",
		"Organization",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
		},
		"Organization",
		"Organization",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.ParentTable,
			Columns: []string{position.ParentColumn},
			Bidi:    false,
		},
		"Position",
		"Position",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ChildrenTable,
			Columns: []string{position.ChildrenColumn},
			Bidi:    false,
		},
		"Position",
		"Position",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.ParentTable,
			Columns: []string{role.ParentColumn},
			Bidi:    false,
		},
		"Role",
		"Role",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
		},
		"Role",
		"Role",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (_q *AdminLoginLogQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AdminLoginLogQuery builder.
func (_q *AdminLoginLogQuery) Filter() *AdminLoginLogFilter {
	return &AdminLoginLogFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AdminLoginLogMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AdminLoginLogMutation builder.
func (m *AdminLoginLogMutation) Filter() *AdminLoginLogFilter {
	return &AdminLoginLogFilter{config: m.config, predicateAdder: m}
}

// AdminLoginLogFilter provides a generic filtering capability at runtime for AdminLoginLogQuery.
type AdminLoginLogFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AdminLoginLogFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AdminLoginLogFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(adminloginlog.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AdminLoginLogFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(adminloginlog.FieldCreatedAt))
}

// WhereLoginIP applies the entql string predicate on the login_ip field.
func (f *AdminLoginLogFilter) WhereLoginIP(p entql.StringP) {
	f.Where(p.Field(adminloginlog.FieldLoginIP))
}

// WhereLoginMAC applies the entql string predicate on the login_mac field.
func (f *AdminLoginLogFilter) WhereLoginMAC(p entql.StringP) {
	f.Where(p.Field(adminloginlog.FieldLoginMAC))
}

// WhereLoginTime applies the entql time.Time predicate on the login_time field.
func (f *AdminLoginLogFilter) WhereLoginTime(p entql.TimeP) {
	f.Where(p.Field(adminloginlog.FieldLoginTime))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *AdminLoginLogFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(adminloginlog.FieldUserAgent))
}

// WhereBrowserName applies the entql string predicate on the browser_name field.
func (f *AdminLoginLogFilter) WhereBrowserName(p entql.StringP) {
	f.Where(p.Field(adminloginlog.FieldBrowserName))
}

// WhereBrowserVersion applies the entql string predicate on the browser_version field.
func (f *AdminLoginLogFilter) WhereBrowserVersion(p entql.StringP) {
	f.Where(p.Field(adminloginlog.FieldBrowserVersion))
}

// WhereClientID applies the entql string predicate on the client_id field.
func (f *AdminLoginLogFilter) WhereClientID(p entql.StringP) {
	f.Where(p.Field(adminloginlog.FieldClientID))
}

// WhereClientName applies the entql string predicate on the client_name field.
func (f *AdminLoginLogFilter) WhereClientName(p entql.StringP) {
	f.Where(p.Field(adminloginlog.FieldClientName))
}

// WhereOsName applies the entql string predicate on the os_name field.
func (f *AdminLoginLogFilter) WhereOsName(p entql.StringP) {
	f.Where(p.Field(adminloginlog.FieldOsName))
}

// WhereOsVersion applies the entql string predicate on the os_version field.
func (f *AdminLoginLogFilter) WhereOsVersion(p entql.StringP) {
	f.Where(p.Field(adminloginlog.FieldOsVersion))
}

// WhereUserID applies the entql uint32 predicate on the user_id field.
func (f *AdminLoginLogFilter) WhereUserID(p entql.Uint32P) {
	f.Where(p.Field(adminloginlog.FieldUserID))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *AdminLoginLogFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(adminloginlog.FieldUsername))
}

// WhereStatusCode applies the entql int32 predicate on the status_code field.
func (f *AdminLoginLogFilter) WhereStatusCode(p entql.Int32P) {
	f.Where(p.Field(adminloginlog.FieldStatusCode))
}

// WhereSuccess applies the entql bool predicate on the success field.
func (f *AdminLoginLogFilter) WhereSuccess(p entql.BoolP) {
	f.Where(p.Field(adminloginlog.FieldSuccess))
}

// WhereReason applies the entql string predicate on the reason field.
func (f *AdminLoginLogFilter) WhereReason(p entql.StringP) {
	f.Where(p.Field(adminloginlog.FieldReason))
}

// WhereLocation applies the entql string predicate on the location field.
func (f *AdminLoginLogFilter) WhereLocation(p entql.StringP) {
	f.Where(p.Field(adminloginlog.FieldLocation))
}

// addPredicate implements the predicateAdder interface.
func (_q *AdminLoginRestrictionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AdminLoginRestrictionQuery builder.
func (_q *AdminLoginRestrictionQuery) Filter() *AdminLoginRestrictionFilter {
	return &AdminLoginRestrictionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AdminLoginRestrictionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AdminLoginRestrictionMutation builder.
func (m *AdminLoginRestrictionMutation) Filter() *AdminLoginRestrictionFilter {
	return &AdminLoginRestrictionFilter{config: m.config, predicateAdder: m}
}

// AdminLoginRestrictionFilter provides a generic filtering capability at runtime for AdminLoginRestrictionQuery.
type AdminLoginRestrictionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AdminLoginRestrictionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AdminLoginRestrictionFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(adminloginrestriction.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AdminLoginRestrictionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(adminloginrestriction.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AdminLoginRestrictionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(adminloginrestriction.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AdminLoginRestrictionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(adminloginrestriction.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *AdminLoginRestrictionFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(adminloginrestriction.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *AdminLoginRestrictionFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(adminloginrestriction.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *AdminLoginRestrictionFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(adminloginrestriction.FieldDeletedBy))
}

// WhereTargetID applies the entql uint32 predicate on the target_id field.
func (f *AdminLoginRestrictionFilter) WhereTargetID(p entql.Uint32P) {
	f.Where(p.Field(adminloginrestriction.FieldTargetID))
}

// WhereValue applies the entql string predicate on the value field.
func (f *AdminLoginRestrictionFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(adminloginrestriction.FieldValue))
}

// WhereReason applies the entql string predicate on the reason field.
func (f *AdminLoginRestrictionFilter) WhereReason(p entql.StringP) {
	f.Where(p.Field(adminloginrestriction.FieldReason))
}

// WhereType applies the entql string predicate on the type field.
func (f *AdminLoginRestrictionFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(adminloginrestriction.FieldType))
}

// WhereMethod applies the entql string predicate on the method field.
func (f *AdminLoginRestrictionFilter) WhereMethod(p entql.StringP) {
	f.Where(p.Field(adminloginrestriction.FieldMethod))
}

// addPredicate implements the predicateAdder interface.
func (_q *AdminOperationLogQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AdminOperationLogQuery builder.
func (_q *AdminOperationLogQuery) Filter() *AdminOperationLogFilter {
	return &AdminOperationLogFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AdminOperationLogMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AdminOperationLogMutation builder.
func (m *AdminOperationLogMutation) Filter() *AdminOperationLogFilter {
	return &AdminOperationLogFilter{config: m.config, predicateAdder: m}
}

// AdminOperationLogFilter provides a generic filtering capability at runtime for AdminOperationLogQuery.
type AdminOperationLogFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AdminOperationLogFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AdminOperationLogFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(adminoperationlog.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AdminOperationLogFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(adminoperationlog.FieldCreatedAt))
}

// WhereRequestID applies the entql string predicate on the request_id field.
func (f *AdminOperationLogFilter) WhereRequestID(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldRequestID))
}

// WhereMethod applies the entql string predicate on the method field.
func (f *AdminOperationLogFilter) WhereMethod(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldMethod))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *AdminOperationLogFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldOperation))
}

// WherePath applies the entql string predicate on the path field.
func (f *AdminOperationLogFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldPath))
}

// WhereReferer applies the entql string predicate on the referer field.
func (f *AdminOperationLogFilter) WhereReferer(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldReferer))
}

// WhereRequestURI applies the entql string predicate on the request_uri field.
func (f *AdminOperationLogFilter) WhereRequestURI(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldRequestURI))
}

// WhereRequestBody applies the entql string predicate on the request_body field.
func (f *AdminOperationLogFilter) WhereRequestBody(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldRequestBody))
}

// WhereRequestHeader applies the entql string predicate on the request_header field.
func (f *AdminOperationLogFilter) WhereRequestHeader(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldRequestHeader))
}

// WhereResponse applies the entql string predicate on the response field.
func (f *AdminOperationLogFilter) WhereResponse(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldResponse))
}

// WhereCostTime applies the entql float64 predicate on the cost_time field.
func (f *AdminOperationLogFilter) WhereCostTime(p entql.Float64P) {
	f.Where(p.Field(adminoperationlog.FieldCostTime))
}

// WhereUserID applies the entql uint32 predicate on the user_id field.
func (f *AdminOperationLogFilter) WhereUserID(p entql.Uint32P) {
	f.Where(p.Field(adminoperationlog.FieldUserID))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *AdminOperationLogFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldUsername))
}

// WhereClientIP applies the entql string predicate on the client_ip field.
func (f *AdminOperationLogFilter) WhereClientIP(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldClientIP))
}

// WhereStatusCode applies the entql int32 predicate on the status_code field.
func (f *AdminOperationLogFilter) WhereStatusCode(p entql.Int32P) {
	f.Where(p.Field(adminoperationlog.FieldStatusCode))
}

// WhereReason applies the entql string predicate on the reason field.
func (f *AdminOperationLogFilter) WhereReason(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldReason))
}

// WhereSuccess applies the entql bool predicate on the success field.
func (f *AdminOperationLogFilter) WhereSuccess(p entql.BoolP) {
	f.Where(p.Field(adminoperationlog.FieldSuccess))
}

// WhereLocation applies the entql string predicate on the location field.
func (f *AdminOperationLogFilter) WhereLocation(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldLocation))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *AdminOperationLogFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldUserAgent))
}

// WhereBrowserName applies the entql string predicate on the browser_name field.
func (f *AdminOperationLogFilter) WhereBrowserName(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldBrowserName))
}

// WhereBrowserVersion applies the entql string predicate on the browser_version field.
func (f *AdminOperationLogFilter) WhereBrowserVersion(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldBrowserVersion))
}

// WhereClientID applies the entql string predicate on the client_id field.
func (f *AdminOperationLogFilter) WhereClientID(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldClientID))
}

// WhereClientName applies the entql string predicate on the client_name field.
func (f *AdminOperationLogFilter) WhereClientName(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldClientName))
}

// WhereOsName applies the entql string predicate on the os_name field.
func (f *AdminOperationLogFilter) WhereOsName(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldOsName))
}

// WhereOsVersion applies the entql string predicate on the os_version field.
func (f *AdminOperationLogFilter) WhereOsVersion(p entql.StringP) {
	f.Where(p.Field(adminoperationlog.FieldOsVersion))
}

// addPredicate implements the predicateAdder interface.
func (_q *ApiResourceQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ApiResourceQuery builder.
func (_q *ApiResourceQuery) Filter() *ApiResourceFilter {
	return &ApiResourceFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ApiResourceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ApiResourceMutation builder.
func (m *ApiResourceMutation) Filter() *ApiResourceFilter {
	return &ApiResourceFilter{config: m.config, predicateAdder: m}
}

// ApiResourceFilter provides a generic filtering capability at runtime for ApiResourceQuery.
type ApiResourceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ApiResourceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *ApiResourceFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(apiresource.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ApiResourceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(apiresource.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ApiResourceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(apiresource.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ApiResourceFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(apiresource.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *ApiResourceFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(apiresource.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *ApiResourceFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(apiresource.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *ApiResourceFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(apiresource.FieldDeletedBy))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ApiResourceFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(apiresource.FieldDescription))
}

// WhereModule applies the entql string predicate on the module field.
func (f *ApiResourceFilter) WhereModule(p entql.StringP) {
	f.Where(p.Field(apiresource.FieldModule))
}

// WhereModuleDescription applies the entql string predicate on the module_description field.
func (f *ApiResourceFilter) WhereModuleDescription(p entql.StringP) {
	f.Where(p.Field(apiresource.FieldModuleDescription))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *ApiResourceFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(apiresource.FieldOperation))
}

// WherePath applies the entql string predicate on the path field.
func (f *ApiResourceFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(apiresource.FieldPath))
}

// WhereMethod applies the entql string predicate on the method field.
func (f *ApiResourceFilter) WhereMethod(p entql.StringP) {
	f.Where(p.Field(apiresource.FieldMethod))
}

// WhereScope applies the entql string predicate on the scope field.
func (f *ApiResourceFilter) WhereScope(p entql.StringP) {
	f.Where(p.Field(apiresource.FieldScope))
}

// addPredicate implements the predicateAdder interface.
func (_q *DepartmentQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DepartmentQuery builder.
func (_q *DepartmentQuery) Filter() *DepartmentFilter {
	return &DepartmentFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DepartmentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DepartmentMutation builder.
func (m *DepartmentMutation) Filter() *DepartmentFilter {
	return &DepartmentFilter{config: m.config, predicateAdder: m}
}

// DepartmentFilter provides a generic filtering capability at runtime for DepartmentQuery.
type DepartmentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DepartmentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *DepartmentFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(department.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DepartmentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(department.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DepartmentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(department.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DepartmentFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(department.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *DepartmentFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(department.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *DepartmentFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(department.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *DepartmentFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(department.FieldDeletedBy))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *DepartmentFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(department.FieldRemark))
}

// WhereTenantID applies the entql uint32 predicate on the tenant_id field.
func (f *DepartmentFilter) WhereTenantID(p entql.Uint32P) {
	f.Where(p.Field(department.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *DepartmentFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(department.FieldName))
}

// WhereParentID applies the entql uint32 predicate on the parent_id field.
func (f *DepartmentFilter) WhereParentID(p entql.Uint32P) {
	f.Where(p.Field(department.FieldParentID))
}

// WhereOrganizationID applies the entql uint32 predicate on the organization_id field.
func (f *DepartmentFilter) WhereOrganizationID(p entql.Uint32P) {
	f.Where(p.Field(department.FieldOrganizationID))
}

// WhereManagerID applies the entql uint32 predicate on the manager_id field.
func (f *DepartmentFilter) WhereManagerID(p entql.Uint32P) {
	f.Where(p.Field(department.FieldManagerID))
}

// WhereSortOrder applies the entql int32 predicate on the sort_order field.
func (f *DepartmentFilter) WhereSortOrder(p entql.Int32P) {
	f.Where(p.Field(department.FieldSortOrder))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *DepartmentFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(department.FieldStatus))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *DepartmentFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(department.FieldDescription))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *DepartmentFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasParentWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *DepartmentFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasChildrenWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *DictEntryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DictEntryQuery builder.
func (_q *DictEntryQuery) Filter() *DictEntryFilter {
	return &DictEntryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DictEntryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DictEntryMutation builder.
func (m *DictEntryMutation) Filter() *DictEntryFilter {
	return &DictEntryFilter{config: m.config, predicateAdder: m}
}

// DictEntryFilter provides a generic filtering capability at runtime for DictEntryQuery.
type DictEntryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DictEntryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *DictEntryFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(dictentry.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DictEntryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(dictentry.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DictEntryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(dictentry.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DictEntryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(dictentry.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *DictEntryFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(dictentry.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *DictEntryFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(dictentry.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *DictEntryFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(dictentry.FieldDeletedBy))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *DictEntryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(dictentry.FieldDescription))
}

// WhereSortOrder applies the entql int32 predicate on the sort_order field.
func (f *DictEntryFilter) WhereSortOrder(p entql.Int32P) {
	f.Where(p.Field(dictentry.FieldSortOrder))
}

// WhereIsEnabled applies the entql bool predicate on the is_enabled field.
func (f *DictEntryFilter) WhereIsEnabled(p entql.BoolP) {
	f.Where(p.Field(dictentry.FieldIsEnabled))
}

// WhereTenantID applies the entql uint32 predicate on the tenant_id field.
func (f *DictEntryFilter) WhereTenantID(p entql.Uint32P) {
	f.Where(p.Field(dictentry.FieldTenantID))
}

// WhereEntryLabel applies the entql string predicate on the entry_label field.
func (f *DictEntryFilter) WhereEntryLabel(p entql.StringP) {
	f.Where(p.Field(dictentry.FieldEntryLabel))
}

// WhereEntryValue applies the entql string predicate on the entry_value field.
func (f *DictEntryFilter) WhereEntryValue(p entql.StringP) {
	f.Where(p.Field(dictentry.FieldEntryValue))
}

// WhereNumericValue applies the entql int32 predicate on the numeric_value field.
func (f *DictEntryFilter) WhereNumericValue(p entql.Int32P) {
	f.Where(p.Field(dictentry.FieldNumericValue))
}

// WhereLanguageCode applies the entql string predicate on the language_code field.
func (f *DictEntryFilter) WhereLanguageCode(p entql.StringP) {
	f.Where(p.Field(dictentry.FieldLanguageCode))
}

// WhereHasSysDictTypes applies a predicate to check if query has an edge sys_dict_types.
func (f *DictEntryFilter) WhereHasSysDictTypes() {
	f.Where(entql.HasEdge("sys_dict_types"))
}

// WhereHasSysDictTypesWith applies a predicate to check if query has an edge sys_dict_types with a given conditions (other predicates).
func (f *DictEntryFilter) WhereHasSysDictTypesWith(preds ...predicate.DictType) {
	f.Where(entql.HasEdgeWith("sys_dict_types", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *DictTypeQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DictTypeQuery builder.
func (_q *DictTypeQuery) Filter() *DictTypeFilter {
	return &DictTypeFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DictTypeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DictTypeMutation builder.
func (m *DictTypeMutation) Filter() *DictTypeFilter {
	return &DictTypeFilter{config: m.config, predicateAdder: m}
}

// DictTypeFilter provides a generic filtering capability at runtime for DictTypeQuery.
type DictTypeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DictTypeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *DictTypeFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(dicttype.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DictTypeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(dicttype.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DictTypeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(dicttype.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DictTypeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(dicttype.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *DictTypeFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(dicttype.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *DictTypeFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(dicttype.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *DictTypeFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(dicttype.FieldDeletedBy))
}

// WhereIsEnabled applies the entql bool predicate on the is_enabled field.
func (f *DictTypeFilter) WhereIsEnabled(p entql.BoolP) {
	f.Where(p.Field(dicttype.FieldIsEnabled))
}

// WhereSortOrder applies the entql int32 predicate on the sort_order field.
func (f *DictTypeFilter) WhereSortOrder(p entql.Int32P) {
	f.Where(p.Field(dicttype.FieldSortOrder))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *DictTypeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(dicttype.FieldDescription))
}

// WhereTenantID applies the entql uint32 predicate on the tenant_id field.
func (f *DictTypeFilter) WhereTenantID(p entql.Uint32P) {
	f.Where(p.Field(dicttype.FieldTenantID))
}

// WhereTypeCode applies the entql string predicate on the type_code field.
func (f *DictTypeFilter) WhereTypeCode(p entql.StringP) {
	f.Where(p.Field(dicttype.FieldTypeCode))
}

// WhereTypeName applies the entql string predicate on the type_name field.
func (f *DictTypeFilter) WhereTypeName(p entql.StringP) {
	f.Where(p.Field(dicttype.FieldTypeName))
}

// WhereHasEntries applies a predicate to check if query has an edge entries.
func (f *DictTypeFilter) WhereHasEntries() {
	f.Where(entql.HasEdge("entries"))
}

// WhereHasEntriesWith applies a predicate to check if query has an edge entries with a given conditions (other predicates).
func (f *DictTypeFilter) WhereHasEntriesWith(preds ...predicate.DictEntry) {
	f.Where(entql.HasEdgeWith("entries", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *FileQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FileQuery builder.
func (_q *FileQuery) Filter() *FileFilter {
	return &FileFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *FileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FileMutation builder.
func (m *FileMutation) Filter() *FileFilter {
	return &FileFilter{config: m.config, predicateAdder: m}
}

// FileFilter provides a generic filtering capability at runtime for FileQuery.
type FileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *FileFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(file.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FileFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(file.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *FileFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(file.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *FileFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(file.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *FileFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(file.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *FileFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(file.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *FileFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(file.FieldDeletedBy))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *FileFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(file.FieldRemark))
}

// WhereTenantID applies the entql uint32 predicate on the tenant_id field.
func (f *FileFilter) WhereTenantID(p entql.Uint32P) {
	f.Where(p.Field(file.FieldTenantID))
}

// WhereProvider applies the entql string predicate on the provider field.
func (f *FileFilter) WhereProvider(p entql.StringP) {
	f.Where(p.Field(file.FieldProvider))
}

// WhereBucketName applies the entql string predicate on the bucket_name field.
func (f *FileFilter) WhereBucketName(p entql.StringP) {
	f.Where(p.Field(file.FieldBucketName))
}

// WhereFileDirectory applies the entql string predicate on the file_directory field.
func (f *FileFilter) WhereFileDirectory(p entql.StringP) {
	f.Where(p.Field(file.FieldFileDirectory))
}

// WhereFileGUID applies the entql string predicate on the file_guid field.
func (f *FileFilter) WhereFileGUID(p entql.StringP) {
	f.Where(p.Field(file.FieldFileGUID))
}

// WhereSaveFileName applies the entql string predicate on the save_file_name field.
func (f *FileFilter) WhereSaveFileName(p entql.StringP) {
	f.Where(p.Field(file.FieldSaveFileName))
}

// WhereFileName applies the entql string predicate on the file_name field.
func (f *FileFilter) WhereFileName(p entql.StringP) {
	f.Where(p.Field(file.FieldFileName))
}

// WhereExtension applies the entql string predicate on the extension field.
func (f *FileFilter) WhereExtension(p entql.StringP) {
	f.Where(p.Field(file.FieldExtension))
}

// WhereSize applies the entql uint64 predicate on the size field.
func (f *FileFilter) WhereSize(p entql.Uint64P) {
	f.Where(p.Field(file.FieldSize))
}

// WhereSizeFormat applies the entql string predicate on the size_format field.
func (f *FileFilter) WhereSizeFormat(p entql.StringP) {
	f.Where(p.Field(file.FieldSizeFormat))
}

// WhereLinkURL applies the entql string predicate on the link_url field.
func (f *FileFilter) WhereLinkURL(p entql.StringP) {
	f.Where(p.Field(file.FieldLinkURL))
}

// WhereMd5 applies the entql string predicate on the md5 field.
func (f *FileFilter) WhereMd5(p entql.StringP) {
	f.Where(p.Field(file.FieldMd5))
}

// addPredicate implements the predicateAdder interface.
func (_q *LanguageQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LanguageQuery builder.
func (_q *LanguageQuery) Filter() *LanguageFilter {
	return &LanguageFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *LanguageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LanguageMutation builder.
func (m *LanguageMutation) Filter() *LanguageFilter {
	return &LanguageFilter{config: m.config, predicateAdder: m}
}

// LanguageFilter provides a generic filtering capability at runtime for LanguageQuery.
type LanguageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LanguageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *LanguageFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(language.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *LanguageFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(language.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *LanguageFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(language.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *LanguageFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(language.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *LanguageFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(language.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *LanguageFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(language.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *LanguageFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(language.FieldDeletedBy))
}

// WhereSortOrder applies the entql int32 predicate on the sort_order field.
func (f *LanguageFilter) WhereSortOrder(p entql.Int32P) {
	f.Where(p.Field(language.FieldSortOrder))
}

// WhereIsEnabled applies the entql bool predicate on the is_enabled field.
func (f *LanguageFilter) WhereIsEnabled(p entql.BoolP) {
	f.Where(p.Field(language.FieldIsEnabled))
}

// WhereLanguageCode applies the entql string predicate on the language_code field.
func (f *LanguageFilter) WhereLanguageCode(p entql.StringP) {
	f.Where(p.Field(language.FieldLanguageCode))
}

// WhereLanguageName applies the entql string predicate on the language_name field.
func (f *LanguageFilter) WhereLanguageName(p entql.StringP) {
	f.Where(p.Field(language.FieldLanguageName))
}

// WhereNativeName applies the entql string predicate on the native_name field.
func (f *LanguageFilter) WhereNativeName(p entql.StringP) {
	f.Where(p.Field(language.FieldNativeName))
}

// WhereIsDefault applies the entql bool predicate on the is_default field.
func (f *LanguageFilter) WhereIsDefault(p entql.BoolP) {
	f.Where(p.Field(language.FieldIsDefault))
}

// addPredicate implements the predicateAdder interface.
func (_q *MenuQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MenuQuery builder.
func (_q *MenuQuery) Filter() *MenuFilter {
	return &MenuFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *MenuMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MenuMutation builder.
func (m *MenuMutation) Filter() *MenuFilter {
	return &MenuFilter{config: m.config, predicateAdder: m}
}

// MenuFilter provides a generic filtering capability at runtime for MenuQuery.
type MenuFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MenuFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *MenuFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(menu.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MenuFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(menu.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MenuFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(menu.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *MenuFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(menu.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *MenuFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(menu.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *MenuFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(menu.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *MenuFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(menu.FieldDeletedBy))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *MenuFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(menu.FieldRemark))
}

// WhereParentID applies the entql uint32 predicate on the parent_id field.
func (f *MenuFilter) WhereParentID(p entql.Uint32P) {
	f.Where(p.Field(menu.FieldParentID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *MenuFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(menu.FieldStatus))
}

// WhereType applies the entql string predicate on the type field.
func (f *MenuFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(menu.FieldType))
}

// WherePath applies the entql string predicate on the path field.
func (f *MenuFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(menu.FieldPath))
}

// WhereRedirect applies the entql string predicate on the redirect field.
func (f *MenuFilter) WhereRedirect(p entql.StringP) {
	f.Where(p.Field(menu.FieldRedirect))
}

// WhereAlias applies the entql string predicate on the alias field.
func (f *MenuFilter) WhereAlias(p entql.StringP) {
	f.Where(p.Field(menu.FieldAlias))
}

// WhereName applies the entql string predicate on the name field.
func (f *MenuFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(menu.FieldName))
}

// WhereComponent applies the entql string predicate on the component field.
func (f *MenuFilter) WhereComponent(p entql.StringP) {
	f.Where(p.Field(menu.FieldComponent))
}

// WhereMeta applies the entql json.RawMessage predicate on the meta field.
func (f *MenuFilter) WhereMeta(p entql.BytesP) {
	f.Where(p.Field(menu.FieldMeta))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *MenuFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *MenuFilter) WhereHasParentWith(preds ...predicate.Menu) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *MenuFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *MenuFilter) WhereHasChildrenWith(preds ...predicate.Menu) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *NotificationMessageQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the NotificationMessageQuery builder.
func (_q *NotificationMessageQuery) Filter() *NotificationMessageFilter {
	return &NotificationMessageFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *NotificationMessageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the NotificationMessageMutation builder.
func (m *NotificationMessageMutation) Filter() *NotificationMessageFilter {
	return &NotificationMessageFilter{config: m.config, predicateAdder: m}
}

// NotificationMessageFilter provides a generic filtering capability at runtime for NotificationMessageQuery.
type NotificationMessageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *NotificationMessageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *NotificationMessageFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(notificationmessage.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *NotificationMessageFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(notificationmessage.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *NotificationMessageFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(notificationmessage.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *NotificationMessageFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(notificationmessage.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *NotificationMessageFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(notificationmessage.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *NotificationMessageFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(notificationmessage.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *NotificationMessageFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(notificationmessage.FieldDeletedBy))
}

// WhereTenantID applies the entql uint32 predicate on the tenant_id field.
func (f *NotificationMessageFilter) WhereTenantID(p entql.Uint32P) {
	f.Where(p.Field(notificationmessage.FieldTenantID))
}

// WhereSubject applies the entql string predicate on the subject field.
func (f *NotificationMessageFilter) WhereSubject(p entql.StringP) {
	f.Where(p.Field(notificationmessage.FieldSubject))
}

// WhereContent applies the entql string predicate on the content field.
func (f *NotificationMessageFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(notificationmessage.FieldContent))
}

// WhereCategoryID applies the entql uint32 predicate on the category_id field.
func (f *NotificationMessageFilter) WhereCategoryID(p entql.Uint32P) {
	f.Where(p.Field(notificationmessage.FieldCategoryID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *NotificationMessageFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(notificationmessage.FieldStatus))
}

// addPredicate implements the predicateAdder interface.
func (_q *NotificationMessageCategoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the NotificationMessageCategoryQuery builder.
func (_q *NotificationMessageCategoryQuery) Filter() *NotificationMessageCategoryFilter {
	return &NotificationMessageCategoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *NotificationMessageCategoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the NotificationMessageCategoryMutation builder.
func (m *NotificationMessageCategoryMutation) Filter() *NotificationMessageCategoryFilter {
	return &NotificationMessageCategoryFilter{config: m.config, predicateAdder: m}
}

// NotificationMessageCategoryFilter provides a generic filtering capability at runtime for NotificationMessageCategoryQuery.
type NotificationMessageCategoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *NotificationMessageCategoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *NotificationMessageCategoryFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(notificationmessagecategory.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *NotificationMessageCategoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(notificationmessagecategory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *NotificationMessageCategoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(notificationmessagecategory.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *NotificationMessageCategoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(notificationmessagecategory.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *NotificationMessageCategoryFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(notificationmessagecategory.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *NotificationMessageCategoryFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(notificationmessagecategory.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *NotificationMessageCategoryFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(notificationmessagecategory.FieldDeletedBy))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *NotificationMessageCategoryFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(notificationmessagecategory.FieldRemark))
}

// WhereTenantID applies the entql uint32 predicate on the tenant_id field.
func (f *NotificationMessageCategoryFilter) WhereTenantID(p entql.Uint32P) {
	f.Where(p.Field(notificationmessagecategory.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *NotificationMessageCategoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(notificationmessagecategory.FieldName))
}

// WhereCode applies the entql string predicate on the code field.
func (f *NotificationMessageCategoryFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(notificationmessagecategory.FieldCode))
}

// WhereSortOrder applies the entql int32 predicate on the sort_order field.
func (f *NotificationMessageCategoryFilter) WhereSortOrder(p entql.Int32P) {
	f.Where(p.Field(notificationmessagecategory.FieldSortOrder))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *NotificationMessageCategoryFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(notificationmessagecategory.FieldEnable))
}

// WhereParentID applies the entql uint32 predicate on the parent_id field.
func (f *NotificationMessageCategoryFilter) WhereParentID(p entql.Uint32P) {
	f.Where(p.Field(notificationmessagecategory.FieldParentID))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *NotificationMessageCategoryFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *NotificationMessageCategoryFilter) WhereHasParentWith(preds ...predicate.NotificationMessageCategory) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *NotificationMessageCategoryFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *NotificationMessageCategoryFilter) WhereHasChildrenWith(preds ...predicate.NotificationMessageCategory) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *NotificationMessageRecipientQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the NotificationMessageRecipientQuery builder.
func (_q *NotificationMessageRecipientQuery) Filter() *NotificationMessageRecipientFilter {
	return &NotificationMessageRecipientFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *NotificationMessageRecipientMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the NotificationMessageRecipientMutation builder.
func (m *NotificationMessageRecipientMutation) Filter() *NotificationMessageRecipientFilter {
	return &NotificationMessageRecipientFilter{config: m.config, predicateAdder: m}
}

// NotificationMessageRecipientFilter provides a generic filtering capability at runtime for NotificationMessageRecipientQuery.
type NotificationMessageRecipientFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *NotificationMessageRecipientFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *NotificationMessageRecipientFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(notificationmessagerecipient.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *NotificationMessageRecipientFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(notificationmessagerecipient.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *NotificationMessageRecipientFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(notificationmessagerecipient.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *NotificationMessageRecipientFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(notificationmessagerecipient.FieldDeletedAt))
}

// WhereTenantID applies the entql uint32 predicate on the tenant_id field.
func (f *NotificationMessageRecipientFilter) WhereTenantID(p entql.Uint32P) {
	f.Where(p.Field(notificationmessagerecipient.FieldTenantID))
}

// WhereMessageID applies the entql uint32 predicate on the message_id field.
func (f *NotificationMessageRecipientFilter) WhereMessageID(p entql.Uint32P) {
	f.Where(p.Field(notificationmessagerecipient.FieldMessageID))
}

// WhereRecipientID applies the entql uint32 predicate on the recipient_id field.
func (f *NotificationMessageRecipientFilter) WhereRecipientID(p entql.Uint32P) {
	f.Where(p.Field(notificationmessagerecipient.FieldRecipientID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *NotificationMessageRecipientFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(notificationmessagerecipient.FieldStatus))
}

// addPredicate implements the predicateAdder interface.
func (_q *OrganizationQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationQuery builder.
func (_q *OrganizationQuery) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationMutation builder.
func (m *OrganizationMutation) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: m.config, predicateAdder: m}
}

// OrganizationFilter provides a generic filtering capability at runtime for OrganizationQuery.
type OrganizationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OrganizationFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(organization.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrganizationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *OrganizationFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(organization.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *OrganizationFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(organization.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *OrganizationFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(organization.FieldDeletedBy))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *OrganizationFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(organization.FieldRemark))
}

// WhereTenantID applies the entql uint32 predicate on the tenant_id field.
func (f *OrganizationFilter) WhereTenantID(p entql.Uint32P) {
	f.Where(p.Field(organization.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrganizationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(organization.FieldName))
}

// WhereParentID applies the entql uint32 predicate on the parent_id field.
func (f *OrganizationFilter) WhereParentID(p entql.Uint32P) {
	f.Where(p.Field(organization.FieldParentID))
}

// WhereSortOrder applies the entql int32 predicate on the sort_order field.
func (f *OrganizationFilter) WhereSortOrder(p entql.Int32P) {
	f.Where(p.Field(organization.FieldSortOrder))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *OrganizationFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(organization.FieldStatus))
}

// WhereOrganizationType applies the entql string predicate on the organization_type field.
func (f *OrganizationFilter) WhereOrganizationType(p entql.StringP) {
	f.Where(p.Field(organization.FieldOrganizationType))
}

// WhereCreditCode applies the entql string predicate on the credit_code field.
func (f *OrganizationFilter) WhereCreditCode(p entql.StringP) {
	f.Where(p.Field(organization.FieldCreditCode))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *OrganizationFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(organization.FieldAddress))
}

// WhereBusinessScope applies the entql string predicate on the business_scope field.
func (f *OrganizationFilter) WhereBusinessScope(p entql.StringP) {
	f.Where(p.Field(organization.FieldBusinessScope))
}

// WhereIsLegalEntity applies the entql bool predicate on the is_legal_entity field.
func (f *OrganizationFilter) WhereIsLegalEntity(p entql.BoolP) {
	f.Where(p.Field(organization.FieldIsLegalEntity))
}

// WhereManagerID applies the entql uint32 predicate on the manager_id field.
func (f *OrganizationFilter) WhereManagerID(p entql.Uint32P) {
	f.Where(p.Field(organization.FieldManagerID))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *OrganizationFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasParentWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *OrganizationFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasChildrenWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *PositionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PositionQuery builder.
func (_q *PositionQuery) Filter() *PositionFilter {
	return &PositionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PositionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PositionMutation builder.
func (m *PositionMutation) Filter() *PositionFilter {
	return &PositionFilter{config: m.config, predicateAdder: m}
}

// PositionFilter provides a generic filtering capability at runtime for PositionQuery.
type PositionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PositionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PositionFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(position.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PositionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(position.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PositionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(position.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PositionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(position.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *PositionFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(position.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *PositionFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(position.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *PositionFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(position.FieldDeletedBy))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PositionFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(position.FieldRemark))
}

// WhereTenantID applies the entql uint32 predicate on the tenant_id field.
func (f *PositionFilter) WhereTenantID(p entql.Uint32P) {
	f.Where(p.Field(position.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *PositionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(position.FieldName))
}

// WhereCode applies the entql string predicate on the code field.
func (f *PositionFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(position.FieldCode))
}

// WhereParentID applies the entql uint32 predicate on the parent_id field.
func (f *PositionFilter) WhereParentID(p entql.Uint32P) {
	f.Where(p.Field(position.FieldParentID))
}

// WhereSortOrder applies the entql int32 predicate on the sort_order field.
func (f *PositionFilter) WhereSortOrder(p entql.Int32P) {
	f.Where(p.Field(position.FieldSortOrder))
}

// WhereOrganizationID applies the entql uint32 predicate on the organization_id field.
func (f *PositionFilter) WhereOrganizationID(p entql.Uint32P) {
	f.Where(p.Field(position.FieldOrganizationID))
}

// WhereDepartmentID applies the entql uint32 predicate on the department_id field.
func (f *PositionFilter) WhereDepartmentID(p entql.Uint32P) {
	f.Where(p.Field(position.FieldDepartmentID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *PositionFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(position.FieldStatus))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *PositionFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(position.FieldDescription))
}

// WhereQuota applies the entql uint32 predicate on the quota field.
func (f *PositionFilter) WhereQuota(p entql.Uint32P) {
	f.Where(p.Field(position.FieldQuota))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *PositionFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *PositionFilter) WhereHasParentWith(preds ...predicate.Position) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *PositionFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *PositionFilter) WhereHasChildrenWith(preds ...predicate.Position) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *PrivateMessageQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PrivateMessageQuery builder.
func (_q *PrivateMessageQuery) Filter() *PrivateMessageFilter {
	return &PrivateMessageFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PrivateMessageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PrivateMessageMutation builder.
func (m *PrivateMessageMutation) Filter() *PrivateMessageFilter {
	return &PrivateMessageFilter{config: m.config, predicateAdder: m}
}

// PrivateMessageFilter provides a generic filtering capability at runtime for PrivateMessageQuery.
type PrivateMessageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PrivateMessageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PrivateMessageFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(privatemessage.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PrivateMessageFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(privatemessage.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PrivateMessageFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(privatemessage.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PrivateMessageFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(privatemessage.FieldDeletedAt))
}

// WhereTenantID applies the entql uint32 predicate on the tenant_id field.
func (f *PrivateMessageFilter) WhereTenantID(p entql.Uint32P) {
	f.Where(p.Field(privatemessage.FieldTenantID))
}

// WhereSubject applies the entql string predicate on the subject field.
func (f *PrivateMessageFilter) WhereSubject(p entql.StringP) {
	f.Where(p.Field(privatemessage.FieldSubject))
}

// WhereContent applies the entql string predicate on the content field.
func (f *PrivateMessageFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(privatemessage.FieldContent))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *PrivateMessageFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(privatemessage.FieldStatus))
}

// WhereSenderID applies the entql uint32 predicate on the sender_id field.
func (f *PrivateMessageFilter) WhereSenderID(p entql.Uint32P) {
	f.Where(p.Field(privatemessage.FieldSenderID))
}

// WhereReceiverID applies the entql uint32 predicate on the receiver_id field.
func (f *PrivateMessageFilter) WhereReceiverID(p entql.Uint32P) {
	f.Where(p.Field(privatemessage.FieldReceiverID))
}

// addPredicate implements the predicateAdder interface.
func (_q *RoleQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RoleQuery builder.
func (_q *RoleQuery) Filter() *RoleFilter {
	return &RoleFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *RoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RoleMutation builder.
func (m *RoleMutation) Filter() *RoleFilter {
	return &RoleFilter{config: m.config, predicateAdder: m}
}

// RoleFilter provides a generic filtering capability at runtime for RoleQuery.
type RoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RoleFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(role.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RoleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(role.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RoleFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(role.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RoleFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(role.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *RoleFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(role.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *RoleFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(role.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *RoleFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(role.FieldDeletedBy))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *RoleFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(role.FieldRemark))
}

// WhereTenantID applies the entql uint32 predicate on the tenant_id field.
func (f *RoleFilter) WhereTenantID(p entql.Uint32P) {
	f.Where(p.Field(role.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *RoleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(role.FieldName))
}

// WhereCode applies the entql string predicate on the code field.
func (f *RoleFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(role.FieldCode))
}

// WhereParentID applies the entql uint32 predicate on the parent_id field.
func (f *RoleFilter) WhereParentID(p entql.Uint32P) {
	f.Where(p.Field(role.FieldParentID))
}

// WhereSortOrder applies the entql int32 predicate on the sort_order field.
func (f *RoleFilter) WhereSortOrder(p entql.Int32P) {
	f.Where(p.Field(role.FieldSortOrder))
}

// WhereMenus applies the entql json.RawMessage predicate on the menus field.
func (f *RoleFilter) WhereMenus(p entql.BytesP) {
	f.Where(p.Field(role.FieldMenus))
}

// WhereApis applies the entql json.RawMessage predicate on the apis field.
func (f *RoleFilter) WhereApis(p entql.BytesP) {
	f.Where(p.Field(role.FieldApis))
}

// WhereDataScope applies the entql string predicate on the data_scope field.
func (f *RoleFilter) WhereDataScope(p entql.StringP) {
	f.Where(p.Field(role.FieldDataScope))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *RoleFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(role.FieldStatus))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *RoleFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *RoleFilter) WhereHasParentWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *RoleFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *RoleFilter) WhereHasChildrenWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *RoleApiQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RoleApiQuery builder.
func (_q *RoleApiQuery) Filter() *RoleApiFilter {
	return &RoleApiFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *RoleApiMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RoleApiMutation builder.
func (m *RoleApiMutation) Filter() *RoleApiFilter {
	return &RoleApiFilter{config: m.config, predicateAdder: m}
}

// RoleApiFilter provides a generic filtering capability at runtime for RoleApiQuery.
type RoleApiFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RoleApiFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RoleApiFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(roleapi.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RoleApiFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(roleapi.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RoleApiFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(roleapi.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RoleApiFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(roleapi.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *RoleApiFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(roleapi.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *RoleApiFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(roleapi.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *RoleApiFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(roleapi.FieldDeletedBy))
}

// WhereRoleID applies the entql uint32 predicate on the role_id field.
func (f *RoleApiFilter) WhereRoleID(p entql.Uint32P) {
	f.Where(p.Field(roleapi.FieldRoleID))
}

// WhereAPIID applies the entql uint32 predicate on the api_id field.
func (f *RoleApiFilter) WhereAPIID(p entql.Uint32P) {
	f.Where(p.Field(roleapi.FieldAPIID))
}

// addPredicate implements the predicateAdder interface.
func (_q *RoleDeptQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RoleDeptQuery builder.
func (_q *RoleDeptQuery) Filter() *RoleDeptFilter {
	return &RoleDeptFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *RoleDeptMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RoleDeptMutation builder.
func (m *RoleDeptMutation) Filter() *RoleDeptFilter {
	return &RoleDeptFilter{config: m.config, predicateAdder: m}
}

// RoleDeptFilter provides a generic filtering capability at runtime for RoleDeptQuery.
type RoleDeptFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RoleDeptFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RoleDeptFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(roledept.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RoleDeptFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(roledept.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RoleDeptFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(roledept.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RoleDeptFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(roledept.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *RoleDeptFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(roledept.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *RoleDeptFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(roledept.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *RoleDeptFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(roledept.FieldDeletedBy))
}

// WhereRoleID applies the entql uint32 predicate on the role_id field.
func (f *RoleDeptFilter) WhereRoleID(p entql.Uint32P) {
	f.Where(p.Field(roledept.FieldRoleID))
}

// WhereDeptID applies the entql uint32 predicate on the dept_id field.
func (f *RoleDeptFilter) WhereDeptID(p entql.Uint32P) {
	f.Where(p.Field(roledept.FieldDeptID))
}

// addPredicate implements the predicateAdder interface.
func (_q *RoleMenuQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RoleMenuQuery builder.
func (_q *RoleMenuQuery) Filter() *RoleMenuFilter {
	return &RoleMenuFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *RoleMenuMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RoleMenuMutation builder.
func (m *RoleMenuMutation) Filter() *RoleMenuFilter {
	return &RoleMenuFilter{config: m.config, predicateAdder: m}
}

// RoleMenuFilter provides a generic filtering capability at runtime for RoleMenuQuery.
type RoleMenuFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RoleMenuFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RoleMenuFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(rolemenu.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RoleMenuFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(rolemenu.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RoleMenuFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(rolemenu.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RoleMenuFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(rolemenu.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *RoleMenuFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(rolemenu.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *RoleMenuFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(rolemenu.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *RoleMenuFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(rolemenu.FieldDeletedBy))
}

// WhereRoleID applies the entql uint32 predicate on the role_id field.
func (f *RoleMenuFilter) WhereRoleID(p entql.Uint32P) {
	f.Where(p.Field(rolemenu.FieldRoleID))
}

// WhereMenuID applies the entql uint32 predicate on the menu_id field.
func (f *RoleMenuFilter) WhereMenuID(p entql.Uint32P) {
	f.Where(p.Field(rolemenu.FieldMenuID))
}

// addPredicate implements the predicateAdder interface.
func (_q *RoleOrgQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RoleOrgQuery builder.
func (_q *RoleOrgQuery) Filter() *RoleOrgFilter {
	return &RoleOrgFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *RoleOrgMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RoleOrgMutation builder.
func (m *RoleOrgMutation) Filter() *RoleOrgFilter {
	return &RoleOrgFilter{config: m.config, predicateAdder: m}
}

// RoleOrgFilter provides a generic filtering capability at runtime for RoleOrgQuery.
type RoleOrgFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RoleOrgFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RoleOrgFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(roleorg.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RoleOrgFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(roleorg.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RoleOrgFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(roleorg.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RoleOrgFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(roleorg.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *RoleOrgFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(roleorg.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *RoleOrgFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(roleorg.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *RoleOrgFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(roleorg.FieldDeletedBy))
}

// WhereRoleID applies the entql uint32 predicate on the role_id field.
func (f *RoleOrgFilter) WhereRoleID(p entql.Uint32P) {
	f.Where(p.Field(roleorg.FieldRoleID))
}

// WhereOrgID applies the entql uint32 predicate on the org_id field.
func (f *RoleOrgFilter) WhereOrgID(p entql.Uint32P) {
	f.Where(p.Field(roleorg.FieldOrgID))
}

// addPredicate implements the predicateAdder interface.
func (_q *RolePositionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RolePositionQuery builder.
func (_q *RolePositionQuery) Filter() *RolePositionFilter {
	return &RolePositionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *RolePositionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RolePositionMutation builder.
func (m *RolePositionMutation) Filter() *RolePositionFilter {
	return &RolePositionFilter{config: m.config, predicateAdder: m}
}

// RolePositionFilter provides a generic filtering capability at runtime for RolePositionQuery.
type RolePositionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RolePositionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RolePositionFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(roleposition.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RolePositionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(roleposition.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RolePositionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(roleposition.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RolePositionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(roleposition.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *RolePositionFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(roleposition.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *RolePositionFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(roleposition.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *RolePositionFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(roleposition.FieldDeletedBy))
}

// WhereRoleID applies the entql uint32 predicate on the role_id field.
func (f *RolePositionFilter) WhereRoleID(p entql.Uint32P) {
	f.Where(p.Field(roleposition.FieldRoleID))
}

// WherePositionID applies the entql uint32 predicate on the position_id field.
func (f *RolePositionFilter) WherePositionID(p entql.Uint32P) {
	f.Where(p.Field(roleposition.FieldPositionID))
}

// addPredicate implements the predicateAdder interface.
func (_q *TaskQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TaskQuery builder.
func (_q *TaskQuery) Filter() *TaskFilter {
	return &TaskFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TaskMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TaskMutation builder.
func (m *TaskMutation) Filter() *TaskFilter {
	return &TaskFilter{config: m.config, predicateAdder: m}
}

// TaskFilter provides a generic filtering capability at runtime for TaskQuery.
type TaskFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TaskFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[22].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TaskFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(task.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TaskFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(task.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TaskFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(task.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TaskFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(task.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *TaskFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(task.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *TaskFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(task.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *TaskFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(task.FieldDeletedBy))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *TaskFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(task.FieldRemark))
}

// WhereTenantID applies the entql uint32 predicate on the tenant_id field.
func (f *TaskFilter) WhereTenantID(p entql.Uint32P) {
	f.Where(p.Field(task.FieldTenantID))
}

// WhereType applies the entql string predicate on the type field.
func (f *TaskFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(task.FieldType))
}

// WhereTypeName applies the entql string predicate on the type_name field.
func (f *TaskFilter) WhereTypeName(p entql.StringP) {
	f.Where(p.Field(task.FieldTypeName))
}

// WhereTaskPayload applies the entql string predicate on the task_payload field.
func (f *TaskFilter) WhereTaskPayload(p entql.StringP) {
	f.Where(p.Field(task.FieldTaskPayload))
}

// WhereCronSpec applies the entql string predicate on the cron_spec field.
func (f *TaskFilter) WhereCronSpec(p entql.StringP) {
	f.Where(p.Field(task.FieldCronSpec))
}

// WhereTaskOptions applies the entql json.RawMessage predicate on the task_options field.
func (f *TaskFilter) WhereTaskOptions(p entql.BytesP) {
	f.Where(p.Field(task.FieldTaskOptions))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *TaskFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(task.FieldEnable))
}

// addPredicate implements the predicateAdder interface.
func (_q *TenantQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TenantQuery builder.
func (_q *TenantQuery) Filter() *TenantFilter {
	return &TenantFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TenantMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TenantMutation builder.
func (m *TenantMutation) Filter() *TenantFilter {
	return &TenantFilter{config: m.config, predicateAdder: m}
}

// TenantFilter provides a generic filtering capability at runtime for TenantQuery.
type TenantFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TenantFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[23].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TenantFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(tenant.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TenantFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(tenant.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TenantFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(tenant.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TenantFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(tenant.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *TenantFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(tenant.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *TenantFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(tenant.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *TenantFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(tenant.FieldDeletedBy))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *TenantFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(tenant.FieldRemark))
}

// WhereName applies the entql string predicate on the name field.
func (f *TenantFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(tenant.FieldName))
}

// WhereCode applies the entql string predicate on the code field.
func (f *TenantFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(tenant.FieldCode))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *TenantFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(tenant.FieldLogoURL))
}

// WhereIndustry applies the entql string predicate on the industry field.
func (f *TenantFilter) WhereIndustry(p entql.StringP) {
	f.Where(p.Field(tenant.FieldIndustry))
}

// WhereAdminUserID applies the entql uint32 predicate on the admin_user_id field.
func (f *TenantFilter) WhereAdminUserID(p entql.Uint32P) {
	f.Where(p.Field(tenant.FieldAdminUserID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *TenantFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(tenant.FieldStatus))
}

// WhereType applies the entql string predicate on the type field.
func (f *TenantFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(tenant.FieldType))
}

// WhereAuditStatus applies the entql string predicate on the audit_status field.
func (f *TenantFilter) WhereAuditStatus(p entql.StringP) {
	f.Where(p.Field(tenant.FieldAuditStatus))
}

// WhereSubscriptionAt applies the entql time.Time predicate on the subscription_at field.
func (f *TenantFilter) WhereSubscriptionAt(p entql.TimeP) {
	f.Where(p.Field(tenant.FieldSubscriptionAt))
}

// WhereUnsubscribeAt applies the entql time.Time predicate on the unsubscribe_at field.
func (f *TenantFilter) WhereUnsubscribeAt(p entql.TimeP) {
	f.Where(p.Field(tenant.FieldUnsubscribeAt))
}

// WhereSubscriptionPlan applies the entql string predicate on the subscription_plan field.
func (f *TenantFilter) WhereSubscriptionPlan(p entql.StringP) {
	f.Where(p.Field(tenant.FieldSubscriptionPlan))
}

// WhereExpiredAt applies the entql time.Time predicate on the expired_at field.
func (f *TenantFilter) WhereExpiredAt(p entql.TimeP) {
	f.Where(p.Field(tenant.FieldExpiredAt))
}

// WhereLastLoginTime applies the entql time.Time predicate on the last_login_time field.
func (f *TenantFilter) WhereLastLoginTime(p entql.TimeP) {
	f.Where(p.Field(tenant.FieldLastLoginTime))
}

// WhereLastLoginIP applies the entql string predicate on the last_login_ip field.
func (f *TenantFilter) WhereLastLoginIP(p entql.StringP) {
	f.Where(p.Field(tenant.FieldLastLoginIP))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (_q *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[24].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *UserFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *UserFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(user.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *UserFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(user.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *UserFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(user.FieldDeletedBy))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldDeletedAt))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *UserFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(user.FieldRemark))
}

// WhereTenantID applies the entql uint32 predicate on the tenant_id field.
func (f *UserFilter) WhereTenantID(p entql.Uint32P) {
	f.Where(p.Field(user.FieldTenantID))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WhereNickname applies the entql string predicate on the nickname field.
func (f *UserFilter) WhereNickname(p entql.StringP) {
	f.Where(p.Field(user.FieldNickname))
}

// WhereRealname applies the entql string predicate on the realname field.
func (f *UserFilter) WhereRealname(p entql.StringP) {
	f.Where(p.Field(user.FieldRealname))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereMobile applies the entql string predicate on the mobile field.
func (f *UserFilter) WhereMobile(p entql.StringP) {
	f.Where(p.Field(user.FieldMobile))
}

// WhereTelephone applies the entql string predicate on the telephone field.
func (f *UserFilter) WhereTelephone(p entql.StringP) {
	f.Where(p.Field(user.FieldTelephone))
}

// WhereAvatar applies the entql string predicate on the avatar field.
func (f *UserFilter) WhereAvatar(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatar))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *UserFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(user.FieldAddress))
}

// WhereRegion applies the entql string predicate on the region field.
func (f *UserFilter) WhereRegion(p entql.StringP) {
	f.Where(p.Field(user.FieldRegion))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *UserFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(user.FieldDescription))
}

// WhereGender applies the entql string predicate on the gender field.
func (f *UserFilter) WhereGender(p entql.StringP) {
	f.Where(p.Field(user.FieldGender))
}

// WhereAuthority applies the entql string predicate on the authority field.
func (f *UserFilter) WhereAuthority(p entql.StringP) {
	f.Where(p.Field(user.FieldAuthority))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *UserFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(user.FieldStatus))
}

// WhereLastLoginTime applies the entql time.Time predicate on the last_login_time field.
func (f *UserFilter) WhereLastLoginTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldLastLoginTime))
}

// WhereLastLoginIP applies the entql string predicate on the last_login_ip field.
func (f *UserFilter) WhereLastLoginIP(p entql.StringP) {
	f.Where(p.Field(user.FieldLastLoginIP))
}

// WhereOrgID applies the entql uint32 predicate on the org_id field.
func (f *UserFilter) WhereOrgID(p entql.Uint32P) {
	f.Where(p.Field(user.FieldOrgID))
}

// WhereDepartmentID applies the entql uint32 predicate on the department_id field.
func (f *UserFilter) WhereDepartmentID(p entql.Uint32P) {
	f.Where(p.Field(user.FieldDepartmentID))
}

// WherePositionID applies the entql uint32 predicate on the position_id field.
func (f *UserFilter) WherePositionID(p entql.Uint32P) {
	f.Where(p.Field(user.FieldPositionID))
}

// WhereWorkID applies the entql uint32 predicate on the work_id field.
func (f *UserFilter) WhereWorkID(p entql.Uint32P) {
	f.Where(p.Field(user.FieldWorkID))
}

// WhereRoleIds applies the entql json.RawMessage predicate on the role_ids field.
func (f *UserFilter) WhereRoleIds(p entql.BytesP) {
	f.Where(p.Field(user.FieldRoleIds))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserCredentialQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserCredentialQuery builder.
func (_q *UserCredentialQuery) Filter() *UserCredentialFilter {
	return &UserCredentialFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserCredentialMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserCredentialMutation builder.
func (m *UserCredentialMutation) Filter() *UserCredentialFilter {
	return &UserCredentialFilter{config: m.config, predicateAdder: m}
}

// UserCredentialFilter provides a generic filtering capability at runtime for UserCredentialQuery.
type UserCredentialFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserCredentialFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[25].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *UserCredentialFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(usercredential.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserCredentialFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(usercredential.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserCredentialFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(usercredential.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserCredentialFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(usercredential.FieldDeletedAt))
}

// WhereTenantID applies the entql uint32 predicate on the tenant_id field.
func (f *UserCredentialFilter) WhereTenantID(p entql.Uint32P) {
	f.Where(p.Field(usercredential.FieldTenantID))
}

// WhereUserID applies the entql uint32 predicate on the user_id field.
func (f *UserCredentialFilter) WhereUserID(p entql.Uint32P) {
	f.Where(p.Field(usercredential.FieldUserID))
}

// WhereIdentityType applies the entql string predicate on the identity_type field.
func (f *UserCredentialFilter) WhereIdentityType(p entql.StringP) {
	f.Where(p.Field(usercredential.FieldIdentityType))
}

// WhereIdentifier applies the entql string predicate on the identifier field.
func (f *UserCredentialFilter) WhereIdentifier(p entql.StringP) {
	f.Where(p.Field(usercredential.FieldIdentifier))
}

// WhereCredentialType applies the entql string predicate on the credential_type field.
func (f *UserCredentialFilter) WhereCredentialType(p entql.StringP) {
	f.Where(p.Field(usercredential.FieldCredentialType))
}

// WhereCredential applies the entql string predicate on the credential field.
func (f *UserCredentialFilter) WhereCredential(p entql.StringP) {
	f.Where(p.Field(usercredential.FieldCredential))
}

// WhereIsPrimary applies the entql bool predicate on the is_primary field.
func (f *UserCredentialFilter) WhereIsPrimary(p entql.BoolP) {
	f.Where(p.Field(usercredential.FieldIsPrimary))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *UserCredentialFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(usercredential.FieldStatus))
}

// WhereExtraInfo applies the entql string predicate on the extra_info field.
func (f *UserCredentialFilter) WhereExtraInfo(p entql.StringP) {
	f.Where(p.Field(usercredential.FieldExtraInfo))
}

// WhereActivateToken applies the entql string predicate on the activate_token field.
func (f *UserCredentialFilter) WhereActivateToken(p entql.StringP) {
	f.Where(p.Field(usercredential.FieldActivateToken))
}

// WhereResetToken applies the entql string predicate on the reset_token field.
func (f *UserCredentialFilter) WhereResetToken(p entql.StringP) {
	f.Where(p.Field(usercredential.FieldResetToken))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserPositionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserPositionQuery builder.
func (_q *UserPositionQuery) Filter() *UserPositionFilter {
	return &UserPositionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserPositionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserPositionMutation builder.
func (m *UserPositionMutation) Filter() *UserPositionFilter {
	return &UserPositionFilter{config: m.config, predicateAdder: m}
}

// UserPositionFilter provides a generic filtering capability at runtime for UserPositionQuery.
type UserPositionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserPositionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[26].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *UserPositionFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(userposition.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserPositionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(userposition.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserPositionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(userposition.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserPositionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(userposition.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *UserPositionFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(userposition.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *UserPositionFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(userposition.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *UserPositionFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(userposition.FieldDeletedBy))
}

// WhereUserID applies the entql uint32 predicate on the user_id field.
func (f *UserPositionFilter) WhereUserID(p entql.Uint32P) {
	f.Where(p.Field(userposition.FieldUserID))
}

// WherePositionID applies the entql uint32 predicate on the position_id field.
func (f *UserPositionFilter) WherePositionID(p entql.Uint32P) {
	f.Where(p.Field(userposition.FieldPositionID))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserRoleQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserRoleQuery builder.
func (_q *UserRoleQuery) Filter() *UserRoleFilter {
	return &UserRoleFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserRoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserRoleMutation builder.
func (m *UserRoleMutation) Filter() *UserRoleFilter {
	return &UserRoleFilter{config: m.config, predicateAdder: m}
}

// UserRoleFilter provides a generic filtering capability at runtime for UserRoleQuery.
type UserRoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserRoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[27].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *UserRoleFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(userrole.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserRoleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(userrole.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserRoleFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(userrole.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserRoleFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(userrole.FieldDeletedAt))
}

// WhereCreatedBy applies the entql uint32 predicate on the created_by field.
func (f *UserRoleFilter) WhereCreatedBy(p entql.Uint32P) {
	f.Where(p.Field(userrole.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql uint32 predicate on the updated_by field.
func (f *UserRoleFilter) WhereUpdatedBy(p entql.Uint32P) {
	f.Where(p.Field(userrole.FieldUpdatedBy))
}

// WhereDeletedBy applies the entql uint32 predicate on the deleted_by field.
func (f *UserRoleFilter) WhereDeletedBy(p entql.Uint32P) {
	f.Where(p.Field(userrole.FieldDeletedBy))
}

// WhereUserID applies the entql uint32 predicate on the user_id field.
func (f *UserRoleFilter) WhereUserID(p entql.Uint32P) {
	f.Where(p.Field(userrole.FieldUserID))
}

// WhereRoleID applies the entql uint32 predicate on the role_id field.
func (f *UserRoleFilter) WhereRoleID(p entql.Uint32P) {
	f.Where(p.Field(userrole.FieldRoleID))
}

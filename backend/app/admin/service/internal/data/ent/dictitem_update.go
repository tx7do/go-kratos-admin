// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/dictitem"
	"kratos-admin/app/admin/service/internal/data/ent/dictmain"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictItemUpdate is the builder for updating DictItem entities.
type DictItemUpdate struct {
	config
	hooks     []Hook
	mutation  *DictItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DictItemUpdate builder.
func (_u *DictItemUpdate) Where(ps ...predicate.DictItem) *DictItemUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *DictItemUpdate) SetUpdateTime(v time.Time) *DictItemUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *DictItemUpdate) SetNillableUpdateTime(v *time.Time) *DictItemUpdate {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *DictItemUpdate) ClearUpdateTime() *DictItemUpdate {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *DictItemUpdate) SetDeleteTime(v time.Time) *DictItemUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *DictItemUpdate) SetNillableDeleteTime(v *time.Time) *DictItemUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *DictItemUpdate) ClearDeleteTime() *DictItemUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *DictItemUpdate) SetCreateBy(v uint32) *DictItemUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *DictItemUpdate) SetNillableCreateBy(v *uint32) *DictItemUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *DictItemUpdate) AddCreateBy(v int32) *DictItemUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *DictItemUpdate) ClearCreateBy() *DictItemUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *DictItemUpdate) SetUpdateBy(v uint32) *DictItemUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *DictItemUpdate) SetNillableUpdateBy(v *uint32) *DictItemUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *DictItemUpdate) AddUpdateBy(v int32) *DictItemUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *DictItemUpdate) ClearUpdateBy() *DictItemUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *DictItemUpdate) SetRemark(v string) *DictItemUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *DictItemUpdate) SetNillableRemark(v *string) *DictItemUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *DictItemUpdate) ClearRemark() *DictItemUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetCode sets the "code" field.
func (_u *DictItemUpdate) SetCode(v string) *DictItemUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *DictItemUpdate) SetNillableCode(v *string) *DictItemUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *DictItemUpdate) ClearCode() *DictItemUpdate {
	_u.mutation.ClearCode()
	return _u
}

// SetName sets the "name" field.
func (_u *DictItemUpdate) SetName(v string) *DictItemUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DictItemUpdate) SetNillableName(v *string) *DictItemUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *DictItemUpdate) ClearName() *DictItemUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetSortID sets the "sort_id" field.
func (_u *DictItemUpdate) SetSortID(v int32) *DictItemUpdate {
	_u.mutation.ResetSortID()
	_u.mutation.SetSortID(v)
	return _u
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (_u *DictItemUpdate) SetNillableSortID(v *int32) *DictItemUpdate {
	if v != nil {
		_u.SetSortID(*v)
	}
	return _u
}

// AddSortID adds value to the "sort_id" field.
func (_u *DictItemUpdate) AddSortID(v int32) *DictItemUpdate {
	_u.mutation.AddSortID(v)
	return _u
}

// ClearSortID clears the value of the "sort_id" field.
func (_u *DictItemUpdate) ClearSortID() *DictItemUpdate {
	_u.mutation.ClearSortID()
	return _u
}

// SetValue sets the "value" field.
func (_u *DictItemUpdate) SetValue(v int32) *DictItemUpdate {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *DictItemUpdate) SetNillableValue(v *int32) *DictItemUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *DictItemUpdate) AddValue(v int32) *DictItemUpdate {
	_u.mutation.AddValue(v)
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *DictItemUpdate) ClearValue() *DictItemUpdate {
	_u.mutation.ClearValue()
	return _u
}

// SetStatus sets the "status" field.
func (_u *DictItemUpdate) SetStatus(v dictitem.Status) *DictItemUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DictItemUpdate) SetNillableStatus(v *dictitem.Status) *DictItemUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *DictItemUpdate) ClearStatus() *DictItemUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetSysDictMainsID sets the "sys_dict_mains" edge to the DictMain entity by ID.
func (_u *DictItemUpdate) SetSysDictMainsID(id uint32) *DictItemUpdate {
	_u.mutation.SetSysDictMainsID(id)
	return _u
}

// SetSysDictMains sets the "sys_dict_mains" edge to the DictMain entity.
func (_u *DictItemUpdate) SetSysDictMains(v *DictMain) *DictItemUpdate {
	return _u.SetSysDictMainsID(v.ID)
}

// Mutation returns the DictItemMutation object of the builder.
func (_u *DictItemUpdate) Mutation() *DictItemMutation {
	return _u.mutation
}

// ClearSysDictMains clears the "sys_dict_mains" edge to the DictMain entity.
func (_u *DictItemUpdate) ClearSysDictMains() *DictItemUpdate {
	_u.mutation.ClearSysDictMains()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DictItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DictItemUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DictItemUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DictItemUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DictItemUpdate) check() error {
	if v, ok := _u.mutation.Code(); ok {
		if err := dictitem.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DictItem.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := dictitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DictItem.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := dictitem.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DictItem.status": %w`, err)}
		}
	}
	if _u.mutation.SysDictMainsCleared() && len(_u.mutation.SysDictMainsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DictItem.sys_dict_mains"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DictItemUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictItemUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DictItemUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dictitem.Table, dictitem.Columns, sqlgraph.NewFieldSpec(dictitem.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(dictitem.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(dictitem.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(dictitem.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(dictitem.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(dictitem.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(dictitem.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(dictitem.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(dictitem.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(dictitem.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(dictitem.FieldUpdateBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(dictitem.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(dictitem.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(dictitem.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(dictitem.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(dictitem.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(dictitem.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(dictitem.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(dictitem.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.SortID(); ok {
		_spec.SetField(dictitem.FieldSortID, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortID(); ok {
		_spec.AddField(dictitem.FieldSortID, field.TypeInt32, value)
	}
	if _u.mutation.SortIDCleared() {
		_spec.ClearField(dictitem.FieldSortID, field.TypeInt32)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(dictitem.FieldValue, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(dictitem.FieldValue, field.TypeInt32, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(dictitem.FieldValue, field.TypeInt32)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(dictitem.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(dictitem.FieldStatus, field.TypeEnum)
	}
	if _u.mutation.SysDictMainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dictitem.SysDictMainsTable,
			Columns: []string{dictitem.SysDictMainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictmain.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SysDictMainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dictitem.SysDictMainsTable,
			Columns: []string{dictitem.SysDictMainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictmain.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DictItemUpdateOne is the builder for updating a single DictItem entity.
type DictItemUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DictItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (_u *DictItemUpdateOne) SetUpdateTime(v time.Time) *DictItemUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *DictItemUpdateOne) SetNillableUpdateTime(v *time.Time) *DictItemUpdateOne {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *DictItemUpdateOne) ClearUpdateTime() *DictItemUpdateOne {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *DictItemUpdateOne) SetDeleteTime(v time.Time) *DictItemUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *DictItemUpdateOne) SetNillableDeleteTime(v *time.Time) *DictItemUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *DictItemUpdateOne) ClearDeleteTime() *DictItemUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *DictItemUpdateOne) SetCreateBy(v uint32) *DictItemUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *DictItemUpdateOne) SetNillableCreateBy(v *uint32) *DictItemUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *DictItemUpdateOne) AddCreateBy(v int32) *DictItemUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *DictItemUpdateOne) ClearCreateBy() *DictItemUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *DictItemUpdateOne) SetUpdateBy(v uint32) *DictItemUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *DictItemUpdateOne) SetNillableUpdateBy(v *uint32) *DictItemUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *DictItemUpdateOne) AddUpdateBy(v int32) *DictItemUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *DictItemUpdateOne) ClearUpdateBy() *DictItemUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *DictItemUpdateOne) SetRemark(v string) *DictItemUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *DictItemUpdateOne) SetNillableRemark(v *string) *DictItemUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *DictItemUpdateOne) ClearRemark() *DictItemUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetCode sets the "code" field.
func (_u *DictItemUpdateOne) SetCode(v string) *DictItemUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *DictItemUpdateOne) SetNillableCode(v *string) *DictItemUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *DictItemUpdateOne) ClearCode() *DictItemUpdateOne {
	_u.mutation.ClearCode()
	return _u
}

// SetName sets the "name" field.
func (_u *DictItemUpdateOne) SetName(v string) *DictItemUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DictItemUpdateOne) SetNillableName(v *string) *DictItemUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *DictItemUpdateOne) ClearName() *DictItemUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetSortID sets the "sort_id" field.
func (_u *DictItemUpdateOne) SetSortID(v int32) *DictItemUpdateOne {
	_u.mutation.ResetSortID()
	_u.mutation.SetSortID(v)
	return _u
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (_u *DictItemUpdateOne) SetNillableSortID(v *int32) *DictItemUpdateOne {
	if v != nil {
		_u.SetSortID(*v)
	}
	return _u
}

// AddSortID adds value to the "sort_id" field.
func (_u *DictItemUpdateOne) AddSortID(v int32) *DictItemUpdateOne {
	_u.mutation.AddSortID(v)
	return _u
}

// ClearSortID clears the value of the "sort_id" field.
func (_u *DictItemUpdateOne) ClearSortID() *DictItemUpdateOne {
	_u.mutation.ClearSortID()
	return _u
}

// SetValue sets the "value" field.
func (_u *DictItemUpdateOne) SetValue(v int32) *DictItemUpdateOne {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *DictItemUpdateOne) SetNillableValue(v *int32) *DictItemUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *DictItemUpdateOne) AddValue(v int32) *DictItemUpdateOne {
	_u.mutation.AddValue(v)
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *DictItemUpdateOne) ClearValue() *DictItemUpdateOne {
	_u.mutation.ClearValue()
	return _u
}

// SetStatus sets the "status" field.
func (_u *DictItemUpdateOne) SetStatus(v dictitem.Status) *DictItemUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DictItemUpdateOne) SetNillableStatus(v *dictitem.Status) *DictItemUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *DictItemUpdateOne) ClearStatus() *DictItemUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetSysDictMainsID sets the "sys_dict_mains" edge to the DictMain entity by ID.
func (_u *DictItemUpdateOne) SetSysDictMainsID(id uint32) *DictItemUpdateOne {
	_u.mutation.SetSysDictMainsID(id)
	return _u
}

// SetSysDictMains sets the "sys_dict_mains" edge to the DictMain entity.
func (_u *DictItemUpdateOne) SetSysDictMains(v *DictMain) *DictItemUpdateOne {
	return _u.SetSysDictMainsID(v.ID)
}

// Mutation returns the DictItemMutation object of the builder.
func (_u *DictItemUpdateOne) Mutation() *DictItemMutation {
	return _u.mutation
}

// ClearSysDictMains clears the "sys_dict_mains" edge to the DictMain entity.
func (_u *DictItemUpdateOne) ClearSysDictMains() *DictItemUpdateOne {
	_u.mutation.ClearSysDictMains()
	return _u
}

// Where appends a list predicates to the DictItemUpdate builder.
func (_u *DictItemUpdateOne) Where(ps ...predicate.DictItem) *DictItemUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DictItemUpdateOne) Select(field string, fields ...string) *DictItemUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated DictItem entity.
func (_u *DictItemUpdateOne) Save(ctx context.Context) (*DictItem, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DictItemUpdateOne) SaveX(ctx context.Context) *DictItem {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DictItemUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DictItemUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DictItemUpdateOne) check() error {
	if v, ok := _u.mutation.Code(); ok {
		if err := dictitem.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DictItem.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := dictitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DictItem.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := dictitem.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DictItem.status": %w`, err)}
		}
	}
	if _u.mutation.SysDictMainsCleared() && len(_u.mutation.SysDictMainsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DictItem.sys_dict_mains"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DictItemUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictItemUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DictItemUpdateOne) sqlSave(ctx context.Context) (_node *DictItem, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dictitem.Table, dictitem.Columns, sqlgraph.NewFieldSpec(dictitem.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DictItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dictitem.FieldID)
		for _, f := range fields {
			if !dictitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dictitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(dictitem.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(dictitem.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(dictitem.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(dictitem.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(dictitem.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(dictitem.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(dictitem.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(dictitem.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(dictitem.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(dictitem.FieldUpdateBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(dictitem.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(dictitem.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(dictitem.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(dictitem.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(dictitem.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(dictitem.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(dictitem.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(dictitem.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.SortID(); ok {
		_spec.SetField(dictitem.FieldSortID, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSortID(); ok {
		_spec.AddField(dictitem.FieldSortID, field.TypeInt32, value)
	}
	if _u.mutation.SortIDCleared() {
		_spec.ClearField(dictitem.FieldSortID, field.TypeInt32)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(dictitem.FieldValue, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(dictitem.FieldValue, field.TypeInt32, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(dictitem.FieldValue, field.TypeInt32)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(dictitem.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(dictitem.FieldStatus, field.TypeEnum)
	}
	if _u.mutation.SysDictMainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dictitem.SysDictMainsTable,
			Columns: []string{dictitem.SysDictMainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictmain.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SysDictMainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dictitem.SysDictMainsTable,
			Columns: []string{dictitem.SysDictMainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictmain.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &DictItem{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"kratos-admin/app/admin/service/internal/data/ent/usercredential"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCredentialUpdate is the builder for updating UserCredential entities.
type UserCredentialUpdate struct {
	config
	hooks     []Hook
	mutation  *UserCredentialMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserCredentialUpdate builder.
func (_u *UserCredentialUpdate) Where(ps ...predicate.UserCredential) *UserCredentialUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserCredentialUpdate) SetUpdatedAt(v time.Time) *UserCredentialUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *UserCredentialUpdate) SetNillableUpdatedAt(v *time.Time) *UserCredentialUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *UserCredentialUpdate) ClearUpdatedAt() *UserCredentialUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *UserCredentialUpdate) SetDeletedAt(v time.Time) *UserCredentialUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *UserCredentialUpdate) SetNillableDeletedAt(v *time.Time) *UserCredentialUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *UserCredentialUpdate) ClearDeletedAt() *UserCredentialUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *UserCredentialUpdate) SetUserID(v uint32) *UserCredentialUpdate {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserCredentialUpdate) SetNillableUserID(v *uint32) *UserCredentialUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *UserCredentialUpdate) AddUserID(v int32) *UserCredentialUpdate {
	_u.mutation.AddUserID(v)
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *UserCredentialUpdate) ClearUserID() *UserCredentialUpdate {
	_u.mutation.ClearUserID()
	return _u
}

// SetIdentityType sets the "identity_type" field.
func (_u *UserCredentialUpdate) SetIdentityType(v usercredential.IdentityType) *UserCredentialUpdate {
	_u.mutation.SetIdentityType(v)
	return _u
}

// SetNillableIdentityType sets the "identity_type" field if the given value is not nil.
func (_u *UserCredentialUpdate) SetNillableIdentityType(v *usercredential.IdentityType) *UserCredentialUpdate {
	if v != nil {
		_u.SetIdentityType(*v)
	}
	return _u
}

// ClearIdentityType clears the value of the "identity_type" field.
func (_u *UserCredentialUpdate) ClearIdentityType() *UserCredentialUpdate {
	_u.mutation.ClearIdentityType()
	return _u
}

// SetIdentifier sets the "identifier" field.
func (_u *UserCredentialUpdate) SetIdentifier(v string) *UserCredentialUpdate {
	_u.mutation.SetIdentifier(v)
	return _u
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (_u *UserCredentialUpdate) SetNillableIdentifier(v *string) *UserCredentialUpdate {
	if v != nil {
		_u.SetIdentifier(*v)
	}
	return _u
}

// ClearIdentifier clears the value of the "identifier" field.
func (_u *UserCredentialUpdate) ClearIdentifier() *UserCredentialUpdate {
	_u.mutation.ClearIdentifier()
	return _u
}

// SetCredentialType sets the "credential_type" field.
func (_u *UserCredentialUpdate) SetCredentialType(v usercredential.CredentialType) *UserCredentialUpdate {
	_u.mutation.SetCredentialType(v)
	return _u
}

// SetNillableCredentialType sets the "credential_type" field if the given value is not nil.
func (_u *UserCredentialUpdate) SetNillableCredentialType(v *usercredential.CredentialType) *UserCredentialUpdate {
	if v != nil {
		_u.SetCredentialType(*v)
	}
	return _u
}

// ClearCredentialType clears the value of the "credential_type" field.
func (_u *UserCredentialUpdate) ClearCredentialType() *UserCredentialUpdate {
	_u.mutation.ClearCredentialType()
	return _u
}

// SetCredential sets the "credential" field.
func (_u *UserCredentialUpdate) SetCredential(v string) *UserCredentialUpdate {
	_u.mutation.SetCredential(v)
	return _u
}

// SetNillableCredential sets the "credential" field if the given value is not nil.
func (_u *UserCredentialUpdate) SetNillableCredential(v *string) *UserCredentialUpdate {
	if v != nil {
		_u.SetCredential(*v)
	}
	return _u
}

// ClearCredential clears the value of the "credential" field.
func (_u *UserCredentialUpdate) ClearCredential() *UserCredentialUpdate {
	_u.mutation.ClearCredential()
	return _u
}

// SetIsPrimary sets the "is_primary" field.
func (_u *UserCredentialUpdate) SetIsPrimary(v bool) *UserCredentialUpdate {
	_u.mutation.SetIsPrimary(v)
	return _u
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (_u *UserCredentialUpdate) SetNillableIsPrimary(v *bool) *UserCredentialUpdate {
	if v != nil {
		_u.SetIsPrimary(*v)
	}
	return _u
}

// ClearIsPrimary clears the value of the "is_primary" field.
func (_u *UserCredentialUpdate) ClearIsPrimary() *UserCredentialUpdate {
	_u.mutation.ClearIsPrimary()
	return _u
}

// SetStatus sets the "status" field.
func (_u *UserCredentialUpdate) SetStatus(v usercredential.Status) *UserCredentialUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *UserCredentialUpdate) SetNillableStatus(v *usercredential.Status) *UserCredentialUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *UserCredentialUpdate) ClearStatus() *UserCredentialUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetExtraInfo sets the "extra_info" field.
func (_u *UserCredentialUpdate) SetExtraInfo(v string) *UserCredentialUpdate {
	_u.mutation.SetExtraInfo(v)
	return _u
}

// SetNillableExtraInfo sets the "extra_info" field if the given value is not nil.
func (_u *UserCredentialUpdate) SetNillableExtraInfo(v *string) *UserCredentialUpdate {
	if v != nil {
		_u.SetExtraInfo(*v)
	}
	return _u
}

// ClearExtraInfo clears the value of the "extra_info" field.
func (_u *UserCredentialUpdate) ClearExtraInfo() *UserCredentialUpdate {
	_u.mutation.ClearExtraInfo()
	return _u
}

// SetActivateToken sets the "activate_token" field.
func (_u *UserCredentialUpdate) SetActivateToken(v string) *UserCredentialUpdate {
	_u.mutation.SetActivateToken(v)
	return _u
}

// SetNillableActivateToken sets the "activate_token" field if the given value is not nil.
func (_u *UserCredentialUpdate) SetNillableActivateToken(v *string) *UserCredentialUpdate {
	if v != nil {
		_u.SetActivateToken(*v)
	}
	return _u
}

// ClearActivateToken clears the value of the "activate_token" field.
func (_u *UserCredentialUpdate) ClearActivateToken() *UserCredentialUpdate {
	_u.mutation.ClearActivateToken()
	return _u
}

// SetResetToken sets the "reset_token" field.
func (_u *UserCredentialUpdate) SetResetToken(v string) *UserCredentialUpdate {
	_u.mutation.SetResetToken(v)
	return _u
}

// SetNillableResetToken sets the "reset_token" field if the given value is not nil.
func (_u *UserCredentialUpdate) SetNillableResetToken(v *string) *UserCredentialUpdate {
	if v != nil {
		_u.SetResetToken(*v)
	}
	return _u
}

// ClearResetToken clears the value of the "reset_token" field.
func (_u *UserCredentialUpdate) ClearResetToken() *UserCredentialUpdate {
	_u.mutation.ClearResetToken()
	return _u
}

// Mutation returns the UserCredentialMutation object of the builder.
func (_u *UserCredentialUpdate) Mutation() *UserCredentialMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserCredentialUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserCredentialUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserCredentialUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserCredentialUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserCredentialUpdate) check() error {
	if v, ok := _u.mutation.IdentityType(); ok {
		if err := usercredential.IdentityTypeValidator(v); err != nil {
			return &ValidationError{Name: "identity_type", err: fmt.Errorf(`ent: validator failed for field "UserCredential.identity_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Identifier(); ok {
		if err := usercredential.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "UserCredential.identifier": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CredentialType(); ok {
		if err := usercredential.CredentialTypeValidator(v); err != nil {
			return &ValidationError{Name: "credential_type", err: fmt.Errorf(`ent: validator failed for field "UserCredential.credential_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Credential(); ok {
		if err := usercredential.CredentialValidator(v); err != nil {
			return &ValidationError{Name: "credential", err: fmt.Errorf(`ent: validator failed for field "UserCredential.credential": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := usercredential.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "UserCredential.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ActivateToken(); ok {
		if err := usercredential.ActivateTokenValidator(v); err != nil {
			return &ValidationError{Name: "activate_token", err: fmt.Errorf(`ent: validator failed for field "UserCredential.activate_token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ResetToken(); ok {
		if err := usercredential.ResetTokenValidator(v); err != nil {
			return &ValidationError{Name: "reset_token", err: fmt.Errorf(`ent: validator failed for field "UserCredential.reset_token": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *UserCredentialUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserCredentialUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *UserCredentialUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usercredential.Table, usercredential.Columns, sqlgraph.NewFieldSpec(usercredential.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(usercredential.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(usercredential.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(usercredential.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(usercredential.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(usercredential.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(usercredential.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(usercredential.FieldUserID, field.TypeUint32, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(usercredential.FieldUserID, field.TypeUint32)
	}
	if value, ok := _u.mutation.IdentityType(); ok {
		_spec.SetField(usercredential.FieldIdentityType, field.TypeEnum, value)
	}
	if _u.mutation.IdentityTypeCleared() {
		_spec.ClearField(usercredential.FieldIdentityType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Identifier(); ok {
		_spec.SetField(usercredential.FieldIdentifier, field.TypeString, value)
	}
	if _u.mutation.IdentifierCleared() {
		_spec.ClearField(usercredential.FieldIdentifier, field.TypeString)
	}
	if value, ok := _u.mutation.CredentialType(); ok {
		_spec.SetField(usercredential.FieldCredentialType, field.TypeEnum, value)
	}
	if _u.mutation.CredentialTypeCleared() {
		_spec.ClearField(usercredential.FieldCredentialType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Credential(); ok {
		_spec.SetField(usercredential.FieldCredential, field.TypeString, value)
	}
	if _u.mutation.CredentialCleared() {
		_spec.ClearField(usercredential.FieldCredential, field.TypeString)
	}
	if value, ok := _u.mutation.IsPrimary(); ok {
		_spec.SetField(usercredential.FieldIsPrimary, field.TypeBool, value)
	}
	if _u.mutation.IsPrimaryCleared() {
		_spec.ClearField(usercredential.FieldIsPrimary, field.TypeBool)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(usercredential.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(usercredential.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.ExtraInfo(); ok {
		_spec.SetField(usercredential.FieldExtraInfo, field.TypeString, value)
	}
	if _u.mutation.ExtraInfoCleared() {
		_spec.ClearField(usercredential.FieldExtraInfo, field.TypeString)
	}
	if value, ok := _u.mutation.ActivateToken(); ok {
		_spec.SetField(usercredential.FieldActivateToken, field.TypeString, value)
	}
	if _u.mutation.ActivateTokenCleared() {
		_spec.ClearField(usercredential.FieldActivateToken, field.TypeString)
	}
	if value, ok := _u.mutation.ResetToken(); ok {
		_spec.SetField(usercredential.FieldResetToken, field.TypeString, value)
	}
	if _u.mutation.ResetTokenCleared() {
		_spec.ClearField(usercredential.FieldResetToken, field.TypeString)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercredential.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserCredentialUpdateOne is the builder for updating a single UserCredential entity.
type UserCredentialUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserCredentialMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserCredentialUpdateOne) SetUpdatedAt(v time.Time) *UserCredentialUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *UserCredentialUpdateOne) SetNillableUpdatedAt(v *time.Time) *UserCredentialUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *UserCredentialUpdateOne) ClearUpdatedAt() *UserCredentialUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *UserCredentialUpdateOne) SetDeletedAt(v time.Time) *UserCredentialUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *UserCredentialUpdateOne) SetNillableDeletedAt(v *time.Time) *UserCredentialUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *UserCredentialUpdateOne) ClearDeletedAt() *UserCredentialUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *UserCredentialUpdateOne) SetUserID(v uint32) *UserCredentialUpdateOne {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserCredentialUpdateOne) SetNillableUserID(v *uint32) *UserCredentialUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *UserCredentialUpdateOne) AddUserID(v int32) *UserCredentialUpdateOne {
	_u.mutation.AddUserID(v)
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *UserCredentialUpdateOne) ClearUserID() *UserCredentialUpdateOne {
	_u.mutation.ClearUserID()
	return _u
}

// SetIdentityType sets the "identity_type" field.
func (_u *UserCredentialUpdateOne) SetIdentityType(v usercredential.IdentityType) *UserCredentialUpdateOne {
	_u.mutation.SetIdentityType(v)
	return _u
}

// SetNillableIdentityType sets the "identity_type" field if the given value is not nil.
func (_u *UserCredentialUpdateOne) SetNillableIdentityType(v *usercredential.IdentityType) *UserCredentialUpdateOne {
	if v != nil {
		_u.SetIdentityType(*v)
	}
	return _u
}

// ClearIdentityType clears the value of the "identity_type" field.
func (_u *UserCredentialUpdateOne) ClearIdentityType() *UserCredentialUpdateOne {
	_u.mutation.ClearIdentityType()
	return _u
}

// SetIdentifier sets the "identifier" field.
func (_u *UserCredentialUpdateOne) SetIdentifier(v string) *UserCredentialUpdateOne {
	_u.mutation.SetIdentifier(v)
	return _u
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (_u *UserCredentialUpdateOne) SetNillableIdentifier(v *string) *UserCredentialUpdateOne {
	if v != nil {
		_u.SetIdentifier(*v)
	}
	return _u
}

// ClearIdentifier clears the value of the "identifier" field.
func (_u *UserCredentialUpdateOne) ClearIdentifier() *UserCredentialUpdateOne {
	_u.mutation.ClearIdentifier()
	return _u
}

// SetCredentialType sets the "credential_type" field.
func (_u *UserCredentialUpdateOne) SetCredentialType(v usercredential.CredentialType) *UserCredentialUpdateOne {
	_u.mutation.SetCredentialType(v)
	return _u
}

// SetNillableCredentialType sets the "credential_type" field if the given value is not nil.
func (_u *UserCredentialUpdateOne) SetNillableCredentialType(v *usercredential.CredentialType) *UserCredentialUpdateOne {
	if v != nil {
		_u.SetCredentialType(*v)
	}
	return _u
}

// ClearCredentialType clears the value of the "credential_type" field.
func (_u *UserCredentialUpdateOne) ClearCredentialType() *UserCredentialUpdateOne {
	_u.mutation.ClearCredentialType()
	return _u
}

// SetCredential sets the "credential" field.
func (_u *UserCredentialUpdateOne) SetCredential(v string) *UserCredentialUpdateOne {
	_u.mutation.SetCredential(v)
	return _u
}

// SetNillableCredential sets the "credential" field if the given value is not nil.
func (_u *UserCredentialUpdateOne) SetNillableCredential(v *string) *UserCredentialUpdateOne {
	if v != nil {
		_u.SetCredential(*v)
	}
	return _u
}

// ClearCredential clears the value of the "credential" field.
func (_u *UserCredentialUpdateOne) ClearCredential() *UserCredentialUpdateOne {
	_u.mutation.ClearCredential()
	return _u
}

// SetIsPrimary sets the "is_primary" field.
func (_u *UserCredentialUpdateOne) SetIsPrimary(v bool) *UserCredentialUpdateOne {
	_u.mutation.SetIsPrimary(v)
	return _u
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (_u *UserCredentialUpdateOne) SetNillableIsPrimary(v *bool) *UserCredentialUpdateOne {
	if v != nil {
		_u.SetIsPrimary(*v)
	}
	return _u
}

// ClearIsPrimary clears the value of the "is_primary" field.
func (_u *UserCredentialUpdateOne) ClearIsPrimary() *UserCredentialUpdateOne {
	_u.mutation.ClearIsPrimary()
	return _u
}

// SetStatus sets the "status" field.
func (_u *UserCredentialUpdateOne) SetStatus(v usercredential.Status) *UserCredentialUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *UserCredentialUpdateOne) SetNillableStatus(v *usercredential.Status) *UserCredentialUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *UserCredentialUpdateOne) ClearStatus() *UserCredentialUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetExtraInfo sets the "extra_info" field.
func (_u *UserCredentialUpdateOne) SetExtraInfo(v string) *UserCredentialUpdateOne {
	_u.mutation.SetExtraInfo(v)
	return _u
}

// SetNillableExtraInfo sets the "extra_info" field if the given value is not nil.
func (_u *UserCredentialUpdateOne) SetNillableExtraInfo(v *string) *UserCredentialUpdateOne {
	if v != nil {
		_u.SetExtraInfo(*v)
	}
	return _u
}

// ClearExtraInfo clears the value of the "extra_info" field.
func (_u *UserCredentialUpdateOne) ClearExtraInfo() *UserCredentialUpdateOne {
	_u.mutation.ClearExtraInfo()
	return _u
}

// SetActivateToken sets the "activate_token" field.
func (_u *UserCredentialUpdateOne) SetActivateToken(v string) *UserCredentialUpdateOne {
	_u.mutation.SetActivateToken(v)
	return _u
}

// SetNillableActivateToken sets the "activate_token" field if the given value is not nil.
func (_u *UserCredentialUpdateOne) SetNillableActivateToken(v *string) *UserCredentialUpdateOne {
	if v != nil {
		_u.SetActivateToken(*v)
	}
	return _u
}

// ClearActivateToken clears the value of the "activate_token" field.
func (_u *UserCredentialUpdateOne) ClearActivateToken() *UserCredentialUpdateOne {
	_u.mutation.ClearActivateToken()
	return _u
}

// SetResetToken sets the "reset_token" field.
func (_u *UserCredentialUpdateOne) SetResetToken(v string) *UserCredentialUpdateOne {
	_u.mutation.SetResetToken(v)
	return _u
}

// SetNillableResetToken sets the "reset_token" field if the given value is not nil.
func (_u *UserCredentialUpdateOne) SetNillableResetToken(v *string) *UserCredentialUpdateOne {
	if v != nil {
		_u.SetResetToken(*v)
	}
	return _u
}

// ClearResetToken clears the value of the "reset_token" field.
func (_u *UserCredentialUpdateOne) ClearResetToken() *UserCredentialUpdateOne {
	_u.mutation.ClearResetToken()
	return _u
}

// Mutation returns the UserCredentialMutation object of the builder.
func (_u *UserCredentialUpdateOne) Mutation() *UserCredentialMutation {
	return _u.mutation
}

// Where appends a list predicates to the UserCredentialUpdate builder.
func (_u *UserCredentialUpdateOne) Where(ps ...predicate.UserCredential) *UserCredentialUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserCredentialUpdateOne) Select(field string, fields ...string) *UserCredentialUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserCredential entity.
func (_u *UserCredentialUpdateOne) Save(ctx context.Context) (*UserCredential, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserCredentialUpdateOne) SaveX(ctx context.Context) *UserCredential {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserCredentialUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserCredentialUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserCredentialUpdateOne) check() error {
	if v, ok := _u.mutation.IdentityType(); ok {
		if err := usercredential.IdentityTypeValidator(v); err != nil {
			return &ValidationError{Name: "identity_type", err: fmt.Errorf(`ent: validator failed for field "UserCredential.identity_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Identifier(); ok {
		if err := usercredential.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "UserCredential.identifier": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CredentialType(); ok {
		if err := usercredential.CredentialTypeValidator(v); err != nil {
			return &ValidationError{Name: "credential_type", err: fmt.Errorf(`ent: validator failed for field "UserCredential.credential_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Credential(); ok {
		if err := usercredential.CredentialValidator(v); err != nil {
			return &ValidationError{Name: "credential", err: fmt.Errorf(`ent: validator failed for field "UserCredential.credential": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := usercredential.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "UserCredential.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ActivateToken(); ok {
		if err := usercredential.ActivateTokenValidator(v); err != nil {
			return &ValidationError{Name: "activate_token", err: fmt.Errorf(`ent: validator failed for field "UserCredential.activate_token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ResetToken(); ok {
		if err := usercredential.ResetTokenValidator(v); err != nil {
			return &ValidationError{Name: "reset_token", err: fmt.Errorf(`ent: validator failed for field "UserCredential.reset_token": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *UserCredentialUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserCredentialUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *UserCredentialUpdateOne) sqlSave(ctx context.Context) (_node *UserCredential, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usercredential.Table, usercredential.Columns, sqlgraph.NewFieldSpec(usercredential.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserCredential.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercredential.FieldID)
		for _, f := range fields {
			if !usercredential.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usercredential.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(usercredential.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(usercredential.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(usercredential.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(usercredential.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(usercredential.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(usercredential.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(usercredential.FieldUserID, field.TypeUint32, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(usercredential.FieldUserID, field.TypeUint32)
	}
	if value, ok := _u.mutation.IdentityType(); ok {
		_spec.SetField(usercredential.FieldIdentityType, field.TypeEnum, value)
	}
	if _u.mutation.IdentityTypeCleared() {
		_spec.ClearField(usercredential.FieldIdentityType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Identifier(); ok {
		_spec.SetField(usercredential.FieldIdentifier, field.TypeString, value)
	}
	if _u.mutation.IdentifierCleared() {
		_spec.ClearField(usercredential.FieldIdentifier, field.TypeString)
	}
	if value, ok := _u.mutation.CredentialType(); ok {
		_spec.SetField(usercredential.FieldCredentialType, field.TypeEnum, value)
	}
	if _u.mutation.CredentialTypeCleared() {
		_spec.ClearField(usercredential.FieldCredentialType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Credential(); ok {
		_spec.SetField(usercredential.FieldCredential, field.TypeString, value)
	}
	if _u.mutation.CredentialCleared() {
		_spec.ClearField(usercredential.FieldCredential, field.TypeString)
	}
	if value, ok := _u.mutation.IsPrimary(); ok {
		_spec.SetField(usercredential.FieldIsPrimary, field.TypeBool, value)
	}
	if _u.mutation.IsPrimaryCleared() {
		_spec.ClearField(usercredential.FieldIsPrimary, field.TypeBool)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(usercredential.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(usercredential.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.ExtraInfo(); ok {
		_spec.SetField(usercredential.FieldExtraInfo, field.TypeString, value)
	}
	if _u.mutation.ExtraInfoCleared() {
		_spec.ClearField(usercredential.FieldExtraInfo, field.TypeString)
	}
	if value, ok := _u.mutation.ActivateToken(); ok {
		_spec.SetField(usercredential.FieldActivateToken, field.TypeString, value)
	}
	if _u.mutation.ActivateTokenCleared() {
		_spec.ClearField(usercredential.FieldActivateToken, field.TypeString)
	}
	if value, ok := _u.mutation.ResetToken(); ok {
		_spec.SetField(usercredential.FieldResetToken, field.TypeString, value)
	}
	if _u.mutation.ResetTokenCleared() {
		_spec.ClearField(usercredential.FieldResetToken, field.TypeString)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &UserCredential{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercredential.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	servicev1 "kratos-admin/api/gen/go/admin/service/v1"
	"kratos-admin/app/admin/service/internal/data/ent/task"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *TaskCreate) SetCreatedAt(v time.Time) *TaskCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *TaskCreate) SetNillableCreatedAt(v *time.Time) *TaskCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *TaskCreate) SetUpdatedAt(v time.Time) *TaskCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *TaskCreate) SetNillableUpdatedAt(v *time.Time) *TaskCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *TaskCreate) SetDeletedAt(v time.Time) *TaskCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *TaskCreate) SetNillableDeletedAt(v *time.Time) *TaskCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *TaskCreate) SetCreatedBy(v uint32) *TaskCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *TaskCreate) SetNillableCreatedBy(v *uint32) *TaskCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *TaskCreate) SetUpdatedBy(v uint32) *TaskCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *TaskCreate) SetNillableUpdatedBy(v *uint32) *TaskCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *TaskCreate) SetDeletedBy(v uint32) *TaskCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *TaskCreate) SetNillableDeletedBy(v *uint32) *TaskCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetRemark sets the "remark" field.
func (_c *TaskCreate) SetRemark(v string) *TaskCreate {
	_c.mutation.SetRemark(v)
	return _c
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_c *TaskCreate) SetNillableRemark(v *string) *TaskCreate {
	if v != nil {
		_c.SetRemark(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *TaskCreate) SetTenantID(v uint32) *TaskCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_c *TaskCreate) SetNillableTenantID(v *uint32) *TaskCreate {
	if v != nil {
		_c.SetTenantID(*v)
	}
	return _c
}

// SetType sets the "type" field.
func (_c *TaskCreate) SetType(v task.Type) *TaskCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *TaskCreate) SetNillableType(v *task.Type) *TaskCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetTypeName sets the "type_name" field.
func (_c *TaskCreate) SetTypeName(v string) *TaskCreate {
	_c.mutation.SetTypeName(v)
	return _c
}

// SetNillableTypeName sets the "type_name" field if the given value is not nil.
func (_c *TaskCreate) SetNillableTypeName(v *string) *TaskCreate {
	if v != nil {
		_c.SetTypeName(*v)
	}
	return _c
}

// SetTaskPayload sets the "task_payload" field.
func (_c *TaskCreate) SetTaskPayload(v string) *TaskCreate {
	_c.mutation.SetTaskPayload(v)
	return _c
}

// SetNillableTaskPayload sets the "task_payload" field if the given value is not nil.
func (_c *TaskCreate) SetNillableTaskPayload(v *string) *TaskCreate {
	if v != nil {
		_c.SetTaskPayload(*v)
	}
	return _c
}

// SetCronSpec sets the "cron_spec" field.
func (_c *TaskCreate) SetCronSpec(v string) *TaskCreate {
	_c.mutation.SetCronSpec(v)
	return _c
}

// SetNillableCronSpec sets the "cron_spec" field if the given value is not nil.
func (_c *TaskCreate) SetNillableCronSpec(v *string) *TaskCreate {
	if v != nil {
		_c.SetCronSpec(*v)
	}
	return _c
}

// SetTaskOptions sets the "task_options" field.
func (_c *TaskCreate) SetTaskOptions(v *servicev1.TaskOption) *TaskCreate {
	_c.mutation.SetTaskOptions(v)
	return _c
}

// SetEnable sets the "enable" field.
func (_c *TaskCreate) SetEnable(v bool) *TaskCreate {
	_c.mutation.SetEnable(v)
	return _c
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (_c *TaskCreate) SetNillableEnable(v *bool) *TaskCreate {
	if v != nil {
		_c.SetEnable(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *TaskCreate) SetID(v uint32) *TaskCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the TaskMutation object of the builder.
func (_c *TaskCreate) Mutation() *TaskMutation {
	return _c.mutation
}

// Save creates the Task in the database.
func (_c *TaskCreate) Save(ctx context.Context) (*Task, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TaskCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TaskCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TaskCreate) defaults() {
	if _, ok := _c.mutation.GetType(); !ok {
		v := task.DefaultType
		_c.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TaskCreate) check() error {
	if v, ok := _c.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	if v, ok := _c.mutation.TaskOptions(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "task_options", err: fmt.Errorf(`ent: validator failed for field "Task.task_options": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := task.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Task.id": %w`, err)}
		}
	}
	return nil
}

func (_c *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(task.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(task.FieldCreatedBy, field.TypeUint32, value)
		_node.CreatedBy = &value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(task.FieldUpdatedBy, field.TypeUint32, value)
		_node.UpdatedBy = &value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(task.FieldDeletedBy, field.TypeUint32, value)
		_node.DeletedBy = &value
	}
	if value, ok := _c.mutation.Remark(); ok {
		_spec.SetField(task.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(task.FieldTenantID, field.TypeUint32, value)
		_node.TenantID = &value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
		_node.Type = &value
	}
	if value, ok := _c.mutation.TypeName(); ok {
		_spec.SetField(task.FieldTypeName, field.TypeString, value)
		_node.TypeName = &value
	}
	if value, ok := _c.mutation.TaskPayload(); ok {
		_spec.SetField(task.FieldTaskPayload, field.TypeString, value)
		_node.TaskPayload = &value
	}
	if value, ok := _c.mutation.CronSpec(); ok {
		_spec.SetField(task.FieldCronSpec, field.TypeString, value)
		_node.CronSpec = &value
	}
	if value, ok := _c.mutation.TaskOptions(); ok {
		_spec.SetField(task.FieldTaskOptions, field.TypeJSON, value)
		_node.TaskOptions = value
	}
	if value, ok := _c.mutation.Enable(); ok {
		_spec.SetField(task.FieldEnable, field.TypeBool, value)
		_node.Enable = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *TaskCreate) OnConflict(opts ...sql.ConflictOption) *TaskUpsertOne {
	_c.conflict = opts
	return &TaskUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TaskCreate) OnConflictColumns(columns ...string) *TaskUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertOne{
		create: _c,
	}
}

type (
	// TaskUpsertOne is the builder for "upsert"-ing
	//  one Task node.
	TaskUpsertOne struct {
		create *TaskCreate
	}

	// TaskUpsert is the "OnConflict" setter.
	TaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskUpsert) SetUpdatedAt(v time.Time) *TaskUpsert {
	u.Set(task.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskUpsert) UpdateUpdatedAt() *TaskUpsert {
	u.SetExcluded(task.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TaskUpsert) ClearUpdatedAt() *TaskUpsert {
	u.SetNull(task.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskUpsert) SetDeletedAt(v time.Time) *TaskUpsert {
	u.Set(task.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskUpsert) UpdateDeletedAt() *TaskUpsert {
	u.SetExcluded(task.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TaskUpsert) ClearDeletedAt() *TaskUpsert {
	u.SetNull(task.FieldDeletedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *TaskUpsert) SetCreatedBy(v uint32) *TaskUpsert {
	u.Set(task.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TaskUpsert) UpdateCreatedBy() *TaskUpsert {
	u.SetExcluded(task.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *TaskUpsert) AddCreatedBy(v uint32) *TaskUpsert {
	u.Add(task.FieldCreatedBy, v)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *TaskUpsert) ClearCreatedBy() *TaskUpsert {
	u.SetNull(task.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TaskUpsert) SetUpdatedBy(v uint32) *TaskUpsert {
	u.Set(task.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TaskUpsert) UpdateUpdatedBy() *TaskUpsert {
	u.SetExcluded(task.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TaskUpsert) AddUpdatedBy(v uint32) *TaskUpsert {
	u.Add(task.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *TaskUpsert) ClearUpdatedBy() *TaskUpsert {
	u.SetNull(task.FieldUpdatedBy)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *TaskUpsert) SetDeletedBy(v uint32) *TaskUpsert {
	u.Set(task.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *TaskUpsert) UpdateDeletedBy() *TaskUpsert {
	u.SetExcluded(task.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *TaskUpsert) AddDeletedBy(v uint32) *TaskUpsert {
	u.Add(task.FieldDeletedBy, v)
	return u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *TaskUpsert) ClearDeletedBy() *TaskUpsert {
	u.SetNull(task.FieldDeletedBy)
	return u
}

// SetRemark sets the "remark" field.
func (u *TaskUpsert) SetRemark(v string) *TaskUpsert {
	u.Set(task.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TaskUpsert) UpdateRemark() *TaskUpsert {
	u.SetExcluded(task.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *TaskUpsert) ClearRemark() *TaskUpsert {
	u.SetNull(task.FieldRemark)
	return u
}

// SetType sets the "type" field.
func (u *TaskUpsert) SetType(v task.Type) *TaskUpsert {
	u.Set(task.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskUpsert) UpdateType() *TaskUpsert {
	u.SetExcluded(task.FieldType)
	return u
}

// ClearType clears the value of the "type" field.
func (u *TaskUpsert) ClearType() *TaskUpsert {
	u.SetNull(task.FieldType)
	return u
}

// SetTypeName sets the "type_name" field.
func (u *TaskUpsert) SetTypeName(v string) *TaskUpsert {
	u.Set(task.FieldTypeName, v)
	return u
}

// UpdateTypeName sets the "type_name" field to the value that was provided on create.
func (u *TaskUpsert) UpdateTypeName() *TaskUpsert {
	u.SetExcluded(task.FieldTypeName)
	return u
}

// ClearTypeName clears the value of the "type_name" field.
func (u *TaskUpsert) ClearTypeName() *TaskUpsert {
	u.SetNull(task.FieldTypeName)
	return u
}

// SetTaskPayload sets the "task_payload" field.
func (u *TaskUpsert) SetTaskPayload(v string) *TaskUpsert {
	u.Set(task.FieldTaskPayload, v)
	return u
}

// UpdateTaskPayload sets the "task_payload" field to the value that was provided on create.
func (u *TaskUpsert) UpdateTaskPayload() *TaskUpsert {
	u.SetExcluded(task.FieldTaskPayload)
	return u
}

// ClearTaskPayload clears the value of the "task_payload" field.
func (u *TaskUpsert) ClearTaskPayload() *TaskUpsert {
	u.SetNull(task.FieldTaskPayload)
	return u
}

// SetCronSpec sets the "cron_spec" field.
func (u *TaskUpsert) SetCronSpec(v string) *TaskUpsert {
	u.Set(task.FieldCronSpec, v)
	return u
}

// UpdateCronSpec sets the "cron_spec" field to the value that was provided on create.
func (u *TaskUpsert) UpdateCronSpec() *TaskUpsert {
	u.SetExcluded(task.FieldCronSpec)
	return u
}

// ClearCronSpec clears the value of the "cron_spec" field.
func (u *TaskUpsert) ClearCronSpec() *TaskUpsert {
	u.SetNull(task.FieldCronSpec)
	return u
}

// SetTaskOptions sets the "task_options" field.
func (u *TaskUpsert) SetTaskOptions(v *servicev1.TaskOption) *TaskUpsert {
	u.Set(task.FieldTaskOptions, v)
	return u
}

// UpdateTaskOptions sets the "task_options" field to the value that was provided on create.
func (u *TaskUpsert) UpdateTaskOptions() *TaskUpsert {
	u.SetExcluded(task.FieldTaskOptions)
	return u
}

// ClearTaskOptions clears the value of the "task_options" field.
func (u *TaskUpsert) ClearTaskOptions() *TaskUpsert {
	u.SetNull(task.FieldTaskOptions)
	return u
}

// SetEnable sets the "enable" field.
func (u *TaskUpsert) SetEnable(v bool) *TaskUpsert {
	u.Set(task.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *TaskUpsert) UpdateEnable() *TaskUpsert {
	u.SetExcluded(task.FieldEnable)
	return u
}

// ClearEnable clears the value of the "enable" field.
func (u *TaskUpsert) ClearEnable() *TaskUpsert {
	u.SetNull(task.FieldEnable)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(task.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskUpsertOne) UpdateNewValues() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(task.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(task.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(task.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskUpsertOne) Ignore() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertOne) DoNothing() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreate.OnConflict
// documentation for more info.
func (u *TaskUpsertOne) Update(set func(*TaskUpsert)) *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskUpsertOne) SetUpdatedAt(v time.Time) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateUpdatedAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TaskUpsertOne) ClearUpdatedAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskUpsertOne) SetDeletedAt(v time.Time) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateDeletedAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TaskUpsertOne) ClearDeletedAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TaskUpsertOne) SetCreatedBy(v uint32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *TaskUpsertOne) AddCreatedBy(v uint32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateCreatedBy() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *TaskUpsertOne) ClearCreatedBy() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TaskUpsertOne) SetUpdatedBy(v uint32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TaskUpsertOne) AddUpdatedBy(v uint32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateUpdatedBy() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *TaskUpsertOne) ClearUpdatedBy() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *TaskUpsertOne) SetDeletedBy(v uint32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *TaskUpsertOne) AddDeletedBy(v uint32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateDeletedBy() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *TaskUpsertOne) ClearDeletedBy() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearDeletedBy()
	})
}

// SetRemark sets the "remark" field.
func (u *TaskUpsertOne) SetRemark(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateRemark() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TaskUpsertOne) ClearRemark() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRemark()
	})
}

// SetType sets the "type" field.
func (u *TaskUpsertOne) SetType(v task.Type) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateType() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *TaskUpsertOne) ClearType() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearType()
	})
}

// SetTypeName sets the "type_name" field.
func (u *TaskUpsertOne) SetTypeName(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetTypeName(v)
	})
}

// UpdateTypeName sets the "type_name" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateTypeName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTypeName()
	})
}

// ClearTypeName clears the value of the "type_name" field.
func (u *TaskUpsertOne) ClearTypeName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearTypeName()
	})
}

// SetTaskPayload sets the "task_payload" field.
func (u *TaskUpsertOne) SetTaskPayload(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetTaskPayload(v)
	})
}

// UpdateTaskPayload sets the "task_payload" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateTaskPayload() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTaskPayload()
	})
}

// ClearTaskPayload clears the value of the "task_payload" field.
func (u *TaskUpsertOne) ClearTaskPayload() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearTaskPayload()
	})
}

// SetCronSpec sets the "cron_spec" field.
func (u *TaskUpsertOne) SetCronSpec(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetCronSpec(v)
	})
}

// UpdateCronSpec sets the "cron_spec" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateCronSpec() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCronSpec()
	})
}

// ClearCronSpec clears the value of the "cron_spec" field.
func (u *TaskUpsertOne) ClearCronSpec() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearCronSpec()
	})
}

// SetTaskOptions sets the "task_options" field.
func (u *TaskUpsertOne) SetTaskOptions(v *servicev1.TaskOption) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetTaskOptions(v)
	})
}

// UpdateTaskOptions sets the "task_options" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateTaskOptions() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTaskOptions()
	})
}

// ClearTaskOptions clears the value of the "task_options" field.
func (u *TaskUpsertOne) ClearTaskOptions() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearTaskOptions()
	})
}

// SetEnable sets the "enable" field.
func (u *TaskUpsertOne) SetEnable(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateEnable() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateEnable()
	})
}

// ClearEnable clears the value of the "enable" field.
func (u *TaskUpsertOne) ClearEnable() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearEnable()
	})
}

// Exec executes the query.
func (u *TaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
	conflict []sql.ConflictOption
}

// Save creates the Task entities in the database.
func (_c *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Task, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *TaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskUpsertBulk {
	_c.conflict = opts
	return &TaskUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TaskCreateBulk) OnConflictColumns(columns ...string) *TaskUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertBulk{
		create: _c,
	}
}

// TaskUpsertBulk is the builder for "upsert"-ing
// a bulk of Task nodes.
type TaskUpsertBulk struct {
	create *TaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(task.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskUpsertBulk) UpdateNewValues() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(task.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(task.FieldCreatedAt)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(task.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskUpsertBulk) Ignore() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertBulk) DoNothing() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreateBulk.OnConflict
// documentation for more info.
func (u *TaskUpsertBulk) Update(set func(*TaskUpsert)) *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskUpsertBulk) SetUpdatedAt(v time.Time) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateUpdatedAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TaskUpsertBulk) ClearUpdatedAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskUpsertBulk) SetDeletedAt(v time.Time) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateDeletedAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TaskUpsertBulk) ClearDeletedAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TaskUpsertBulk) SetCreatedBy(v uint32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *TaskUpsertBulk) AddCreatedBy(v uint32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateCreatedBy() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *TaskUpsertBulk) ClearCreatedBy() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TaskUpsertBulk) SetUpdatedBy(v uint32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TaskUpsertBulk) AddUpdatedBy(v uint32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateUpdatedBy() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *TaskUpsertBulk) ClearUpdatedBy() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *TaskUpsertBulk) SetDeletedBy(v uint32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *TaskUpsertBulk) AddDeletedBy(v uint32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateDeletedBy() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *TaskUpsertBulk) ClearDeletedBy() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearDeletedBy()
	})
}

// SetRemark sets the "remark" field.
func (u *TaskUpsertBulk) SetRemark(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateRemark() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TaskUpsertBulk) ClearRemark() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRemark()
	})
}

// SetType sets the "type" field.
func (u *TaskUpsertBulk) SetType(v task.Type) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateType() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *TaskUpsertBulk) ClearType() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearType()
	})
}

// SetTypeName sets the "type_name" field.
func (u *TaskUpsertBulk) SetTypeName(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetTypeName(v)
	})
}

// UpdateTypeName sets the "type_name" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateTypeName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTypeName()
	})
}

// ClearTypeName clears the value of the "type_name" field.
func (u *TaskUpsertBulk) ClearTypeName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearTypeName()
	})
}

// SetTaskPayload sets the "task_payload" field.
func (u *TaskUpsertBulk) SetTaskPayload(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetTaskPayload(v)
	})
}

// UpdateTaskPayload sets the "task_payload" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateTaskPayload() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTaskPayload()
	})
}

// ClearTaskPayload clears the value of the "task_payload" field.
func (u *TaskUpsertBulk) ClearTaskPayload() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearTaskPayload()
	})
}

// SetCronSpec sets the "cron_spec" field.
func (u *TaskUpsertBulk) SetCronSpec(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetCronSpec(v)
	})
}

// UpdateCronSpec sets the "cron_spec" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateCronSpec() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCronSpec()
	})
}

// ClearCronSpec clears the value of the "cron_spec" field.
func (u *TaskUpsertBulk) ClearCronSpec() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearCronSpec()
	})
}

// SetTaskOptions sets the "task_options" field.
func (u *TaskUpsertBulk) SetTaskOptions(v *servicev1.TaskOption) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetTaskOptions(v)
	})
}

// UpdateTaskOptions sets the "task_options" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateTaskOptions() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTaskOptions()
	})
}

// ClearTaskOptions clears the value of the "task_options" field.
func (u *TaskUpsertBulk) ClearTaskOptions() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearTaskOptions()
	})
}

// SetEnable sets the "enable" field.
func (u *TaskUpsertBulk) SetEnable(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateEnable() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateEnable()
	})
}

// ClearEnable clears the value of the "enable" field.
func (u *TaskUpsertBulk) ClearEnable() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearEnable()
	})
}

// Exec executes the query.
func (u *TaskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

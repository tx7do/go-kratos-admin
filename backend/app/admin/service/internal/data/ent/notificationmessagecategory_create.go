// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/notificationmessagecategory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationMessageCategoryCreate is the builder for creating a NotificationMessageCategory entity.
type NotificationMessageCategoryCreate struct {
	config
	mutation *NotificationMessageCategoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *NotificationMessageCategoryCreate) SetCreatedAt(v time.Time) *NotificationMessageCategoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *NotificationMessageCategoryCreate) SetNillableCreatedAt(v *time.Time) *NotificationMessageCategoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *NotificationMessageCategoryCreate) SetUpdatedAt(v time.Time) *NotificationMessageCategoryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *NotificationMessageCategoryCreate) SetNillableUpdatedAt(v *time.Time) *NotificationMessageCategoryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *NotificationMessageCategoryCreate) SetDeletedAt(v time.Time) *NotificationMessageCategoryCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *NotificationMessageCategoryCreate) SetNillableDeletedAt(v *time.Time) *NotificationMessageCategoryCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *NotificationMessageCategoryCreate) SetCreatedBy(v uint32) *NotificationMessageCategoryCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *NotificationMessageCategoryCreate) SetNillableCreatedBy(v *uint32) *NotificationMessageCategoryCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *NotificationMessageCategoryCreate) SetUpdatedBy(v uint32) *NotificationMessageCategoryCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *NotificationMessageCategoryCreate) SetNillableUpdatedBy(v *uint32) *NotificationMessageCategoryCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *NotificationMessageCategoryCreate) SetDeletedBy(v uint32) *NotificationMessageCategoryCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *NotificationMessageCategoryCreate) SetNillableDeletedBy(v *uint32) *NotificationMessageCategoryCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetRemark sets the "remark" field.
func (_c *NotificationMessageCategoryCreate) SetRemark(v string) *NotificationMessageCategoryCreate {
	_c.mutation.SetRemark(v)
	return _c
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_c *NotificationMessageCategoryCreate) SetNillableRemark(v *string) *NotificationMessageCategoryCreate {
	if v != nil {
		_c.SetRemark(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *NotificationMessageCategoryCreate) SetTenantID(v uint32) *NotificationMessageCategoryCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetName sets the "name" field.
func (_c *NotificationMessageCategoryCreate) SetName(v string) *NotificationMessageCategoryCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *NotificationMessageCategoryCreate) SetNillableName(v *string) *NotificationMessageCategoryCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetCode sets the "code" field.
func (_c *NotificationMessageCategoryCreate) SetCode(v string) *NotificationMessageCategoryCreate {
	_c.mutation.SetCode(v)
	return _c
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_c *NotificationMessageCategoryCreate) SetNillableCode(v *string) *NotificationMessageCategoryCreate {
	if v != nil {
		_c.SetCode(*v)
	}
	return _c
}

// SetSortOrder sets the "sort_order" field.
func (_c *NotificationMessageCategoryCreate) SetSortOrder(v int32) *NotificationMessageCategoryCreate {
	_c.mutation.SetSortOrder(v)
	return _c
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (_c *NotificationMessageCategoryCreate) SetNillableSortOrder(v *int32) *NotificationMessageCategoryCreate {
	if v != nil {
		_c.SetSortOrder(*v)
	}
	return _c
}

// SetEnable sets the "enable" field.
func (_c *NotificationMessageCategoryCreate) SetEnable(v bool) *NotificationMessageCategoryCreate {
	_c.mutation.SetEnable(v)
	return _c
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (_c *NotificationMessageCategoryCreate) SetNillableEnable(v *bool) *NotificationMessageCategoryCreate {
	if v != nil {
		_c.SetEnable(*v)
	}
	return _c
}

// SetParentID sets the "parent_id" field.
func (_c *NotificationMessageCategoryCreate) SetParentID(v uint32) *NotificationMessageCategoryCreate {
	_c.mutation.SetParentID(v)
	return _c
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_c *NotificationMessageCategoryCreate) SetNillableParentID(v *uint32) *NotificationMessageCategoryCreate {
	if v != nil {
		_c.SetParentID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *NotificationMessageCategoryCreate) SetID(v uint32) *NotificationMessageCategoryCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetParent sets the "parent" edge to the NotificationMessageCategory entity.
func (_c *NotificationMessageCategoryCreate) SetParent(v *NotificationMessageCategory) *NotificationMessageCategoryCreate {
	return _c.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the NotificationMessageCategory entity by IDs.
func (_c *NotificationMessageCategoryCreate) AddChildIDs(ids ...uint32) *NotificationMessageCategoryCreate {
	_c.mutation.AddChildIDs(ids...)
	return _c
}

// AddChildren adds the "children" edges to the NotificationMessageCategory entity.
func (_c *NotificationMessageCategoryCreate) AddChildren(v ...*NotificationMessageCategory) *NotificationMessageCategoryCreate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildIDs(ids...)
}

// Mutation returns the NotificationMessageCategoryMutation object of the builder.
func (_c *NotificationMessageCategoryCreate) Mutation() *NotificationMessageCategoryMutation {
	return _c.mutation
}

// Save creates the NotificationMessageCategory in the database.
func (_c *NotificationMessageCategoryCreate) Save(ctx context.Context) (*NotificationMessageCategory, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *NotificationMessageCategoryCreate) SaveX(ctx context.Context) *NotificationMessageCategory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotificationMessageCategoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotificationMessageCategoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *NotificationMessageCategoryCreate) defaults() {
	if _, ok := _c.mutation.SortOrder(); !ok {
		v := notificationmessagecategory.DefaultSortOrder
		_c.mutation.SetSortOrder(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *NotificationMessageCategoryCreate) check() error {
	if _, ok := _c.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "NotificationMessageCategory.tenant_id"`)}
	}
	if v, ok := _c.mutation.TenantID(); ok {
		if err := notificationmessagecategory.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "NotificationMessageCategory.tenant_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := notificationmessagecategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NotificationMessageCategory.name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Code(); ok {
		if err := notificationmessagecategory.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "NotificationMessageCategory.code": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := notificationmessagecategory.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "NotificationMessageCategory.id": %w`, err)}
		}
	}
	return nil
}

func (_c *NotificationMessageCategoryCreate) sqlSave(ctx context.Context) (*NotificationMessageCategory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *NotificationMessageCategoryCreate) createSpec() (*NotificationMessageCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &NotificationMessageCategory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(notificationmessagecategory.Table, sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(notificationmessagecategory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationmessagecategory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(notificationmessagecategory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(notificationmessagecategory.FieldCreatedBy, field.TypeUint32, value)
		_node.CreatedBy = &value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(notificationmessagecategory.FieldUpdatedBy, field.TypeUint32, value)
		_node.UpdatedBy = &value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(notificationmessagecategory.FieldDeletedBy, field.TypeUint32, value)
		_node.DeletedBy = &value
	}
	if value, ok := _c.mutation.Remark(); ok {
		_spec.SetField(notificationmessagecategory.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(notificationmessagecategory.FieldTenantID, field.TypeUint32, value)
		_node.TenantID = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(notificationmessagecategory.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := _c.mutation.Code(); ok {
		_spec.SetField(notificationmessagecategory.FieldCode, field.TypeString, value)
		_node.Code = &value
	}
	if value, ok := _c.mutation.SortOrder(); ok {
		_spec.SetField(notificationmessagecategory.FieldSortOrder, field.TypeInt32, value)
		_node.SortOrder = &value
	}
	if value, ok := _c.mutation.Enable(); ok {
		_spec.SetField(notificationmessagecategory.FieldEnable, field.TypeBool, value)
		_node.Enable = &value
	}
	if nodes := _c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationmessagecategory.ParentTable,
			Columns: []string{notificationmessagecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationmessagecategory.ChildrenTable,
			Columns: []string{notificationmessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationmessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationMessageCategory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationMessageCategoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *NotificationMessageCategoryCreate) OnConflict(opts ...sql.ConflictOption) *NotificationMessageCategoryUpsertOne {
	_c.conflict = opts
	return &NotificationMessageCategoryUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationMessageCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NotificationMessageCategoryCreate) OnConflictColumns(columns ...string) *NotificationMessageCategoryUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NotificationMessageCategoryUpsertOne{
		create: _c,
	}
}

type (
	// NotificationMessageCategoryUpsertOne is the builder for "upsert"-ing
	//  one NotificationMessageCategory node.
	NotificationMessageCategoryUpsertOne struct {
		create *NotificationMessageCategoryCreate
	}

	// NotificationMessageCategoryUpsert is the "OnConflict" setter.
	NotificationMessageCategoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationMessageCategoryUpsert) SetUpdatedAt(v time.Time) *NotificationMessageCategoryUpsert {
	u.Set(notificationmessagecategory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsert) UpdateUpdatedAt() *NotificationMessageCategoryUpsert {
	u.SetExcluded(notificationmessagecategory.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *NotificationMessageCategoryUpsert) ClearUpdatedAt() *NotificationMessageCategoryUpsert {
	u.SetNull(notificationmessagecategory.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationMessageCategoryUpsert) SetDeletedAt(v time.Time) *NotificationMessageCategoryUpsert {
	u.Set(notificationmessagecategory.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsert) UpdateDeletedAt() *NotificationMessageCategoryUpsert {
	u.SetExcluded(notificationmessagecategory.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationMessageCategoryUpsert) ClearDeletedAt() *NotificationMessageCategoryUpsert {
	u.SetNull(notificationmessagecategory.FieldDeletedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *NotificationMessageCategoryUpsert) SetCreatedBy(v uint32) *NotificationMessageCategoryUpsert {
	u.Set(notificationmessagecategory.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsert) UpdateCreatedBy() *NotificationMessageCategoryUpsert {
	u.SetExcluded(notificationmessagecategory.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *NotificationMessageCategoryUpsert) AddCreatedBy(v uint32) *NotificationMessageCategoryUpsert {
	u.Add(notificationmessagecategory.FieldCreatedBy, v)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *NotificationMessageCategoryUpsert) ClearCreatedBy() *NotificationMessageCategoryUpsert {
	u.SetNull(notificationmessagecategory.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *NotificationMessageCategoryUpsert) SetUpdatedBy(v uint32) *NotificationMessageCategoryUpsert {
	u.Set(notificationmessagecategory.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsert) UpdateUpdatedBy() *NotificationMessageCategoryUpsert {
	u.SetExcluded(notificationmessagecategory.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *NotificationMessageCategoryUpsert) AddUpdatedBy(v uint32) *NotificationMessageCategoryUpsert {
	u.Add(notificationmessagecategory.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *NotificationMessageCategoryUpsert) ClearUpdatedBy() *NotificationMessageCategoryUpsert {
	u.SetNull(notificationmessagecategory.FieldUpdatedBy)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *NotificationMessageCategoryUpsert) SetDeletedBy(v uint32) *NotificationMessageCategoryUpsert {
	u.Set(notificationmessagecategory.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsert) UpdateDeletedBy() *NotificationMessageCategoryUpsert {
	u.SetExcluded(notificationmessagecategory.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *NotificationMessageCategoryUpsert) AddDeletedBy(v uint32) *NotificationMessageCategoryUpsert {
	u.Add(notificationmessagecategory.FieldDeletedBy, v)
	return u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *NotificationMessageCategoryUpsert) ClearDeletedBy() *NotificationMessageCategoryUpsert {
	u.SetNull(notificationmessagecategory.FieldDeletedBy)
	return u
}

// SetRemark sets the "remark" field.
func (u *NotificationMessageCategoryUpsert) SetRemark(v string) *NotificationMessageCategoryUpsert {
	u.Set(notificationmessagecategory.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsert) UpdateRemark() *NotificationMessageCategoryUpsert {
	u.SetExcluded(notificationmessagecategory.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *NotificationMessageCategoryUpsert) ClearRemark() *NotificationMessageCategoryUpsert {
	u.SetNull(notificationmessagecategory.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *NotificationMessageCategoryUpsert) SetName(v string) *NotificationMessageCategoryUpsert {
	u.Set(notificationmessagecategory.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsert) UpdateName() *NotificationMessageCategoryUpsert {
	u.SetExcluded(notificationmessagecategory.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *NotificationMessageCategoryUpsert) ClearName() *NotificationMessageCategoryUpsert {
	u.SetNull(notificationmessagecategory.FieldName)
	return u
}

// SetCode sets the "code" field.
func (u *NotificationMessageCategoryUpsert) SetCode(v string) *NotificationMessageCategoryUpsert {
	u.Set(notificationmessagecategory.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsert) UpdateCode() *NotificationMessageCategoryUpsert {
	u.SetExcluded(notificationmessagecategory.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *NotificationMessageCategoryUpsert) ClearCode() *NotificationMessageCategoryUpsert {
	u.SetNull(notificationmessagecategory.FieldCode)
	return u
}

// SetSortOrder sets the "sort_order" field.
func (u *NotificationMessageCategoryUpsert) SetSortOrder(v int32) *NotificationMessageCategoryUpsert {
	u.Set(notificationmessagecategory.FieldSortOrder, v)
	return u
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsert) UpdateSortOrder() *NotificationMessageCategoryUpsert {
	u.SetExcluded(notificationmessagecategory.FieldSortOrder)
	return u
}

// AddSortOrder adds v to the "sort_order" field.
func (u *NotificationMessageCategoryUpsert) AddSortOrder(v int32) *NotificationMessageCategoryUpsert {
	u.Add(notificationmessagecategory.FieldSortOrder, v)
	return u
}

// ClearSortOrder clears the value of the "sort_order" field.
func (u *NotificationMessageCategoryUpsert) ClearSortOrder() *NotificationMessageCategoryUpsert {
	u.SetNull(notificationmessagecategory.FieldSortOrder)
	return u
}

// SetEnable sets the "enable" field.
func (u *NotificationMessageCategoryUpsert) SetEnable(v bool) *NotificationMessageCategoryUpsert {
	u.Set(notificationmessagecategory.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsert) UpdateEnable() *NotificationMessageCategoryUpsert {
	u.SetExcluded(notificationmessagecategory.FieldEnable)
	return u
}

// ClearEnable clears the value of the "enable" field.
func (u *NotificationMessageCategoryUpsert) ClearEnable() *NotificationMessageCategoryUpsert {
	u.SetNull(notificationmessagecategory.FieldEnable)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *NotificationMessageCategoryUpsert) SetParentID(v uint32) *NotificationMessageCategoryUpsert {
	u.Set(notificationmessagecategory.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsert) UpdateParentID() *NotificationMessageCategoryUpsert {
	u.SetExcluded(notificationmessagecategory.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *NotificationMessageCategoryUpsert) ClearParentID() *NotificationMessageCategoryUpsert {
	u.SetNull(notificationmessagecategory.FieldParentID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NotificationMessageCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationmessagecategory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationMessageCategoryUpsertOne) UpdateNewValues() *NotificationMessageCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notificationmessagecategory.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(notificationmessagecategory.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(notificationmessagecategory.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationMessageCategory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NotificationMessageCategoryUpsertOne) Ignore() *NotificationMessageCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationMessageCategoryUpsertOne) DoNothing() *NotificationMessageCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationMessageCategoryCreate.OnConflict
// documentation for more info.
func (u *NotificationMessageCategoryUpsertOne) Update(set func(*NotificationMessageCategoryUpsert)) *NotificationMessageCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationMessageCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationMessageCategoryUpsertOne) SetUpdatedAt(v time.Time) *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertOne) UpdateUpdatedAt() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *NotificationMessageCategoryUpsertOne) ClearUpdatedAt() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationMessageCategoryUpsertOne) SetDeletedAt(v time.Time) *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertOne) UpdateDeletedAt() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationMessageCategoryUpsertOne) ClearDeletedAt() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *NotificationMessageCategoryUpsertOne) SetCreatedBy(v uint32) *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *NotificationMessageCategoryUpsertOne) AddCreatedBy(v uint32) *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertOne) UpdateCreatedBy() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *NotificationMessageCategoryUpsertOne) ClearCreatedBy() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *NotificationMessageCategoryUpsertOne) SetUpdatedBy(v uint32) *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *NotificationMessageCategoryUpsertOne) AddUpdatedBy(v uint32) *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertOne) UpdateUpdatedBy() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *NotificationMessageCategoryUpsertOne) ClearUpdatedBy() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *NotificationMessageCategoryUpsertOne) SetDeletedBy(v uint32) *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *NotificationMessageCategoryUpsertOne) AddDeletedBy(v uint32) *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertOne) UpdateDeletedBy() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *NotificationMessageCategoryUpsertOne) ClearDeletedBy() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearDeletedBy()
	})
}

// SetRemark sets the "remark" field.
func (u *NotificationMessageCategoryUpsertOne) SetRemark(v string) *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertOne) UpdateRemark() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *NotificationMessageCategoryUpsertOne) ClearRemark() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *NotificationMessageCategoryUpsertOne) SetName(v string) *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertOne) UpdateName() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *NotificationMessageCategoryUpsertOne) ClearName() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearName()
	})
}

// SetCode sets the "code" field.
func (u *NotificationMessageCategoryUpsertOne) SetCode(v string) *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertOne) UpdateCode() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *NotificationMessageCategoryUpsertOne) ClearCode() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearCode()
	})
}

// SetSortOrder sets the "sort_order" field.
func (u *NotificationMessageCategoryUpsertOne) SetSortOrder(v int32) *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetSortOrder(v)
	})
}

// AddSortOrder adds v to the "sort_order" field.
func (u *NotificationMessageCategoryUpsertOne) AddSortOrder(v int32) *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.AddSortOrder(v)
	})
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertOne) UpdateSortOrder() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateSortOrder()
	})
}

// ClearSortOrder clears the value of the "sort_order" field.
func (u *NotificationMessageCategoryUpsertOne) ClearSortOrder() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearSortOrder()
	})
}

// SetEnable sets the "enable" field.
func (u *NotificationMessageCategoryUpsertOne) SetEnable(v bool) *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertOne) UpdateEnable() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateEnable()
	})
}

// ClearEnable clears the value of the "enable" field.
func (u *NotificationMessageCategoryUpsertOne) ClearEnable() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearEnable()
	})
}

// SetParentID sets the "parent_id" field.
func (u *NotificationMessageCategoryUpsertOne) SetParentID(v uint32) *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertOne) UpdateParentID() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *NotificationMessageCategoryUpsertOne) ClearParentID() *NotificationMessageCategoryUpsertOne {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearParentID()
	})
}

// Exec executes the query.
func (u *NotificationMessageCategoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotificationMessageCategoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationMessageCategoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotificationMessageCategoryUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotificationMessageCategoryUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotificationMessageCategoryCreateBulk is the builder for creating many NotificationMessageCategory entities in bulk.
type NotificationMessageCategoryCreateBulk struct {
	config
	err      error
	builders []*NotificationMessageCategoryCreate
	conflict []sql.ConflictOption
}

// Save creates the NotificationMessageCategory entities in the database.
func (_c *NotificationMessageCategoryCreateBulk) Save(ctx context.Context) ([]*NotificationMessageCategory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*NotificationMessageCategory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationMessageCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *NotificationMessageCategoryCreateBulk) SaveX(ctx context.Context) []*NotificationMessageCategory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotificationMessageCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotificationMessageCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationMessageCategory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationMessageCategoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *NotificationMessageCategoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotificationMessageCategoryUpsertBulk {
	_c.conflict = opts
	return &NotificationMessageCategoryUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationMessageCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NotificationMessageCategoryCreateBulk) OnConflictColumns(columns ...string) *NotificationMessageCategoryUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NotificationMessageCategoryUpsertBulk{
		create: _c,
	}
}

// NotificationMessageCategoryUpsertBulk is the builder for "upsert"-ing
// a bulk of NotificationMessageCategory nodes.
type NotificationMessageCategoryUpsertBulk struct {
	create *NotificationMessageCategoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NotificationMessageCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationmessagecategory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationMessageCategoryUpsertBulk) UpdateNewValues() *NotificationMessageCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notificationmessagecategory.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(notificationmessagecategory.FieldCreatedAt)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(notificationmessagecategory.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationMessageCategory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NotificationMessageCategoryUpsertBulk) Ignore() *NotificationMessageCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationMessageCategoryUpsertBulk) DoNothing() *NotificationMessageCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationMessageCategoryCreateBulk.OnConflict
// documentation for more info.
func (u *NotificationMessageCategoryUpsertBulk) Update(set func(*NotificationMessageCategoryUpsert)) *NotificationMessageCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationMessageCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationMessageCategoryUpsertBulk) SetUpdatedAt(v time.Time) *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertBulk) UpdateUpdatedAt() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *NotificationMessageCategoryUpsertBulk) ClearUpdatedAt() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationMessageCategoryUpsertBulk) SetDeletedAt(v time.Time) *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertBulk) UpdateDeletedAt() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationMessageCategoryUpsertBulk) ClearDeletedAt() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *NotificationMessageCategoryUpsertBulk) SetCreatedBy(v uint32) *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *NotificationMessageCategoryUpsertBulk) AddCreatedBy(v uint32) *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertBulk) UpdateCreatedBy() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *NotificationMessageCategoryUpsertBulk) ClearCreatedBy() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *NotificationMessageCategoryUpsertBulk) SetUpdatedBy(v uint32) *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *NotificationMessageCategoryUpsertBulk) AddUpdatedBy(v uint32) *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertBulk) UpdateUpdatedBy() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *NotificationMessageCategoryUpsertBulk) ClearUpdatedBy() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *NotificationMessageCategoryUpsertBulk) SetDeletedBy(v uint32) *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *NotificationMessageCategoryUpsertBulk) AddDeletedBy(v uint32) *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertBulk) UpdateDeletedBy() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (u *NotificationMessageCategoryUpsertBulk) ClearDeletedBy() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearDeletedBy()
	})
}

// SetRemark sets the "remark" field.
func (u *NotificationMessageCategoryUpsertBulk) SetRemark(v string) *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertBulk) UpdateRemark() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *NotificationMessageCategoryUpsertBulk) ClearRemark() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *NotificationMessageCategoryUpsertBulk) SetName(v string) *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertBulk) UpdateName() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *NotificationMessageCategoryUpsertBulk) ClearName() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearName()
	})
}

// SetCode sets the "code" field.
func (u *NotificationMessageCategoryUpsertBulk) SetCode(v string) *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertBulk) UpdateCode() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *NotificationMessageCategoryUpsertBulk) ClearCode() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearCode()
	})
}

// SetSortOrder sets the "sort_order" field.
func (u *NotificationMessageCategoryUpsertBulk) SetSortOrder(v int32) *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetSortOrder(v)
	})
}

// AddSortOrder adds v to the "sort_order" field.
func (u *NotificationMessageCategoryUpsertBulk) AddSortOrder(v int32) *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.AddSortOrder(v)
	})
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertBulk) UpdateSortOrder() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateSortOrder()
	})
}

// ClearSortOrder clears the value of the "sort_order" field.
func (u *NotificationMessageCategoryUpsertBulk) ClearSortOrder() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearSortOrder()
	})
}

// SetEnable sets the "enable" field.
func (u *NotificationMessageCategoryUpsertBulk) SetEnable(v bool) *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertBulk) UpdateEnable() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateEnable()
	})
}

// ClearEnable clears the value of the "enable" field.
func (u *NotificationMessageCategoryUpsertBulk) ClearEnable() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearEnable()
	})
}

// SetParentID sets the "parent_id" field.
func (u *NotificationMessageCategoryUpsertBulk) SetParentID(v uint32) *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *NotificationMessageCategoryUpsertBulk) UpdateParentID() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *NotificationMessageCategoryUpsertBulk) ClearParentID() *NotificationMessageCategoryUpsertBulk {
	return u.Update(func(s *NotificationMessageCategoryUpsert) {
		s.ClearParentID()
	})
}

// Exec executes the query.
func (u *NotificationMessageCategoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NotificationMessageCategoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotificationMessageCategoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationMessageCategoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

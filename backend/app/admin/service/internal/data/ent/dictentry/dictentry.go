// Code generated by ent, DO NOT EDIT.

package dictentry

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the dictentry type in the database.
	Label = "dict_entry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSortOrder holds the string denoting the sort_order field in the database.
	FieldSortOrder = "sort_order"
	// FieldIsEnabled holds the string denoting the is_enabled field in the database.
	FieldIsEnabled = "is_enabled"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldEntryLabel holds the string denoting the entry_label field in the database.
	FieldEntryLabel = "entry_label"
	// FieldEntryValue holds the string denoting the entry_value field in the database.
	FieldEntryValue = "entry_value"
	// FieldNumericValue holds the string denoting the numeric_value field in the database.
	FieldNumericValue = "numeric_value"
	// FieldLanguageCode holds the string denoting the language_code field in the database.
	FieldLanguageCode = "language_code"
	// EdgeSysDictTypes holds the string denoting the sys_dict_types edge name in mutations.
	EdgeSysDictTypes = "sys_dict_types"
	// Table holds the table name of the dictentry in the database.
	Table = "sys_dict_entries"
	// SysDictTypesTable is the table that holds the sys_dict_types relation/edge.
	SysDictTypesTable = "sys_dict_entries"
	// SysDictTypesInverseTable is the table name for the DictType entity.
	// It exists in this package in order to avoid circular dependency with the "dicttype" package.
	SysDictTypesInverseTable = "sys_dict_types"
	// SysDictTypesColumn is the table column denoting the sys_dict_types relation/edge.
	SysDictTypesColumn = "type_id"
)

// Columns holds all SQL columns for dictentry fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedBy,
	FieldDescription,
	FieldSortOrder,
	FieldIsEnabled,
	FieldTenantID,
	FieldEntryLabel,
	FieldEntryValue,
	FieldNumericValue,
	FieldLanguageCode,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sys_dict_entries"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"type_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSortOrder holds the default value on creation for the "sort_order" field.
	DefaultSortOrder int32
	// DefaultIsEnabled holds the default value on creation for the "is_enabled" field.
	DefaultIsEnabled bool
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(uint32) error
	// EntryLabelValidator is a validator for the "entry_label" field. It is called by the builders before save.
	EntryLabelValidator func(string) error
	// EntryValueValidator is a validator for the "entry_value" field. It is called by the builders before save.
	EntryValueValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(uint32) error
)

// OrderOption defines the ordering options for the DictEntry queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// BySortOrder orders the results by the sort_order field.
func BySortOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSortOrder, opts...).ToFunc()
}

// ByIsEnabled orders the results by the is_enabled field.
func ByIsEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsEnabled, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByEntryLabel orders the results by the entry_label field.
func ByEntryLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntryLabel, opts...).ToFunc()
}

// ByEntryValue orders the results by the entry_value field.
func ByEntryValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntryValue, opts...).ToFunc()
}

// ByNumericValue orders the results by the numeric_value field.
func ByNumericValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumericValue, opts...).ToFunc()
}

// ByLanguageCode orders the results by the language_code field.
func ByLanguageCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguageCode, opts...).ToFunc()
}

// BySysDictTypesField orders the results by sys_dict_types field.
func BySysDictTypesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSysDictTypesStep(), sql.OrderByField(field, opts...))
	}
}
func newSysDictTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SysDictTypesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SysDictTypesTable, SysDictTypesColumn),
	)
}

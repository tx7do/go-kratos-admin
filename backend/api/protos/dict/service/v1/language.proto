syntax = "proto3";

package dict.service.v1;

import "gnostic/openapi/v3/annotations.proto";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

import "pagination/v1/pagination.proto";

// 语言管理服务
service LanguageService {
  // 分页查询语言列表
  rpc ListLanguage (pagination.PagingRequest) returns (ListLanguageResponse) {}

  // 查询语言详情
  rpc Get (GetLanguageRequest) returns (Language) {}

  // 创建语言
  rpc Create (CreateLanguageRequest) returns (google.protobuf.Empty) {}

  // 更新语言
  rpc Update (UpdateLanguageRequest) returns (google.protobuf.Empty) {}

  // 删除语言
  rpc Delete (DeleteLanguageRequest) returns (google.protobuf.Empty) {}

  // 批量创建语言
  rpc BatchCreate ( BatchCreateLanguagesRequest ) returns (google.protobuf.Empty) {}
}

// 语言
message Language {
  optional uint32 id = 1 [
    json_name = "id",
    (gnostic.openapi.v3.property) = {
      description: "语言ID"
    }
  ]; // 语言ID

  optional string language_code = 2 [
    json_name = "languageCode",
    (gnostic.openapi.v3.property) = {
      description: "标准语言代码"
    }
  ]; // 标准语言代码

  optional string language_name = 3 [
    json_name = "languageName",
    (gnostic.openapi.v3.property) = {
      description: "语言名称"
    }
  ]; // 语言名称

  optional string native_name = 4 [
    json_name = "nativeName",
    (gnostic.openapi.v3.property) = {
      description: "本地语言名称"
    }
  ]; // 本地语言名称

  optional bool is_default = 5 [
    json_name = "isDefault",
    (gnostic.openapi.v3.property) = {
      description: "是否为默认语言"
    }
  ]; // 是否为默认语言

  optional bool is_enabled = 6 [
    json_name = "isEnabled",
    (gnostic.openapi.v3.property) = {
      description: "是否启用"
    }
  ]; // 是否启用

  optional uint32 created_by = 100 [json_name = "createdBy", (gnostic.openapi.v3.property) = {description: "创建者ID"}]; // 创建者ID
  optional uint32 updated_by = 101 [json_name = "updatedBy", (gnostic.openapi.v3.property) = {description: "更新者ID"}]; // 更新者ID
  optional uint32 deleted_by = 102 [json_name = "deletedBy", (gnostic.openapi.v3.property) = {description: "删除者用户ID"}]; // 删除者用户ID

  optional google.protobuf.Timestamp created_at = 200 [json_name = "createdAt", (gnostic.openapi.v3.property) = {description: "创建时间"}];// 创建时间
  optional google.protobuf.Timestamp updated_at = 201 [json_name = "updatedAt", (gnostic.openapi.v3.property) = {description: "更新时间"}];// 更新时间
  optional google.protobuf.Timestamp deleted_at = 202 [json_name = "deletedAt", (gnostic.openapi.v3.property) = {description: "删除时间"}];// 删除时间
}

// 语言列表 - 答复
message ListLanguageResponse {
  repeated Language items = 1;
  uint32 total = 2;
}

// 语言数据 - 请求
message GetLanguageRequest {
  uint32 id = 1;
}

// 创建语言 - 请求
message CreateLanguageRequest {
  Language data = 1;
}

// 更新语言 - 请求
message UpdateLanguageRequest {
  Language data = 1;

  google.protobuf.FieldMask update_mask = 2 [
    (gnostic.openapi.v3.property) = {
      description: "要更新的字段列表",
      example: {yaml : "id,realname,username"}
    },
    json_name = "updateMask"
  ]; // 要更新的字段列表

  optional bool allow_missing = 3 [
    (gnostic.openapi.v3.property) = {description: "如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。"},
    json_name = "allowMissing"
  ]; // 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
}

// 删除语言 - 请求
message DeleteLanguageRequest {
  uint32 id = 1;
}

message BatchCreateLanguagesRequest {
  repeated Language data = 1;
}
message BatchCreateLanguagesResponse {
  repeated int32 created_ids = 1 [
    json_name = "createdIds",
    (gnostic.openapi.v3.property) = {
      description: "创建成功的语言ID列表"
    }
  ]; // 创建成功的语言ID列表
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: dict/service/v1/dict.proto

package servicev1

import (
	context "context"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DictService_ListDictType_FullMethodName    = "/dict.service.v1.DictService/ListDictType"
	DictService_GetDictType_FullMethodName     = "/dict.service.v1.DictService/GetDictType"
	DictService_CreateDictType_FullMethodName  = "/dict.service.v1.DictService/CreateDictType"
	DictService_UpdateDictType_FullMethodName  = "/dict.service.v1.DictService/UpdateDictType"
	DictService_DeleteDictType_FullMethodName  = "/dict.service.v1.DictService/DeleteDictType"
	DictService_ListDictEntry_FullMethodName   = "/dict.service.v1.DictService/ListDictEntry"
	DictService_CreateDictEntry_FullMethodName = "/dict.service.v1.DictService/CreateDictEntry"
	DictService_UpdateDictEntry_FullMethodName = "/dict.service.v1.DictService/UpdateDictEntry"
	DictService_DeleteDictEntry_FullMethodName = "/dict.service.v1.DictService/DeleteDictEntry"
)

// DictServiceClient is the client API for DictService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 数据字典管理服务
type DictServiceClient interface {
	// 分页查询字典类型列表
	ListDictType(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*ListDictTypeResponse, error)
	// 查询字典类型详情
	GetDictType(ctx context.Context, in *GetDictTypeRequest, opts ...grpc.CallOption) (*DictType, error)
	// 创建字典类型
	CreateDictType(ctx context.Context, in *CreateDictTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新字典类型
	UpdateDictType(ctx context.Context, in *UpdateDictTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除字典类型
	DeleteDictType(ctx context.Context, in *BatchDeleteDictRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 分页查询字典条目列表
	ListDictEntry(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*ListDictEntryResponse, error)
	// 创建字典条目
	CreateDictEntry(ctx context.Context, in *CreateDictEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新字典条目
	UpdateDictEntry(ctx context.Context, in *UpdateDictEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除字典条目
	DeleteDictEntry(ctx context.Context, in *BatchDeleteDictRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dictServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDictServiceClient(cc grpc.ClientConnInterface) DictServiceClient {
	return &dictServiceClient{cc}
}

func (c *dictServiceClient) ListDictType(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*ListDictTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDictTypeResponse)
	err := c.cc.Invoke(ctx, DictService_ListDictType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) GetDictType(ctx context.Context, in *GetDictTypeRequest, opts ...grpc.CallOption) (*DictType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictType)
	err := c.cc.Invoke(ctx, DictService_GetDictType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) CreateDictType(ctx context.Context, in *CreateDictTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DictService_CreateDictType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) UpdateDictType(ctx context.Context, in *UpdateDictTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DictService_UpdateDictType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) DeleteDictType(ctx context.Context, in *BatchDeleteDictRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DictService_DeleteDictType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) ListDictEntry(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*ListDictEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDictEntryResponse)
	err := c.cc.Invoke(ctx, DictService_ListDictEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) CreateDictEntry(ctx context.Context, in *CreateDictEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DictService_CreateDictEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) UpdateDictEntry(ctx context.Context, in *UpdateDictEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DictService_UpdateDictEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) DeleteDictEntry(ctx context.Context, in *BatchDeleteDictRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DictService_DeleteDictEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictServiceServer is the server API for DictService service.
// All implementations must embed UnimplementedDictServiceServer
// for forward compatibility.
//
// 数据字典管理服务
type DictServiceServer interface {
	// 分页查询字典类型列表
	ListDictType(context.Context, *v1.PagingRequest) (*ListDictTypeResponse, error)
	// 查询字典类型详情
	GetDictType(context.Context, *GetDictTypeRequest) (*DictType, error)
	// 创建字典类型
	CreateDictType(context.Context, *CreateDictTypeRequest) (*emptypb.Empty, error)
	// 更新字典类型
	UpdateDictType(context.Context, *UpdateDictTypeRequest) (*emptypb.Empty, error)
	// 删除字典类型
	DeleteDictType(context.Context, *BatchDeleteDictRequest) (*emptypb.Empty, error)
	// 分页查询字典条目列表
	ListDictEntry(context.Context, *v1.PagingRequest) (*ListDictEntryResponse, error)
	// 创建字典条目
	CreateDictEntry(context.Context, *CreateDictEntryRequest) (*emptypb.Empty, error)
	// 更新字典条目
	UpdateDictEntry(context.Context, *UpdateDictEntryRequest) (*emptypb.Empty, error)
	// 删除字典条目
	DeleteDictEntry(context.Context, *BatchDeleteDictRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDictServiceServer()
}

// UnimplementedDictServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDictServiceServer struct{}

func (UnimplementedDictServiceServer) ListDictType(context.Context, *v1.PagingRequest) (*ListDictTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDictType not implemented")
}
func (UnimplementedDictServiceServer) GetDictType(context.Context, *GetDictTypeRequest) (*DictType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictType not implemented")
}
func (UnimplementedDictServiceServer) CreateDictType(context.Context, *CreateDictTypeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictType not implemented")
}
func (UnimplementedDictServiceServer) UpdateDictType(context.Context, *UpdateDictTypeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictType not implemented")
}
func (UnimplementedDictServiceServer) DeleteDictType(context.Context, *BatchDeleteDictRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictType not implemented")
}
func (UnimplementedDictServiceServer) ListDictEntry(context.Context, *v1.PagingRequest) (*ListDictEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDictEntry not implemented")
}
func (UnimplementedDictServiceServer) CreateDictEntry(context.Context, *CreateDictEntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictEntry not implemented")
}
func (UnimplementedDictServiceServer) UpdateDictEntry(context.Context, *UpdateDictEntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictEntry not implemented")
}
func (UnimplementedDictServiceServer) DeleteDictEntry(context.Context, *BatchDeleteDictRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictEntry not implemented")
}
func (UnimplementedDictServiceServer) mustEmbedUnimplementedDictServiceServer() {}
func (UnimplementedDictServiceServer) testEmbeddedByValue()                     {}

// UnsafeDictServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictServiceServer will
// result in compilation errors.
type UnsafeDictServiceServer interface {
	mustEmbedUnimplementedDictServiceServer()
}

func RegisterDictServiceServer(s grpc.ServiceRegistrar, srv DictServiceServer) {
	// If the following call pancis, it indicates UnimplementedDictServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DictService_ServiceDesc, srv)
}

func _DictService_ListDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).ListDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_ListDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).ListDictType(ctx, req.(*v1.PagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_GetDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).GetDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_GetDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).GetDictType(ctx, req.(*GetDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_CreateDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).CreateDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_CreateDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).CreateDictType(ctx, req.(*CreateDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_UpdateDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).UpdateDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_UpdateDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).UpdateDictType(ctx, req.(*UpdateDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_DeleteDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).DeleteDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_DeleteDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).DeleteDictType(ctx, req.(*BatchDeleteDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_ListDictEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).ListDictEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_ListDictEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).ListDictEntry(ctx, req.(*v1.PagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_CreateDictEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).CreateDictEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_CreateDictEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).CreateDictEntry(ctx, req.(*CreateDictEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_UpdateDictEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).UpdateDictEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_UpdateDictEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).UpdateDictEntry(ctx, req.(*UpdateDictEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_DeleteDictEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).DeleteDictEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_DeleteDictEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).DeleteDictEntry(ctx, req.(*BatchDeleteDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DictService_ServiceDesc is the grpc.ServiceDesc for DictService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dict.service.v1.DictService",
	HandlerType: (*DictServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDictType",
			Handler:    _DictService_ListDictType_Handler,
		},
		{
			MethodName: "GetDictType",
			Handler:    _DictService_GetDictType_Handler,
		},
		{
			MethodName: "CreateDictType",
			Handler:    _DictService_CreateDictType_Handler,
		},
		{
			MethodName: "UpdateDictType",
			Handler:    _DictService_UpdateDictType_Handler,
		},
		{
			MethodName: "DeleteDictType",
			Handler:    _DictService_DeleteDictType_Handler,
		},
		{
			MethodName: "ListDictEntry",
			Handler:    _DictService_ListDictEntry_Handler,
		},
		{
			MethodName: "CreateDictEntry",
			Handler:    _DictService_CreateDictEntry_Handler,
		},
		{
			MethodName: "UpdateDictEntry",
			Handler:    _DictService_UpdateDictEntry_Handler,
		},
		{
			MethodName: "DeleteDictEntry",
			Handler:    _DictService_DeleteDictEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dict/service/v1/dict.proto",
}

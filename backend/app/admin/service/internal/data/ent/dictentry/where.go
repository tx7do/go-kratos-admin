// Code generated by ent, DO NOT EDIT.

package dictentry

import (
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldDeletedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldDeletedBy, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldDescription, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldSortOrder, v))
}

// IsEnabled applies equality check predicate on the "is_enabled" field. It's identical to IsEnabledEQ.
func IsEnabled(v bool) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldIsEnabled, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldTenantID, v))
}

// EntryLabel applies equality check predicate on the "entry_label" field. It's identical to EntryLabelEQ.
func EntryLabel(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldEntryLabel, v))
}

// EntryValue applies equality check predicate on the "entry_value" field. It's identical to EntryValueEQ.
func EntryValue(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldEntryValue, v))
}

// NumericValue applies equality check predicate on the "numeric_value" field. It's identical to NumericValueEQ.
func NumericValue(v int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldNumericValue, v))
}

// LanguageCode applies equality check predicate on the "language_code" field. It's identical to LanguageCodeEQ.
func LanguageCode(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldLanguageCode, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotNull(FieldDeletedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotNull(FieldCreatedBy))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotNull(FieldUpdatedBy))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotNull(FieldDeletedBy))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldContainsFold(FieldDescription, v))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLTE(FieldSortOrder, v))
}

// SortOrderIsNil applies the IsNil predicate on the "sort_order" field.
func SortOrderIsNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIsNull(FieldSortOrder))
}

// SortOrderNotNil applies the NotNil predicate on the "sort_order" field.
func SortOrderNotNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotNull(FieldSortOrder))
}

// IsEnabledEQ applies the EQ predicate on the "is_enabled" field.
func IsEnabledEQ(v bool) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldIsEnabled, v))
}

// IsEnabledNEQ applies the NEQ predicate on the "is_enabled" field.
func IsEnabledNEQ(v bool) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNEQ(FieldIsEnabled, v))
}

// IsEnabledIsNil applies the IsNil predicate on the "is_enabled" field.
func IsEnabledIsNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIsNull(FieldIsEnabled))
}

// IsEnabledNotNil applies the NotNil predicate on the "is_enabled" field.
func IsEnabledNotNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotNull(FieldIsEnabled))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v uint32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotNull(FieldTenantID))
}

// EntryLabelEQ applies the EQ predicate on the "entry_label" field.
func EntryLabelEQ(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldEntryLabel, v))
}

// EntryLabelNEQ applies the NEQ predicate on the "entry_label" field.
func EntryLabelNEQ(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNEQ(FieldEntryLabel, v))
}

// EntryLabelIn applies the In predicate on the "entry_label" field.
func EntryLabelIn(vs ...string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIn(FieldEntryLabel, vs...))
}

// EntryLabelNotIn applies the NotIn predicate on the "entry_label" field.
func EntryLabelNotIn(vs ...string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotIn(FieldEntryLabel, vs...))
}

// EntryLabelGT applies the GT predicate on the "entry_label" field.
func EntryLabelGT(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGT(FieldEntryLabel, v))
}

// EntryLabelGTE applies the GTE predicate on the "entry_label" field.
func EntryLabelGTE(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGTE(FieldEntryLabel, v))
}

// EntryLabelLT applies the LT predicate on the "entry_label" field.
func EntryLabelLT(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLT(FieldEntryLabel, v))
}

// EntryLabelLTE applies the LTE predicate on the "entry_label" field.
func EntryLabelLTE(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLTE(FieldEntryLabel, v))
}

// EntryLabelContains applies the Contains predicate on the "entry_label" field.
func EntryLabelContains(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldContains(FieldEntryLabel, v))
}

// EntryLabelHasPrefix applies the HasPrefix predicate on the "entry_label" field.
func EntryLabelHasPrefix(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldHasPrefix(FieldEntryLabel, v))
}

// EntryLabelHasSuffix applies the HasSuffix predicate on the "entry_label" field.
func EntryLabelHasSuffix(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldHasSuffix(FieldEntryLabel, v))
}

// EntryLabelIsNil applies the IsNil predicate on the "entry_label" field.
func EntryLabelIsNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIsNull(FieldEntryLabel))
}

// EntryLabelNotNil applies the NotNil predicate on the "entry_label" field.
func EntryLabelNotNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotNull(FieldEntryLabel))
}

// EntryLabelEqualFold applies the EqualFold predicate on the "entry_label" field.
func EntryLabelEqualFold(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEqualFold(FieldEntryLabel, v))
}

// EntryLabelContainsFold applies the ContainsFold predicate on the "entry_label" field.
func EntryLabelContainsFold(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldContainsFold(FieldEntryLabel, v))
}

// EntryValueEQ applies the EQ predicate on the "entry_value" field.
func EntryValueEQ(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldEntryValue, v))
}

// EntryValueNEQ applies the NEQ predicate on the "entry_value" field.
func EntryValueNEQ(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNEQ(FieldEntryValue, v))
}

// EntryValueIn applies the In predicate on the "entry_value" field.
func EntryValueIn(vs ...string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIn(FieldEntryValue, vs...))
}

// EntryValueNotIn applies the NotIn predicate on the "entry_value" field.
func EntryValueNotIn(vs ...string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotIn(FieldEntryValue, vs...))
}

// EntryValueGT applies the GT predicate on the "entry_value" field.
func EntryValueGT(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGT(FieldEntryValue, v))
}

// EntryValueGTE applies the GTE predicate on the "entry_value" field.
func EntryValueGTE(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGTE(FieldEntryValue, v))
}

// EntryValueLT applies the LT predicate on the "entry_value" field.
func EntryValueLT(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLT(FieldEntryValue, v))
}

// EntryValueLTE applies the LTE predicate on the "entry_value" field.
func EntryValueLTE(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLTE(FieldEntryValue, v))
}

// EntryValueContains applies the Contains predicate on the "entry_value" field.
func EntryValueContains(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldContains(FieldEntryValue, v))
}

// EntryValueHasPrefix applies the HasPrefix predicate on the "entry_value" field.
func EntryValueHasPrefix(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldHasPrefix(FieldEntryValue, v))
}

// EntryValueHasSuffix applies the HasSuffix predicate on the "entry_value" field.
func EntryValueHasSuffix(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldHasSuffix(FieldEntryValue, v))
}

// EntryValueIsNil applies the IsNil predicate on the "entry_value" field.
func EntryValueIsNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIsNull(FieldEntryValue))
}

// EntryValueNotNil applies the NotNil predicate on the "entry_value" field.
func EntryValueNotNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotNull(FieldEntryValue))
}

// EntryValueEqualFold applies the EqualFold predicate on the "entry_value" field.
func EntryValueEqualFold(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEqualFold(FieldEntryValue, v))
}

// EntryValueContainsFold applies the ContainsFold predicate on the "entry_value" field.
func EntryValueContainsFold(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldContainsFold(FieldEntryValue, v))
}

// NumericValueEQ applies the EQ predicate on the "numeric_value" field.
func NumericValueEQ(v int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldNumericValue, v))
}

// NumericValueNEQ applies the NEQ predicate on the "numeric_value" field.
func NumericValueNEQ(v int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNEQ(FieldNumericValue, v))
}

// NumericValueIn applies the In predicate on the "numeric_value" field.
func NumericValueIn(vs ...int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIn(FieldNumericValue, vs...))
}

// NumericValueNotIn applies the NotIn predicate on the "numeric_value" field.
func NumericValueNotIn(vs ...int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotIn(FieldNumericValue, vs...))
}

// NumericValueGT applies the GT predicate on the "numeric_value" field.
func NumericValueGT(v int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGT(FieldNumericValue, v))
}

// NumericValueGTE applies the GTE predicate on the "numeric_value" field.
func NumericValueGTE(v int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGTE(FieldNumericValue, v))
}

// NumericValueLT applies the LT predicate on the "numeric_value" field.
func NumericValueLT(v int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLT(FieldNumericValue, v))
}

// NumericValueLTE applies the LTE predicate on the "numeric_value" field.
func NumericValueLTE(v int32) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLTE(FieldNumericValue, v))
}

// NumericValueIsNil applies the IsNil predicate on the "numeric_value" field.
func NumericValueIsNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIsNull(FieldNumericValue))
}

// NumericValueNotNil applies the NotNil predicate on the "numeric_value" field.
func NumericValueNotNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotNull(FieldNumericValue))
}

// LanguageCodeEQ applies the EQ predicate on the "language_code" field.
func LanguageCodeEQ(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageCodeNEQ applies the NEQ predicate on the "language_code" field.
func LanguageCodeNEQ(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNEQ(FieldLanguageCode, v))
}

// LanguageCodeIn applies the In predicate on the "language_code" field.
func LanguageCodeIn(vs ...string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIn(FieldLanguageCode, vs...))
}

// LanguageCodeNotIn applies the NotIn predicate on the "language_code" field.
func LanguageCodeNotIn(vs ...string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotIn(FieldLanguageCode, vs...))
}

// LanguageCodeGT applies the GT predicate on the "language_code" field.
func LanguageCodeGT(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGT(FieldLanguageCode, v))
}

// LanguageCodeGTE applies the GTE predicate on the "language_code" field.
func LanguageCodeGTE(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldGTE(FieldLanguageCode, v))
}

// LanguageCodeLT applies the LT predicate on the "language_code" field.
func LanguageCodeLT(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLT(FieldLanguageCode, v))
}

// LanguageCodeLTE applies the LTE predicate on the "language_code" field.
func LanguageCodeLTE(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldLTE(FieldLanguageCode, v))
}

// LanguageCodeContains applies the Contains predicate on the "language_code" field.
func LanguageCodeContains(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldContains(FieldLanguageCode, v))
}

// LanguageCodeHasPrefix applies the HasPrefix predicate on the "language_code" field.
func LanguageCodeHasPrefix(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldHasPrefix(FieldLanguageCode, v))
}

// LanguageCodeHasSuffix applies the HasSuffix predicate on the "language_code" field.
func LanguageCodeHasSuffix(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldHasSuffix(FieldLanguageCode, v))
}

// LanguageCodeIsNil applies the IsNil predicate on the "language_code" field.
func LanguageCodeIsNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldIsNull(FieldLanguageCode))
}

// LanguageCodeNotNil applies the NotNil predicate on the "language_code" field.
func LanguageCodeNotNil() predicate.DictEntry {
	return predicate.DictEntry(sql.FieldNotNull(FieldLanguageCode))
}

// LanguageCodeEqualFold applies the EqualFold predicate on the "language_code" field.
func LanguageCodeEqualFold(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldEqualFold(FieldLanguageCode, v))
}

// LanguageCodeContainsFold applies the ContainsFold predicate on the "language_code" field.
func LanguageCodeContainsFold(v string) predicate.DictEntry {
	return predicate.DictEntry(sql.FieldContainsFold(FieldLanguageCode, v))
}

// HasSysDictTypes applies the HasEdge predicate on the "sys_dict_types" edge.
func HasSysDictTypes() predicate.DictEntry {
	return predicate.DictEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SysDictTypesTable, SysDictTypesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSysDictTypesWith applies the HasEdge predicate on the "sys_dict_types" edge with a given conditions (other predicates).
func HasSysDictTypesWith(preds ...predicate.DictType) predicate.DictEntry {
	return predicate.DictEntry(func(s *sql.Selector) {
		step := newSysDictTypesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DictEntry) predicate.DictEntry {
	return predicate.DictEntry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DictEntry) predicate.DictEntry {
	return predicate.DictEntry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DictEntry) predicate.DictEntry {
	return predicate.DictEntry(sql.NotPredicates(p))
}
